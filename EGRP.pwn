/*
	By accessing this file you agree to:
	- Not give out any files to anyone, without permission from Brandon.
	- Not reuse or redistribute any data in the file.

	CREDITS:
	- Calgon (Original Script - Vortex RP)
	- Brandon
*/

#include <a_samp>
#include <a_mysql>
#include <zcmd>
#include <streamer>
#include <GeoIP_Plugin>
#include <gtazones>
#include <djson>
#include <Dini>
#include <GVN>
#include <progress>

static mysql;

#define 	host    	"127.0.0.1"
#define     user    	"samp"
#define     pass        "berryr23"
#define     db          "dev"

// Forward
forward RadarTimer();
forward HolsterTimer();
forward ATMDelay(playerid);
forward ProgressBarValue(playerid);
forward TruckerTimer(playerid);
forward TruckerTimer1(playerid);
forward DisconnectSave(playerid);
forward SavePlayerD(playerid);
//forward FiveSecondTimer(playerid);
forward SecondTimer();
forward FireTimer();
forward CityTrashT();
forward TrashT(playerid);
forward FuelRand();
forward EngineStart(playerid);
//forward EngineUpgrade2(playerid);
forward DProgressBar(playerid);
forward VehIDCheck(playerid);
forward FuelLower();
forward FuelCheck(playerid);
forward VehicleAlarm(playerid);
forward Hotwire(playerid);
forward SpawnCar(playerid);
forward NOSTIMER2(playerid);
forward CheckEngine();
forward HungerCheck(playerid);
forward HungerTimer();
forward timer_refuel(playerid);
forward CloseLspdGate();
forward IdleKick();
forward DynamicWeather();
forward PickupMessages();
forward RandomEx(min, max);
forward PurchaseCar(playerid, carid, price, slotid);
forward MinutesToSeconds(minutes);
forward ClientAgreement(playerid);
forward PrisonGateTimer();
forward CloseDoor();
forward RefreshNewbieChatForPlayer(playerid);
forward MinutesToHours(minutes);
forward GetOwnedCarMods(playerid);
forward NearByMessage(playerid, colour, string[]);
forward NearByMessageEx(playerid, color, string[], Float: range);
forward LiteralGroupMessage(group, colour, string[]);
forward SetPlayerPosEx(playerid, Float: posx, Float: posy, Float: posz, interior, virtualworld);
forward IsSeatOccupied(vehicleid, seatid);
forward SendToAdmins(colour, string[], requireduty);
forward SendToPD(colour, string[], requireduty);
forward SendStaffChat(colour, string[]);
forward SendToDevs(colour, string[]);
forward QuizText(string[]);
forward GMXPrep(playerid, reason[]);
forward AntiC();
forward ResetPlayerWeaponsEx(playerid);
forward DoGMX();
forward RefreshMaterials(playerid);
forward UntazePlayer(playerid);
forward OneMinutePublic(playerid);
forward OneMinute(playerid);
forward IsDateInThePast(day, month, year);
forward SavePlayerData(playerid);
forward SaveGeneralData();
forward UncuffPlayer(playerid);
forward GivePlayerWeaponEx(playerid, weapon);
forward ClearCriminalRecord(playerid);
forward MessageToEventPlayers(colour, string[]);
forward GroupMessage(playerid, colour, string[]);
forward GivePlayerSavedWeapons(playerid);
forward IsPlayerInInvalidNosVehicle(playerid);
forward SecondsToMinutes(seconds);
forward RegisterPlayer(playerid, password[]);
forward OneSecondPublic();
forward OnPlayerLoginAttempt(playerid, password[]);

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define chrtolower(%1) \
        (((%1) > 0x40 && (%1) <= 0x5A) ? ((%1) | 0x20) : (%1))

#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1)) *%3*1.6)

#undef  				MAX_PLAYERS
#undef                  MAX_VEHICLES

#define                 MAX_VEHICLES                        1000

#define 				CITY_HALL_OBJECTS   				30

#define                 HAT1                                19095
#define                 HAT2                                19160

#define                 HELMET1                             18977
#define                 HELMET2                             18978

#define                 BANDANA1                            18896

#define                 MUSTACHE1                           19351

#define                 PDCAP1                              18636
#define                 PDHAT1                            	19100

#define                 GLASSES1                            19033
#define                 GLASSES2                            19022
#define                 GLASSES3                            19023

#define 				MAX_GROUPS 							20
#define                 MAX_FACTIONS                        100
#define                 MAX_FACTION_VEHICLES                5
#define 				MAX_HOUSES 							1000
#define 				MAX_BUSINESSES                      50
#define 				MAX_JOBS                            50
#define 				MAX_PLAYERS                         50
#define                 MAX_SPIKES                          10
#define                 MAX_BARRIERS                        10
#define                 MAX_BARRIERS2                       10
#define                 MAX_SPEED_HACK_WARNINGS             4
#define                 MAX_STUDIO_OBJECTS                  37
#define                 MAX_WEAPON_HACK_WARNINGS            2
#define                 MAX_ATMS                            20
#define                 MAX_WEEDPLANTS                      15000
#define                 MAX_DROPS                           2500
#define                 MAX_FURNITURE                       10000
#define                 MAX_GARAGES                         1000

#define 				STONED_TIME 						61
#define                 TRUCKER_RELOAD_TIME                 6001
#define 				CAR_MOD_DELAY_TIME 					61
#define 				LAWYER_RELOAD_TIME 					241
#define 				DETECTIVE_COOLDOWN_TIME 			31
#define 				MATRUN_INABILITY_TIME 				61
#define 				VERSION 							"EG:RP v4.0.3b"
#define 				FISH_INABILITY_TIME 				901
#define                 TRASH_INABILITY_TIME                901

#define 				VEHICLES_FILE 						"Vehicles.json"

#define                 GasStationTextdraw                  50
#define                 GasStationRefuel	                15

#define                 GasStation1X                        1941.0
#define                 GasStation1Y                        -1772.0
#define                 GasStation1Z                        14.0
#define                 GasStation2X                        1004.0
#define                 GasStation2Y                        -937.0
#define                 GasStation2Z                        42.0
#define                 GasStation3X                        655.0
#define                 GasStation3Y                        -565.0
#define                 GasStation3Z                        16.0
#define                 GasStation4X                        1532.0
#define                 GasStation4Y                        -2641.0
#define                 GasStation4Z                        14.0
#define                 GasStation5X                        1577.0
#define                 GasStation5Y                        -1700.0
#define                 GasStation5Z                        5.0
#define                 GasStation6X                        1381.8297
#define                 GasStation6Y                        459.1422
#define                 GasStation6Z                        20.3452
#define					GasStation7X						2095.8989
#define					GasStation7Y						-109.0884
#define                 GasStation7Z						2.0665

#define                 BoatShopX                           2116.0713
#define                 BoatShopY                           -98.9769
#define                 BoatShopZ                           2.0665
#define                 BoatSpawnX                          2114.3164
#define                 BoatSpawnY                          -32.7361
#define                 BoatSpawnZ                          -0.5672
#define                 SellFishX                           2159.6951
#define                 SellFishY                           -98.6777
#define                 SellFishZ                           2.7885

#define 				MAX_SOBJECTS        				41
#define 				MAX_PLOTS           				5

#define 				DIALOG_CALLCAR 						57434567
#define 				EX_SPLITLENGTH 						118
	
main()
{
}

#define GREEN 			0x21DD00FF
#define DARKGREEN       0x267513FF
#define RED 			0xE60000FF
#define YELLOW 			0xFFFF00FF
#define ORANGE 			0xFFA600FF
#define LIGHTRED 		0xFF8080FF
#define PURPLE 			0xB360FDFF
#define ACHAT			0x0080FFFF
#define MCHAT           0x088A0DFF
#define DCHAT			0x0080FFFF
#define DEPARTMENT_CHAT 0xBDF38BFF
#define VIP_CHAT        0x00C2ECFF
#define VCHAT			0xE6D300FF
#define PLAYER_COLOR 	0xFFFFFFFF
#define BLUE 			0x1229FAFF
#define GROUP_CHAT      0xC0FAFAFF
#define LIGHTGREEN 		0x38FF06FF
#define RADIO_CHAT 		0xBA7600FF
#define DARKPINK 		0xE100E1FF
#define PLAYERCOM       0x00C261FF
#define ANNOUNCEMENT 	0xa9c4e4ff
#define GREY 			0xCECECEFF
#define PINK 			0xD52DFFFF
#define DARKGREY    	0x626262FF
#define OOC_CHAT        0xAFD9FAFF
#define NEWBIE_CHAT     0x00EEFFFF
#define AQUAGREEN   	0x03D687FF
#define ADMINBLUE 		0x99FFFFAA
#define ADMINORANGE 	0xF6970CAA
#define WHITE 			0xFFFFFFFF
#define BLACK           0x000000FF
#define MOLEBLUE        0x00C261FF
#define RPCOLOUR		0xD3ADFFFF
#define SAMBROADCAST	0x87E800FF
#define LOWADMIN		0x548000FF
#define HIGHADMIN		0xF3A500FF
#define MODCOLOR        0x2971E6FF

const Float:INF_FLOAT=Float:0x7F800000;

new FactionVehiclesSpawned[MAX_VEHICLES];
new FiveMinuteSave, ChosenObject[MAX_PLAYERS], ChosenObjectPrice[MAX_PLAYERS], FurnitureEditing[MAX_PLAYERS], ChosenObjectFRID[MAX_PLAYERS], ChosenOwnedObject[MAX_PLAYERS];
new Text3D:plottext[MAX_PLOTS], DrivingTest[MAX_PLAYERS], DrivingTestMistakes[MAX_PLAYERS];
new SweepProgress[MAX_PLAYERS], FactionInvite[MAX_PLAYERS], WeedPrice=7, WeedHour=0, Text3D: PlayerObjID[MAX_PLAYERS][MAX_FURNITURE];
new BuyingHouse[MAX_PLAYERS], BuyingHouseFrom[MAX_PLAYERS], pHousePrice[MAX_PLAYERS];
new RadioStatus[MAX_VEHICLES], RadioStation[MAX_VEHICLES], LastEnteredCar[MAX_PLAYERS], LastEnteredCarCapacity[MAX_PLAYERS];
new hRadioStatus[MAX_HOUSES], hRadioStation[MAX_HOUSES], Bolo[10][255], IsUsingMask[MAX_PLAYERS];

new isMatRunning[MAX_PLAYERS], HasRequestedMod[MAX_PLAYERS], HandlesRequest[MAX_PLAYERS], HandlesRequestFrom[MAX_PLAYERS];
new Float: eventX[MAX_PLAYERS], Float: eventY[MAX_PLAYERS], Float: eventZ[MAX_PLAYERS];
new WeedPlantObj[MAX_WEEDPLANTS];
new SavePlayerD2[MAX_PLAYERS], PizzaDelivery[MAX_PLAYERS];
new totalPlayerObjects[MAX_PLAYERS];
new Fire4Object1, Fire4Object2, Fire4Object3, Fire4Object4, Fire4Object5, Fire4Object6, Fire4Object7, Fire4Object8, Fire4Object9, Fire4Object10;
new Fire4Object11, Fire4Object12, Fire4Object13, Fire4Object14, Fire4Object15, Fire4Object16, Fire4Object17, Fire4Object18, Fire4Object19, Fire4Object20;
new Fire4Object21, Fire4Object22;
new Fire4Object23, Fire4Object24, Fire4Object25, Fire4Object26, Fire4Object27, Fire4Object28, Fire4Object29, Fire4Object30, Fire4Object31;
new Fire4Object32, Fire4Object33, Fire4Object34, Fire4Object35, Fire4Object36, Fire4Object37, Fire4Object38, Fire4Object39, Fire4Object40, Fire4Object41;
new Fire4Object42;
new Fire3Object1, Fire3Object2, Fire3Object3, Fire3Object4, Fire3Object5, Fire3Object6, Fire3Object7, Fire3Object8, Fire3Object9, Fire3Object10;
new Fire3Object11, Fire3Object12, Fire3Object13, Fire3Object14, Fire3Object15, Fire3Object16, Fire3Object17, Fire3Object18, Fire3Object19, Fire3Object20;
new Fire3Object21;
new Fire2Object1, Fire2Object2, Fire2Object3, Fire2Object4, Fire2Object5, Fire2Object6, Fire2Object7, Fire2Object8, Fire2Object9, Fire2Object10;
new Fire2Object11, Fire2Object12, Fire2Object13, Fire2Object14, Fire2Object15, Fire2Object16, Fire2Object17, Fire2Object18, Fire2Object19, Fire2Object20;
new Fire2Object21, Fire2Object22, Fire2Object23, Fire2Object24, Fire2Object25;
new Fire1Object1, Fire1Object2, Fire1Object3, Fire1Object4, Fire1Object5, Fire1Object6, Fire1Object7, Fire1Object8, Fire1Object9, Fire1Object10;
new Fire1Object11, Fire1Object12, Fire1Object13, Fire1Object14, Fire1Object15, Fire1Object16, Fire1Object17, Fire1Object18, Fire1Object19, Fire1Object20;
new Fire1Object21, Fire1Object22;
new Fire1Object23, Fire1Object24, Fire1Object25, Fire1Object26, Fire1Object27, Fire1Object28, Fire1Object29, Fire1Object30, Fire1Object31;
new Fire1Object32, Fire1Object33, Fire1Object34, Fire1Object35, Fire1Object36, Fire1Object37, Fire1Object38, Fire1Object39, Fire1Object40, Fire1Object41;
new Fire1Object42, Fire1Object43, Fire1Object44;
new FireID, IsThereAFire;
new CollectedTrash[MAX_PLAYERS];
new CityTrash, FuelPrice;
new EngineUpgrade1[MAX_PLAYERS];
new TimerCE[MAX_PLAYERS];
new Bar:Hunger[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
new Bar:Fuel[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
new fuel[MAX_VEHICLES];
new isrefuelling[MAX_PLAYERS] = 0;
new Float: SpawnX, Float: SpawnY, SpawnedJobs, GlobalWeather, Float: SpawnZ, EventSkin, SpawnInt, SpawnWorld, NoobCash = 9500, AdCanBePlaced = 50;
new UnconfirmedSave[MAX_PLAYERS], NPCs, dGateStatus[3];
new Anticheat, CarCount, OwnedCarCount, CurrentEvent, Float: OwnedCarSpawnX, Float: OwnedCarSpawnY, Float: OwnedCarSpawnZ;
new SpawnedATMs, SpawnedGarages, SpawnedHouses, SpawnedFactions, SpawnedBusinesses, SpawnedWeedPlants, Float: HospitalSpawnX, Float: HospitalSpawnY, Float: HospitalSpawnZ, HospitalInt;
new EC, Float: ArrestPosX, Float: ArrestPosY, Float: ArrestPosZ, BonusCar, Float:Positions[5][3];
new CurGMX, Float: Prison1X, Float: Prison1Y, Float: Prison1Z, Float: Prison2X, Float: Prison2Y, Float: Prison2Z;
new Prison1Int, Prison1World, Prison2Int, Prison2World, StudioObjectsSpawned;
new EventWeapon1, EventWeapon2, EventWeapon3, EventWeapon4, EventWeapon5;
new airportgate1, airportgate1o, Float: EventX, SWATEnabled, CLOTHESEnabled, prisongate1, prisondoor1, prisondoor1o, prisongate1o, BaseGate1o, lsfdgate1o, lvpdgate1o, lvpdgate2o, h124dooro, Float: EventY, Float: EventZ, EventInt, EventWorld, Float: LockerPosX, Float: LockerPosY, Float: LockerPosZ, LockerPosInt;
new group5door, group5dooro;
new lvpddoor1o, lvpddoor2o, lvpddoor3o, lvpddoor4o, lvpddoor5o, lvpddoor6o, lvpddoordepo, lvpddoorchiefo, h128gate, h128gateo;
new agencydoor1o, treygateo, agencydoor1, h124door, BaseGate1, lsfdgate1, lvpdgate1, lvpdgate2, lvpddoor1, lvpddoor11, lvpddoor2, lvpddoor21, lvpddoor3, lvpddoor31, lvpddoor4, lvpddoor5, lvpddoor51, lvpddoor6, lvpddoor61, govdoor1, govdoor1o, govdoor2r, govdoor2ro, govdoor2l, govdoor2lo, govdoor3, govdoor3o;
new lvpddoordep, lvpddoorchief, treygate, h119gate, h119gateo, truckergate, truckergateobject;
new VIPEnabled = 1;
new EventHP, EventArmour, Text: CellPhoneTextDrawInVehicle, dGates[3], Float: LockerPos2X, Float: LockerPos2Y, Float: LockerPos2Z, LockerPos2Int;
new AdminSpawned[MAX_VEHICLES], SpawnedVehicles, ArrestPosPickup, oocenabled, Spotlight = -1;
new QuizQuestion[128], QuizAnswer[128], ActiveQuiz;
new Float: DropCarX, Float: DropCarY, Float: DropCarZ, NewbieEnabled = 1, Float: FishX, Float: FishY, Float: FishZ;
new Float: BankIntX, Float: BankIntY, Float: BankIntZ, Float: BankExtX, Float: BankExtY, Float: BankExtZ, BankIntID, BankPickupID, PrisonPickup1;
new Float: PrisonDoor1X, Float: PrisonDoor1Y, Float: PrisonDoor1Z, Float: PrisonDoor1X1, Float: PrisonDoor1Y1, Float: PrisonDoor1Z1, PrisonDoor1Int;
new Float:PlayerPos[MAX_PLAYERS][6], PlayersOn, Tax, TotalConnections, MaxLoggedIn, MaxRegistered, MaxVisitors;
new CityHall, Float: HospitalSpawnX2, ReportStatus = 0, Float: HospitalSpawnY2, Float: HospitalSpawnZ2, HospitalInt2;
new Text: AnimationTextDraw, Text: SprunkTextDraw, Text: ExitTextdraw; //Text:Textdraw1,
new Text:CellPhoneTextDraw, Float: Harvest5X, Float: Harvest5Y, Float: Harvest5Z;
new Float: Harvest1X, Float: Harvest1Y, Float: Harvest1Z, Float: Harvest2X, Float: Harvest2Y, Float: Harvest2Z, Float: Harvest3X, Float: Harvest3Y, Float: Harvest3Z, Float: Harvest4X, Float: Harvest4Y, Float: Harvest4Z;
new Float: PrisonDoor2X, Float: PrisonDoor2Y, Float: PrisonDoor2Z, PrisonDoor2Int1;
new NewlyRegistered[MAX_PLAYERS];
new Hotwiring[MAX_PLAYERS];
new fGivingCar[MAX_PLAYERS];
new RegisteringVeh[MAX_PLAYERS], HintCounter[MAX_PLAYERS], StartingEngine[MAX_PLAYERS];
//new LatestPlantedPot[MAX_PLAYERS], StartingEngine[MAX_PLAYERS];
new Float: PrisonDoor2X2, Float: PrisonDoor2Y2, Float: PrisonDoor2Z2, PrisonDoor2Int2;
new WindowStatus[MAX_VEHICLES] = 0, ActiveCocaineTables[MAX_HOUSES], ActivePlanters[MAX_HOUSES];
new LSFDDoor1, LSFDDoor11, LSFDDoor2, LSFDDoor3, LSFDDoor4, LSFDDoor5, LSFDDoor6, LSFDDoor21, LSFDDoor31, LSFDDoor41, LSFDDoor51;
new LSFDDoor1o, LSFDDoor2o, LSFDDoor3o, LSFDDoor4o, LSFDDoor5o, LSFDDoor6o;
new LSPDDoor1, LSPDDoor2, LSPDDoor3, LSPDDoor4, LSPDDoor5, LSPDDoor6, LSPDDoor1Open = 0, LSPDDoor2Open = 0, LSPDDoor3Open = 0;
new stock AFKTimer, WeatherTimer, OneMinuteTimer, AntiCheatTimer, GeneralDataTimer, PickupsTimer, RespawnTimer, OneSecondTimer;

enum GarageData
{
	gID,
	Float: gExteriorX,
	Float: gExteriorY,
	Float: gExteriorZ,
	Float: gInteriorX,
	Float: gInteriorY,
	Float: gInteriorZ,
	gInteriorID,
	gLinkedHouse,
	Text3D: gText,
	gLockedStatus,
};

enum FurnitureData
{
	frID,
	frActive,
	frObjectID,
	Float: frX,
	Float: frY,
	Float: frZ,
	Float: frrX,
	Float: frrY,
	Float: frrZ,
	frVW,
	frExists,
	// Doesn't have to be saved
	Object,
	CocaineGrowth,
	GrowingCocaineAmount,
	Text3D: CocaineText,
};

enum DropData
{
	dID,
	Float: dX,
	Float: dY,
	Float: dZ,
	dType,
	dAmount,
	dActive,
	dObject,
	Text3D: dText,
}

enum FactionData
{
	fID,
	fName[255],
	fBank,
	fRank1[255],
	fRank2[255],
	fRank3[255],
	fRank4[255],
	fRank5[255],
	fMemberLock,
	fVehicleLock,
	fMembers,
	fVehicle1,
	fFuel1,
	fLinkID1,
	Float: fVehicle1X,
	Float: fVehicle1Y,
	Float: fVehicle1Z,
	Float: fVehicle1ZAngle,
	fCarCol1,
	fCarCol2,
	fVehicle2,
	fFuel2,
	fLinkID2,
	Float: fVehicle2X,
	Float: fVehicle2Y,
	Float: fVehicle2Z,
	Float: fVehicle2ZAngle,
	fCar2Col1,
	fCar2Col2,
	fVehicle3,
	fFuel3,
	fLinkID3,
	Float: fVehicle3X,
	Float: fVehicle3Y,
	Float: fVehicle3Z,
	Float: fVehicle3ZAngle,
	fCar3Col1,
	fCar3Col2,
	fVehicle4,
	fFuel4,
	fLinkID4,
	Float: fVehicle4X,
	Float: fVehicle4Y,
	Float: fVehicle4Z,
	Float: fVehicle4ZAngle,
	fCar4Col1,
	fCar4Col2,
	fVehicle5,
	fFuel5,
	fLinkID5,
	Float: fVehicle5X,
	Float: fVehicle5Y,
	Float: fVehicle5Z,
	Float: fVehicle5ZAngle,
	fCar5Col1,
	fCar5Col2,

	// Doesn't have to be saved
	fLockStatus1,
	fLockStatus2,
	fLockStatus3,
	fLockStatus4,
	fLockStatus5,
};

enum WeedData
{
	ID,
	Float: weedX,
	Float: weedY,
	Float: weedZ,
	weedVW,
	GrowthState,
	Active,
	GrowingWithLights,
	VirtualWorld,
};

enum ObjectStats
{
	Model,
	ID,
	LinkID,
};

enum PlotStats
{
	PlotID,
	Float: pos1x,
	Float: pos1y,
	Float: pos1z,
	Float: pos2x,
	Float: pos2y,
	Float: pos2z,
	PlotPrice,
	PlotForSale,
	OwnedBy[255],
	Text3D:PlotText,
};

enum VehicleData
{
	CarID,
	CarModel,
	CarColour1,
	CarColour2,
	CarNos,
	CarGroup,
	Float: CarPosX,
	Float: CarPosY,
	Float: CarPosZ,
	Float: CarZAngle,
	GameID,
	CarTrunk1,
	CarTrunk2,
	CarTrunk3,
	CarPot,
	CarCocaine,
	CarMaterials,
};

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sXRot,
	Float:sYRot,
	Float:sZRot,
	sObjectID
}

enum Barriers
{
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sXRot,
	Float:sYRot,
	Float:sZRot,
	sObjectID
}

enum Barriers2
{
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sXRot,
	Float:sYRot,
	Float:sZRot,
	sObjectID
}

enum GroupData
{
	GroupName[255],
	CommandTypes,
	RankName0[255],
	RankName1[255],
	RankName2[255],
	RankName3[255],
	RankName4[255],
	RankName5[255],
	RankName6[255],
	RankName7[255],
	RankName8[255],
	RankName9[255],
	RankName10[255],
	Skin0,
	SavedCrack,
	SavedPot,
	Skin1,
	Skin2,
	Skin3,
	Skin4,
	Skin5,
	Skin6,
	HQInteriorID,
	Float: HQInteriorX,
	ChatDisabled,
	Float: HQInteriorY,
	Float: HQInteriorZ,
	HQExteriorID,
	Float: HQExteriorX,
	Float: HQExteriorY,
	Float: HQExteriorZ,
	Float: SafeX,
	Float: SafeY,
	Float: SafeZ,
	SafeInteriorID,
	SafeWorld,
	SafeMoney,
	SafeMaterials,
	DisbandHour,
	DisbandMinute,
	DisbandDay,
	DisbandMonth,
	MOTD[255],
	DisbandYear,
	SafePickupID,
	HQPickupID,
	HQLock,
};

enum JobData
{
	JobName[255],
	Float: JobJoinPosX,
	Float: JobJoinPosY,
	Float: JobJoinPosZ,
	JobJoinPosWorld,
	JobJoinPosPickupID,
	JobJoinPosInterior,
	Float: JobMiscLocationOneX,
	Float: JobMiscLocationOneY,
	Float: JobMiscLocationOneZ,
	JobMiscLocationOneWorld,
	JobMiscLocationOnePickupID,
	JobMiscLocationOneInterior,
	Float: JobMiscLocationTwoX,
	Float: JobMiscLocationTwoY,
	Float: JobMiscLocationTwoZ,
	JobMiscLocationTwoWorld,
	JobMiscLocationTwoPickupID,
	JobMiscLocationTwoInterior,
	JobMiscLocationOneMessage[255],
	JobMiscLocationTwoMessage[255],
	JobType,
};


new UnmodifiableVehicles[29] =
{
	581,523,462,521,463,522,461,448,468,586,
    509,481,510,472,473,493,595,484,430,453,
    452,446,454,590,569,537,538,570,449
};

enum ATMData
{
	Float: ExteriorX,
	Float: ExteriorY,
	Float: ExteriorZ,
	//ATMText,
	ATMToggle,
}

enum BusinessData
{
	bID,
	Float: bExteriorX,
	Float: bExteriorY,
	Float: bExteriorZ,
	bExteriorID,
	Float: bInteriorX,
	Float: bInteriorY,
	Float: bInteriorZ,
	bInteriorID,
	bType,
	bVault,
	bPrice,
	bProductPrice1,
	bProductPrice2,
	bProductPrice3,
	bProductPrice4,
	bProductPrice5,
	bProductPrice6,
	bProductPrice7,
	SupplyStatus,
	bProductPrice8,
	bProductPrice9,
	bProductPrice10,
	bProductPrice11,
	bProductPrice12,
	bProductPrice13,
	bProductPrice14,
	bSupplies,
	bOwner[255],
	bSupplyStatus,
	bLockStatus,
	bPickupID,
	bName[255],
};

enum SpecData
{
	Float: SpecPlayerX,
	Float: SpecPlayerY,
	Float: SpecPlayerZ,
	SpecPlayerInterior,
	Float: SpecPlayerAngle,
	SpecPlayerWorld,
	SpecSpectatingPlayer,
	SpecSpectatingState,
};

enum HouseData
{
	hID,
	hInteriorID,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	HousePrice,
	hExteriorID,
	Float: hExteriorX,
	Float: hExteriorY,
	HouseCocaine,
	HousePot,
	HouseMaterials,
	WeaponSlot1,
	WeaponSlot2,
	WeaponSlot3,
	Float: hExteriorZ,
	VaultMoney,
	HPickupID,
	hOwner[255],
	KeyID,
	LockStatus,
	FluorescentLights,
	CocaineTables,
};

enum PlayerStatistics
{
	Password[255],
	AdminLevel,
	MedicDuty,
	Float: LastX,
	NineOneOneStep,
	WeaponRefund,
	Float: LastY,
	InterviewPowers,
	FightBox,
	FightKungfu,
	FightKneehead,
	FightGrabkick,
	IsInAnimation,
	FightElbow,
	AnticheatWarns,
	Float: LastZ,
	ResetTimer,
	SpeedHacksWarn,
	HasRadio,
	LawyerReloadTime,
	LockedCar,
	LockedCar2,
	LockedCar3,
	Detecting,
	HasMapApp,
	RPTutStep,
	AnsweredQuizQuestions,
	HasRadioApp,
	HasAdApp,
	HasPagesApp,
	PendingProposal,
	Harvesting,
	PendingDivorce,
	ToggledRadio,
	DetectiveCooldown,
	ACWarnTime,
	VipRank,
	BeforeAdminVipRank,
	CarBeingCarried,
	CarPriceCarried,
	TieTimer,
	LastWorld,
	CollegeMedia,
	CollegeLaw,
	CollegeEng,
	CollegeMath,
	CollegeChem,
	PhoneStat,
	ServerTut,
	WalkieTalkie,
	WalkieFrequency,
	ReportText[128],
	LastInterior,
	ToggedOOC,
	Guarding, //car parts
	GuardOffer,
	GuardPrice,
	FindingCar,
	ActiveCrimeReport[128],
	IsHacker,
	LastSkin,
	Rope,
	Rags,
	Tied,
	SpeedHackWarnTime,
	HasJetpack,
	TiedTime,
	Float: LastHealth,
	Float: LastArmour,
	LastLoginMinute,
	LastLoginHour,
	LastLoginDay,
	LastLoginMonth,
	PotEffect,
	HouseInterior,
	BusinessInterior,
	HouseExterior,
	PhoneN,
	Map,
	Calling,
	InCall,
	Float:CarHealth,
	Float:Car2Health,
	Float:Car3Health,
	CarFuel,
	Car2Fuel,
	Car3Fuel,
	CarLinkID,
	Car2LinkID,
	Car3LinkID,
	ActiveReport,
	BeingCalled,
	CallConnectingTime,
	PlayingHours,
	BusinessExterior,
	ReportingPlayer,
	LastLoginYear,
	Float: CarX,
	CarPriceBeingCarried,
	Float: CarY,
	Float: CarZ,
	Float: Car2X,
	Float: Car2Y,
	Float: Car2Z,
	Float: Car3X,
	Float: Car3Y,
	Float: Car3Z,
	PlayerCarModel,
	PlayerCarModel2,
	PlayerCarModel3,
	Float: CarZAngle,
	Float: Car2ZAngle,
	Float: Car3ZAngle,
	CarCol1,
	CarCol2,
	Car2Col1,
	Car2Col2,
	Car3Col1,
	Car3Col2,
	Car1Plate[255],
	Car2Plate[255],
	Car3Plate[255],
	LastIP[45],
	House,
	HouseReg,
	Banned,
	Muted,
	CrackEffect,
	CellphoneConsole,
	Float: hExtX,
	Float: hExtY,
	Float: hExtZ,
	Float: hIntX,
	Float: hIntY,
	Float: hIntZ,
	hIntID,
	hExtID,
	HasSprayCans,
	CocaineIngredients,
	ToggedQUIZ,
	Float: bExtX,
	Float: bExtY,
	Float: bExtZ,
	Float: bIntX,
	Float: bIntY,
	Float: bIntZ,
	bIntID,
	bExtID,
	InHouse,
	InGroupHQ,
	Money,
	Group,
	IsAtEvent,
	GroupRank,
	PendingHandshake,
	PendingHandshakeStyle,
	CanUseNewbie,
	ToggedVIP,
	WepSlot0,
	ToggedTester,
	SpotlightEffect,
	CarModDelay,
	WepSlot1,
	Job,
	Authenticated,
	InBusiness,
	WepSlot2,
	WepSlot3,
	GotInCopCar,
	WepSlot4,
	BankMoney,
	WepSlot5,
	WepSlot6,
	CompleteRun,
	LoginAttempts,
	WepSlot7,
	WepSlot8,
	WepSlot9,
	WepSlot10,
	WepSlot11,
	Warning1[255],
	Warning2[255],
	Warning3[255],
	AdminName[255],
	DisguisedName[255],
	Speedo,
	NormalName[255],
	DUName[255],
	Note[255],
	PhoneBook,
	BuyingCar,
	SellingCar,
	TicketPrice,
	Ticketing,
	BeingTicketed,
	Blindfolded,
	AdminSkin,
	PendingBETAInvite,
	ToggedRAGE,
	GivingSlot,
	ToggedRadio,
	Identity,
	License,
	Gagged,
	ReportBanStatus,
	PMsEnabled,
	MatrunsExecuted,
	CheckBalance,
	MeActions,
	AdsPlaced,
	PreLoadedAnims,
	AchievementRank,
	PINAuth,
	PendingCarReceival,
	PendingCarPrice,
	CarSeller,
	Accent[255],
	AttendingBackupCall,
	PINUnauthedTime,
	SniperRecoilEffect,
	BeingSpyedOnBy,
	BeingDraggedBy,
	Tester,
 	PortableRadio,
 	CarPaintJobID,
 	Car2PaintJobID,
 	Car3PaintJobID,
	LastKiller,
	RequestingBackup,
	FindingHouse,
	Age,
	AdminPIN,
	AFKStat,
	HadSprunk,
	Gender,
	Race,
	FailedHits,
	SupplyT,
	SuccessfulHits,
	PrisonDuration,
	CantFish,
	PlayerSkinSlot1,
	PlayerSkinSlot2,
	StonedEffect,
	PlayerSkinSlot3,
	FishAttempts,
	OnPhoneTime,
	CollectedFish,
	BankStatus,
	PrisonID,
	SpamCount,
	AdminDuty,
	PendingInvite,
	Cocaine,
	Pot,
	BaseballBatCount,
	nMuted,
	oMuted,
	KnifeCount,
	CopDuty,
	FireDuty,
	Contract[255],
	AdminActions,
	MarriedTo[255],
	SecondsLoggedIn,
	HealPrice,
	AttemptingToHeal,
	ContractPrice,
	ModShop,
	AssigningHitTo,
	PlayerToAssasinate,
	BeingAssasinated,
	Tutorial,
	Tazed,
	OwnedCarModSlot0,
	OwnedCarModSlot1,
	OwnedCarModSlot2,
	OwnedCarModSlot3,
	OwnedCarModSlot4,
	OwnedCarModSlot5,
	OwnedCarModSlot6,
	OwnedCarModSlot7,
	OwnedCarModSlot8,
	OwnedCarModSlot9,
	OwnedCarModSlot10,
	OwnedCarModSlot11,
	OwnedCarModSlot12,
	OwnedCarModSlot13,
	Car2OwnedCarModSlot0,
	Car2OwnedCarModSlot1,
	Car2OwnedCarModSlot2,
	Car2OwnedCarModSlot3,
	Car2OwnedCarModSlot4,
	Car2OwnedCarModSlot5,
	Car2OwnedCarModSlot6,
	Car2OwnedCarModSlot7,
	Car2OwnedCarModSlot8,
	Car2OwnedCarModSlot9,
	Car2OwnedCarModSlot10,
	Car2OwnedCarModSlot11,
	Car2OwnedCarModSlot12,
	Car2OwnedCarModSlot13,
	Car3OwnedCarModSlot0,
	Car3OwnedCarModSlot1,
	Car3OwnedCarModSlot2,
	Car3OwnedCarModSlot3,
	Car3OwnedCarModSlot4,
	Car3OwnedCarModSlot5,
	Car3OwnedCarModSlot6,
	Car3OwnedCarModSlot7,
	Car3OwnedCarModSlot8,
	Car3OwnedCarModSlot9,
	Car3OwnedCarModSlot10,
	Car3OwnedCarModSlot11,
	Car3OwnedCarModSlot12,
	Car3OwnedCarModSlot13,
	BadgeNumber,
	GCPID,
	IsSpeccing,
	NMute,
	VIPTokens,
	Materials,
	Cuffed,
	InabilityToMatrun,
	InabilityToDropCar,
	InabilityTrash,
	HospitalTime,
	Hospitalized,
	MatrunInabilityDuration,
	TutorialStep,
	CriminalOffences,
	MaterialPackages,
	Checkpoint,
	Business,
	TearGasEffect,
	Offence1[255],
	Offence2[255],
	Offence3[255],
	Offence4[255],
	Offence5[255],
	Offence6[255],
	LastCarID,
	pTazer,
	pBadge,
	PlayerHunger,
	HouseKey,
	HouseKeyID,
	CreditCard,
	LoanedAmount,
	TrashCP,
	TrashCoolDown,
	TrashRoute,
	NosBottle,
	GasCan,
	v1NOS,
	v1NOSFUEL,
	v2NOS,
	v2NOSFUEL,
	v3NOS,
	v3NOSFUEL,
	NosStreak,
	OwnedPlotID,
	EngineUpgrade,
	Turbo,
	v1ENGINE,
	v2ENGINE,
	v3ENGINE,
	V1TURBO,
	v2TURBO,
	v3TURBO,
	ToyBan,
	Toy1ID,
	Float: Toy1XO,
	Float: Toy1YO,
	Float: Toy1ZO,
	Float: Toy1XR,
	Float: Toy1YR,
	Float: Toy1ZR,
	Float: Toy1XS,
	Float: Toy1YS,
	Float: Toy1ZS,
	Toy2ID,
	Float: Toy2XO,
	Float: Toy2YO,
	Float: Toy2ZO,
	Float: Toy2XR,
	Float: Toy2YR,
	Float: Toy2ZR,
	Float: Toy2XS,
	Float: Toy2YS,
	Float: Toy2ZS,
	Toy3ID,
	Float: Toy3XO,
	Float: Toy3YO,
	Float: Toy3ZO,
	Float: Toy3XR,
	Float: Toy3YR,
	Float: Toy3ZR,
	Float: Toy3XS,
	Float: Toy3YS,
	Float: Toy3ZS,
	Float: ModX,
	Float: ModY,
	Float: ModZ,
	TruckerReload,
	OnTruckerRun,
	OnTruckerRun1,
	OnTruckerRun2,
	CancelRun,
	LoadTruck,
	PotSeeds,
	FactionID,
	FactionRank,
	StreetSweeperReload,
	SavedMP3Link[255],
	Tickets,
	LicensePoints,
	Car1Trunk1,
	Car1Trunk2,
	Car1Trunk3,
	Car2Trunk1,
	Car2Trunk2,
	Car2Trunk3,
	Car3Trunk1,
	Car3Trunk2,
	Car3Trunk3,
	Car1Pot,
	Car2Pot,
	Car3Pot,
	Car1Cocaine,
	Car2Cocaine,
	Car3Cocaine,
	Car1Materials,
	Car2Materials,
	Car3Materials,
	Car1VW,
	Car2VW,
	Car3VW,
	Car1Mileage,
	Car2Mileage,
	Car3Mileage,
	Fish1,
	Fish2,
	Fish3,
	Fish4,
	Fish5,
	CarryingVests,

	// Not saved
	IsInGarage,
	Float: zAngleBefore,
	HasBeenTagged,
	EnabledRadar,
	PlayerText3D: RadarText,
	FishCoolDown,
};

enum Ranks
{
	Rank1[255],
	Rank2[255],
	Rank3[255],
	Rank4[255],
	Rank5[255],
};

new CityHallObjects[CITY_HALL_OBJECTS];
new StudioObjects[MAX_STUDIO_OBJECTS];
new Houses[MAX_HOUSES][HouseData];
new Businesses[MAX_BUSINESSES][BusinessData];
new ATMs[MAX_ATMS][ATMData];
new OOCRanks[Ranks];
new Jobs[MAX_JOBS][JobData];
new SpikeStrips[MAX_SPIKES][Spikes];
new Barrier[MAX_BARRIERS][Barriers];
new Barrier2[MAX_BARRIERS2][Barriers2];
new Spectator[MAX_PLAYERS][SpecData];
new Groups[MAX_GROUPS][GroupData];
new Player[MAX_PLAYERS][PlayerStatistics];
new Vehicles[MAX_VEHICLES][VehicleData];
new Objects[MAX_PLAYERS][MAX_SOBJECTS][ObjectStats];
new Plots[MAX_PLOTS][PlotStats];
new WeedPlant[MAX_WEEDPLANTS][WeedData];
new Faction[MAX_FACTIONS][FactionData];
new Drop[MAX_DROPS][DropData];
new Furniture[MAX_FURNITURE][FurnitureData];
new Garage[MAX_GARAGES][GarageData];

new WeaponNames[47][] =
{
	"0 - Fists", "1 - Brass Knuckles", "2 - Golf Club", "3 - Nite Stick", "4 - Knife", "5 - Baseball Bat", "6 - Shovel", "7 - Pool Cue", "8 - Katana", "9 - Chainsaw", "10 - Purple Dildo", "11 - Small White Vibrator", "12 - Large White Vibrator", "13 - Silver Vibrator",
	"14 - Flowers", "15 - Cane", "16 - Grenade", "17 - Tear Gas", "18 - Molotov Cocktail", "19 - Jetpack", "20 - Nothing", "21 - Nothing", "22 - Colt 45 (9mm)", "23 - Silenced Pistol", "24 - Desert Eagle", "25 - Pump Action Shotgun", "26 - Sawn-off Shotgun", "27 - SPAS-12 (Combat Shotgun",
	"28 - Micro SMG", "29 - MP5", "30 - AK47", "31 - M4A1", "32 - Tec-9", "33 - Country Rifle", "34 - Sniper Rifle", "35 - Rocket Launcher", "36 - HS Rocket Launcher", "37 - Flamethrower", "38 - Minigun", "39 - Satchel Charge", "40 - Detonator", "41 - Spraycan", "42 - Fire Extinguisher",
	"43 - Camera", "44 - Nightvision Goggles", "45 - Thermal Goggles", "46 - Parachute"
};

new VehicleNames[212][] =
{
	"400 - Landstalker",   "401 - Bravura",   "402 - Buffalo",   "403 - Linerunner",   "404 - Pereniel",   "405 - Sentinel",   "406 - Dumper",   "407 - Firetruck",   "408 - Trashmaster",   "409 - Stretch",
	"410 - Manana",   "411 - Infernus",   "412 - Voodoo",   "413 - Pony",   "414 - Mule",   "415 - Cheetah",   "416 - Ambulance",   "417 - Leviathan",   "418 - Moonbeam",   "419 - Esperanto",   "420 - Taxi",
	"421 - Washington",   "422 - Bobcat",   "423 - Mr Whoopee",   "424 - BF Injection",   "425 - Hunter",   "426 - Premier",   "427 - Enforcer",   "428 - Securicar",   "429 - Banshee",   "430 - Predator",
	"431 - Bus",   "432 - Rhino",   "433 - Barracks",   "434 - Hotknife",   "435 - Trailer",   "436 - Previon",   "437 - Coach",   "438 - Cabbie",   "439 - Stallion",   "440 - Rumpo",   "441 - RC Bandit",	"442 - Romero",
	"443 - Packer",   "444 - Monster",   "445- Admiral",   "446 - Squalo",   "447 - Seasparrow",   "448 - Pizzaboy",   "449 - Tram",   "450 - Trailer",   "451 - Turismo",   "452 - Speeder",   "453 - Reefer",   "454 - Tropic",   "455 - Flatbed",
	"456 - Yankee",   "457 - Caddy",   "458 - Solair",   "459 - Berkley's RC Van",   "460 - Skimmer",   "461 - PCJ-600",   "462 - Faggio",   "463 - Freeway",   "464 - RC Baron",   "465 - RC Raider",
	"466 - Glendale",   "467 - Oceanic",   "468 - Sanchez",   "469 - Sparrow",   "470 - Patriot",   "471 - Quad",   "472 - Coastguard",   "473 - Dinghy",   "474 - Hermes",   "475 - Sabre",   "476 - Rustler",
	"477 - ZR350",   "478 - Walton",   "479 - Regina",   "480 - Comet",   "481 - BMX",   "482 - Burrito",   "483 - Camper",   "484 - Marquis",   "485 - Baggage",   "486 - Dozer",   "487 - Maverick",   "488 - News Chopper",
	"489 - Rancher",   "490 - FBI Rancher",   "491 - Virgo",   "492 - Greenwood",   "493 - Jetmax",   "494 - Hotring",   "495 - Sandking",   "496 - Blista Compact",   "497 - Police Maverick",
	"498 - Boxville",   "499 - Benson",   "500 - Mesa",   "501 - RC Goblin",   "502 - Hotring Racer",   "503 - Hotring Racer",   "504 - Bloodring Banger",   "505 - Rancher",   "506 - Super GT",
	"507 - Elegant",   "508 - Journey",   "509 - Bike",   "510 - Mountain Bike",   "511 - Beagle",   "512 - Cropdust",   "513 - Stunt",   "514 - Tanker",   "515 - RoadTrain",   "516 - Nebula",   "517 - Majestic",
	"518 - Buccaneer",   "519 - Shamal",   "520 - Hydra",   "521 - FCR-900",   "522 - NRG-500",   "523 - HPV1000",   "524 - Cement Truck",   "525 - Tow Truck",   "526 - Fortune",   "527 - Cadrona",   "528 - FBI Truck",
	"529 - Willard",   "530 - Forklift",   "531 - Tractor",   "532 - Combine",   "533 - Feltzer",   "534 - Remington",   "535 - Slamvan",   "536 - Blade",   "537 - Freight",   "538 - Streak",   "539 - Vortex",   "540 - Vincent",
	"541 - Bullet",   "542 - Clover",   "543 - Sadler",   "544 - Firetruck",   "545 - Hustler",   "546 - Intruder",   "547 - Primo",   "548 - Cargobob",   "549 - Tampa",   "550 - Sunrise",   "551 - Merit",   "552 - Utility",
	"553 - Nevada",   "554 - Yosemite",   "555 - Windsor",   "556 - Monster",   "557 - Monster",   "558 - Uranus",   "559 - Jester",   "560 - Sultan",   "561 - Stratum",   "562 - Elegy",   "563 - Raindance",   "564 - RC Tiger",
	"565 - Flash",   "566 - Tahoma",   "567 - Savanna",   "568 - Bandito",   "569 - Freight",   "570 - Trailer",   "571 - Kart",   "572 - Mower",   "573 - Duneride",   "574 - Sweeper",   "575 - Broadway",
	"576 - Tornado",   "577 - AT-400",   "578 - DFT-30",   "579 - Huntley",   "580 - Stafford",   "581 - BF-400",   "582 - Newsvan",   "583 - Tug",   "584 - Trailer",   "585 - Emperor",   "586 - Wayfarer",
	"587 - Euros",   "588 - Hotdog",   "589 - Club",   "590 - Trailer",   "591 - Trailer",   "592 - Andromada",   "593 - Dodo",   "594 - RC Cam",   "595 - Launch",   "596 - Police Car (LSPD)",   "597 - Police Car (SFPD)",
	"598 - Police Car (LVPD)",   "599 - Police Ranger",   "600 - Picador",   "601 - S.W.A.T. Van",   "602 - Alpha",   "603 - Phoenix",   "604 - Glendale",   "605 - Sadler",   "606 - Luggage Trailer A",
	"607 - Luggage Trailer B",   "608 - Stair Trailer",   "609 - Boxville",   "610 - Farm Plow",   "611 - Utility Trailer"
};

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

stock SendSplitMessage(playerid, color, final[])
{
	new buffer[EX_SPLITLENGTH+5];
	new len = strlen(final);
	if(len>EX_SPLITLENGTH)
	{
	    new times = (len/EX_SPLITLENGTH);
		for(new i = 0; i < times+1; i++)
		{
			strdel(buffer, 0, EX_SPLITLENGTH+5);
			if(len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH)
			{
				strmid(buffer, final, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1));
				format(buffer, sizeof(buffer), "%s ...", buffer);
			}
			else
			{
			    strmid(buffer, final, EX_SPLITLENGTH*i, len);
			}
			SendClientMessage(playerid, color, buffer);
		}
	}
	else
	{
		SendClientMessage(playerid, color, final);
	}
}

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return 0;
}

stock MySQL_Register(playerid, passwordstring[])
{
    new query1[255], pname[24];
    GetPlayerName(playerid, pname, 24);

    format(query1, sizeof(query1), "INSERT INTO users (NormalName, Password) VALUES ('%s', '%s')", pname, passwordstring);

    mysql_query(mysql, query1);
    SendClientMessage(playerid, -1, "Welcome to Evolved Gaming Roleplay, if you need any help use /n or /requestmod (or /re for adminhelp)!");
    SendClientMessage(playerid, WHITE, "Red County is where the server is based, so if you want to RP hang around that area!");
	SpawnPlayer(playerid);
	SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
	NewlyRegistered[playerid] = 1;
	SetPlayerSkin(playerid, Player[playerid][LastSkin]);
    Player[playerid][Authenticated] = 1;
    Player[playerid][PlayerHunger] = 100;
    Player[playerid][Money] = 500;
    GivePlayerMoney(playerid, Player[playerid][Money]);
    Player[playerid][BankMoney] = 25000;
    format(Player[playerid][MarriedTo], 255, "Nobody");
    format(Player[playerid][Accent], 255, "American");
	PutPlayerInTutorial(playerid, 0);
	Player[playerid][FactionRank] = 0;
	Player[playerid][FactionID] = 0;
	
	/*new rows, fields, query2[255];
	format(query2, sizeof(query2), "SELECT * FROM users WHERE LastIP = '%s'", GetPlayerIp(playerid, lastip, sizeof(lastip)));
	mysql_query(mysql, query2);
	cache_get_data(rows, fields);
	if(rows)
	{	
		new temp[255];
		cache_get_field_content(0, "Warning1", temp), format(Player[playerid][Warning1], 255, temp);
		cache_get_field_content(0, "Warning2", temp), format(Player[playerid][Warning2], 255, temp);
		cache_get_field_content(0, "Warning3", temp), format(Player[playerid][Warning3], 255, temp);
		SendClientMessage(playerid, WHITE, "All warnings that you previously had have been transferred.");
	}
	mysql_free_result();*/
    return 1;
}

stock MySQL_Login(playerid)
{
    new string[300], string2[128], pname[24], temp[255], rows, fields;
    format(string2, sizeof(string2), "Welcome back %s to Evolved Gaming! We hope you will enjoy your stay.", GetName(playerid));
    GetPlayerName(playerid, pname, 24);
    format(string, sizeof(string), "SELECT * FROM users WHERE NormalName = '%s'", pname);
    mysql_query(mysql, string);
    mysql_store_result();
	cache_get_data(rows, fields);
    if(rows)
    {
		Player[playerid][Authenticated] = 1;
		cache_get_field_content(0, "Password", temp), format(Player[playerid][Password], 255, temp);
		cache_get_field_content(0, "AdminLevel", temp), Player[playerid][AdminLevel] = strval(temp);
		cache_get_field_content(0, "LastX", temp), Player[playerid][LastX] = floatstr(temp);
		cache_get_field_content(0, "LastY", temp), Player[playerid][LastY] = floatstr(temp);
		cache_get_field_content(0, "LastZ", temp), Player[playerid][LastZ] = floatstr(temp);
		cache_get_field_content(0, "LastWorld", temp), Player[playerid][LastWorld] = strval(temp);
		cache_get_field_content(0, "LastInterior", temp), Player[playerid][LastInterior] = strval(temp);
		cache_get_field_content(0, "LastSkin", temp), Player[playerid][LastSkin] = strval(temp);
		cache_get_field_content(0, "LastHealth", temp), Player[playerid][LastHealth] = strval(temp);
		cache_get_field_content(0, "LastArmour", temp), Player[playerid][LastArmour] = strval(temp);
		cache_get_field_content(0, "LastLoginYear", temp), Player[playerid][LastLoginYear] = strval(temp);
		cache_get_field_content(0, "LastLoginMonth", temp), Player[playerid][LastLoginMonth] = strval(temp);
		cache_get_field_content(0, "LastLoginDay", temp), Player[playerid][LastLoginDay] = strval(temp);
		cache_get_field_content(0, "GroupID", temp), Player[playerid][Group] = strval(temp);
		cache_get_field_content(0, "GroupRank", temp), Player[playerid][GroupRank] = strval(temp);
		cache_get_field_content(0, "House", temp), Player[playerid][House] = strval(temp);
		cache_get_field_content(0, "HouseReg", temp), Player[playerid][HouseReg] = strval(temp);
		cache_get_field_content(0, "Banned", temp), Player[playerid][Banned] = strval(temp);
		cache_get_field_content(0, "Muted", temp), Player[playerid][Muted] = strval(temp);
		cache_get_field_content(0, "Money", temp), Player[playerid][Money] = strval(temp);
		cache_get_field_content(0, "WepSlot1", temp), Player[playerid][WepSlot1] = strval(temp);
		cache_get_field_content(0, "WepSlot2", temp), Player[playerid][WepSlot2] = strval(temp);
		cache_get_field_content(0, "WepSlot3", temp), Player[playerid][WepSlot3] = strval(temp);
		cache_get_field_content(0, "WepSlot4", temp), Player[playerid][WepSlot4] = strval(temp);
		cache_get_field_content(0, "WepSlot5", temp), Player[playerid][WepSlot5] = strval(temp);
		cache_get_field_content(0, "WepSlot6", temp), Player[playerid][WepSlot6] = strval(temp);
		cache_get_field_content(0, "WepSlot7", temp), Player[playerid][WepSlot7] = strval(temp);
		cache_get_field_content(0, "WepSlot8", temp), Player[playerid][WepSlot8] = strval(temp);
		cache_get_field_content(0, "WepSlot9", temp), Player[playerid][WepSlot9] = strval(temp);
		cache_get_field_content(0, "WepSlot10", temp), Player[playerid][WepSlot10] = strval(temp);
		cache_get_field_content(0, "WepSlot11", temp), Player[playerid][WepSlot11] = strval(temp);
		cache_get_field_content(0, "WepSlot0", temp), Player[playerid][WepSlot0] = strval(temp);
		cache_get_field_content(0, "Warning1", temp), format(Player[playerid][Warning1], 255, temp);
		cache_get_field_content(0, "Warning2", temp), format(Player[playerid][Warning2], 255, temp);
		cache_get_field_content(0, "Warning3", temp), format(Player[playerid][Warning3], 255, temp);
        cache_get_field_content(0, "Identity", temp), Player[playerid][Identity] = strval(temp);
		cache_get_field_content(0, "License", temp), Player[playerid][License] = strval(temp);
		cache_get_field_content(0, "Age", temp), Player[playerid][Age] = strval(temp);
		cache_get_field_content(0, "ContractPrice", temp), Player[playerid][ContractPrice] = strval(temp);
		cache_get_field_content(0, "Contract", temp), Player[playerid][Contract] = strval(temp);
		cache_get_field_content(0, "PrisonDuration", temp), Player[playerid][PrisonDuration] = strval(temp);
		cache_get_field_content(0, "PrisonID", temp), Player[playerid][PrisonID] = strval(temp);
		cache_get_field_content(0, "Tutorial", temp), Player[playerid][Tutorial] = strval(temp);
		cache_get_field_content(0, "Hospitalized", temp), Player[playerid][Hospitalized] = strval(temp);
		cache_get_field_content(0, "CriminalOffences", temp), Player[playerid][CriminalOffences] = strval(temp);
		cache_get_field_content(0, "Offence1", temp), Player[playerid][Offence1] = strval(temp);
		cache_get_field_content(0, "Offence2", temp), Player[playerid][Offence2] = strval(temp);
		cache_get_field_content(0, "Offence3", temp), Player[playerid][Offence3] = strval(temp);
		cache_get_field_content(0, "Offence4", temp), Player[playerid][Offence4] = strval(temp);
		cache_get_field_content(0, "Offence5", temp), Player[playerid][Offence5] = strval(temp);
		cache_get_field_content(0, "Offence6", temp), Player[playerid][Offence6] = strval(temp);
		cache_get_field_content(0, "Gender", temp), Player[playerid][Gender] = strval(temp);
		cache_get_field_content(0, "Race", temp), Player[playerid][Race] = strval(temp);
		cache_get_field_content(0, "Job", temp), Player[playerid][Job] = strval(temp);
		cache_get_field_content(0, "Materials", temp), Player[playerid][Materials] = strval(temp);
		cache_get_field_content(0, "PlayerHunger", temp), Player[playerid][PlayerHunger] = strval(temp);
		cache_get_field_content(0, "HouseKey", temp), Player[playerid][HouseKey] = strval(temp);
		cache_get_field_content(0, "HouseKeyID", temp), Player[playerid][HouseKeyID] = strval(temp);
		cache_get_field_content(0, "CreditCard", temp), Player[playerid][CreditCard] = strval(temp);
		cache_get_field_content(0, "Car1Plate", temp), format(Player[playerid][Car1Plate], 255, temp);
		cache_get_field_content(0, "Car2Plate", temp), format(Player[playerid][Car2Plate], 255, temp);
		cache_get_field_content(0, "Car3Plate", temp), format(Player[playerid][Car3Plate], 255, temp);
		cache_get_field_content(0, "LoanedAmount", temp), Player[playerid][LoanedAmount] = strval(temp);
		cache_get_field_content(0, "TruckerReload", temp), Player[playerid][TruckerReload] = strval(temp);
		cache_get_field_content(0, "MedicDuty", temp), Player[playerid][MedicDuty] = strval(temp);
        cache_get_field_content(0, "TrashCoolDown", temp), Player[playerid][TrashCoolDown] = strval(temp);
		cache_get_field_content(0, "NosBottle", temp), Player[playerid][NosBottle] = strval(temp);
		cache_get_field_content(0, "EngineUpgrade", temp), Player[playerid][EngineUpgrade] = strval(temp);
		cache_get_field_content(0, "Turbo", temp), Player[playerid][Turbo] = strval(temp);
		cache_get_field_content(0, "v1ENGINE", temp), Player[playerid][v1ENGINE] = strval(temp);
		cache_get_field_content(0, "v2ENGINE", temp), Player[playerid][v2ENGINE] = strval(temp);
		cache_get_field_content(0, "v3ENGINE", temp), Player[playerid][v3ENGINE] = strval(temp);
		cache_get_field_content(0, "v1TURBO", temp), Player[playerid][V1TURBO] = strval(temp);
		cache_get_field_content(0, "v2TURBO", temp), Player[playerid][v2TURBO] = strval(temp);
		cache_get_field_content(0, "v3TURBO", temp), Player[playerid][v3TURBO] = strval(temp);
		cache_get_field_content(0, "GasCan", temp), Player[playerid][GasCan] = strval(temp);
		cache_get_field_content(0, "v1NOS", temp), Player[playerid][v1NOS] = strval(temp);
		cache_get_field_content(0, "v2NOS", temp), Player[playerid][v2NOS] = strval(temp);
		cache_get_field_content(0, "v3NOS", temp), Player[playerid][v3NOS] = strval(temp);
		cache_get_field_content(0, "v1NOSFUEL", temp), Player[playerid][v1NOSFUEL] = strval(temp);
		cache_get_field_content(0, "v2NOSFUEL", temp), Player[playerid][v2NOSFUEL] = strval(temp);
		cache_get_field_content(0, "v3NOSFUEL", temp), Player[playerid][v3NOSFUEL] = strval(temp);
		cache_get_field_content(0, "OwnedPlotID", temp), Player[playerid][OwnedPlotID] = strval(temp);
		cache_get_field_content(0, "ToyBan", temp), Player[playerid][ToyBan] = strval(temp);
		cache_get_field_content(0, "Toy1ID", temp), Player[playerid][Toy1ID] = strval(temp);
		cache_get_field_content(0, "Toy1XO", temp), Player[playerid][Toy1XO] = floatstr(temp);
		cache_get_field_content(0, "Toy1YO", temp), Player[playerid][Toy1YO] = floatstr(temp);
		cache_get_field_content(0, "Toy1ZO", temp), Player[playerid][Toy1ZO] = floatstr(temp);
		cache_get_field_content(0, "Toy1XR", temp), Player[playerid][Toy1XR] = floatstr(temp);
		cache_get_field_content(0, "Toy1YR", temp), Player[playerid][Toy1YR] = floatstr(temp);
		cache_get_field_content(0, "Toy1ZR", temp), Player[playerid][Toy1ZR] = floatstr(temp);
		cache_get_field_content(0, "Toy1XS", temp), Player[playerid][Toy1XS] = floatstr(temp);
		cache_get_field_content(0, "Toy1YS", temp), Player[playerid][Toy1YS] = floatstr(temp);
		cache_get_field_content(0, "Toy1ZS", temp), Player[playerid][Toy1ZS] = floatstr(temp);
		cache_get_field_content(0, "Toy2ID", temp), Player[playerid][Toy2ID] = strval(temp);
		cache_get_field_content(0, "Toy2XO", temp), Player[playerid][Toy2XO] = floatstr(temp);
		cache_get_field_content(0, "Toy2YO", temp), Player[playerid][Toy2YO] = floatstr(temp);
		cache_get_field_content(0, "Toy2ZO", temp), Player[playerid][Toy2ZO] = floatstr(temp);
		cache_get_field_content(0, "Toy2XR", temp), Player[playerid][Toy2XR] = floatstr(temp);
		cache_get_field_content(0, "Toy2YR", temp), Player[playerid][Toy2YR] = floatstr(temp);
		cache_get_field_content(0, "Toy2ZR", temp), Player[playerid][Toy2ZR] = floatstr(temp);
		cache_get_field_content(0, "Toy2XS", temp), Player[playerid][Toy2XS] = floatstr(temp);
		cache_get_field_content(0, "Toy2YS", temp), Player[playerid][Toy2YS] = floatstr(temp);
		cache_get_field_content(0, "Toy2ZS", temp), Player[playerid][Toy2ZS] = floatstr(temp);
		cache_get_field_content(0, "Toy3ID", temp), Player[playerid][Toy3ID] = strval(temp);
		cache_get_field_content(0, "Toy3XO", temp), Player[playerid][Toy3XO] = floatstr(temp);
		cache_get_field_content(0, "Toy3YO", temp), Player[playerid][Toy3YO] = floatstr(temp);
		cache_get_field_content(0, "Toy3ZO", temp), Player[playerid][Toy3ZO] = floatstr(temp);
		cache_get_field_content(0, "Toy3XR", temp), Player[playerid][Toy3XR] = floatstr(temp);
		cache_get_field_content(0, "Toy3YR", temp), Player[playerid][Toy3YR] = floatstr(temp);
		cache_get_field_content(0, "Toy3ZR", temp), Player[playerid][Toy3ZR] = floatstr(temp);
		cache_get_field_content(0, "Toy3XS", temp), Player[playerid][Toy3XS] = floatstr(temp);
		cache_get_field_content(0, "Toy3YS", temp), Player[playerid][Toy3YS] = floatstr(temp);
		cache_get_field_content(0, "Toy3ZS", temp), Player[playerid][Toy3ZS] = floatstr(temp);
		cache_get_field_content(0, "CarHealth", temp), Player[playerid][CarHealth] = strval(temp);
		cache_get_field_content(0, "Car2Health", temp), Player[playerid][Car2Health] = strval(temp);
		cache_get_field_content(0, "Car3Health", temp), Player[playerid][Car3Health] = strval(temp);
		cache_get_field_content(0, "CarFuel", temp), Player[playerid][CarFuel] = strval(temp);
		cache_get_field_content(0, "Car2Fuel", temp), Player[playerid][Car2Fuel] = strval(temp);
		cache_get_field_content(0, "Car3Fuel", temp), Player[playerid][Car3Fuel] = strval(temp);
		cache_get_field_content(0, "BadgeNumber", temp), Player[playerid][BadgeNumber] = strval(temp);
		cache_get_field_content(0, "GCPID", temp), Player[playerid][GCPID] = strval(temp);
		cache_get_field_content(0, "Car3Fuel", temp), Player[playerid][Car3Fuel] = strval(temp);
		cache_get_field_content(0, "IsSpeccing", temp), Player[playerid][IsSpeccing] = strval(temp);
		cache_get_field_content(0, "NMute", temp), Player[playerid][NMute] = strval(temp);
		cache_get_field_content(0, "VIPTokens", temp), Player[playerid][VIPTokens] = strval(temp);
		cache_get_field_content(0, "AdminActions", temp), Player[playerid][AdminActions] = strval(temp);
		cache_get_field_content(0, "BankMoney", temp), Player[playerid][BankMoney] = strval(temp);
		cache_get_field_content(0, "Cocaine", temp), Player[playerid][Cocaine] = strval(temp);
		cache_get_field_content(0, "Pot", temp), Player[playerid][Pot] = strval(temp);
		cache_get_field_content(0, "nMuted", temp), Player[playerid][nMuted] = strval(temp);
		cache_get_field_content(0, "Business", temp), Player[playerid][Business] = strval(temp);
		cache_get_field_content(0, "PhoneN", temp), Player[playerid][PhoneN] = strval(temp);
		cache_get_field_content(0, "PlayingHours", temp), Player[playerid][PlayingHours] = strval(temp);
		cache_get_field_content(0, "InabilityToMatrun", temp), Player[playerid][InabilityToMatrun] = strval(temp);
		cache_get_field_content(0, "InabilityToTrash", temp), Player[playerid][InabilityTrash] = strval(temp);
		cache_get_field_content(0, "CantFish", temp), Player[playerid][CantFish] = strval(temp);
		cache_get_field_content(0, "CollectedFish", temp), Player[playerid][CollectedFish] = strval(temp);
		cache_get_field_content(0, "Car3Fuel", temp), Player[playerid][Car3Fuel] = strval(temp);
		cache_get_field_content(0, "CarX", temp), Player[playerid][CarX] = floatstr(temp);
		cache_get_field_content(0, "CarY", temp), Player[playerid][CarY] = floatstr(temp);
		cache_get_field_content(0, "CarZ", temp), Player[playerid][CarZ] = floatstr(temp);
		cache_get_field_content(0, "Car2X", temp), Player[playerid][Car2X] = floatstr(temp);
		cache_get_field_content(0, "Car2Y", temp), Player[playerid][Car3Y] = floatstr(temp);
		cache_get_field_content(0, "Car2Z", temp), Player[playerid][Car2Z] = floatstr(temp);
		cache_get_field_content(0, "Car3X", temp), Player[playerid][Car3X] = floatstr(temp);
		cache_get_field_content(0, "Car3Y", temp), Player[playerid][Car3Y] = floatstr(temp);
		cache_get_field_content(0, "Car3Z", temp), Player[playerid][Car3Z] = floatstr(temp);
		cache_get_field_content(0, "CarZAngle", temp), Player[playerid][CarZAngle] = floatstr(temp);
		cache_get_field_content(0, "Car2ZAngle", temp), Player[playerid][Car2ZAngle] = floatstr(temp);
		cache_get_field_content(0, "Car3ZAngle", temp), Player[playerid][Car3ZAngle] = floatstr(temp);
		cache_get_field_content(0, "PlayerCarModel", temp), Player[playerid][PlayerCarModel] = strval(temp);
		cache_get_field_content(0, "PlayerCarModel2", temp), Player[playerid][PlayerCarModel2] = strval(temp);
		cache_get_field_content(0, "PlayerCarModel3", temp), Player[playerid][PlayerCarModel3] = strval(temp);
		cache_get_field_content(0, "CarCol1", temp), Player[playerid][CarCol1] = strval(temp);
		cache_get_field_content(0, "CarCol2", temp), Player[playerid][CarCol2] = strval(temp);
		cache_get_field_content(0, "Car2Col1", temp), Player[playerid][Car2Col1] = strval(temp);
		cache_get_field_content(0, "Car2Col2", temp), Player[playerid][Car2Col2] = strval(temp);
		cache_get_field_content(0, "Car3Col1", temp), Player[playerid][Car3Col1] = strval(temp);
		cache_get_field_content(0, "Car3Col2", temp), Player[playerid][Car3Col2] = strval(temp);
		cache_get_field_content(0, "Rope", temp), Player[playerid][Rope] = strval(temp);
		cache_get_field_content(0, "Rags", temp), Player[playerid][Rags] = strval(temp);
		cache_get_field_content(0, "FailedHits", temp), Player[playerid][FailedHits] = strval(temp);
		cache_get_field_content(0, "SuccessfulHits", temp), Player[playerid][SuccessfulHits] = strval(temp);
		cache_get_field_content(0, "LockedCar", temp), Player[playerid][LockedCar] = strval(temp);
		cache_get_field_content(0, "LockedCar2", temp), Player[playerid][LockedCar2] = strval(temp);
		cache_get_field_content(0, "LockedCar3", temp), Player[playerid][LockedCar3] = strval(temp);
		cache_get_field_content(0, "HasRadio", temp), Player[playerid][HasRadio] = strval(temp);
		cache_get_field_content(0, "MarriedTo", temp), format(Player[playerid][MarriedTo], 255, temp);
		cache_get_field_content(0, "FightBox", temp), Player[playerid][FightBox] = strval(temp);
		cache_get_field_content(0, "FightKungfu", temp), Player[playerid][FightKungfu] = strval(temp);
		cache_get_field_content(0, "FightKneehead", temp), Player[playerid][FightKneehead] = strval(temp);
		cache_get_field_content(0, "FightGrabkick", temp), Player[playerid][FightGrabkick] = strval(temp);
		cache_get_field_content(0, "FightElbow", temp), Player[playerid][FightElbow] = strval(temp);
		cache_get_field_content(0, "VipRank", temp), Player[playerid][VipRank] = strval(temp);
		cache_get_field_content(0, "BeforeAdminVipRank", temp), Player[playerid][BeforeAdminVipRank] = strval(temp);
		cache_get_field_content(0, "WalkieTalkie", temp), Player[playerid][WalkieTalkie] = strval(temp);
		cache_get_field_content(0, "BankStatus", temp), Player[playerid][BankStatus] = strval(temp);
		cache_get_field_content(0, "PlayerSkinSlot1", temp), Player[playerid][PlayerSkinSlot1] = strval(temp);
		cache_get_field_content(0, "PlayerSkinSlot2", temp), Player[playerid][PlayerSkinSlot2] = strval(temp);
		cache_get_field_content(0, "PlayerSkinSlot3", temp), Player[playerid][PlayerSkinSlot3] = strval(temp);
		cache_get_field_content(0, "AdminPIN", temp), Player[playerid][AdminPIN] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot0", temp), Player[playerid][OwnedCarModSlot0] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot1", temp), Player[playerid][OwnedCarModSlot1] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot2", temp), Player[playerid][OwnedCarModSlot2] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot3", temp), Player[playerid][OwnedCarModSlot3] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot4", temp), Player[playerid][OwnedCarModSlot4] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot5", temp), Player[playerid][OwnedCarModSlot5] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot6", temp), Player[playerid][OwnedCarModSlot6] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot7", temp), Player[playerid][OwnedCarModSlot7] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot8", temp), Player[playerid][OwnedCarModSlot8] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot9", temp), Player[playerid][OwnedCarModSlot9] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot10", temp), Player[playerid][OwnedCarModSlot10] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot11", temp), Player[playerid][OwnedCarModSlot11] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot12", temp), Player[playerid][OwnedCarModSlot12] = strval(temp);
		cache_get_field_content(0, "OwnedCarModSlot13", temp), Player[playerid][OwnedCarModSlot13] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot0", temp), Player[playerid][Car2OwnedCarModSlot0] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot1", temp), Player[playerid][Car2OwnedCarModSlot1] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot2", temp), Player[playerid][Car2OwnedCarModSlot2] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot3", temp), Player[playerid][Car2OwnedCarModSlot3] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot4", temp), Player[playerid][Car2OwnedCarModSlot4] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot5", temp), Player[playerid][Car2OwnedCarModSlot5] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot6", temp), Player[playerid][Car2OwnedCarModSlot6] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot7", temp), Player[playerid][Car2OwnedCarModSlot7] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot8", temp), Player[playerid][Car2OwnedCarModSlot8] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot9", temp), Player[playerid][Car2OwnedCarModSlot9] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot10", temp), Player[playerid][Car2OwnedCarModSlot10] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot11", temp), Player[playerid][Car2OwnedCarModSlot11] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot12", temp), Player[playerid][Car2OwnedCarModSlot12] = strval(temp);
		cache_get_field_content(0, "Car2OwnedCarModSlot13", temp), Player[playerid][Car2OwnedCarModSlot13] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot0", temp), Player[playerid][Car3OwnedCarModSlot0] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot1", temp), Player[playerid][Car3OwnedCarModSlot1] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot2", temp), Player[playerid][Car3OwnedCarModSlot2] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot3", temp), Player[playerid][Car3OwnedCarModSlot3] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot4", temp), Player[playerid][Car3OwnedCarModSlot4] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot5", temp), Player[playerid][Car3OwnedCarModSlot5] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot6", temp), Player[playerid][Car3OwnedCarModSlot6] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot7", temp), Player[playerid][Car3OwnedCarModSlot7] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot8", temp), Player[playerid][Car3OwnedCarModSlot8] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot9", temp), Player[playerid][Car3OwnedCarModSlot9] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot10", temp), Player[playerid][Car3OwnedCarModSlot10] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot11", temp), Player[playerid][Car3OwnedCarModSlot11] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot12", temp), Player[playerid][Car3OwnedCarModSlot12] = strval(temp);
		cache_get_field_content(0, "Car3OwnedCarModSlot13", temp), Player[playerid][Car3OwnedCarModSlot13] = strval(temp);
		cache_get_field_content(0, "AdminSkin", temp), Player[playerid][AdminSkin] = strval(temp);
		cache_get_field_content(0, "AdminName", temp), format(Player[playerid][AdminName], 255, temp);
		cache_get_field_content(0, "NormalName", temp), format(Player[playerid][NormalName], 255, temp);
		cache_get_field_content(0, "Accent", temp), format(Player[playerid][Accent], 255, temp);
		cache_get_field_content(0, "WalkieFrequency", temp), Player[playerid][WalkieFrequency] = strval(temp);
		cache_get_field_content(0, "PortableRadio", temp), Player[playerid][PortableRadio] = strval(temp);
		cache_get_field_content(0, "Note", temp), format(Player[playerid][Note], 255, temp);
		cache_get_field_content(0, "CarPaintJobID", temp), Player[playerid][CarPaintJobID] = strval(temp);
		cache_get_field_content(0, "Car2PaintJobID", temp), Player[playerid][Car2PaintJobID] = strval(temp);
		cache_get_field_content(0, "Car3PaintJobID", temp), Player[playerid][Car3PaintJobID] = strval(temp);
		cache_get_field_content(0, "MeActions", temp), Player[playerid][MeActions] = strval(temp);
		cache_get_field_content(0, "AdsPlaced", temp), Player[playerid][AdsPlaced] = strval(temp);
		cache_get_field_content(0, "MatrunsExecuted", temp), Player[playerid][MatrunsExecuted] = strval(temp);
		cache_get_field_content(0, "Tester", temp), Player[playerid][Tester] = strval(temp);
		cache_get_field_content(0, "oMuted", temp), Player[playerid][oMuted] = strval(temp);
		cache_get_field_content(0, "CheckBalance", temp), Player[playerid][CheckBalance] = strval(temp);
		cache_get_field_content(0, "ReportBanStatus", temp), Player[playerid][ReportBanStatus] = strval(temp);
		cache_get_field_content(0, "AdminDuty", temp), Player[playerid][AdminDuty] = strval(temp);
		cache_get_field_content(0, "PotSeeds", temp), Player[playerid][PotSeeds] = strval(temp);
		cache_get_field_content(0, "Faction", temp), Player[playerid][FactionID] = strval(temp);
		cache_get_field_content(0, "FactionRank", temp), Player[playerid][FactionRank] = strval(temp);
		cache_get_field_content(0, "StreetSweeperReload", temp), Player[playerid][StreetSweeperReload] = strval(temp);
		cache_get_field_content(0, "CocaineIngredients", temp), Player[playerid][CocaineIngredients] = strval(temp);
		cache_get_field_content(0, "SavedMP3Link", temp), format(Player[playerid][SavedMP3Link], 255, "%s", temp);
		cache_get_field_content(0, "Tickets", temp), Player[playerid][Tickets] = strval(temp);
		cache_get_field_content(0, "LicensePoints", temp), Player[playerid][LicensePoints] = strval(temp);
		cache_get_field_content(0, "Car1Trunk1", temp), Player[playerid][Car1Trunk1] = strval(temp);
		cache_get_field_content(0, "Car1Trunk2", temp), Player[playerid][Car1Trunk2] = strval(temp);
		cache_get_field_content(0, "Car1Trunk3", temp), Player[playerid][Car1Trunk3] = strval(temp);
		cache_get_field_content(0, "Car2Trunk1", temp), Player[playerid][Car2Trunk1] = strval(temp);
		cache_get_field_content(0, "Car2Trunk2", temp), Player[playerid][Car2Trunk2] = strval(temp);
		cache_get_field_content(0, "Car2Trunk3", temp), Player[playerid][Car2Trunk3] = strval(temp);
		cache_get_field_content(0, "Car3Trunk1", temp), Player[playerid][Car3Trunk1] = strval(temp);
		cache_get_field_content(0, "Car3Trunk2", temp), Player[playerid][Car3Trunk2] = strval(temp);
		cache_get_field_content(0, "Car3Trunk3", temp), Player[playerid][Car3Trunk3] = strval(temp);
		cache_get_field_content(0, "Car1VW", temp), Player[playerid][Car1VW] = strval(temp);
		cache_get_field_content(0, "Car2VW", temp), Player[playerid][Car2VW] = strval(temp);
		cache_get_field_content(0, "Car3VW", temp), Player[playerid][Car3VW] = strval(temp);
		cache_get_field_content(0, "Car1Mileage", temp), Player[playerid][Car1Mileage] = strval(temp);
		cache_get_field_content(0, "Car2Mileage", temp), Player[playerid][Car2Mileage] = strval(temp);
		cache_get_field_content(0, "Car3Mileage", temp), Player[playerid][Car3Mileage] = strval(temp);
		cache_get_field_content(0, "Fish1", temp), Player[playerid][Fish1] = strval(temp);
		cache_get_field_content(0, "Fish2", temp), Player[playerid][Fish2] = strval(temp);
		cache_get_field_content(0, "Fish3", temp), Player[playerid][Fish3] = strval(temp);
		cache_get_field_content(0, "Fish4", temp), Player[playerid][Fish4] = strval(temp);
		cache_get_field_content(0, "Fish5", temp), Player[playerid][Fish5] = strval(temp);
		cache_get_field_content(0, "Car1Pot", temp), Player[playerid][Car1Pot] = strval(temp);
		cache_get_field_content(0, "Car1Cocaine", temp), Player[playerid][Car1Cocaine] = strval(temp);
		cache_get_field_content(0, "Car1Materials", temp), Player[playerid][Car1Materials] = strval(temp);
		cache_get_field_content(0, "Car2Pot", temp), Player[playerid][Car2Pot] = strval(temp);
		cache_get_field_content(0, "Car2Cocaine", temp), Player[playerid][Car2Cocaine] = strval(temp);
		cache_get_field_content(0, "Car2Materials", temp), Player[playerid][Car2Materials] = strval(temp);
		cache_get_field_content(0, "Car3Pot", temp), Player[playerid][Car3Pot] = strval(temp);
		cache_get_field_content(0, "Car3Cocaine", temp), Player[playerid][Car3Cocaine] = strval(temp);
		cache_get_field_content(0, "Car3Materials", temp), Player[playerid][Car3Materials] = strval(temp);
		cache_get_field_content(0, "CarryingVests", temp), Player[playerid][CarryingVests] = strval(temp);
		
		new Year, Month, Day, Minute, Hour, Second;
		getdate(Year, Month, Day);
		gettime(Hour, Minute, Second);

		Player[playerid][LastLoginMinute] = Minute;
	    Player[playerid][LastLoginHour] = Hour;
	    Player[playerid][LastLoginDay] = Day;
	    Player[playerid][LastLoginMonth] = Month;
	    Player[playerid][LastLoginYear] = Year;
		fuel[Player[playerid][CarLinkID]] = Player[playerid][CarFuel];
		fuel[Player[playerid][Car2LinkID]] = Player[playerid][Car2Fuel];
		fuel[Player[playerid][Car3LinkID]] = Player[playerid][Car3Fuel];
		SetVehicleHealth(Player[playerid][CarLinkID], Player[playerid][CarHealth]);
		SetVehicleHealth(Player[playerid][Car2LinkID], Player[playerid][Car2Health]);
		SetVehicleHealth(Player[playerid][Car3LinkID], Player[playerid][Car3Health]);
		SetPlayerArmour(playerid, Player[playerid][LastArmour]);
		SetPlayerHealth(playerid, Player[playerid][LastHealth]);
		GivePlayerMoney(playerid, Player[playerid][Money]);
		NewlyRegistered[playerid] = 2;
		SpawnOwnedCar(playerid, 1);
		SpawnOwnedCar(playerid, 2);
		SpawnOwnedCar(playerid, 3);
		SetPlayerSkin(playerid, Player[playerid][LastSkin]);
		SetPlayerInterior(playerid, Player[playerid][LastInterior]);
		SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);
		GetOwnedCarMods(playerid);
	}
    mysql_free_result();
    if(Player[playerid][Banned] == 0)
    {
    	SendClientMessage(playerid, WHITE, string2);
	}
	else if(Player[playerid][Banned] == 1) return Kick(playerid);
	SetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
    Player[playerid][Authenticated] = 1;
    if(Player[playerid][Gender] == 0 && Player[playerid][Race] == 0)
    {
        SendClientMessage(playerid, RED, "We have detected that you have failed our questions, please re-do them.");
        PutPlayerInTutorial(playerid, 0);
    }
	if(Player[playerid][AdminLevel] >= 1)
	{
 		if(Player[playerid][AdminPIN] == 0)
	    {
	        TogglePlayerControllable(playerid, false);
	        SendClientMessage(playerid, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
	        ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
	    }
	    else
	    {
	        Player[playerid][PINUnauthedTime] = 1;
	        SendClientMessage(playerid, WHITE, "You have 10 seconds to login before you are auto-kicked.");
	        TogglePlayerControllable(playerid, false);
			ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
		}
	}
    return 1;
}

stock removeTxt()
{
	for(new pl = 0; pl < MAX_PLOTS; pl++)
	{
		Delete3DTextLabel(Plots[pl][PlotText]);
		printf("Plot (ID: %d) has been despawned", pl);
	}
}

stock CreateDrop(playerid, droptype, dropamount)
{
	new Float: px, Float: py, Float: pz;
	GetPlayerPos(playerid, px, py, pz);
	new Float: ox, Float: oy, Float: oz;
	pz = pz-1.0;
 	ox = px;
	oy = py;
	oz = pz;

	if(dropamount > 0)
	{
		switch(droptype)
		{
		    case 0:
		    {
				for(new i = 0; i < MAX_DROPS; i++)
				{
				    if(Drop[i][dActive] == 0)
				    {
				        //oz = oz-0.5;
				        Drop[i][dText] = Create3DTextLabel("**** There would be a green bag located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
				        Drop[i][dX] = px;
				        Drop[i][dY] = py;
				        Drop[i][dZ] = pz;
				        Drop[i][dID] = i;
				        Drop[i][dType] = droptype;
				        Drop[i][dAmount] = dropamount;
				        Drop[i][dActive] = 1;
				        Drop[i][dObject] = CreateDynamicObject(1578, ox, oy, oz, 0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
				        break;
				    }
				}
		    }
		    case 1:
		    {
				for(new i = 0; i < MAX_DROPS; i++)
				{
				    if(Drop[i][dActive] == 0)
				    {
				        //oz = oz-0.5;
				        Drop[i][dText] = Create3DTextLabel("**** There would be a white bag located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
				        Drop[i][dX] = px;
				        Drop[i][dY] = py;
				        Drop[i][dZ] = pz;
				        Drop[i][dID] = i;
				        Drop[i][dType] = droptype;
				        Drop[i][dAmount] = dropamount;
				        Drop[i][dActive] = 1;
				        Drop[i][dObject] = CreateDynamicObject(1575, ox, oy, oz, 0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
				        break;
				    }
				}
		    }
		    case 2:
		    {
		        for(new i = 0; i < MAX_DROPS; i++)
		        {
		            if(Drop[i][dActive] == 0)
		            {
		                if(dropamount >= 5000)
					 	{
		                	Drop[i][dText] = Create3DTextLabel("**** There would be a big crate located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
		                	Drop[i][dObject] = CreateDynamicObject(964, ox, oy, oz, 0.00, 0.00, 0.00, -1, -1, -1, 100.0);
						}
						else
						{
	                        Drop[i][dText] = Create3DTextLabel("**** There would be a small crate located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
	                        Drop[i][dObject] = CreateDynamicObject(3014, ox, oy, oz, 0.00, 0.00, 0.00, -1, -1, -1, 100.0);
						}
				        Drop[i][dX] = px;
				        Drop[i][dY] = py;
				        Drop[i][dZ] = pz;
				        Drop[i][dID] = i;
				        Drop[i][dType] = droptype;
				        Drop[i][dAmount] = dropamount;
				        Drop[i][dActive] = 1;
				        break;
		            }
		        }
		    }
		    case 3:
		    {
		        for(new i = 0; i < MAX_DROPS; i++)
				{
				    if(Drop[i][dActive] == 0)
				    {
				        //oz = oz-0.5;
				        new weaponobjectid = GetWeaponModel(dropamount);
				        Drop[i][dText] = Create3DTextLabel("**** There would be a weapon located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
				        Drop[i][dX] = px;
				        Drop[i][dY] = py;
				        Drop[i][dZ] = pz;
				        Drop[i][dID] = i;
				        Drop[i][dType] = droptype;
				        Drop[i][dAmount] = dropamount;
				        Drop[i][dActive] = 1;
				        Drop[i][dObject] = CreateDynamicObject(weaponobjectid, ox, oy, oz+0.2, 90.00, 0.00, 0.00, -1, -1, -1, 100.0);
				        break;
				    }
				}
		    }
		    case 4:
		    {
				for(new i = 0; i < MAX_DROPS; i++)
				{
				    if(Drop[i][dActive] == 0)
				    {
				        //oz = oz-0.5;
				        Drop[i][dText] = Create3DTextLabel("**** There would be a phone located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
				        Drop[i][dX] = px;
				        Drop[i][dY] = py;
				        Drop[i][dZ] = pz;
				        Drop[i][dID] = i;
				        Drop[i][dType] = droptype;
				        Drop[i][dAmount] = dropamount;
				        Drop[i][dActive] = 1;
				        Drop[i][dObject] = CreateDynamicObject(18868, ox, oy, oz, 0.00, 0.00, 0.00, -1, -1, -1, 100.0);
				        break;
				    }
				}
		    }
		    case 7:
		    {
		        for(new i = 0; i < MAX_DROPS; i++)
		        {
		            if(Drop[i][dActive] == 0)
		            {
		                if(dropamount >= 10000)
					 	{
		                	Drop[i][dText] = Create3DTextLabel("**** There would be a big green bag located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
		                	Drop[i][dObject] = CreateDynamicObject(1550, ox, oy, oz, 0.00, 0.00, 0.00, -1, -1, -1, 100.0);
						}
						else
						{
	                        Drop[i][dText] = Create3DTextLabel("**** There would be a small stack of paper money located on the ground ****\n(( /pickupdrop ))", GREY, px, py, pz, 3.0, 0, 0);
	                        Drop[i][dObject] = CreateDynamicObject(1212, ox, oy, oz, 0.00, 0.00, 0.00, -1, -1, -1, 100.0);
						}
				        Drop[i][dX] = px;
				        Drop[i][dY] = py;
				        Drop[i][dZ] = pz;
				        Drop[i][dID] = i;
				        Drop[i][dType] = droptype;
				        Drop[i][dAmount] = dropamount;
				        Drop[i][dActive] = 1;
						break;
		            }
		        }
		    }
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You can't drop 0.");
	}
}

stock removeObj()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		for(new ob = 0; ob < MAX_SOBJECTS; ob++)
		{
			if(Objects[i][ob][LinkID] != 0)
			{
				new objID = Objects[i][ob][LinkID];
				DestroyObject(objID);
				printf("[system][INFO] Object ID %d has been despawned", objID);

				Objects[i][ob][LinkID] = 0;
				Objects[i][ob][ID] = 0;
				Objects[i][ob][Model] = 0;
				totalPlayerObjects[i] = 0;
			}
		}
	}
}

stock TrashT(playerid)
{
	new RouteID = 0;

	if(Player[playerid][TrashRoute] == 1)
	{
 		if(Player[playerid][TrashCP] == 5)
 		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
			{
	            if(IsPlayerInRangeOfPoint(playerid, 5.0, -61.56371, -1568.34741, 1.60995))
	 		    {
					new pVeh = GetPlayerVehicleID(playerid);
					RemovePlayerFromVehicle(playerid);
					SetVehicleToRespawn(pVeh);

					new PayOut = CollectedTrash[playerid] * 1;

					Player[playerid][Money] += PayOut;

					new string[255];
					format(string, sizeof(string), "You have earned a total of $%d for bringing back %dKG of trash", PayOut, CollectedTrash[playerid]);
					SendClientMessage(playerid, WHITE, string);

					Player[playerid][TrashRoute] = 0;
					Player[playerid][TrashCP] = 0;
					CollectedTrash[playerid] = 0;
					Player[playerid][TrashCoolDown] = 300;

					new trash = dini_Int("Assets.ini", "CityTrash");
					if(trash < 0)
					{
						dini_IntSet("Assets.ini", "CityTrash", 75000);
					}
				}
			}
	   }
	}

    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
	{
		if(Player[playerid][TrashRoute] == 1)
		{
	 		if(Player[playerid][TrashCP] == 4)
	 		{
	 		    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2764, -2504, 13))
	 		    {
	 		        new cTrash = dini_Int("Assets.ini", "CityTrash");
	 		        if(cTrash > 750)
					{
					    if(CollectedTrash[playerid] < 751)
					    {
					    	new newTrash = CityTrash-750;
					    	CollectedTrash[playerid] = 750;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}
					else if(cTrash < 501)
					{
					    if(CollectedTrash[playerid] < 501)
						{
							new newTrash = CityTrash-500;
					    	CollectedTrash[playerid] = 500;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}

					Player[playerid][TrashCP] = 5;
		 			SetPlayerCheckpoint(playerid, -61.56371, -1568.34741, 1.60995, 3.0);
		 			SendClientMessage(playerid, WHITE, "Head back to the depot for your pay. (/collectpay)");
				}
		   }
		}
	}

    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
	{
		if(Player[playerid][TrashRoute] == 1)
		{
	 		if(Player[playerid][TrashCP] == 3)
	 		{
	            if(IsPlayerInRangeOfPoint(playerid, 5.0, 1434.5936, -1879.2770, 13.5469))
	 		    {
	 		        new cTrash = dini_Int("Assets.ini", "CityTrash");
	 		        if(cTrash > 750)
					{
					    if(CollectedTrash[playerid] < 751)
					    {
					    	new newTrash = CityTrash-750;
					    	CollectedTrash[playerid] = 750;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}
					else if(cTrash < 501)
					{
					    if(CollectedTrash[playerid] < 501)
						{
							new newTrash = CityTrash-500;
					    	CollectedTrash[playerid] = 500;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}

					Player[playerid][TrashCP] = 4;
		 			SetPlayerCheckpoint(playerid, 2764, -2504, 13, 3.0);
		 			SendClientMessage(playerid, WHITE, "You've picked up the trash, proceed to the next checkpoint.");
				}
	       }
		}
	}

    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
	{
		if(Player[playerid][TrashRoute] == 1)
		{
	 		if(Player[playerid][TrashCP] == 2)
	 		{
	            if(IsPlayerInRangeOfPoint(playerid, 5.0, 1418.2476, -1880.8080, 12.5436))
	 		    {
	 		        new cTrash = dini_Int("Assets.ini", "CityTrash");
	 		        if(cTrash > 750)
					{
					    if(CollectedTrash[playerid] < 751)
					    {
					    	new newTrash = CityTrash-750;
					    	CollectedTrash[playerid] = 750;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}
					else if(cTrash < 501)
					{
					    if(CollectedTrash[playerid] < 501)
						{
							new newTrash = CityTrash-500;
					    	CollectedTrash[playerid] = 500;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}

					Player[playerid][TrashCP] = 3;
		 			SetPlayerCheckpoint(playerid, 1247, -2011, 59, 3.0);
		 			SendClientMessage(playerid, WHITE, "You've picked up the trash, proceed to the next checkpoint.");
				}
	       }
		}
	}
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
	{
		if(Player[playerid][TrashRoute] == 1)
		{
	 		if(Player[playerid][TrashCP] == 1)
	 		{
	 		    if(IsPlayerInRangeOfPoint(playerid, 5.0, 314, -1800, 4))
	 		    {
					new cTrash = dini_Int("Assets.ini", "CityTrash");
					if(cTrash > 750)
					{
					    if(CollectedTrash[playerid] < 751)
					    {
					    	new newTrash = CityTrash-750;
					    	CollectedTrash[playerid] = 750;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}
					else if(cTrash < 501)
					{
					    if(CollectedTrash[playerid] < 501)
						{
							new newTrash = CityTrash-500;
					    	CollectedTrash[playerid] = 500;
					    	dini_IntSet("Assets.ini", "CityTrash", newTrash);
						}
					}
					Player[playerid][TrashCP] = 2;
	 				SetPlayerCheckpoint(playerid, 1418.2476, -1880.8080, 12.5436, 3.0);
	 				SendClientMessage(playerid, WHITE, "You've picked up the trash, proceed to the next checkpoint.");
				}
		   }
		}
	}
	if(Player[playerid][TrashCoolDown] == 0)
	{
		if(Player[playerid][TrashRoute] == 0)
		{
			if(Player[playerid][TrashCP] == 0)
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
				{
					if(RouteID == 0) // ROUTE 1
					{
					    new cTrash = dini_Int("Assets.ini", "CityTrash");
						if(cTrash >= 500)
						{
			 			    Player[playerid][TrashRoute] = 1;
						    Player[playerid][TrashCP] = 1;
						    SetPlayerCheckpoint(playerid, 314, -1800, 4, 3.0);
						    SendClientMessage(playerid, WHITE, "You have started picking up trash, go to the checkpoint to proceed. [ROUTE 1]");
						}
						else if(cTrash < 500)
						{
						    SendClientMessage(playerid, WHITE, "There isnt enough trash for you to pick up");
						}
					}
				}
			}
		}
	}
	if(Player[playerid][TrashCoolDown] > 0)
	{
	    SendClientMessage(playerid, WHITE, "You need to wait five minutes before doing another trashrun");
	}
}

public RadarTimer()
{
	for(new c = 0; c < MAX_PLAYERS; c++)
	{
		if(Player[c][EnabledRadar] == 0)
		{
		    for(new b = 0; b < MAX_PLAYERS; b++)
		    {
		        if(Player[b][HasBeenTagged] == 1)
		        {
                    DeletePlayer3DTextLabel(c, Player[b][RadarText]);
		        }
		    }
		}
	}
	for(new a = 0; a < MAX_PLAYERS; a++)
	{
		if(GetPlayerVehicleID(a) != 0)
		{
		    if(Player[a][EnabledRadar] == 1)
		    {
		        for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(i != a)
		            {
			            GetPlayerPos(a, Player[a][LastX], Player[a][LastY], Player[a][LastZ]);
			            GetPlayerPos(i, Player[i][LastX], Player[i][LastY], Player[i][LastZ]);
			            if(IsPlayerInRangeOfPoint(i, 25.0, Player[a][LastX], Player[a][LastY], Player[a][LastZ]))
			            {
			                if(Player[i][HasBeenTagged] == 0 && GetPlayerVehicleID(i) != 0)
			                {
			                    Player[i][HasBeenTagged] = 1;
								new str[128];
								format(str, sizeof(str), "Speed: %dKM/h", GetPlayerSpeed(i, 0));
								if(GetPlayerSpeed(i, 0) >= 120)
								{
			                    	Player[i][RadarText] = CreatePlayer3DTextLabel(a, str, RED, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 75.0);
								}
								else if(GetPlayerSpeed(i, 0) >= 61 && GetPlayerSpeed(i, 0) <= 119)
								{
								    Player[i][RadarText] = CreatePlayer3DTextLabel(a, str, ORANGE, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 75.0);
								}
								else
								{
								    Player[i][RadarText] = CreatePlayer3DTextLabel(a, str, GREEN, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 75.0);
								}
							}
							else
							{
							    if(GetPlayerSpeed(i, 0) >= 120)
							    {
							    	new str[128];
							    	DeletePlayer3DTextLabel(a, Player[i][RadarText]);
									format(str, sizeof(str), "Speed: %dKM/h", GetPlayerSpeed(i, 0));
	                            	Player[i][RadarText] = CreatePlayer3DTextLabel(a, str, RED, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 75.0);
		  						}
						 		else if(GetPlayerSpeed(i, 0) >= 61 && GetPlayerSpeed(i, 0) <= 119)
						 		{
	                                new str[128];
							    	DeletePlayer3DTextLabel(a, Player[i][RadarText]);
									format(str, sizeof(str), "Speed: %dKM/h", GetPlayerSpeed(i, 0));
	                            	Player[i][RadarText] = CreatePlayer3DTextLabel(a, str, ORANGE, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 75.0);
								}
								else
								{
								    new str[128];
							    	DeletePlayer3DTextLabel(a, Player[i][RadarText]);
									format(str, sizeof(str), "Speed: %dKM/h", GetPlayerSpeed(i, 0));
	                            	Player[i][RadarText] = CreatePlayer3DTextLabel(a, str, GREEN, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 75.0);
								}
							}
			            }
			            else if(Player[i][HasBeenTagged] == 1)
						{
						    DeletePlayer3DTextLabel(a, Player[i][RadarText]);
						}
					}
		        }
		    }
		}
		else if(Player[a][EnabledRadar] == 1)
		{
		    Player[a][EnabledRadar] = 0;
		    SendClientMessage(a, WHITE, "Your radar has been disabled because you exited your vehicle");
		}
	}
	return 1;
}

public ProgressBarValue(playerid)
{
	new vID = GetPlayerVehicleID(playerid);
	if(vID > 0)
	{
	    SetProgressBarColor(Fuel[playerid], GREEN);
		SetProgressBarValue(Fuel[playerid], fuel[vID]);
		UpdateProgressBar(Fuel[playerid], playerid);
	}
}

public ATMDelay(playerid)
{
    ShowPlayerDialog(playerid, 3721, DIALOG_STYLE_LIST, "ATM", "View balance\nWithdraw", "Close", "");
}

/*public CarPlate(playerid)
{
 	if(Player[playerid][CarLinkID] > 0)
	{
		new cplate[255];
		format(cplate, sizeof(cplate), "%s", Player[playerid][Car1Plate]);
		SetVehicleNumberPlate(Player[playerid][CarLinkID], cplate);
		SetVehicleToRespawn(Player[playerid][CarLinkID]);
		SetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
		printf("Vehicle: %d spawned with plate %s", Player[playerid][CarLinkID], Player[playerid][Car1Plate]);
	}
	if(Player[playerid][Car2LinkID] > 0)
	{
	    new cplate[255];
	    format(cplate, sizeof(cplate), "%s", Player[playerid][Car2Plate]);
	    SetVehicleNumberPlate(Player[playerid][Car2LinkID], cplate);
		SetVehicleToRespawn(Player[playerid][Car2LinkID]);
		SetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
	}
	if(Player[playerid][Car3LinkID] > 0)
	{
	    new cplate[255];
	    format(cplate, sizeof(cplate), "%s", Player[playerid][Car3Plate]);
	    SetVehicleNumberPlate(Player[playerid][Car3LinkID], cplate);
		SetVehicleToRespawn(Player[playerid][Car3LinkID]);
		SetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
	}
}*/

/*public TruckerTimer(playerid)
{
 	TogglePlayerControllable(playerid, 1);
 	SendClientMessage(playerid, WHITE, "Your truck has been fully loaded, please drop the off at the checkpoint.");
	return 1;
}

public TruckerTimer1(playerid)
{
 	TogglePlayerControllable(playerid, 1);
 	SendClientMessage(playerid, WHITE, "You have delivered your load, return to the trucker depot to collect your pay!");
	return 1;
}*/

public DisconnectSave(playerid)
{
	SavePlayerData(playerid);
	SaveVehicleHealth(playerid);
	SaveVehicleFuel(playerid);
}

public SavePlayerD(playerid)
{
	SavePlayerData(playerid);
}

/*public FiveSecondTimer(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		new veh = GetPlayerVehicleID(i);
        if(veh == 0)
	    {
	        DestroyProgressBar(Fuel[i]);
	    }
	}
}*/

public SecondTimer()
{

	for(new i=0; i < MAX_PLAYERS; i++)
	{
		if(Player[i][TrashCoolDown] > 0)
	    {
	        Player[i][TrashCoolDown] -= 1;
	    }
	    if(Player[i][TruckerReload] > 0)
	    {
         	Player[i][TruckerReload] -= 1;
	    }
	    if(Player[i][StreetSweeperReload] > 0)
	    {
	        Player[i][StreetSweeperReload] -= 1;
	    }
	    /*if(GetPlayerVehicleID(i) != 0)
	    {
	        new speed = GetPlayerSpeed(i, 0);
	        new vid = GetPlayerVehicleID(i);
	        if(vid == Player[i][CarLinkID])
	        {
				if(speed >= 5)
				{
				    new Float: mileadd;
				    mileadd = speed * 0.25;
				    floatround(mileadd, floatround_ceil);
				    
				    Player[i][Car1Mileage] += mileadd;
				}
	        }
			if(vid == Player[i][Car2LinkID])
			{
			    if(speed >= 5)
				{
					if(speed >= 5)
					{
					    new Float: mileadd;
					    mileadd = speed * 0.25;
					    floatround(mileadd, floatround_ceil);
					    
					    Player[i][Car2Mileage] += mileadd;
					}
				}
			}
			if(vid == Player[i][Car3LinkID])
			{
			    if(speed >= 5)
				{
					if(speed >= 5)
					{
					    new Float: mileadd;
					    mileadd = speed * 0.25;
					    floatround(mileadd, floatround_floor);

					    Player[i][Car3Mileage] += mileadd;
					}
				}
			}
	    }*/
	}
}

public FireTimer()
{
		if(IsThereAFire >= 1)
		{
		    print("[system][WARN] A fire tried to spawn, but there's already one in progress");
		}

		else if(IsThereAFire == 0)
		{
		    new newFire = random(4);

			if(newFire == 0)
			{
				FireID = 0;

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i))
				    {
				        if(Player[i][Group] == 4)
				        {
				        	SendClientMessage(i, WHITE, "{336CF2}911: {FFFFFF}A fire has been reported at {336CF2}the Idlewood Gas Station{FFFFFF}, all units be advised.");
							printf("[system] Fire ID: %d has spawned", newFire);

							IsThereAFire = 1;

							Fire1Object1 = CreateObject(18727, 1941.72717, -1772.91199, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object2 = CreateObject(18727, 1945.52905, -1765.20386, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object3 = CreateObject(18727, 1941.56506, -1766.92468, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object4 = CreateObject(18727, 1936.00769, -1764.97229, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object5 = CreateObject(18727, 1935.02368, -1772.25696, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object6 = CreateObject(18727, 1937.97375, -1776.35229, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object7 = CreateObject(18727, 1937.13306, -1782.90540, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object8 = CreateObject(18727, 1945.90625, -1782.26709, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object9 = CreateObject(18727, 1941.61841, -1785.17175, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object10 = CreateObject(18727, 1929.82922, -1783.47302, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object11 = CreateObject(18727, 1928.57849, -1776.21924, 11.63590,   0.00000, 0.00000, 0.00000);
							Fire1Object12 = CreateObject(18727, 1941.72717, -1772.91199, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object13 = CreateObject(18727, 1945.52905, -1765.20386, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object14 = CreateObject(18727, 1941.56506, -1766.92468, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object15 = CreateObject(18727, 1936.00769, -1764.97229, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object16 = CreateObject(18727, 1935.02368, -1772.25696, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object17 = CreateObject(18727, 1937.97375, -1776.35229, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object18 = CreateObject(18727, 1937.13306, -1782.90540, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object19 = CreateObject(18727, 1945.90625, -1782.26709, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object20 = CreateObject(18727, 1941.61841, -1785.17175, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object21 = CreateObject(18727, 1929.82922, -1783.47302, 7.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object22 = CreateObject(18727, 1928.57849, -1776.21924, 7.00000,   0.00000, 0.00000, 0.00000);
	                        Fire1Object23 = CreateObject(18691, 1941.72717, -1772.91199, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object24 = CreateObject(18691, 1945.52905, -1765.20386, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object25 = CreateObject(18691, 1941.56506, -1766.92468, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object26 = CreateObject(18691, 1936.00769, -1764.97229, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object27 = CreateObject(18691, 1935.02368, -1772.25696, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object28 = CreateObject(18691, 1937.97375, -1776.35229, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object29 = CreateObject(18691, 1937.13306, -1782.90540, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object30 = CreateObject(18691, 1945.90625, -1782.26709, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object31 = CreateObject(18691, 1941.61841, -1785.17175, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object32 = CreateObject(18691, 1929.82922, -1783.47302, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object33 = CreateObject(18691, 1928.57849, -1776.21924, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object34 = CreateObject(18691, 1941.72717, -1772.91199, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object35 = CreateObject(18691, 1945.52905, -1765.20386, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object36 = CreateObject(18691, 1941.56506, -1766.92468, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object37 = CreateObject(18691, 1936.00769, -1764.97229, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object38 = CreateObject(18691, 1935.02368, -1772.25696, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object39 = CreateObject(18691, 1937.97375, -1776.35229, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object40 = CreateObject(18691, 1937.13306, -1782.90540, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object41 = CreateObject(18691, 1945.90625, -1782.26709, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object42 = CreateObject(18691, 1941.61841, -1785.17175, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object43 = CreateObject(18691, 1929.82922, -1783.47302, 11.00000,   0.00000, 0.00000, 0.00000);
							Fire1Object44 = CreateObject(18691, 1928.57849, -1776.21924, 11.00000,   0.00000, 0.00000, 0.00000);
						}
						if(IsPlayerInRangeOfPoint(i, 15, 1942.5907, -1772.1544, 13.3906))
						{
						    SendClientMessage(i, PURPLE, "* You would see a spark flicker and oil leak from the gas pump, the spark igniting the oil - causing a fire at the Gas Station");
						}
					}
				}
			}
			if(newFire == 1)
			{
				FireID = 1;

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i))
				    {
				        if(Player[i][Group] == 4)
				        {
				        	SendClientMessage(i, WHITE, "{336CF2}911: {FFFFFF}A fire has been reported at {336CF2}house 59 in Glen Park{FFFFFF}, all units be advised.");
							printf("[system] Fire ID: %d has spawned", newFire);

							IsThereAFire = 1;

							Fire2Object1 = CreateObject(18691, 2094.96655, -1145.32520, 25.58222,   0.00000, 0.00000, 0.00000);
							Fire2Object2 = CreateObject(18691, 2094.96655, -1145.32520, 24.58222,   0.00000, 0.00000, 0.00000);
							Fire2Object3 = CreateObject(18691, 2095.01514, -1148.30750, 25.58222,   0.00000, 0.00000, 0.00000);
							Fire2Object4 = CreateObject(18691, 2094.75146, -1151.88379, 25.58222,   0.00000, 0.00000, 0.00000);
							Fire2Object5 = CreateObject(18691, 2094.55762, -1141.89673, 24.60420,   0.00000, 0.00000, 0.00000);
							Fire2Object6 = CreateObject(18691, 2096.09937, -1142.39282, 29.14020,   0.00000, 0.00000, 0.00000);
							Fire2Object7 = CreateObject(18691, 2093.89795, -1145.53223, 29.14020,   0.00000, 0.00000, 0.00000);
							Fire2Object8 = CreateObject(18691, 2096.66895, -1147.83289, 29.14020,   0.00000, 0.00000, 0.00000);
							Fire2Object9 = CreateObject(18691, 2093.57275, -1151.26819, 29.14020,   0.00000, 0.00000, 0.00000);
							Fire2Object10 = CreateObject(18691, 2101.54224, -1140.96167, 29.72220,   0.00000, 0.00000, 0.00000);
							Fire2Object11 = CreateObject(18691, 2099.92261, -1143.35242, 30.30420,   0.00000, 0.00000, 0.00000);
							Fire2Object12 = CreateObject(18691, 2099.60596, -1149.58728, 33.21420,   0.00000, 0.00000, 0.00000);
							Fire2Object13 = CreateObject(18691, 2094.96655, -1145.32520, 20.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object14 = CreateObject(18691, 2095.01514, -1148.30750, 21.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object15 = CreateObject(18691, 2094.75146, -1151.88379, 21.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object16 = CreateObject(18691, 2094.55762, -1141.89673, 21.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object17 = CreateObject(18691, 2096.09937, -1142.39282, 26.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object18 = CreateObject(18691, 2093.89795, -1145.53223, 28.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object19 = CreateObject(18691, 2096.66895, -1147.83289, 30.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object20 = CreateObject(18691, 2093.57275, -1151.26819, 26.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object21 = CreateObject(18691, 2101.54224, -1140.96167, 27.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object22 = CreateObject(18691, 2099.92261, -1143.35242, 30.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object23 = CreateObject(18691, 2099.60596, -1149.58728, 30.0000,   0.00000, 0.00000, 0.00000);
							Fire2Object24 = CreateObject(18727, 2099.43823, -1142.26233, 29.32525,   0.00000, 0.00000, 0.00000);
							Fire2Object25 = CreateObject(18727, 2095.98633, -1152.46106, 27.57930,   0.00000, 0.00000, 0.00000);
	                    }
						if(IsPlayerInRangeOfPoint(i, 15, 2095.98633, -1152.46106, 27.57930))
						{
						    SendClientMessage(i, PURPLE, "* You would here a fire alarm ringing from the house, shortly followed by thick black smoke and fire through the windows.");
						}
					}
				}
			}
			/*if(newFire == 2)
			{
				FireID = 2;

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i))
				    {
				        if(Player[i][Group] == 4)
				        {
				        	SendClientMessage(i, WHITE, "{336CF2}911: {FFFFFF}A fire has been reported at {336CF2}house 352 in El Corona{FFFFFF}, all units be advised.");
							printf("[system] Fire ID: %d has spawned", newFire);

							IsThereAFire = 1;

							Fire3Object1 = CreateObject(18691, 1715.19495, -2099.51367, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object2 = CreateObject(18691, 1713.18616, -2091.42847, 17.44650,   0.00000, 0.00000, 0.00000);
							Fire3Object3 = CreateObject(18691, 1709.25061, -2090.54810, 17.05850,   0.00000, 0.00000, 0.00000);
							Fire3Object4 = CreateObject(18691, 1705.78906, -2090.64014, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object5 = CreateObject(18691, 1707.74829, -2093.05005, 17.05850,   0.00000, 0.00000, 0.00000);
							Fire3Object6 = CreateObject(18691, 1706.20862, -2095.58716, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object7 = CreateObject(18691, 1708.38794, -2097.89966, 17.05850,   0.00000, 0.00000, 0.00000);
							Fire3Object8 = CreateObject(18691, 1705.89758, -2100.19556, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object9 = CreateObject(18691, 1716.24207, -2091.92871, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object10 = CreateObject(18691, 1715.49915, -2095.55737, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object11 = CreateObject(18691, 1710.10950, -2102.23682, 16.08850,   0.00000, 0.00000, 0.00000);
							Fire3Object12 = CreateObject(18691, 1712.51392, -2102.04028, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object13 = CreateObject(18691, 1716.33789, -2102.60059, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object14 = CreateObject(18691, 1712.35425, -2098.32593, 17.44650,   0.00000, 0.00000, 0.00000);
							Fire3Object15 = CreateObject(18691, 1713.07336, -2101.55444, 12.79050,   0.00000, 0.00000, 0.00000);
							Fire3Object16 = CreateObject(18691, 1706.14368, -2101.43384, 12.79050,   0.00000, 0.00000, 0.00000);
							Fire3Object17 = CreateObject(18691, 1707.50317, -2102.11377, 12.20850,   0.00000, 0.00000, 0.00000);
							Fire3Object18 = CreateObject(18691, 1715.36877, -2101.90186, 12.20850,   0.00000, 0.00000, 0.00000);
							Fire3Object19 = CreateObject(18691, 1719.00854, -2101.84790, 12.20850,   0.00000, 0.00000, 0.00000);
							Fire3Object20 = CreateObject(18727, 1706.20862, -2095.58716, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object21 = CreateObject(18727, 1715.19495, -2099.51367, 16.67050,   0.00000, 0.00000, 0.00000);
	                    }
						if(IsPlayerInRangeOfPoint(i, 15, 1705.89758, -2100.19556, 16.47650))
						{
						    SendClientMessage(i, PURPLE, "* You would begin to hear a fire alarm ringing from the house, shortly followed by thick black smoke and fire blazing from the house window.");
						}
					}
				}
			}*/

			if(newFire == 3)
			{
				FireID = 3;

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i))
				    {
				        if(Player[i][Group] == 4)
				        {
				        	SendClientMessage(i, WHITE, "{336CF2}911: {FFFFFF}A fire has been reported at {336CF2}house 352 in El Corona{FFFFFF}, all units be advised.");
							printf("[system] Fire ID: %d has spawned", newFire);

							IsThereAFire = 1;

							Fire3Object1 = CreateObject(18691, 1715.19495, -2099.51367, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object2 = CreateObject(18691, 1713.18616, -2091.42847, 17.44650,   0.00000, 0.00000, 0.00000);
							Fire3Object3 = CreateObject(18691, 1709.25061, -2090.54810, 17.05850,   0.00000, 0.00000, 0.00000);
							Fire3Object4 = CreateObject(18691, 1705.78906, -2090.64014, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object5 = CreateObject(18691, 1707.74829, -2093.05005, 17.05850,   0.00000, 0.00000, 0.00000);
							Fire3Object6 = CreateObject(18691, 1706.20862, -2095.58716, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object7 = CreateObject(18691, 1708.38794, -2097.89966, 17.05850,   0.00000, 0.00000, 0.00000);
							Fire3Object8 = CreateObject(18691, 1705.89758, -2100.19556, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object9 = CreateObject(18691, 1716.24207, -2091.92871, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object10 = CreateObject(18691, 1715.49915, -2095.55737, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object11 = CreateObject(18691, 1710.10950, -2102.23682, 16.08850,   0.00000, 0.00000, 0.00000);
							Fire3Object12 = CreateObject(18691, 1712.51392, -2102.04028, 16.67050,   0.00000, 0.00000, 0.00000);
							Fire3Object13 = CreateObject(18691, 1716.33789, -2102.60059, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object14 = CreateObject(18691, 1712.35425, -2098.32593, 17.44650,   0.00000, 0.00000, 0.00000);
							Fire3Object15 = CreateObject(18691, 1713.07336, -2101.55444, 12.79050,   0.00000, 0.00000, 0.00000);
							Fire3Object16 = CreateObject(18691, 1706.14368, -2101.43384, 12.79050,   0.00000, 0.00000, 0.00000);
							Fire3Object17 = CreateObject(18691, 1707.50317, -2102.11377, 12.20850,   0.00000, 0.00000, 0.00000);
							Fire3Object18 = CreateObject(18691, 1715.36877, -2101.90186, 12.20850,   0.00000, 0.00000, 0.00000);
							Fire3Object19 = CreateObject(18691, 1719.00854, -2101.84790, 12.20850,   0.00000, 0.00000, 0.00000);
							Fire3Object20 = CreateObject(18727, 1706.20862, -2095.58716, 16.47650,   0.00000, 0.00000, 0.00000);
							Fire3Object21 = CreateObject(18727, 1715.19495, -2099.51367, 16.67050,   0.00000, 0.00000, 0.00000);
	                    }
						if(IsPlayerInRangeOfPoint(i, 15, 1705.89758, -2100.19556, 16.47650))
						{
						    SendClientMessage(i, PURPLE, "* You would begin to hear a fire alarm ringing from the house, shortly followed by thick black smoke and fire blazing from the house window.");
						}
					}
				}
			}

			if(newFire == 2)
			{
				FireID = 2;

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i))
				    {
				        if(Player[i][Group] == 4)
				        {
				        	SendClientMessage(i, WHITE, "{336CF2}911: {FFFFFF}A fire has been reported at {336CF2}the Willowfield Dump{FFFFFF}, all units be advised.");
							printf("[system] Fire ID: %d has spawned", newFire);

							IsThereAFire = 1;

							Fire4Object1 = CreateObject(18691, 2115.09277, -2004.43005, 23.23090,   0.00000, 0.00000, 0.00000);
							Fire4Object2 = CreateObject(18691, 2113.91553, -2007.35486, 20.32090,   0.00000, 0.00000, 0.00000);
							Fire4Object3 = CreateObject(18691, 2111.40552, -2005.46936, 20.51490,   0.00000, 0.00000, 0.00000);
							Fire4Object4 = CreateObject(18691, 2109.78760, -2006.24402, 16.24690,   0.00000, 0.00000, 0.00000);
							Fire4Object5 = CreateObject(18691, 2111.80103, -2002.82544, 22.26090,   0.00000, 0.00000, 0.00000);
							Fire4Object6 = CreateObject(18691, 2111.58325, -2007.51318, 16.24690,   0.00000, 0.00000, 0.00000);
							Fire4Object7 = CreateObject(18691, 2113.65479, -2010.93848, 16.24690,   0.00000, 0.00000, 0.00000);
							Fire4Object8 = CreateObject(18691, 2113.83789, -2014.73755, 16.24690,   0.00000, 0.00000, 0.00000);
							Fire4Object9 = CreateObject(18691, 2116.13989, -2018.74731, 16.24690,   0.00000, 0.00000, 0.00000);
							Fire4Object10 = CreateObject(18691, 2116.80103, -2014.76160, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object11 = CreateObject(18691, 2119.76465, -2011.48828, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object12 = CreateObject(18691, 2121.71753, -2011.09485, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object13 = CreateObject(18691, 2118.73340, -2009.47461, 22.72890,   0.00000, 0.00000, 0.00000);
							Fire4Object14 = CreateObject(18691, 2117.56641, -2007.98596, 22.72890,   0.00000, 0.00000, 0.00000);
							Fire4Object15 = CreateObject(18691, 2120.38281, -2004.09595, 25.09690,   0.00000, 0.00000, 0.00000);
							Fire4Object16 = CreateObject(18691, 2118.11987, -2004.96765, 23.91290,   0.00000, 0.00000, 0.00000);
							Fire4Object17 = CreateObject(18691, 2121.88916, -2006.45044, 23.91290,   0.00000, 0.00000, 0.00000);
							Fire4Object18 = CreateObject(18691, 2121.21606, -2008.10767, 23.61690,   0.00000, 0.00000, 0.00000);
							Fire4Object19 = CreateObject(18691, 2123.35645, -2008.99280, 22.72890,   0.00000, 0.00000, 0.00000);
							Fire4Object20 = CreateObject(18691, 2126.21509, -2009.29724, 21.54490,   0.00000, 0.00000, 0.00000);
							Fire4Object21 = CreateObject(18691, 2124.78564, -2010.80176, 21.24890,   0.00000, 0.00000, 0.00000);
							Fire4Object22 = CreateObject(18691, 2124.88306, -2007.55554, 23.02490,   0.00000, 0.00000, 0.00000);
							Fire4Object23 = CreateObject(18691, 2126.34033, -2002.46790, 23.02490,   0.00000, 0.00000, 0.00000);
							Fire4Object24 = CreateObject(18691, 2125.94263, -1999.96692, 23.02490,   0.00000, 0.00000, 0.00000);
							Fire4Object25 = CreateObject(18691, 2128.06152, -1999.41309, 21.84090,   0.00000, 0.00000, 0.00000);
							Fire4Object26 = CreateObject(18691, 2128.43213, -2002.24548, 21.84090,   0.00000, 0.00000, 0.00000);
							Fire4Object27 = CreateObject(18691, 2126.21875, -1995.03516, 22.13690,   0.00000, 0.00000, 0.00000);
							Fire4Object28 = CreateObject(18691, 2124.24902, -1995.38965, 22.72890,   0.00000, 0.00000, 0.00000);
							Fire4Object29 = CreateObject(18691, 2124.10962, -1992.55164, 22.72890,   0.00000, 0.00000, 0.00000);
							Fire4Object30 = CreateObject(18691, 2121.77686, -2002.23816, 24.80090,   0.00000, 0.00000, 0.00000);
							Fire4Object31 = CreateObject(18691, 2121.52930, -1999.91040, 24.80090,   0.00000, 0.00000, 0.00000);
							Fire4Object32 = CreateObject(18691, 2121.16602, -1998.27966, 24.80090,   0.00000, 0.00000, 0.00000);
							Fire4Object33 = CreateObject(18691, 2118.55420, -2001.63354, 25.39290,   0.00000, 0.00000, 0.00000);
							Fire4Object34 = CreateObject(18691, 2116.31055, -1998.54602, 23.32090,   0.00000, 0.00000, 0.00000);
							Fire4Object35 = CreateObject(18691, 2115.03760, -2001.02942, 23.32090,   0.00000, 0.00000, 0.00000);
							Fire4Object36 = CreateObject(18691, 2118.42554, -1994.89099, 23.32090,   0.00000, 0.00000, 0.00000);
							Fire4Object37 = CreateObject(18691, 2119.90259, -1988.88708, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object38 = CreateObject(18691, 2117.34424, -1991.55151, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object39 = CreateObject(18691, 2117.22266, -1988.57654, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object40 = CreateObject(18727, 2119.30737, -2000.62390, 25.39290,   0.00000, 0.00000, 0.00000);
							Fire4Object41 = CreateObject(18727, 2118.29224, -2013.56128, 20.95290,   0.00000, 0.00000, 0.00000);
							Fire4Object42 = CreateObject(18727, 2109.02979, -2000.99658, 18.41290,   0.00000, 0.00000, 0.00000);
	                    }
						if(IsPlayerInRangeOfPoint(i, 15, 2109.02979, -2000.99658, 18.41290))
						{
						    SendClientMessage(i, PURPLE, "* You would see a spark flicker from the pile, iginiting all of the garbage - quickly causing a fire upon the garbage.");
						}
				}
			}
		}
	}
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetObjectPos(objectid, oldX, oldY, oldZ);
	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	if(!playerobject)
	{
	    if(!IsValidObject(objectid)) return 1;
	    SetObjectPos(objectid, fX, fY, fZ);
     	SetObjectRot(objectid, fRotX, fRotY, fRotZ);
	}

	if(response == EDIT_RESPONSE_FINAL)
	{
	    new fid = ChosenObjectFRID[playerid];
	    new query[256], fields, rows;
		mysql_format(mysql, query, sizeof(query), "SELECT * FROM furniture WHERE ID = %d", fid);
	 	mysql_store_result();
	 	cache_get_data(rows, fields);
	    if(ChosenOwnedObject[playerid] == 1)
	    {
	        Furniture[fid][frX] = fX;
	        Furniture[fid][frY] = fY;
	        Furniture[fid][frZ] = fZ;
	        Furniture[fid][frrX] = fRotX;
	        Furniture[fid][frrY] = fRotY;
	        Furniture[fid][frrZ] = fRotZ;
	        ChosenOwnedObject[playerid] = 0;
	        SaveFurniture(fid);
	        MoveDynamicObject(Furniture[fid][Object], fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
	        ChosenObjectFRID[playerid] = -1;
			if(Furniture[fid][frObjectID] == 3383)
            {
                new string[128];
                Houses[Player[playerid][House]][CocaineTables]++;
                format(string, sizeof(string), "Drug Lab\nAmount: %d/50\nState: %d/60", Furniture[fid][GrowingCocaineAmount], Furniture[fid][CocaineGrowth]);
                Furniture[fid][CocaineText] = Create3DTextLabel(string, WHITE, Furniture[fid][frX], Furniture[fid][frY], Furniture[fid][frZ], 25.0, Furniture[fid][frVW], 0);
            }
			if(Furniture[fid][frObjectID] == 637)
			{
				new string[128];
				format(string, sizeof(string), "Planter\nAmount: %d/10\nState: %d/30", Furniture[fid][GrowingCocaineAmount], Furniture[fid][CocaineGrowth]);
                Furniture[fid][CocaineText] = Create3DTextLabel(string, WHITE, Furniture[fid][frX], Furniture[fid][frY], Furniture[fid][frZ], 25.0, Furniture[fid][frVW], 0);
			}
	        SendClientMessage(playerid, WHITE, "Successfully moved your furniture");
	    }
		if(FurnitureEditing[playerid] == 1)
		{
		    if(Player[playerid][Money] >= ChosenObjectPrice[playerid])
		    {
		        Player[playerid][Money] -= ChosenObjectPrice[playerid];
		        Furniture[fid][frObjectID] = ChosenObject[playerid];
		        Furniture[fid][frActive] = 1;
		        Furniture[fid][frX] = fX;
		        Furniture[fid][frY] = fY;
		        Furniture[fid][frZ] = fZ;
		        Furniture[fid][frrX] = fRotX;
		        Furniture[fid][frrY] = fRotY;
		        Furniture[fid][frrZ] = fRotZ;
		        Furniture[fid][frVW] = GetPlayerVirtualWorld(playerid);
				ChosenObjectPrice[playerid] = 0;
				FurnitureEditing[playerid] = 0;
		        if(rows)
		        {
		            SaveFurniture(ChosenObjectFRID[playerid]);
				}
				else
				{
				    format(query, sizeof(query), "INSERT INTO furniture (ID) VALUES (%d)", ChosenObjectFRID[playerid]);
		        	mysql_query(mysql, query);
		        	Furniture[fid][frExists] = 1;
		        	SaveFurniture(ChosenObjectFRID[playerid]);
				}
				if(Furniture[fid][frObjectID] == 3383)
                {
                    new string[128];
                    ActiveCocaineTables[Player[playerid][House]]++;
                    format(string, sizeof(string), "Drug Lab\nAmount: %d/50\nState: %d/60", Furniture[fid][GrowingCocaineAmount], Furniture[fid][CocaineGrowth]);
                    Furniture[fid][CocaineText] = Create3DTextLabel(string, WHITE, Furniture[fid][frX], Furniture[fid][frY], Furniture[fid][frZ], 25.0, Furniture[fid][frVW], 0);
                }
				if(Furniture[fid][frObjectID] == 637)
				{
					new string[128];
					ActivePlanters[Player[playerid][House]]++;
					format(string, sizeof(string), "Planter\nAmount: %d/10\nState: %d/30", Furniture[fid][GrowingCocaineAmount], Furniture[fid][CocaineGrowth]);
                    Furniture[fid][CocaineText] = Create3DTextLabel(string, WHITE, Furniture[fid][frX], Furniture[fid][frY], Furniture[fid][frZ], 25.0, Furniture[fid][frVW], 0);
				}
		        SendClientMessage(playerid, WHITE, "You have succesfully bought and placed your new furniture.");

		        MoveDynamicObject(Furniture[fid][Object], fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
		    }
		    else
		    {
		        DestroyDynamicObject(Furniture[ChosenObjectFRID[playerid]][Object]);
			    Furniture[ChosenObjectFRID[playerid]][frActive] = 0;
			    FurnitureEditing[playerid] = 0;
			    Furniture[ChosenObjectFRID[playerid]][frActive] = 0;
			    ChosenObjectFRID[playerid] = 0;
			    ChosenObject[playerid] = -1;
			    ChosenObjectPrice[playerid] = 0;
		        SendClientMessage(playerid, WHITE, "You don't have enough money on you for this object.");
		    }
		}
		mysql_free_result();
 	}

	if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(FurnitureEditing[playerid] == 1)
		{
		    DestroyDynamicObject(Furniture[ChosenObjectFRID[playerid]][Object]);
		    Furniture[ChosenObjectFRID[playerid]][frActive] = 0;
		    FurnitureEditing[playerid] = 0;
		    Furniture[ChosenObjectFRID[playerid]][frActive] = 0;
		    ChosenObjectFRID[playerid] = 0;
		    ChosenObject[playerid] = -1;
		    ChosenObjectPrice[playerid] = 0;
		}
		else
		{
			if(!playerobject)
			{
				SetObjectPos(objectid, oldX, oldY, oldZ);
				SetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			}
			else
			{
				SetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);
				SetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);
			}
		}
	}
	return 1;
}

command(collectpizzapay, playerid, params[])
{
    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(Jobs[Player[playerid][Job]][JobType] == 10)
	{
	    if(model == 448)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 5.0, Jobs[10][JobMiscLocationOneX], Jobs[10][JobMiscLocationOneY], Jobs[10][JobMiscLocationOneZ]))
			{
				new moneyrand = random(80);
				if(moneyrand >= 15)
				{
					new string[128];
					format(string, sizeof(string), "You have collected $%d for delivering pizza!", moneyrand);
                    SendClientMessage(playerid, WHITE, string);
					Player[playerid][Money] += moneyrand;
                    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                    DisablePlayerCheckpoint(playerid);
				}
				else
				{
				    new string[128];
					format(string, sizeof(string), "You have collected $%d for delivering pizza!", 18);
					SendClientMessage(playerid, WHITE, string);
					Player[playerid][Money] += 47;
                    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                    DisablePlayerCheckpoint(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need to be at the collection point to collect your money.");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need to be on your bike to collect your payment.");
		}
	}
}

command(deliverpizza, playerid, params[])
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(Jobs[Player[playerid][Job]][JobType] == 10)
	{
	    if(model == 448)
	    {
	        new rand = random(SpawnedHouses);
	        new string[128];
	        PizzaDelivery[playerid] = 1;
			if(rand < 20)
			{
				rand = 36;
			}

			format(string, sizeof(string), "Deliver this pizza to house %d, then head back to collect your pay!", rand);
			SendClientMessage(playerid, YELLOW, string);
			SetPlayerCheckpoint(playerid, Houses[rand][hExteriorX], Houses[rand][hExteriorY], Houses[rand][hExteriorZ], 5.0);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You need to be on a pizza boy to deliver pizza!");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be a pizza boy to deliver pizza!");
	}
}

CMD:checktime(playerid)
{
	new string[128], watch[128], hour, minute;
	GetPlayerTime(playerid, hour, minute);
	format(string, sizeof(string), "* %s lifts his arm, checking his watch.", GetName(playerid));
	NearByMessage(playerid, PURPLE, string);
	if(minute < 10)
	{
		new fixedminute;
		switch(minute)
		{
			case 0:
			{
				fixedminute = 00;
			}
			case 1:
			{
				fixedminute = 01;
			}
			case 2:
			{
				fixedminute = 02;
			}
			case 3:
			{
				fixedminute = 03;
			}
			case 4:
			{
				fixedminute = 04;
			}
			case 5:
			{
				fixedminute = 05;
			}
			case 6:
			{
				fixedminute = 06;
			}
			case 7:
			{
				fixedminute = 07;
			}
			case 8:
			{
				fixedminute = 08;
			}
			case 9:
			{
				fixedminute = 09;
			}
		}
		format(watch, sizeof(watch), "The time is currently: %d:%d", hour, fixedminute);
		SendClientMessage(playerid, WHITE, watch);
	}
	else{
		format(watch, sizeof(watch), "The time is currently: %d:%d", hour, minute);
		SendClientMessage(playerid, WHITE, watch);
	}
	return 1;
}

CMD:checkmileage(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        new vid = GetPlayerVehicleID(playerid);
	        new string[128], mileage[128];
	        format(string, sizeof(string), "* %s has checked the vehicle's mileage.", GetName(playerid));
	        if(vid == Player[i][CarLinkID])
	        {
	            format(mileage, sizeof(mileage), "Mileage: %dKM", Player[i][Car1Mileage]);
	            NearByMessage(playerid, PURPLE, string);
	            SendClientMessage(playerid, WHITE, mileage);
	            
	            break;
	        }
	        if(vid == Player[i][Car2LinkID])
	        {
	            format(mileage, sizeof(mileage), "Mileage: %dKM", Player[i][Car2Mileage]);
	            NearByMessage(playerid, PURPLE, string);
	            SendClientMessage(playerid, WHITE, mileage);
	            
	            break;
	        }
	        if(vid == Player[i][Car3LinkID])
	        {
	            format(mileage, sizeof(mileage), "Mileage: %dKM", Player[i][Car3Mileage]);
	            NearByMessage(playerid, PURPLE, string);
	            SendClientMessage(playerid, WHITE, mileage);
	            
	            break;
	        }
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not in any vehicle.");
	}
}

CMD:radar(playerid)
{
	if(Player[playerid][Group] == 1)
	{
		if(GetPlayerVehicleID(playerid) != 0)
		{
			if(Player[playerid][EnabledRadar] == 0)
			{
                Player[playerid][EnabledRadar] = 1;
				new string[128];
				format(string, sizeof(string), "* %s flips a switch, turning on the radar.", GetName(playerid));
				NearByMessage(playerid, PURPLE, string);
			}
			else
			{
			    Player[playerid][EnabledRadar] = 0;
				new string[128];
				format(string, sizeof(string), "* %s flips a switch, turning off the radar.", GetName(playerid));
				NearByMessage(playerid, PURPLE, string);
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You can only use the radar in vehicles.");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not in the RCSD/Government.");
	}
}

CMD:dice(playerid)
{
	new string[255];
	new rand = random(7);
	if(rand == 0)
	{
	    rand = 4;
	}
	format(string, sizeof(string), "* %s has thrown a die and it landed on %d", GetName(playerid), rand);
	NearByMessage(playerid, PURPLE, string);
	return 1;
}

CMD:resetweapons(playerid)
{
	if(Player[playerid][AdminLevel] >= 1)
	{
	    ResetPlayerWeaponsEx(playerid);
	}
	return 1;
}

CMD:lockgarage(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(Garage[i][gLinkedHouse] == Player[playerid][House])
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 5.0, Garage[i][gExteriorX], Garage[i][gExteriorY], Garage[i][gExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 5.0, Garage[i][gInteriorX], Garage[i][gInteriorY], Garage[i][gInteriorZ]))
	        {
	            new string[128];
	            if(Garage[i][gLockedStatus] == 1)
	            {
	            	format(string, sizeof(string), "* %s places the lock onto the garage, locking it.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);
	            	Garage[i][gLockedStatus] = 0;
				}
				else
				{
				    format(string, sizeof(string), "* %s removes the lock from the garage, unlocking it.", GetName(playerid));
                    NearByMessage(playerid, PURPLE, string);
	            	Garage[i][gLockedStatus] = 1;
	            }
	            break;
	        }
	    }
	}
	return 1;
}

CMD:exitgarage(playerid)
{
	/*if(IsPlayerInRangeOfPoint(playerid, 10.0, 1089.2271, 2082.8301, 10.8203))
	{
		if(Player[playerid][Group] == 5)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vid = GetPlayerVehicleID(playerid);
				SetVehiclePos(vid, 1219.8845, 189.2528, 19.9203);
				Player[playerid][InGroupHQ] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, Groups[5][HQExteriorID]);
				SetPlayerPos(playerid, 1219.8845, 189.2528, 19.9203);
				SetVehicleVirtualWorld(vid, 0);
				PutPlayerInVehicle(playerid, vid, 0);
			}
			else
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, Groups[5][HQExteriorID]);
				SetPlayerPos(playerid, 1219.8845, 189.2528, 19.9203);
				Player[playerid][InGroupHQ] = 5;
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not in the correct group to use this command.");
		}
	}*/
	if(Player[playerid][IsInGarage] >= 0)
	{
		Player[playerid][InHouse] = 0;
	    if(GetPlayerVehicleID(playerid) == 0)
	    {
	        new i = Player[playerid][IsInGarage];
	        SetPlayerPos(playerid, Garage[i][gExteriorX], Garage[i][gExteriorY], Garage[i][gExteriorZ]);
	        SetPlayerVirtualWorld(playerid, 0);
	        SendClientMessage(playerid, WHITE, "You have exited the garage.");

	        Player[playerid][IsInGarage] = -1;
	    }
	    else
	    {
	        new i = Player[playerid][IsInGarage];
	        new vid = GetPlayerVehicleID(playerid);
	        SetVehicleVirtualWorld(vid, 0);
	        SetVehiclePos(vid, Garage[i][gExteriorX], Garage[i][gExteriorY], Garage[i][gExteriorZ]);
	        SetPlayerVirtualWorld(playerid, 0);
	        PutPlayerInVehicle(playerid, vid, 0);
	        SetVehicleZAngle(vid, Player[playerid][zAngleBefore]);
	        SendClientMessage(playerid, WHITE, "You have exited the garage.");

	        Player[playerid][IsInGarage] = -1;
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not in a garage.");
	}
	return 1;
}

CMD:entergarage(playerid, params[])
{
	/*if(IsPlayerInRangeOfPoint(playerid, 10.0, 1219.8845, 189.2528, 19.9203))
	{
		if(Player[playerid][Group] == 5)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vid = GetPlayerVehicleID(playerid);
				SetVehiclePos(vid, 1089.2271, 2082.8301, 10.8203);
				Player[playerid][InGroupHQ] = 5;
				SetPlayerVirtualWorld(playerid, 45000+5);
				SetPlayerInterior(playerid, Groups[5][HQInteriorID]);
				SetPlayerPos(playerid, 1089.2271, 2082.8301, 10.8203);
				SetVehicleVirtualWorld(vid, 45000+5);
				PutPlayerInVehicle(playerid, vid, 0);
			}
			else
			{
				SetPlayerPos(playerid, 1089.2271, 2082.8301, 10.8203);
				SetPlayerVirtualWorld(playerid, 45000+5);
				SetPlayerInterior(playerid, Groups[5][HQInteriorID]);
				SetPlayerPos(playerid, 1089.2271, 2082.8301, 10.8203);
				Player[playerid][InGroupHQ] = 5;
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not in the correct group to use this command.");
		}
	}*/
	for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, Garage[i][gExteriorX], Garage[i][gExteriorY], Garage[i][gExteriorZ]))
	    {
	        if(Garage[i][gLockedStatus] == 1)
	        {
				Player[playerid][IsInGarage] = Garage[i][gID];
				new string[128], gvw;
				gvw = 50000+Garage[i][gLinkedHouse];
				
				if(Garage[i][gLinkedHouse] == Player[playerid][House])
				{
					Player[playerid][InHouse] = Player[playerid][House];
				}
				
				if(GetPlayerVehicleID(playerid) == 0)
				{
				    format(string, sizeof(string), "* %s walks into the garage.", GetName(playerid));
				    NearByMessage(playerid, PURPLE, string);
				    SetPlayerPos(playerid, Garage[i][gInteriorX], Garage[i][gInteriorY], Garage[i][gInteriorZ]);
					SetPlayerVirtualWorld(playerid, gvw);
					GetPlayerFacingAngle(playerid, Player[playerid][zAngleBefore]);
					SendClientMessage(playerid, YELLOW, "Type /exitgarage to exit it.");
				}
				else
				{
				    format(string, sizeof(string), "* %s accelerates into the garage.", GetName(playerid));
                    NearByMessage(playerid, PURPLE, string);
					new vid = GetPlayerVehicleID(playerid);
					GetVehicleZAngle(vid, Player[playerid][zAngleBefore]);
					SetVehicleZAngle(vid, 90.0);
					SetVehiclePos(vid, Garage[i][gInteriorX], Garage[i][gInteriorY], Garage[i][gInteriorZ]);
					SetVehicleVirtualWorld(vid, gvw);
					SetPlayerVirtualWorld(playerid, gvw);
					PutPlayerInVehicle(playerid, vid, 0);
					SendClientMessage(playerid, YELLOW, "Type /exitgarage to exit it.");
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "This garage is locked.");
	        }
	        break;
	    }
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new houseid, Float: px, Float: py, Float: pz, garagetype;
	if(Player[playerid][AdminLevel] >= 5)
	{
	    if(sscanf(params, "dd", houseid, garagetype)) return SendClientMessage(playerid, WHITE, "SYNTAX: /creategarage [house id] [garage type] || Garage Types: 1 (Sweet's Garage)");
	    {
	        if(houseid > 0 && garagetype > 0)
	        {
	            if(garagetype == 1)
	            {
		            new query[128], string[128];
		            GetPlayerPos(playerid, px, py, pz);
		            format(string, sizeof(string), "Garage %d\n(( /entergarage ))", SpawnedGarages);
		            Garage[SpawnedGarages][gID] = SpawnedGarages;
		            Garage[SpawnedGarages][gExteriorX] = px;
		            Garage[SpawnedGarages][gExteriorY] = py;
		            Garage[SpawnedGarages][gExteriorZ] = pz;
		            Garage[SpawnedGarages][gInteriorX] = 2524.0925;
		            Garage[SpawnedGarages][gInteriorY] = -1673.8125;
		            Garage[SpawnedGarages][gInteriorZ] = 14.8600;
		            Garage[SpawnedGarages][gLinkedHouse] = houseid;
		            Garage[SpawnedGarages][gText] = Create3DTextLabel(string, WHITE, Garage[SpawnedGarages][gExteriorX], Garage[SpawnedGarages][gExteriorY], Garage[SpawnedGarages][gExteriorZ], 25.0, 0, 1);
                    mysql_format(mysql, query, sizeof(query), "INSERT INTO garages (gID) VALUES (%d)", SpawnedGarages);
		            mysql_query(mysql, query);
		            SaveGarage(SpawnedGarages);
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "Is it so fucking difficult to type a 1.");
				}

	            SpawnedGarages++;
	        }
	        else
			{
				SendClientMessage(playerid, WHITE, "The house id or the garagetype needs to be higher than 0.");
			}
	    }
	}
	return 1;
}

CMD:aremovemask(playerid, params[])
{
	new id;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid, WHITE, "SYNTAX: /aremovemask [ID]");
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsUsingMask[id] == 1)
		    {
		        SetPlayerName(id, Player[id][NormalName]);
				SendClientMessage(id, RED, "Your mask has been removed by a moderator or administrator.");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not using a mask.");
		    }
		}
	}
	return 1;
}

CMD:cstore(playerid)
{
	new Float: vx, Float: vy, Float: vz;
	for(new i=0; i < MAX_VEHICLES; i++)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			GetVehiclePos(Vehicles[i][GameID], vx, vy, vz);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, vx, vy, vz))
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
				LastEnteredCar[playerid] = i;
				if(boot == 1)
				{
					if(Vehicles[i][CarGroup] == Player[playerid][Group])
					{
						new string[512], wep1[128], wep2[128], wep3[128];
						if(Vehicles[i][CarTrunk1] == 0)
						{
							format(wep1, sizeof(wep1), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[i][CarTrunk1], wep1, sizeof(wep1));
						}
						if(Vehicles[i][CarTrunk2] == 0)
						{
							format(wep2, sizeof(wep2), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[i][CarTrunk2], wep2, sizeof(wep2));
						}
						if(Vehicles[i][CarTrunk3] == 0)
						{
							format(wep3, sizeof(wep3), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[i][CarTrunk3], wep3, sizeof(wep3));
						}
						new model = GetVehicleModel(Vehicles[i][GameID]);
						switch(model)
						{
							case 468:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 461:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 463:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 586:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 521 .. 523:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 440: // Rumpo
							{
								LastEnteredCarCapacity[playerid] = 7500;
							}
							case 482: // Burrito
							{
								LastEnteredCarCapacity[playerid] = 5000;
							}
							case 499:
							{
								LastEnteredCarCapacity[playerid] = 15000;
							}
							default:
							{
								LastEnteredCarCapacity[playerid] = 2500;
							}
						}
						format(string, sizeof(string), "%s\n%s\n%s\nMaterials: %d/%d\nPot: %dG/%dG\nCocaine: %dG/%dG", wep1, wep2, wep3, Vehicles[i][CarMaterials], LastEnteredCarCapacity[playerid], Vehicles[i][CarPot], LastEnteredCarCapacity[playerid], Vehicles[i][CarCocaine], LastEnteredCarCapacity[playerid]);
						ShowPlayerDialog(playerid, 1600, DIALOG_STYLE_LIST, "Trunk", string, "Choose", "Cancel");
					}
					else if(Vehicles[i][GameID] == Player[playerid][CarLinkID] || Vehicles[i][GameID] ==  Player[playerid][Car2LinkID] || Vehicles[i][GameID] ==  Player[playerid][Car3LinkID])
					{
						new string[512], wep1[128], wep2[128], wep3[128];
						if(Vehicles[i][CarTrunk1] == 0)
						{
							format(wep1, sizeof(wep1), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[i][CarTrunk1], wep1, sizeof(wep1));
						}
						if(Vehicles[i][CarTrunk2] == 0)
						{
							format(wep2, sizeof(wep2), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[i][CarTrunk2], wep2, sizeof(wep2));
						}
						if(Vehicles[i][CarTrunk3] == 0)
						{
							format(wep3, sizeof(wep3), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[i][CarTrunk3], wep3, sizeof(wep3));
						}
						new model = GetVehicleModel(Vehicles[i][GameID]);
						switch(model)
						{
							case 468:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 461:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 463:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 586:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 521 .. 523:
							{
								LastEnteredCarCapacity[playerid] = 500;
							}
							case 440: // Rumpo
							{
								LastEnteredCarCapacity[playerid] = 7500;
							}
							case 482: // Burrito
							{
								LastEnteredCarCapacity[playerid] = 5000;
							}
							case 499:
							{
								LastEnteredCarCapacity[playerid] = 15000;
							}
							default:
							{
								LastEnteredCarCapacity[playerid] = 2500;
							}
						}
						format(string, sizeof(string), "%s\n%s\n%s\nMaterials: %d/%d\nPot: %dG/%dG\nCocaine: %dG/%dG", wep1, wep2, wep3, Vehicles[i][CarMaterials], LastEnteredCarCapacity[playerid], Vehicles[i][CarPot], LastEnteredCarCapacity[playerid], Vehicles[i][CarCocaine], LastEnteredCarCapacity[playerid]);
						ShowPlayerDialog(playerid, 1600, DIALOG_STYLE_LIST, "Trunk", string, "Choose", "Cancel");
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You don't have the keys to this vehicle.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You need to open your trunk!");
				}
				break;
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You need to be at the trunk to be able to grab something from it.");
			break;
		}
	}
	return 1;
}

CMD:checktrunk(playerid)
{
	new Float: vx, Float: vy, Float: vz;
	for(new i=0; i < MAX_VEHICLES; i++)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			GetVehiclePos(i, vx, vy, vz);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, vx, vy, vz))
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				LastEnteredCar[playerid] = i;
				if(boot == 1)
				{
					if(Player[playerid][Group] == 1)
					{
						new string[512], wep1[128], wep2[128], wep3[128];
						if(Vehicles[GetPlayerVehicleID(playerid)][CarTrunk1] == 0)
						{
							format(wep1, sizeof(wep1), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[GetPlayerVehicleID(playerid)][CarTrunk1], wep1, sizeof(wep1));
						}
						if(Vehicles[GetPlayerVehicleID(playerid)][CarTrunk2] == 0)
						{
							format(wep2, sizeof(wep2), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[GetPlayerVehicleID(playerid)][CarTrunk2], wep2, sizeof(wep2));
						}
						if(Vehicles[GetPlayerVehicleID(playerid)][CarTrunk3] == 0)
						{
							format(wep3, sizeof(wep3), "Empty");
						}
						else
						{
							GetWeaponName(Vehicles[GetPlayerVehicleID(playerid)][CarTrunk3], wep3, sizeof(wep3));
						}
						format(string, sizeof(string), "%s\n%s\n%s\nMaterials: %d\nPot: %dG\nCocaine: %dG", wep1, wep2, wep3, Vehicles[GetPlayerVehicleID(playerid)][CarMaterials], Vehicles[GetPlayerVehicleID(playerid)][CarPot], Vehicles[GetPlayerVehicleID(playerid)][CarCocaine]);
						ShowPlayerDialog(playerid, 27382712, DIALOG_STYLE_LIST, "Storage", string, "Choose", "Cancel");
						new msg[128];
						format(msg, sizeof(msg), "* %s has checked the vehicle's storage.", GetName(playerid));
						NearByMessage(playerid, PURPLE, msg);
						if(Vehicles[GetPlayerVehicleID(playerid)][CarGroup] != 1)
						{
							SendClientMessage(playerid, WHITE, "You've confiscated the items in the vehicle.");
							Vehicles[GetPlayerVehicleID(playerid)][CarTrunk1] = 0;
							Vehicles[GetPlayerVehicleID(playerid)][CarTrunk2] = 0;
							Vehicles[GetPlayerVehicleID(playerid)][CarTrunk3] = 0;
							Vehicles[GetPlayerVehicleID(playerid)][CarPot] = 0;
							Vehicles[GetPlayerVehicleID(playerid)][CarCocaine] = 0;
							Vehicles[GetPlayerVehicleID(playerid)][CarMaterials] = 0;
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You need to be in the RCSD to use this command.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "The trunk needs to be open before you search it.");
				}
				break;
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You need to be inside the vehicle, to be able to search it.");
		}
	}
	return 1;
}

CMD:resetcocainetablecount(playerid)
{
	if(Player[playerid][AdminLevel] == 8)
	{
	    Houses[Player[playerid][InHouse]][CocaineTables] = 0;
	}
	return 1;
}

CMD:mask(playerid)
{
	if(IsUsingMask[playerid] == 0)
	{
	    if(Player[playerid][PlayingHours] >= 25)
	    {
	        new string[255];
			format(string, sizeof(string), "* %s grabs a mask, and places it onto his face.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);
			IsUsingMask[playerid] = 1;
			new newplayername[255];
			new rand = random(90000);
			new masknumber = 30000+rand;
			format(newplayername, sizeof(newplayername), "MASK_%d", masknumber);
			printf("[MASK_LOG] Player %s has been given the name %s", GetName(playerid), newplayername);
			SetPlayerName(playerid, newplayername);
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need 2 hours to use this feature.");
		}
	}
	else
	{
		new string[255];
		format(string, sizeof(string), "* %s removes their mask.", GetName(playerid));
		NearByMessage(playerid, PURPLE, string);
		IsUsingMask[playerid] = 0;
		SetPlayerName(playerid, Player[playerid][NormalName]);
	}
	//SendClientMessage(playerid, WHITE, "This command is currently disabled.");
	return 1;
}

CMD:givelicensepoints(playerid, params[])
{
	new amount, id;
	if(Player[playerid][Group] == 1)
	{
		if(sscanf(params, "ud", id, amount)) return SendClientMessage(playerid, WHITE, "SYNTAX: /givelicensepoints [ID] [Amount]");
		{
		    if(Player[id][License] == 0)
		    {
		        new newpointamount;
		        newpointamount = Player[playerid][LicensePoints]+amount;
		        if(newpointamount >= 10)
		        {
					Player[id][License] = 0;
					Player[playerid][LicensePoints] = 0;
					new string[128];
					format(string, sizeof(string), "You have been given %d points, totaling over 10. Meaning you lost your license.", amount);
					SendClientMessage(id, WHITE, string);
					SendClientMessage(playerid, WHITE, "The person you've given the points, has lost their license.");
		        }
		        else
		        {
		            Player[playerid][LicensePoints] += amount;
                    new string[128];
					format(string, sizeof(string), "You have been given %d points, totaling to %d.", amount, Player[playerid][LicensePoints]);
					SendClientMessage(id, WHITE, string);
					SendClientMessage(playerid, WHITE, "You've succesfully given him/her some points");
		        }
		    }
		    else
			{
			    SendClientMessage(playerid, WHITE, "That person doesn't have a license.");
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "");
	}
	return 1;
}

CMD:vticket(playerid, params[])
{
	new plate[255], amount;
	if(Player[playerid][Group] == 1)
	{
		if(sscanf(params, "zd", plate, amount)) return SendClientMessage(playerid, WHITE, "SYNTAX: /vticket [plate] [amount]");
		{
			if(amount > 0 && amount < 5001)
			{
				new string[128];
				format(string, sizeof(string), "* %s rips off a ticket, placing it onto the car.", GetName(playerid));
				if(!strcmp(plate, "123-ABC"))
				{
				    SendClientMessage(playerid, WHITE, "This vehicle is not registered.");
				}
				else if(!strcmp(plate, "XYZSR998"))
				{
				    SendClientMessage(playerid, WHITE, "This vehicle is not registered.");
				}
				else for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(!strcmp(plate, Player[i][Car1Plate]))
				    {
						Player[i][Tickets] += amount;
						NearByMessage(playerid, PURPLE, string);
						SendClientMessage(i, YELLOW, "You have received a ticket on your first vehicle.");
				        break;
				    }
				    else if(!strcmp(plate, Player[i][Car2Plate]))
				    {
                        Player[i][Tickets] += amount;
						NearByMessage(playerid, PURPLE, string);
						SendClientMessage(i, YELLOW, "You have received a ticket on your second vehicle.");
				        break;
				    }
				    else if(!strcmp(plate, Player[i][Car3Plate]))
				    {
                        Player[i][Tickets] += amount;
						NearByMessage(playerid, PURPLE, string);
						SendClientMessage(i, YELLOW, "You have received a ticket on your third vehicle.");
				        break;
				    }
				    else if(i == MAX_PLAYERS)
				    {
				        SendClientMessage(playerid, WHITE, "This license plate is not recognised.");
				    }
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Please choose an amount between $1 - $5000");
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not in the RCSD");
	}
	return 1;
}

CMD:paytickets(playerid)
{
	if(Player[playerid][Tickets] > 0)
	{
	    if(Player[playerid][Money] >= Player[playerid][Tickets])
	    {
	        Player[playerid][Money] -= Player[playerid][Tickets];
	        Groups[1][SafeMoney] += Player[playerid][Tickets];
			Player[playerid][Tickets] = 0;
			SendClientMessage(playerid, WHITE, "You've succesfully paid all your tickets");
		}
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You don't have enough money on you to pay for the tickets.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have any tickets you need to pay.");
	}
	return 1;
}

CMD:hradio(playerid)
{
	if(Player[playerid][InHouse] == Player[playerid][House])
	{
	    if(hRadioStatus[Player[playerid][House]] == 0)
	    {
	    	ShowPlayerDialog(playerid, 6513, DIALOG_STYLE_LIST, "Radio", "Turn on", "Choose", "Exit");
		}
		else if(hRadioStatus[Player[playerid][House]] == 1)
		{
		    ShowPlayerDialog(playerid, 6513, DIALOG_STYLE_LIST, "Radio", "Turn off\nHouse Nation\nPop UK\nThe Eagle (Classic Rock)\nRedemption's Reggae\nThe Vibe of Vegas\nComedy Show", "Choose", "Exit");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be in your own house to manage your radio.");
	}
	return 1;
}

CMD:cradio(playerid)
{
	if(GetPlayerVehicleID(playerid) > 0)
	{
	    if(RadioStatus[GetPlayerVehicleID(playerid)] == 0)
	    {
	    	ShowPlayerDialog(playerid, 6512, DIALOG_STYLE_LIST, "Radio", "Turn on", "Choose", "Exit");
		}
		else if(RadioStatus[GetPlayerVehicleID(playerid)] == 1)
		{
		    ShowPlayerDialog(playerid, 6512, DIALOG_STYLE_LIST, "Radio", "Turn off\nHouse Nation\nPop UK\nThe Eagle (Classic Rock)\nRedemption's Reggae\nThe Vibe of Vegas\nComedy Show\nMy Custom Stream\nChange Stream Link", "Choose", "Exit");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be in a vehicle to use a car radio.");
	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new targetid, price;
	if(sscanf(params, "dd", targetid, price)) return SendClientMessage(playerid, WHITE, "SYNTAX: /sellhouse [playerid] [price]");
	{
		if(Player[playerid][House] > 0)
		{
		    if(Player[targetid][House] == 0)
		    {
		        if(Player[targetid][BankMoney] >= price)
		        {
					new string[128];
					format(string, sizeof(string), "Type /accepthouse to buy it for $%s", IntToFormattedStr(price));
		            SendClientMessage(targetid, WHITE, string);
		            BuyingHouse[targetid] = Player[playerid][House];
		            BuyingHouseFrom[targetid] = playerid;
		            pHousePrice[targetid] = price;
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "The person you're trying to sell your house too doesn't have enough money in their bank.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "The person you're trying to sell the house to already has one.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need to have a house to be able to sell it.");
		}
	}
	return 1;
}

CMD:accepthouse(playerid)
{
	if(BuyingHouse[playerid] > 0)
	{
	    if(Player[playerid][BankMoney] >= pHousePrice[playerid])
	    {
			Player[playerid][BankMoney] -= pHousePrice[playerid];
			Player[BuyingHouseFrom[playerid]][BankMoney] += pHousePrice[playerid];
			Player[playerid][House] = Player[BuyingHouseFrom[playerid]][House];
			Player[BuyingHouseFrom[playerid]][House] = 0;
			format(Houses[Player[playerid][House]][hOwner], 255, "%s", GetName(playerid));

			new string[256];
			format(string, sizeof(string), "You have succesfully purchased house %d from %s for $%s", Player[playerid][House], GetName(BuyingHouseFrom[playerid]), IntToFormattedStr(pHousePrice[playerid]));
			SendClientMessage(playerid, WHITE, string);
			SendClientMessage(BuyingHouseFrom[playerid], WHITE, "You've succesfully sold your home");
			BuyingHouse[playerid] = 0;
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You don't have enough money in your bank account");
	    }
	}
	return 1;
}

CMD:aremovefurniture(playerid, params[])
{
	new hid;
	if(Player[playerid][AdminLevel] > 3)
	{
		if(sscanf(params, "d", hid)) return SendClientMessage(playerid, WHITE, "SYNTAX: /aremovefurniture [house id]");
		{
			SendClientMessage(playerid, WHITE, "You have succesfully removed all furniture from that house.");
			new hvw;
			hvw = 50000+hid;

			for(new i = 1; i < MAX_FURNITURE; i++)
			{
			    if(Furniture[i][frActive] == 1 && Furniture[i][frVW] == hvw)
			    {
			        Furniture[i][frActive] = 0;
					DestroyDynamicObject(Furniture[i][Object]);
					printf("[system][AdminLog][furniture] Object %d from house %d has been deleted by %s", i, hid, GetName(playerid));
			    }
			}
		}
	}
	return 1;
}

CMD:furniture(playerid)
{
	if(Player[playerid][InHouse] == Player[playerid][House])
	{
	    ShowPlayerDialog(playerid, 3000, DIALOG_STYLE_LIST, "Furniture", "Edit furniture (closest to you)\nBuy furniture\nDelete furniture (closest to you)\nEdit furniture by ID\nShow all IDs\nRemove all IDs\nRemove furniture by ID", "Choose", "Exit");
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be in your house to add / edit furniture.");
	}
	return 1;
}

/*CMD:installfluorescentlights(playerid)
{
	if(Player[playerid][House] != 0)
	{
	    if(Player[playerid][BankMoney] >= 10000)
	    {
	        Player[playerid][BankMoney] -= 10000;
	        Houses[Player[playerid][House]][FluorescentLights] = 1;
	        SendClientMessage(playerid, WHITE, "You have succesfully installed fluorescent lights into your home");
	        SaveHouse(Player[playerid][House]);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You need $10,000 in your bank");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have a house.");
	}
}*/

CMD:fchangerank(playerid, params[])
{
	new targetid, targetrank;
	if(sscanf(params, "dd", targetid, targetrank))  return SendClientMessage(playerid, WHITE, "SYNTAX: /fchangerank [id] [rankid]");
	{
	    if(Player[targetid][FactionID] == Player[playerid][FactionID])
	    {
	        if(targetrank <= 5)
	        {
			    SendClientMessage(targetid, WHITE, "Your rank has been changed by the faction leader");
			    Player[targetid][FactionRank] = targetrank;
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "There's a maximum of 5 ranks");
			}
		}
	}
	return 1;
}

CMD:pickupdrop(playerid)
{
	for(new i = 0; i < MAX_DROPS; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Drop[i][dX], Drop[i][dY], Drop[i][dZ]))
	    {
	        if(Drop[i][dActive] == 1)
	        {
		        new string[128];
		        if(Player[playerid][Gender] == 1)
		        {
		        	format(string, sizeof(string), "* %s lowers himself, grabbing the drop.", GetName(playerid));
				}
				else
				{
				    format(string, sizeof(string), "* %s lowers herself, grabbing the drop.", GetName(playerid));
				}
				NearByMessage(playerid, PURPLE, string);
				Delete3DTextLabel(Drop[i][dText]);
				Drop[i][dActive] = 0;
				DestroyDynamicObject(Drop[i][dObject]);
				switch(Drop[i][dType])
				{
				    case 0:
				    {

				        Player[playerid][Pot] += Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected %dG pot", Drop[i][dAmount]);
				        SendClientMessage(playerid, WHITE, string);
				    }
				    case 1:
				    {

				        Player[playerid][Cocaine] += Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected %dG cocaine", Drop[i][dAmount]);
				        SendClientMessage(playerid, WHITE, string);
				    }
				    case 2:
				    {
				        Player[playerid][Materials] += Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected %d materials", Drop[i][dAmount]);
				        SendClientMessage(playerid, WHITE, string);
				    }
				    case 3:
				    {
	                    GivePlayerWeaponEx(playerid, Drop[i][dAmount]);
	                    new pWep[128];
	                    GetWeaponName(Drop[i][dAmount], pWep, sizeof(pWep));
				        format(string, sizeof(string), "You have collected a %s", pWep);
				        SendClientMessage(playerid, WHITE, string);
				    }
				    case 4:
				    {
				        Player[playerid][PhoneN] = Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected a phone with the number #%d", Drop[i][dAmount]);
				        SendClientMessage(playerid, WHITE, string);
				    }
				    case 5:
				    {
	                    Player[playerid][WalkieTalkie] = Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected a Walkie Talkie");
				        SendClientMessage(playerid, WHITE, string);
				    }
				    case 6:
				    {
	                    Player[playerid][PotSeeds] += Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected %d pot seeds", Drop[i][dAmount]);
				        SendClientMessage(playerid, WHITE, string);
				    }
					case 7:
					{
	                    Player[playerid][Money] += Drop[i][dAmount];
				        format(string, sizeof(string), "You have collected $%s", IntToFormattedStr(Drop[i][dAmount]));
				        SendClientMessage(playerid, WHITE, string);
					}
				}
				break;
		    }
		}
	}
}

CMD:taketest(playerid)
{
    if(Businesses[Player[playerid][InBusiness]][bType] == 13)
    {
        if(Player[playerid][BankMoney] >= 1500)
        {
        	Player[playerid][BankMoney] -= 500;
            ShowPlayerDialog(playerid, 4500, DIALOG_STYLE_LIST, "[1/5] On what side of the road do you drive", "Left side\nRight side\nI don't know", "Choose", "");
        }
		else
		{
		    SendClientMessage(playerid, WHITE, "You need $1,500, $500 for the test and $1,000 for the driving test itself.");
		}
    }
    else
    {
        SendClientMessage(playerid, WHITE, "You have to be in the DMV to do that");
    }
}

CMD:glock(playerid)
{
	if(Player[playerid][Group] != 0)
	{
	    for(new i = 0; i < MAX_VEHICLES; i++)
	    {
	        if(Vehicles[i][CarGroup] == Player[playerid][Group])
	        {
	            new Float: vx, Float: vy, Float: vz;
	            GetVehiclePos(Vehicles[i][GameID], vx, vy, vz);
	            if(IsPlayerInRangeOfPoint(playerid, 5.0, vx, vy, vz))
	            {
	      	  		new engine, lights, alarm, doors, bonnet, boot, objective;
	      	  		new string[256];
					format(string, sizeof(string), "* %s unlocks their vehicle.", GetName(playerid));
					new string2[256];
					format(string2, sizeof(string2), "* %s locks their vehicle.", GetName(playerid));
	      	  		GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
					if(doors == 1)
					{
					    NearByMessage(playerid, PURPLE, string);
					    SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 0, bonnet, boot, objective);
					}
					else
					{
					    NearByMessage(playerid, PURPLE, string2);
					    SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 1, bonnet, boot, objective);
					}
					break;
				}
				else
				{
					GetVehiclePos(Vehicles[i][GameID], vx, vy, vz);
					new string[255];
					format(string, sizeof(string), "Not near a car at, X: %d, Y: %d, Z: %d", vx, vy, vz);
				}
			}
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You are not in a Group");
	}
}

CMD:flock(playerid)
{
	if(Player[playerid][FactionID] != 0)
	{
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    new engine2, lights2, alarm2, doors2, bonnet2, boot2, objective2;
	    new engine3, lights3, alarm3, doors3, bonnet3, boot3, objective3;
	    new engine4, lights4, alarm4, doors4, bonnet4, boot4, objective4;
	    new engine5, lights5, alarm5, doors5, bonnet5, boot5, objective5;
        new fid = Player[playerid][FactionID];

	    GetVehicleParamsEx(Faction[fid][fLinkID1], engine, lights, alarm, doors, bonnet, boot, objective);
	    GetVehicleParamsEx(Faction[fid][fLinkID2], engine2, lights2, alarm2, doors2, bonnet2, boot2, objective2);
	    GetVehicleParamsEx(Faction[fid][fLinkID3], engine3, lights3, alarm3, doors3, bonnet3, boot3, objective3);
	    GetVehicleParamsEx(Faction[fid][fLinkID4], engine4, lights4, alarm4, doors4, bonnet4, boot4, objective4);
	    GetVehicleParamsEx(Faction[fid][fLinkID5], engine5, lights5, alarm5, doors5, bonnet5, boot5, objective5);

		GetVehiclePos(Faction[fid][fLinkID1], Faction[fid][fVehicle1X], Faction[fid][fVehicle1Y], Faction[fid][fVehicle1Z]);
		GetVehiclePos(Faction[fid][fLinkID2], Faction[fid][fVehicle2X], Faction[fid][fVehicle2Y], Faction[fid][fVehicle2Z]);
		GetVehiclePos(Faction[fid][fLinkID3], Faction[fid][fVehicle3X], Faction[fid][fVehicle3Y], Faction[fid][fVehicle3Z]);
		GetVehiclePos(Faction[fid][fLinkID4], Faction[fid][fVehicle4X], Faction[fid][fVehicle4Y], Faction[fid][fVehicle4Z]);
		GetVehiclePos(Faction[fid][fLinkID5], Faction[fid][fVehicle5X], Faction[fid][fVehicle5Y], Faction[fid][fVehicle5Z]);

		new string[256];
		format(string, sizeof(string), "* %s unlocks their vehicle.", GetName(playerid));
		new string2[256];
		format(string2, sizeof(string2), "* %s locks their vehicle.", GetName(playerid));
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Faction[fid][fVehicle1X], Faction[fid][fVehicle1Y], Faction[fid][fVehicle1Z]))
	    {
			if(Faction[fid][fLockStatus1] == 1)
			{
			    Faction[fid][fLockStatus1] = 0;
				NearByMessage(playerid, PURPLE, string);
    			SetVehicleParamsEx(Faction[fid][fLinkID1], engine, lights, alarm, 0, bonnet, boot, objective);

			}
			else
			{
				Faction[fid][fLockStatus1] = 1;
				NearByMessage(playerid, PURPLE, string2);
    			SetVehicleParamsEx(Faction[fid][fLinkID1], engine, lights, alarm, 1, bonnet, boot, objective);
			}
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, Faction[fid][fVehicle2X], Faction[fid][fVehicle2Y], Faction[fid][fVehicle2Z]))
	    {
			if(Faction[fid][fLockStatus2] == 1)
			{
			    Faction[fid][fLockStatus2] = 0;
				NearByMessage(playerid, PURPLE, string);
    			SetVehicleParamsEx(Faction[fid][fLinkID2], engine, lights, alarm, 0, bonnet, boot, objective);
			}
			else
			{
				Faction[fid][fLockStatus2] = 1;
				NearByMessage(playerid, PURPLE, string2);
    			SetVehicleParamsEx(Faction[fid][fLinkID2], engine, lights, alarm, 1, bonnet, boot, objective);
			}
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, Faction[fid][fVehicle3X], Faction[fid][fVehicle3Y], Faction[fid][fVehicle3Z]))
	    {
			if(Faction[fid][fLockStatus3] == 1)
			{
			    Faction[fid][fLockStatus3] = 0;
				NearByMessage(playerid, PURPLE, string);
				SetVehicleParamsEx(Faction[fid][fLinkID3], engine3, lights3, alarm3, 0, bonnet3, boot3, objective3);
			}
			else
			{
				Faction[fid][fLockStatus3] = 1;
				NearByMessage(playerid, PURPLE, string2);
				SetVehicleParamsEx(Faction[fid][fLinkID3], engine3, lights3, alarm3, 1, bonnet3, boot3, objective3);
			}
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, Faction[fid][fVehicle4X], Faction[fid][fVehicle4Y], Faction[fid][fVehicle4Z]))
	    {
			if(Faction[fid][fLockStatus4] == 1)
			{
			    Faction[fid][fLockStatus4] = 0;
				NearByMessage(playerid, PURPLE, string);
				SetVehicleParamsEx(Faction[fid][fLinkID4], engine4, lights4, alarm4, 0, bonnet4, boot4, objective4);
			}
			else
			{
				Faction[fid][fLockStatus4] = 1;
				NearByMessage(playerid, PURPLE, string2);
				SetVehicleParamsEx(Faction[fid][fLinkID4], engine4, lights4, alarm4, 1, bonnet4, boot4, objective4);
			}
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, Faction[fid][fVehicle5X], Faction[fid][fVehicle5Y], Faction[fid][fVehicle5Z]))
	    {
			if(Faction[fid][fLockStatus5] == 1)
			{
			    Faction[fid][fLockStatus5] = 0;
				NearByMessage(playerid, PURPLE, string);
				SetVehicleParamsEx(Faction[fid][fLinkID5], engine5, lights5, alarm5, 0, bonnet5, boot5, objective5);
			}
			else
			{
				Faction[fid][fLockStatus5] = 1;
				NearByMessage(playerid, PURPLE, string2);
    			SetVehicleParamsEx(Faction[fid][fLinkID5], engine5, lights5, alarm5, 1, bonnet5, boot5, objective5);
			}
	    }
	    else
    	{
	        SendClientMessage(playerid, WHITE, "You're not near any of your faction's vehicles.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You are not in a faction!");
	}
}

CMD:fhelp(playerid)
{
	new string[1024];
	format(string, sizeof(string), "/factions - main command and lists most important things\n/fdeposit - deposit money from your wallet to the faction bank account (leader only)\n/fdeposit - deposits money into your faction bank account (leader only)\n/flock - locks the faction vehicle nearest to you.");
	ShowPlayerDialog(playerid, 1972, DIALOG_STYLE_MSGBOX, "Faction Commands", string, "Ok", "");
}

CMD:facceptinvite(playerid)
{
	if(FactionInvite[playerid] != 0)
	{
		Player[playerid][FactionID] = FactionInvite[playerid];
		Faction[Player[playerid][FactionID]][fMembers]++;
		Player[playerid][FactionRank] = 1;
		SendClientMessage(playerid, WHITE, "You have succesfully joined the faction.");

		FactionInvite[playerid] = 0;
	}
	return 1;
}

CMD:leavefaction(playerid)
{
	Player[playerid][FactionRank] = 0;
	Player[playerid][FactionID] = 0;
	return 1;
}

CMD:cleanstreets(playerid)
{
	if(Player[playerid][Job] == 8)
	{
		if(Player[playerid][StreetSweeperReload] == 0)
		{
		    new vid = GetPlayerVehicleID(playerid);
		    new model = GetVehicleModel(vid);
			if(model == 574)
			{
				SendClientMessage(playerid, WHITE, "Start following the checkpoints to clean the streets");
				SetPlayerCheckpoint(playerid, 2278.0356,39.7153,26.3399, 3.0);
				SweepProgress[playerid] = 0;
				fuel[vid] = 35;
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need to wait before you can clean the streets again.");
		}
	}
	return 1;
}

command(startrun, playerid, params[])
{
		 #pragma tabsize 0
		new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		new vID = GetPlayerVehicleID(playerid);
			if(IsTrailerAttachedToVehicle(vID))
			{
				if(Jobs[Player[playerid][Job]][JobType] == 3)
				{
				    if(Player[playerid][TruckerReload] == 0)
				    {
					    if(model == 403)
		 			   {
							SetPlayerCheckpoint(playerid, Jobs[3][JobMiscLocationOneX], Jobs[3][JobMiscLocationOneY], Jobs[3][JobMiscLocationOneZ], 5.0);
							SendClientMessage(playerid, WHITE, "You have started your tucker run. Follow the checkpoint to load your trailer.");
							Player[playerid][OnTruckerRun] = 1;
							Player[playerid][CancelRun] = 1;
							fuel[vID] = 35;
		 	  			}
				    }
		 	    	else
					{
					    SendClientMessage(playerid, WHITE, "You are not in a truck! Or, you don't have the trucker job.");
					    if(Player[playerid][TruckerReload] > 0)
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your trucker cooldown of 10 minutes.");
					    }
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Please attach a trailer.");
			}
}

command(loadtruck, playerid, params[])
{
	#pragma tabsize 0
	new vID = GetPlayerVehicleID(playerid);
	if(IsTrailerAttachedToVehicle(vID))
	{
		if(Jobs[Player[playerid][Job]][JobType] == 3)
		{
			if(Player[playerid][OnTruckerRun] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[3][JobMiscLocationOneX], Jobs[3][JobMiscLocationOneY], Jobs[3][JobMiscLocationOneZ]))
		    	{
					SetPlayerCheckpoint(playerid, Jobs[3][JobMiscLocationTwoX], Jobs[3][JobMiscLocationTwoY], Jobs[3][JobMiscLocationTwoZ], 5.0);
				    Player[playerid][LoadTruck] = 1;
				    SendClientMessage(playerid, WHITE, "Your truck has been fully loaded, please drop it off at the checkpoint. DO NOT damage the truck.");
				    Player[playerid][OnTruckerRun1] = 1;
				    Player[playerid][OnTruckerRun] = 0;
				    //SetTimer("TruckerTimer", 10000, false);

			 	}
		  	}
		  	else
		  	{
		  	    SendClientMessage(playerid, WHITE, "You are not on a trucker run!");
		  	}
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SendClientMessage(playerid, WHITE, "Please attach a trailer before loading it!");
		}
		}
	return 1;
}

command(unloadtruck, playerid, params[])
{
	#pragma tabsize 0
	new vID = GetPlayerVehicleID(playerid);
	if(IsTrailerAttachedToVehicle(vID))
	{
		if(Jobs[Player[playerid][Job]][JobType] == 3)
		{
			if(Player[playerid][OnTruckerRun1] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[3][JobMiscLocationTwoX], Jobs[3][JobMiscLocationTwoY], Jobs[3][JobMiscLocationTwoZ]))
		    	{
			    	SetPlayerCheckpoint(playerid, 58.4614, -263.0804, 1.5781, 5.0);
			    	Player[playerid][LoadTruck] = 0;
			    	SendClientMessage(playerid, WHITE, "Your truck has been fully unloaded, head back to the depot for your pay!");
			    	Player[playerid][OnTruckerRun2] = 1;
			    	Player[playerid][OnTruckerRun1] = 0;
			    	//SetTimer("TruckerTimer1", 10000, false);
			    }
			}
			else
			{
	 			SendClientMessage(playerid, WHITE, "You are not on a trucker run!");
	    	}
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SendClientMessage(playerid, WHITE, "Please attach a trailer before unloading it!");
		}
		}
	return 1;
}

command(finishdelivery, playerid, params[])
{
	#pragma tabsize 0
	new vID = GetPlayerVehicleID(playerid);
    if(IsTrailerAttachedToVehicle(vID))
	{
		if(Jobs[Player[playerid][Job]][JobType] == 3)
		{
			if(Player[playerid][OnTruckerRun2] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, 58.4614, -263.0804, 1.5781))
				{
					new Float: vehicleHP;
					GetVehicleHealth(GetPlayerVehicleID(playerid), vehicleHP);
					if(vehicleHP >= 995)
					{
						Player[playerid][Money] += 2500;
						DisablePlayerCheckpoint(playerid);
						SendClientMessage(playerid, WHITE, "You have successfully completed your trucker run and collect $2500 as your pay!");
						SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						Player[playerid][OnTruckerRun] = 0;
						Player[playerid][OnTruckerRun1] = 0;
						Player[playerid][OnTruckerRun2] = 0;
						Player[playerid][CancelRun] = 0;
						Player[playerid][TruckerReload] = 900;
					}
					else
					{
						DisablePlayerCheckpoint(playerid);
					    SendClientMessage(playerid, WHITE, "You have damaged your truck too much and haven't got paid!");
                        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						Player[playerid][OnTruckerRun] = 0;
						Player[playerid][OnTruckerRun1] = 0;
						Player[playerid][OnTruckerRun2] = 0;
						Player[playerid][CancelRun] = 0;
						Player[playerid][TruckerReload] = 900;
					}
				}
			}
			else
			{
	 			SendClientMessage(playerid, WHITE, "You are not on a trucker run!");
	    	}
		}
	}
	else if(!IsTrailerAttachedToVehicle(vID))
	{
	    SendClientMessage(playerid, WHITE, "Please attach a trailer before finishing the delivery!");
	}
	return 1;
}

command(cancelrun, playerid, params[])
{
		if(Jobs[Player[playerid][Job]][JobType] == 3)
		{
		    if(Player[playerid][CancelRun] == 1)
			{
	            DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
				Player[playerid][OnTruckerRun] = 0;
				Player[playerid][OnTruckerRun1] = 0;
				Player[playerid][OnTruckerRun2] = 0;
				Player[playerid][LoadTruck] = 0;
				Player[playerid][CancelRun] = 0;
				SendClientMessage(playerid, WHITE, "You have cancelled your trucker run.");
			}
		}
		else
		{
			if(Player[playerid][CancelRun] == 0)
			{
	        	SendClientMessage(playerid, WHITE, "You are not on a trucker run.");
			}
		}
	return 1;
}

CMD:factions(playerid)
{
	if(Player[playerid][FactionRank] == 0)
	{
	    ShowPlayerDialog(playerid, 9123, DIALOG_STYLE_LIST, "Faction Menu", "Buy a faction ($50,000 or VIP Silver+)", "Choose", "Close");
	}
	else if(Player[playerid][FactionRank] >= 1 && Player[playerid][FactionRank] <= 4)
	{
	    ShowPlayerDialog(playerid, 9124, DIALOG_STYLE_LIST, "Faction Menu", "Leave\nFaction Information", "Choose", "Close");
	}
	else if(Player[playerid][FactionRank] == 5)
	{
	    ShowPlayerDialog(playerid, 9125, DIALOG_STYLE_LIST, "Faction Menu", "Rename\nFaction Information\nInvite\nUpgrades\nVehicle Management", "Choose", "Close");
	}
}

CMD:forcegrowpot(playerid)
{
	if(Player[playerid][AdminLevel] == 8)
	{
	    for(new i=0; i < MAX_WEEDPLANTS; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ]))
		    {
		        WeedPlant[i][GrowthState] = 120;
		        DestroyDynamicObject(WeedPlantObj[i]);
		        WeedPlantObj[i] = CreateDynamicObject(860, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ],   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
		        SendClientMessage(playerid, -1, "Done");
		    }
		}
	}
}

CMD:destroypot(playerid)
{
    for(new i=0; i < MAX_WEEDPLANTS; i++)
	{
	    if(WeedPlant[i][VirtualWorld] == GetPlayerVirtualWorld(playerid))
	    {
			if(WeedPlant[i][Active] == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ]))
			    {
					    DestroyDynamicObject(WeedPlantObj[i]);
						WeedPlant[i][Active] = 0;
				}
			}
		}
	}
}

CMD:collectcocaine(playerid)
{
	if(Player[playerid][InHouse] > 0)
	{
	    for(new i = 1; i < MAX_FURNITURE; i++)
	    {
	        if(Furniture[i][frVW] == GetPlayerVirtualWorld(playerid))
	        {
	            if(Furniture[i][frObjectID] == 3383)
	            {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]))
					{
					    if(Furniture[i][CocaineGrowth] == 60)
					    {
  							new string2[256];
							format(string2, sizeof(string2), "* %s moves to the drug lab finishing the cocaine and then putting %dG in a container", GetName(playerid), Furniture[i][GrowingCocaineAmount]);
							NearByMessage(playerid, PURPLE, string2);

							Player[playerid][Cocaine] += Furniture[i][GrowingCocaineAmount];
							Furniture[i][GrowingCocaineAmount] = 0;
							Furniture[i][CocaineGrowth] = 0;
							new string[256];
							format(string, sizeof(string), "Drug Lab\nAmount: %d/50\nState: %d/60", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
			    			Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
					        break;
					    }
					}
	            }
	        }
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be in a house to type this");
	}
}

CMD:harvestpot(playerid)
{
	if(Player[playerid][InHouse] > 0)
	{
		for(new i = 1; i < MAX_FURNITURE; i++)
	    {
	        if(Furniture[i][frVW] == GetPlayerVirtualWorld(playerid))
	        {
	            if(Furniture[i][frObjectID] == 637)
	            {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]))
					{
					    if(Furniture[i][CocaineGrowth] >= 30)
					    {
  							new string2[256];
							new amount;
							amount = Furniture[i][GrowingCocaineAmount] * 4;
							format(string2, sizeof(string2), "* %s starts removing the plants from the ground, placing %d grams of weed in a bag.", GetName(playerid), amount);
							NearByMessage(playerid, PURPLE, string2);

							Player[playerid][Pot] += amount;
							Furniture[i][GrowingCocaineAmount] = 0;
							Furniture[i][CocaineGrowth] = 0;
							new string[256];
							format(string, sizeof(string), "Planter\nAmount: %d/10\nState: %d/30", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
			    			Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
							DestroyDynamicObject(Furniture[i][Object]);
							Furniture[i][Object] = CreateDynamicObject(637, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ], Furniture[i][frrX], Furniture[i][frrY], Furniture[i][frrZ], Furniture[i][frVW], -1, -1, 100.0);
					        break;
					    }
					}
	            }
	        }
	    }
	}
	else
	{
		for(new i=0; i < MAX_WEEDPLANTS; i++)
		{
			if(WeedPlant[i][VirtualWorld] == GetPlayerVirtualWorld(playerid))
			{
				if(WeedPlant[i][Active] == 1)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ]))
					{
						if(WeedPlant[i][GrowthState] < 120)
						{
							SendClientMessage(playerid, -1, "The plant is not fully grown yet.");
						}
						else
						{
							DestroyDynamicObject(WeedPlantObj[i]);
							WeedPlant[i][Active] = 0;
							new rand = random(5);
							//format(string, sizeof(string), "* %s kneels down, starting to harvest the weed plant.", GetName(playerid));
							//NearByMessage(playerid, PURPLE, string);
							if(WeedPlant[i][GrowingWithLights] == 0)
							{
								if(rand == 1)
								{
									new string2[128];
									format(string2, sizeof(string2), "You have received %d grams of Pot from this plant.", 3);
									SendClientMessage(playerid, -1, string2);
									Player[playerid][Pot] += 3;
								}
								else
								{
									new string2[128];
									format(string2, sizeof(string2), "You have received %d grams of Pot from this plant.", 4);
									SendClientMessage(playerid, -1, string2);
									Player[playerid][Pot] += 4;
								}
							}
							else
							{
								if(rand >= 1)
								{
									new string2[128];
									format(string2, sizeof(string2), "You have received %d grams of Pot from this plant.", rand);
									SendClientMessage(playerid, -1, string2);
									Player[playerid][Pot] += rand;
								}
								else
								{
									new string2[128];
									format(string2, sizeof(string2), "You have received %d grams of Pot from this plant.", 1);
									SendClientMessage(playerid, -1, string2);
									Player[playerid][Pot] += 1;
								}
							}
							break;
						}
					}
					else
					{
						//SendClientMessage(playerid, -1, "There's no weed plant in the area.");
					}
				}
			}
		}
	}
	return 1;
}

CMD:checkplant(playerid)
{
	for(new i = 0; i < MAX_WEEDPLANTS; i++)
	{
		if(WeedPlant[i][Active] == 1)
		{
			if(IsPlayerInRangeOfPoint(playerid, WeedPlant[i][weedX], WeedPlant[i][weedX], WeedPlant[i][weedX], 5.0))
			{
				new string[128];
				format(string, sizeof(string), "%d/120 - Pot Plant %d", WeedPlant[i][GrowthState], i);
				SendClientMessage(playerid, YELLOW, string);
				break;
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You're not near a Pot plant");
			}
		}
	}
	return 1;
}

CMD:makecocaine(playerid, params[])
{
	new amount, price;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, WHITE, "SYNTAX: /makecocaine [amount]");
	{
		price = amount * 20;
		if(Player[playerid][Money] >= price)
		{
		    for(new i = 1; i < MAX_FURNITURE; i++)
		    {
		        if(Furniture[i][frVW] == GetPlayerVirtualWorld(playerid))
		        {
					if(Furniture[i][frObjectID] == 3383)
					{
						if(Furniture[i][frActive] == 1)
						{
							if(Furniture[i][GrowingCocaineAmount] < 50)
							{
								if(IsPlayerInRangeOfPoint(playerid, 5.0, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]))
								{
									new newtotal;
									newtotal = Furniture[i][GrowingCocaineAmount] + amount;
									if(newtotal > 50)
									{
										SendClientMessage(playerid, WHITE, "You can't have more than 50.");
										break;
									}
									else
									{
										new string[256];
										Furniture[i][CocaineGrowth] = 1;
										Furniture[i][GrowingCocaineAmount] += amount;
										Player[playerid][Money] -= price;
										format(string, sizeof(string), "Drug Lab\nActive\nAmount: %d/50\nState: %d/60", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
										Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
										break;
									}
								}
							}
						}
					}
		        }
		    }
		}
		else
		{
			new str[128];
			format(str, sizeof(str), "You need to have $%d to create that amount of Cocaine.", price);
			SendClientMessage(playerid, WHITE, str);
		}
	}
	return 1;
}

CMD:plantpot(playerid)
{
	if(Player[playerid][PotSeeds] >= 1)
	{
		if(Player[playerid][InHouse] > 0)
		{
			if(Player[playerid][PotSeeds] > 0)
			{
				for(new i; i < MAX_FURNITURE; i ++)	
				{
					if(Furniture[i][frVW] == GetPlayerVirtualWorld(playerid))
					{
						if(Furniture[i][frObjectID] == 637)
						{	
							if(Furniture[i][frActive] == 1)
							{
								if(Furniture[i][GrowingCocaineAmount] == 0)
								{
									if(IsPlayerInRangeOfPoint(playerid, 5.0, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]))
									{
										new playerpot = Player[playerid][PotSeeds];
										if(playerpot > 10)
										{
											DestroyDynamicObject(Furniture[i][Object]);
											Furniture[i][Object] = CreateDynamicObject(638, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]+0.5, Furniture[i][frrX], Furniture[i][frrY], Furniture[i][frrZ], Furniture[i][frVW], -1, -1, 100.0);
											Player[playerid][PotSeeds] -= 10;
											new string[256];
											Furniture[i][CocaineGrowth] = 1;
											Furniture[i][GrowingCocaineAmount] = 10;
											format(string, sizeof(string), "Planter\nActive\nAmount: %d/10\nState: %d/30", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
											Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
											SendClientMessage(playerid, WHITE, "Type /harvestpot when it's done growing (30/30)");
											break;
										}
										else
										{
											DestroyDynamicObject(Furniture[i][frObjectID]);
											Furniture[i][Object] = CreateDynamicObject(638, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]+0.5, Furniture[i][frrX], Furniture[i][frrY], Furniture[i][frrZ], Furniture[i][frVW], -1, -1, 100.0);
											Furniture[i][GrowingCocaineAmount] = Player[playerid][PotSeeds];
											Player[playerid][PotSeeds] = 0;
											new string[256];
											Furniture[i][CocaineGrowth] = 1;
											format(string, sizeof(string), "Planter\nActive\nAmount: %d/10\nState: %d/30", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
											Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
											SendClientMessage(playerid, WHITE, "Type /harvestpot when it's done growing (30/30)");
											break;
										}
									}
								}
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You don't have any pot seeds.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You don't have any pot seeds.");
	}
    return 1;
}
		/*else
		{
			if(!IsPlayerInRangeOfPoint(playerid, 1.0, WeedPlant[LatestPlantedPot[playerid]][weedX], WeedPlant[LatestPlantedPot[playerid]][weedY], WeedPlant[LatestPlantedPot[playerid]][weedZ]))
			{
				for(new i = 0; i < MAX_WEEDPLANTS; i++)
				{
					if(WeedPlant[i][Active] == 0)
					{
							if(WeedPlant[i][ID] < SpawnedWeedPlants)
						{
							new Float: px, Float: py, Float: pz, pvw;
							GetPlayerPos(playerid, px, py, pz);

							WeedPlant[i][ID] = i;
							WeedPlant[i][weedX] = px;
							WeedPlant[i][weedY] = py;
							WeedPlant[i][weedZ] = pz-1.0;
							WeedPlant[i][weedVW] = pvw;
							WeedPlant[i][VirtualWorld] = GetPlayerVirtualWorld(playerid);
							if(Player[playerid][InHouse] > 0)
							{
								if(Houses[Player[playerid][InHouse]][FluorescentLights] == 0)
								{
									WeedPlant[i][GrowthState] = 30;
								}
								else
								{
									WeedPlant[i][GrowthState] = 90;
									WeedPlant[i][GrowingWithLights] = 1;
								}
							}
							else
							{
								WeedPlant[i][GrowthState] = 1;
							}
							WeedPlant[i][Active] = 1;
							Player[playerid][PotSeeds] -= 1;

							LatestPlantedPot[playerid] = WeedPlant[i][ID];


							SendClientMessage(playerid, -1, "Type /harvestpot when it's done.");
							//format(string, sizeof(string), "* %s kneels down making a small hole and placing the pot seed inside of it", GetName(playerid));
							//NearByMessage(playerid, PURPLE, string);

							WeedPlantObj[i] = CreateDynamicObject(859, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ],   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
						}
						else
						{
							new Float: px, Float: py, Float: pz, pvw;
							GetPlayerPos(playerid, px, py, pz);
							SpawnedWeedPlants++;

							WeedPlant[SpawnedWeedPlants][ID] = SpawnedWeedPlants;
							WeedPlant[SpawnedWeedPlants][weedX] = px;
							WeedPlant[SpawnedWeedPlants][weedY] = py;
							WeedPlant[SpawnedWeedPlants][weedZ] = pz-1.0;
							WeedPlant[SpawnedWeedPlants][weedVW] = pvw;
							WeedPlant[SpawnedWeedPlants][VirtualWorld] = GetPlayerVirtualWorld(playerid);
							if(Player[playerid][InHouse] > 0)
							{
								if(Houses[Player[playerid][InHouse]][FluorescentLights] == 0)
								{
									WeedPlant[i][GrowthState] = 30;
								}
								else
								{
									WeedPlant[i][GrowthState] = 90;
									WeedPlant[i][GrowingWithLights] = 1;
								}
							}
							WeedPlant[SpawnedWeedPlants][Active] = 1;
							Player[playerid][PotSeeds] -= 1;

							LatestPlantedPot[playerid] = WeedPlant[i][ID];

							SendClientMessage(playerid, -1, "Type /harvestpot when it's done.");
							//format(string, sizeof(string), "* %s kneels down making a small hole and placing the pot seed inside of it", GetName(playerid));
							//NearByMessage(playerid, PURPLE, string);

							WeedPlantObj[SpawnedWeedPlants] = CreateDynamicObject(859, WeedPlant[SpawnedWeedPlants][weedX], WeedPlant[SpawnedWeedPlants][weedY], WeedPlant[SpawnedWeedPlants][weedZ],   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
						}
						break;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You can't plant pot too close to eachother.");
			}
		}*/

CMD:makeadmin(playerid)
{
	if(IsPlayerAdmin(playerid))
	{
	    Player[playerid][AdminLevel] = 8;
	    SendClientMessage(playerid, WHITE, "You're now a level 8 admin, use /admincommands to find out all commands");
        if(Player[playerid][AdminPIN] == 0)
	    {
	        TogglePlayerControllable(playerid, false);
	        SendClientMessage(playerid, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
	        ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
	    }
	    else
	    {
	       Player[playerid][PINUnauthedTime] = 1;
	       SendClientMessage(playerid, WHITE, "You have 10 seconds to login before you are auto-kicked.");
	       TogglePlayerControllable(playerid, false);
	       ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be logged in as a RCON admin to use this command.");
	}
	return 1;
}

CMD:givehousekey(playerid, params[])
{
	new targetid;
	if(sscanf(params, "d", targetid)) return SendClientMessage(playerid, WHITE, "SYNTAX: /givehousekey [ID]");
	{
	    new string[128];
	    new str2[128];

	    if(GetDistanceBetweenPlayers(playerid, targetid) < 5)
	    {
			if(Player[playerid][Money] >= 50)
			{
		        format(string, sizeof(string), "* %s has given %s their house's spare key.", GetName(playerid), GetName(targetid));
				format(str2, sizeof(str2), "You have been given a key to house %d by %s", Player[playerid][House], GetName(playerid));

				NearByMessage(playerid, PURPLE, string);
				SendClientMessage(targetid, WHITE, str2);

				Player[playerid][Money] -= 50;
				Player[targetid][HouseKey] = Player[playerid][House];
				Player[targetid][HouseKeyID] = Houses[Player[playerid][House]][KeyID];
				SendClientMessage(playerid, WHITE, "You have paid $50 towards a new key.");
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need $50 to buy an additional key!");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You need to be close to eachother to give a housekey.");
	    }
	}
	return 1;
}

CMD:drophousekey(playerid)
{
	if(Player[playerid][HouseKey] != -1 && Player[playerid][HouseKeyID] != -1)
	{
	    new string[128];
	    format(string, sizeof(string), "* %s has dropped their housekeys.", GetName(playerid));
		NearByMessage(playerid, PURPLE, string);

		Player[playerid][HouseKey] = -1;
		Player[playerid][HouseKeyID] = -1;
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have a housekey on you!");
	}
}

CMD:changelocks(playerid)
{
	new rand = random(500000);
	if(Player[playerid][House] != 0)
	{
	    if(Player[playerid][Money] >= 500)
	    {
	        Player[playerid][Money] -= 500;
			Houses[Player[playerid][House]][KeyID] = rand;

	        SendClientMessage(playerid, WHITE, "You have succesfully bought new locks!");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You need $500 to buy new locks for your home.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have a house.");
	}
}

CMD:registervehicle(playerid, params[])
{
	if(Player[playerid][InGroupHQ] == 3)
	{
	    if(Player[playerid][Money] >= 750)
	    {
			ShowPlayerDialog(playerid, 7001, DIALOG_STYLE_LIST, "Choose what vehicle", "Vehicle 1\nVehicle 2\nVehicle 3", "Choose", "Cancel");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You need $750 to be able to register your vehicle");
	    }
	}
	/*new veh, plate[255], string[255];
	if(sscanf(params, "dz", veh, plate)) return SendClientMessage(playerid, WHITE, "SYNTAX: /registervehicle [1-3] [plate]");
	{
	    if(Player[playerid][InGroupHQ] == 3)
	    {
			if(Player[playerid][Money] >= 750)
			{
			    if(veh == 1)
			    {
					if(Player[playerid][CarLinkID] > 0)
					{
						format(string, sizeof(string), "You have succesfully registered your first vehicle with the plate; %s", plate);
						SendClientMessage(playerid, WHITE, string);

						format(Player[playerid][Car1Plate], 255, "%s", plate);

						SetVehicleNumberPlate(Player[playerid][CarLinkID], Player[playerid][Car1Plate]);
						SetVehicleToRespawn(Player[playerid][CarLinkID]);
						SetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You don't have a vehicle in your first slot.");
					}
			    }
			    if(veh == 2)
			    {
			        if(Player[playerid][Car2LinkID] > 0)
					{
						format(string, sizeof(string), "You have succesfully registered your second vehicle with the plate; %s", plate);
						SendClientMessage(playerid, WHITE, string);

						format(Player[playerid][Car2Plate], 255, "%s", plate);

						SetVehicleNumberPlate(Player[playerid][Car2LinkID], Player[playerid][Car2Plate]);
						SetVehicleToRespawn(Player[playerid][Car2LinkID]);
						SetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
					}
			    }
			    else
			    {
				    SendClientMessage(playerid, WHITE, "You don't have a vehicle in your second slot.");
				}
				if(veh == 3)
				{
				    if(Player[playerid][Car3LinkID] > 0)
					{
						format(string, sizeof(string), "You have succesfully registered your third vehicle with the plate; %s", plate);
						SendClientMessage(playerid, WHITE, string);

						format(Player[playerid][Car3Plate], 255, "%s", plate);

						SetVehicleNumberPlate(Player[playerid][Car3LinkID], Player[playerid][Car3Plate]);
						SetVehicleToRespawn(Player[playerid][Car3LinkID]);
						SetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You don't have a vehicle in your first slot.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need $750 to register your vehicle");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You need to be at the City Hall to register your vehicle.");
		}
	}*/
    return 1;
}

CMD:mdc(playerid, params[])
{
	if(Player[playerid][Group] == 1)
	{
		new vID = GetPlayerVehicleID(playerid);
		if(Vehicles[vID][CarGroup] == 1)
		{
			new string[255];
			format(string, sizeof(string), "* %s has logged into the vehicle's MDC", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);
			ShowPlayerDialog(playerid, 9001, DIALOG_STYLE_LIST, "RCSD - MOBILE DATABASE COMPUTER", "Record check\nLicense Check\nBOLOs\nTrack a phone number", "Accept", "Close");
		}
		else
		{
		    new string[255];
			format(string, sizeof(string), "* %s has logged into their MDC", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);
			ShowPlayerDialog(playerid, 9001, DIALOG_STYLE_LIST, "RCSD - MOBILE DATABASE COMPUTER", "Record check\nLicense Check\nBOLOs\nTrack a phone number", "Accept", "Close");
		}
	}
	return 1;
}

CMD:checkregistration(playerid, params[])
{
	new platetext;
	if(sscanf(params, "z", platetext)) return SendClientMessage(playerid, GREY, "SYNTAX: /checkregistration [plate text]");
	{
		if(Player[playerid][Group] == 1)
		{
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
				if(Player[i][Car1Plate] == platetext)
				{
				    new string[255];
					format(string, sizeof(string), "* %s has checked the vehicle's registration.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);

					new string3[255], string2[255];
					format(string3, sizeof(string3), "----- %s -----", Player[i][Car1Plate]);
					format(string2, sizeof(string2), "Owner: %s", GetName(i));
					SendClientMessage(playerid, GREY, string3);
					SendClientMessage(playerid, WHITE, string2);
					SendClientMessage(playerid, WHITE, "Registration: Valid");
					SendClientMessage(playerid, GREY, string3);
				}
				else if(Player[i][Car2Plate] == platetext)
				{
				    new string[255];
					format(string, sizeof(string), "* %s has checked the vehicle's registration.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);

					new string3[255], string2[255];
					format(string3, sizeof(string3), "----- %s -----", Player[i][Car2Plate]);
					format(string2, sizeof(string2), "Owner: %s", GetName(i));
					SendClientMessage(playerid, GREY, string3);
					SendClientMessage(playerid, WHITE, string2);
					SendClientMessage(playerid, WHITE, "Registration: Valid");
					SendClientMessage(playerid, GREY, string3);
				}
				else if(Player[i][Car3Plate] == platetext)
				{
				    new string[255];
					format(string, sizeof(string), "* %s has checked the vehicle's registration.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);

					new string3[255], string2[255];
					format(string3, sizeof(string3), "----- %s -----", Player[i][Car3Plate]);
					format(string2, sizeof(string2), "Owner: %s", GetName(i));
					SendClientMessage(playerid, GREY, string3);
					SendClientMessage(playerid, WHITE, string2);
					SendClientMessage(playerid, WHITE, "Registration: Valid");
					SendClientMessage(playerid, GREY, string3);
				}
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not an RCSD member!");
		}
	}
	return 1;
}

CMD:goldname(playerid, params[])
{
	if(Player[playerid][VipRank] >= 1)
	{
		SetPlayerColor(playerid, YELLOW);
 	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to have VIP Bronze+ to use this command.");
	}
}

CMD:endrequest(playerid, params[])
{
	if(HandlesRequest[playerid] == 1)
	{
		SendClientMessage(playerid, WHITE, "You have ended the request.");
		HandlesRequest[playerid] = 0;
		SetPlayerColor(playerid, WHITE);
		SetPlayerPos(playerid, Player[playerid][ModX], Player[playerid][ModY], Player[playerid][ModZ]);

		new string[255];
		format(string, sizeof(string), "Your request has been ended by %s, if you have another question use /requestmod", GetName(playerid));
		SendClientMessage(HandlesRequestFrom[playerid], WHITE, string);

		HasRequestedMod[HandlesRequestFrom[playerid]] = -1;
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not handling a request.");
	}
}

CMD:acceptrequest(playerid, params[])
{
	new string[255], string2[255], id, Float: idX, Float: idY, Float: idZ;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, WHITE, "SYNTAX: /acceptrequest [ID]");
	{
		if(HandlesRequest[playerid] == 0)
		{
			if(HasRequestedMod[id] == 1)
			{
			    GetPlayerPos(id, idX, idY, idZ);
			    format(string, sizeof(string), "Moderator %s is handling your request.", GetName(playerid));
			    SendClientMessage(id, YELLOW, string);

				format(string2, sizeof(string2), "You are now handling %s's request.", GetName(id));
				SendClientMessage(playerid, GREY, "Type /endrequest to end it.");
				SendClientMessage(playerid, YELLOW, string2);
				GetPlayerPos(playerid, Player[playerid][ModX], Player[playerid][ModY], Player[playerid][ModZ]);
				SetPlayerPos(playerid, idX, idY, idZ);
				SetPlayerColor(playerid, MODCOLOR);
				HandlesRequest[playerid] = 1;
				HandlesRequestFrom[playerid] = id;
			}
			else if(HasRequestedMod[id] == 0)
			{
			    SendClientMessage(playerid, WHITE, "That player hasn't requested a moderator.");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're already handling a request.");
		}
	}
	return 1;
}

CMD:cancelrequest(playerid, params[])
{
	if(HasRequestedMod[playerid] == 1)
	{
		new string[255];

		format(string, sizeof(string), "%s has cancelled their request", GetName(playerid));
		SendClientMessage(playerid, YELLOW, "You have cancelled your request.");
		HasRequestedMod[playerid] = 0;

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(Player[i][AdminLevel] > 0 && Player[i][AdminLevel] < 4)
			{
				SendClientMessage(i, ANNOUNCEMENT, string);
			}
		}
	}
	return 1;
}

CMD:requestmod(playerid, params[])
{
	new string[255], string2[255], Message[144];

 	if(HasRequestedMod[playerid] == 0)
	{
		if(sscanf(params, "z", Message)) return SendClientMessage(playerid, WHITE, "SYNTAX: /requestmod [message]");
		{
  			for(new i = 0; i < MAX_PLAYERS; i++)
	    	{
				if(Player[i][AdminLevel] > 0 && Player[i][AdminLevel] < 4)
				{
					format(string, sizeof(string), "%s [ID: %d] has requested a moderator.", GetName(playerid), playerid);
					format(string2, sizeof(string2), "Reason: %s", Message);

					SendClientMessage(i, ANNOUNCEMENT, string);
					SendClientMessage(i, ANNOUNCEMENT, string2);

					HasRequestedMod[playerid] = 1;
				}
	        }
	        SendClientMessage(playerid, YELLOW, "You have requested a moderator, please stand by.");
	    }
	}
	return 1;
}

/*CMD:changeage(playerid, params[])
{
	new pAge;
	if(Player[playerid][PlayingHours] == 0)
	{
		if(sscanf(params, "d", pAge)) return SendClientMessage(playerid, WHITE, "SYNTAX: /changeage [AGE] (min. 15 - max 90)");
		{
		    if(pAge > 14 && pAge < 91)
		    {
		        Player[playerid][Age] = pAge;
				new string[255];
				format(string, sizeof(string), "You have changed your age to %d", pAge);
				SendClientMessage(playerid, WHITE, string);
		    }
		}
	}
	return 1;
}*/

CMD:removeobject(playerid)
{
	if(Player[playerid][OwnedPlotID] >= 0)
	{
		ShowPlayerDialog(playerid, 1200, DIALOG_STYLE_LIST, "OBJECTS", "Object 1\nObject 2\nObject 3\nObject 4\nObject 5\nObject 6\nObject 7\nObject 8\nObject 9\nObject 10\nObject 11\nObject 12\nObject 13\nObject 14\nObject 15\nObject 16\nObject 17\nObject 18\nObject 19\nObject 20\nNext Page", "Choose", "Cancel");
	}
	return 1;
}

CMD:removeallobjects(playerid)
{
	if(Player[playerid][AdminLevel] >= 7)
	{
		removeObj();
	}
	return 1;
}

CMD:editobjects(playerid)
{
	if(Player[playerid][OwnedPlotID] >= 0)
	{
	    ShowPlayerDialog(playerid, 1100, DIALOG_STYLE_LIST, "OBJECTS", "Object 1\nObject 2\nObject 3\nObject 4\nObject 5\nObject 6\nObject 7\nObject 8\nObject 9\nObject 10\nObject 11\nObject 12\nObject 13\nObject 14\nObject 15\nObject 16\nObject 17\nObject 18\nObject 19\nObject 20\nNext Page", "Choose", "Cancel");
	}
	return 1;
}

CMD:acreateobjects(playerid)
{
	if(totalPlayerObjects[playerid] < MAX_SOBJECTS)
	{
	    if(Player[playerid][AdminLevel] >= 6)
   		{
			ShowPlayerDialog(playerid, 1001, DIALOG_STYLE_LIST, "OBJECTS", "Walls / Floors / Doors\nBuildings\nLamps\nCustom ID", "Choose", "Cancel");
		}
	}
	return 1;
}

CMD:plotinfo(playerid, params[])
{
	if(Player[playerid][AdminLevel] == 8)
	{
		new string1[1024];
		new string[255];
		new pID;
		format(string, sizeof(string), "Plots/Plot_%d.ini", pID);
  		if(sscanf(params, "d", pID)) return SendClientMessage(playerid, -1, "USAGE: /plotinfo [ID]");
		{
			format(string1, sizeof(string1), "Pos1X = %d\nPos1Y = %d\nPos1Z = %d\nPos2X = %d\nPos2Y = %d\nPos2Z = %d\nPlot Price = %d\nOwned By = %s", Plots[pID][pos1x], Plots[pID][pos1y], Plots[pID][pos1z], Plots[pID][pos2x], Plots[pID][pos2y], Plots[pID][pos2z], Plots[pID][PlotPrice], Plots[pID][OwnedBy]);
			ShowPlayerDialog(playerid, 1700, DIALOG_STYLE_MSGBOX, "Plot Information", string1, "Close", "");
		}
 }
	return 1;
}

CMD:createobjects(playerid)
{
	if(totalPlayerObjects[playerid] < MAX_SOBJECTS)
	{
	    if(Player[playerid][OwnedPlotID] >= 0)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 10, Plots[Player[playerid][OwnedPlotID]][pos1x], Plots[Player[playerid][OwnedPlotID]][pos1y], Plots[Player[playerid][OwnedPlotID]][pos1z]))
			{
				ShowPlayerDialog(playerid, 1001, DIALOG_STYLE_LIST, "OBJECTS", "Walls / Floors / Doors\nBuildings\nLamps", "Choose", "Cancel");
			}
			else if(!IsPlayerInRangeOfPoint(playerid, 10, Plots[Player[playerid][OwnedPlotID]][pos1x], Plots[Player[playerid][OwnedPlotID]][pos1y], Plots[Player[playerid][OwnedPlotID]][pos1z]))
			{
       			SendClientMessage(playerid, -1, "You need to be at your plot to use this command");
			}
		}
	}
	return 1;
}

CMD:abandonplot(playerid, params[])
{
    if(Player[playerid][OwnedPlotID] != -1)
    {
        Plots[Player[playerid][OwnedPlotID]][PlotForSale] = 1;
        format(Plots[Player[playerid][OwnedPlotID]][OwnedBy], 255, "Nobody");

        new string3[255];
        format(string3, sizeof(string3), string3, Plots[Player[playerid][OwnedPlotID]][PlotPrice], Plots[Player[playerid][OwnedPlotID]][PlotID]);
        Update3DTextLabelText(Plots[Player[playerid][OwnedPlotID]][PlotText], GREEN, string3);
        Player[playerid][OwnedPlotID] = -1;

        SendClientMessage(playerid, -1, "You have abandoned your plot.");

        for(new ob = 0; ob < MAX_SOBJECTS; ob++)
        {
            if(Objects[playerid][ob][LinkID] != 0)
			{
				new objID = Objects[playerid][ob][LinkID];
				DestroyObject(objID);
				printf("[system][INFO] Object ID %d has been despawned", objID);

                DestroyObject(Objects[playerid][ob][LinkID]);
				Objects[playerid][ob][LinkID] = 0;
				Objects[playerid][ob][ID] = 0;
				Objects[playerid][ob][Model] = 0;
			}
        }
    }
}

CMD:buyplot(playerid, params[])
{
	new plotid;
	if(sscanf(params, "d", plotid)) return SendClientMessage(playerid, -1, "USAGE: /buyplot [ID]");
	{
	    if(Plots[plotid][PlotForSale] == 1)
	    {
	        if(GetPlayerMoney(playerid) > Plots[plotid][PlotPrice])
	        {
				if(Player[playerid][OwnedPlotID] == -1)
				{
					if(Player[playerid][PlayingHours] >= 50 || Player[playerid][VipRank] >= 1)
					{
						SendClientMessage(playerid, -1, "You're now the owner of a plot!");
			            Player[playerid][Money] -= Plots[plotid][PlotPrice];
						Player[playerid][OwnedPlotID] = plotid;
			            Plots[plotid][PlotForSale] = 0;
		                format(Plots[plotid][OwnedBy], 255, "Nobody");
			            Update3DTextLabelText(Plots[plotid][PlotText], GREEN, "This plot has been bought.");
					}
				}
	        }
	        else if(GetPlayerMoney(playerid) < Plots[plotid][PlotPrice])
	        {
	            SendClientMessage(playerid, -1, "You don't have enough money for this plot!");
	        }
	    }
	}
	return 1;
}

CMD:removeplot(playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 6)
	{
	    new plotid;
	    if(sscanf(params, "d", plotid)) return SendClientMessage(playerid, -1, "USAGE: /removeplot [ID]");
		{
		    Plots[plotid][PlotID] = 0;
		    Plots[plotid][pos1x] = 0;
		    Plots[plotid][pos1y] = 0;
		    Plots[plotid][pos1z] = 0;
		    Plots[plotid][pos2x] = 0;
		    Plots[plotid][pos2y] = 0;
		    Plots[plotid][pos2z] = 0;
		    Plots[plotid][PlotPrice] = 0;
		    Plots[plotid][PlotForSale] = 1;
		    format(Plots[plotid][OwnedBy], 255, "Nobody");
		    Delete3DTextLabel(plottext[plotid]);
		}
	}
	return 1;
}

CMD:createplot(playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 6)
	{
  		new plotid, plotprice;
  		new string[255];
		if(sscanf(params, "dd", plotid, plotprice)) return SendClientMessage(playerid, -1, "USAGE: /createplot [ID] [Price]");
		{
			new Float: pOSx, pOSy, pOSz;
			GetPlayerPos(playerid, Float: pOSx, Float: pOSy, Float: pOSz);
			if(Plots[plotid][PlotID] != 0)
			{
			    SendClientMessage(playerid, -1, "That ID is taken.");
			}
			else
			{
				format(string, sizeof(string), "Plots/Plot_%d.ini", plotid);
				if(!fexist(string))
				{
				    dini_Create(string);
				}
				dini_IntSet(string, "Plot ID", Plots[plotid][PlotID] = plotid);
			    dini_IntSet(string, "Plot Price", Plots[plotid][PlotPrice] = plotprice);
			    dini_FloatSet(string, "X-Pos1", Plots[plotid][pos1x] = Float: pOSx);
			    dini_FloatSet(string, "Y-Pos1", Plots[plotid][pos1y] = Float: pOSy);
			    dini_FloatSet(string, "Z-Pos1", Plots[plotid][pos1z] = Float: pOSz);

			    dini_FloatSet(string, "X-Pos2", Plots[plotid][pos1x] = Float: pOSx+20.0);
			    dini_FloatSet(string, "Y-Pos2", Plots[plotid][pos1y] = Float: pOSy+20.0);
			    dini_FloatSet(string, "Z-Pos2", Plots[plotid][pos1z] = Float: pOSz+20.0);

                dini_IntSet(string, "ForSale", Plots[plotid][PlotForSale] = 1);
                format(Plots[plotid][OwnedBy], 255, "Nobody");

                new string3[255];
                format(string3, sizeof(string3), "Plot for sale!\n$%d\nID %d", Plots[plotid][PlotPrice], Plots[plotid][PlotID]);

                plottext[plotid] = Create3DTextLabel(string3, GREEN, Float: pOSx, Float: pOSy, Float: pOSz, 50.0, 0, 0);

				new string1[255];
				new string2[255];
				new string4[512];
				format(string1, sizeof(string1), "You have created plot ID %d for $%d", Plots[plotid][PlotID], Plots[plotid][PlotPrice]);
				format(string2, sizeof(string2), "ID %d has created a plot (ID %d) for $%d", playerid, Plots[plotid][PlotID], Plots[plotid][PlotPrice]);
				format(string4, sizeof(string4), "At X: %f, Y: %f, Z: %f", Plots[plotid][pos1x], Plots[plotid][pos1y], Plots[plotid][pos1z]);
				SendClientMessage(playerid, -1, string1);
				print(string2);
				print(string4);
			}
		}
	}
	return 1;
}

CMD:aextinguishfire(playerid)
{
	if(Player[playerid][AdminLevel] >= 7)
	{
	    if(IsThereAFire != 0)
	    {
			IsThereAFire = 0;
			printf("IsThereAFire = %d", IsThereAFire);
			printf("Admin %s has aextinguished all fires.");

			DestroyObject(Fire1Object1);

			#pragma tabsize 0

								DestroyObject(Fire1Object2);
		                        DestroyObject(Fire1Object3);
		                        DestroyObject(Fire1Object4);
		                        DestroyObject(Fire1Object5);
		                        DestroyObject(Fire1Object6);
		                        DestroyObject(Fire1Object7);
		                        DestroyObject(Fire1Object8);
		                        DestroyObject(Fire1Object9);
		                        DestroyObject(Fire1Object10);
		                        DestroyObject(Fire1Object11);
		                        DestroyObject(Fire1Object12);
		                        DestroyObject(Fire1Object13);
		                        DestroyObject(Fire1Object14);
		                        DestroyObject(Fire1Object15);
		                        DestroyObject(Fire1Object16);
		                        DestroyObject(Fire1Object17);
		                        DestroyObject(Fire1Object18);
		                        DestroyObject(Fire1Object19);
		                        DestroyObject(Fire1Object20);
		                        DestroyObject(Fire1Object21);
		                        DestroyObject(Fire1Object22);
		                        DestroyObject(Fire1Object23);
		                        DestroyObject(Fire1Object24);
		                        DestroyObject(Fire1Object25);
		                        DestroyObject(Fire1Object26);
		                        DestroyObject(Fire1Object27);
		                        DestroyObject(Fire1Object28);
		                        DestroyObject(Fire1Object29);
		                        DestroyObject(Fire1Object30);
		                        DestroyObject(Fire1Object31);
		                        DestroyObject(Fire1Object32);
		                        DestroyObject(Fire1Object33);
		                        DestroyObject(Fire1Object34);
		                        DestroyObject(Fire1Object35);
		                        DestroyObject(Fire1Object36);
		                        DestroyObject(Fire1Object37);
		                        DestroyObject(Fire1Object38);
		                        DestroyObject(Fire1Object39);
		                        DestroyObject(Fire1Object40);
		                        DestroyObject(Fire1Object41);
		                        DestroyObject(Fire1Object42);
		                        DestroyObject(Fire1Object43);
		                        DestroyObject(Fire1Object44);

		                        DestroyObject(Fire2Object1);
		                        DestroyObject(Fire2Object2);
		                        DestroyObject(Fire2Object3);
		                        DestroyObject(Fire2Object4);
		                        DestroyObject(Fire2Object5);
		                        DestroyObject(Fire2Object6);
		                        DestroyObject(Fire2Object7);
		                        DestroyObject(Fire2Object8);
		                        DestroyObject(Fire2Object9);
		                        DestroyObject(Fire2Object10);
		                        DestroyObject(Fire2Object11);
		                        DestroyObject(Fire2Object12);
		                        DestroyObject(Fire2Object13);
		                        DestroyObject(Fire2Object14);
		                        DestroyObject(Fire2Object15);
		                        DestroyObject(Fire2Object16);
		                        DestroyObject(Fire2Object17);
		                        DestroyObject(Fire2Object18);
		                        DestroyObject(Fire2Object19);
		                        DestroyObject(Fire2Object20);
		                        DestroyObject(Fire2Object21);
		                        DestroyObject(Fire2Object22);
		                        DestroyObject(Fire2Object23);
		                        DestroyObject(Fire2Object24);
		                        DestroyObject(Fire2Object25);

		                        DestroyObject(Fire3Object1);
		                        DestroyObject(Fire3Object2);
		                        DestroyObject(Fire3Object3);
		                        DestroyObject(Fire3Object4);
		                        DestroyObject(Fire3Object5);
		                        DestroyObject(Fire3Object6);
		                        DestroyObject(Fire3Object7);
		                        DestroyObject(Fire3Object8);
		                        DestroyObject(Fire3Object9);
		                        DestroyObject(Fire3Object10);
		                        DestroyObject(Fire3Object11);
		                        DestroyObject(Fire3Object12);
		                        DestroyObject(Fire3Object13);
		                        DestroyObject(Fire3Object14);
		                        DestroyObject(Fire3Object15);
		                        DestroyObject(Fire3Object16);
		                        DestroyObject(Fire3Object17);
		                        DestroyObject(Fire3Object18);
		                        DestroyObject(Fire3Object19);
		                        DestroyObject(Fire3Object20);
		                        DestroyObject(Fire3Object21);

                                DestroyObject(Fire4Object1);
		                        DestroyObject(Fire4Object2);
		                        DestroyObject(Fire4Object3);
		                        DestroyObject(Fire4Object4);
		                        DestroyObject(Fire4Object5);
		                        DestroyObject(Fire4Object6);
		                        DestroyObject(Fire4Object7);
		                        DestroyObject(Fire4Object8);
		                        DestroyObject(Fire4Object9);
		                        DestroyObject(Fire4Object10);
		                        DestroyObject(Fire4Object11);
		                        DestroyObject(Fire4Object12);
		                        DestroyObject(Fire4Object13);
		                        DestroyObject(Fire4Object14);
		                        DestroyObject(Fire4Object15);
		                        DestroyObject(Fire4Object16);
		                        DestroyObject(Fire4Object17);
		                        DestroyObject(Fire4Object18);
		                        DestroyObject(Fire4Object19);
		                        DestroyObject(Fire4Object20);
		                        DestroyObject(Fire4Object21);
		                        DestroyObject(Fire4Object22);
		                        DestroyObject(Fire4Object23);
		                        DestroyObject(Fire4Object24);
		                        DestroyObject(Fire4Object25);
		                        DestroyObject(Fire4Object26);
		                        DestroyObject(Fire4Object27);
		                        DestroyObject(Fire4Object28);
		                        DestroyObject(Fire4Object29);
		                        DestroyObject(Fire4Object30);
		                        DestroyObject(Fire4Object31);
		                        DestroyObject(Fire4Object32);
		                        DestroyObject(Fire4Object33);
		                        DestroyObject(Fire4Object34);
		                        DestroyObject(Fire4Object35);
		                        DestroyObject(Fire4Object36);
		                        DestroyObject(Fire4Object37);
		                        DestroyObject(Fire4Object38);
		                        DestroyObject(Fire4Object39);
		                        DestroyObject(Fire4Object40);
		                        DestroyObject(Fire4Object41);
		                        DestroyObject(Fire4Object42);


		}
	}
	return 1;
}

CMD:extinguishfire(playerid)
{
    new rand = 0;
	if(IsThereAFire != 0)
	{
	    if(Player[playerid][Group] == 4)
	    {
	        if(Player[playerid][GroupRank] >= 2)
	        {
				#pragma tabsize 0
					if(rand == 0)
					{
						if(FireID >= 1)
						{
							    DestroyObject(Fire1Object1);
		                        DestroyObject(Fire1Object2);
		                        DestroyObject(Fire1Object3);
		                        DestroyObject(Fire1Object4);
		                        DestroyObject(Fire1Object5);
		                        DestroyObject(Fire1Object6);
		                        DestroyObject(Fire1Object7);
		                        DestroyObject(Fire1Object8);
		                        DestroyObject(Fire1Object9);
		                        DestroyObject(Fire1Object10);
		                        DestroyObject(Fire1Object11);
		                        DestroyObject(Fire1Object12);
		                        DestroyObject(Fire1Object13);
		                        DestroyObject(Fire1Object14);
		                        DestroyObject(Fire1Object15);
		                        DestroyObject(Fire1Object16);
		                        DestroyObject(Fire1Object17);
		                        DestroyObject(Fire1Object18);
		                        DestroyObject(Fire1Object19);
		                        DestroyObject(Fire1Object20);
		                        DestroyObject(Fire1Object21);
		                        DestroyObject(Fire1Object22);
		                        DestroyObject(Fire1Object23);
		                        DestroyObject(Fire1Object24);
		                        DestroyObject(Fire1Object25);
		                        DestroyObject(Fire1Object26);
		                        DestroyObject(Fire1Object27);
		                        DestroyObject(Fire1Object28);
		                        DestroyObject(Fire1Object29);
		                        DestroyObject(Fire1Object30);
		                        DestroyObject(Fire1Object31);
		                        DestroyObject(Fire1Object32);
		                        DestroyObject(Fire1Object33);
		                        DestroyObject(Fire1Object34);
		                        DestroyObject(Fire1Object35);
		                        DestroyObject(Fire1Object36);
		                        DestroyObject(Fire1Object37);
		                        DestroyObject(Fire1Object38);
		                        DestroyObject(Fire1Object39);
		                        DestroyObject(Fire1Object40);
		                        DestroyObject(Fire1Object41);
		                        DestroyObject(Fire1Object42);
		                        DestroyObject(Fire1Object43);
		                        DestroyObject(Fire1Object44);

		                        DestroyObject(Fire1Object1);
		                        DestroyObject(Fire1Object2);
		                        DestroyObject(Fire1Object3);
		                        DestroyObject(Fire1Object4);
		                        DestroyObject(Fire1Object5);
		                        DestroyObject(Fire1Object6);
		                        DestroyObject(Fire1Object7);
		                        DestroyObject(Fire1Object8);
		                        DestroyObject(Fire1Object9);
		                        DestroyObject(Fire1Object10);
		                        DestroyObject(Fire1Object11);
		                        DestroyObject(Fire1Object12);
		                        DestroyObject(Fire1Object13);
		                        DestroyObject(Fire1Object14);
		                        DestroyObject(Fire1Object15);
		                        DestroyObject(Fire1Object16);
		                        DestroyObject(Fire1Object17);
		                        DestroyObject(Fire1Object18);
		                        DestroyObject(Fire1Object19);
		                        DestroyObject(Fire1Object20);
		                        DestroyObject(Fire1Object21);
		                        DestroyObject(Fire1Object22);
		                        DestroyObject(Fire1Object23);
		                        DestroyObject(Fire1Object24);
		                        DestroyObject(Fire1Object25);
		                        DestroyObject(Fire1Object26);
		                        DestroyObject(Fire1Object27);
		                        DestroyObject(Fire1Object28);
		                        DestroyObject(Fire1Object29);
		                        DestroyObject(Fire1Object30);
		                        DestroyObject(Fire1Object31);
		                        DestroyObject(Fire1Object32);
		                        DestroyObject(Fire1Object33);
		                        DestroyObject(Fire1Object34);
		                        DestroyObject(Fire1Object35);
		                        DestroyObject(Fire1Object36);
		                        DestroyObject(Fire1Object37);
		                        DestroyObject(Fire1Object38);
		                        DestroyObject(Fire1Object39);
		                        DestroyObject(Fire1Object40);
		                        DestroyObject(Fire1Object41);
		                        DestroyObject(Fire1Object42);
		                        DestroyObject(Fire1Object43);
		                        DestroyObject(Fire1Object44);
							    DestroyObject(Fire2Object1);
		                        DestroyObject(Fire2Object2);
		                        DestroyObject(Fire2Object3);
		                        DestroyObject(Fire2Object4);
		                        DestroyObject(Fire2Object5);
		                        DestroyObject(Fire2Object6);
		                        DestroyObject(Fire2Object7);
		                        DestroyObject(Fire2Object8);
		                        DestroyObject(Fire2Object9);
		                        DestroyObject(Fire2Object10);
		                        DestroyObject(Fire2Object11);
		                        DestroyObject(Fire2Object12);
		                        DestroyObject(Fire2Object13);
		                        DestroyObject(Fire2Object14);
		                        DestroyObject(Fire2Object15);
		                        DestroyObject(Fire2Object16);
		                        DestroyObject(Fire2Object17);
		                        DestroyObject(Fire2Object18);
		                        DestroyObject(Fire2Object19);
		                        DestroyObject(Fire2Object20);
		                        DestroyObject(Fire2Object21);
		                        DestroyObject(Fire2Object22);
		                        DestroyObject(Fire2Object23);
		                        DestroyObject(Fire2Object24);
		                        DestroyObject(Fire2Object25);

		                        DestroyObject(Fire2Object1);
		                        DestroyObject(Fire2Object2);
		                        DestroyObject(Fire2Object3);
		                        DestroyObject(Fire2Object4);
		                        DestroyObject(Fire2Object5);
		                        DestroyObject(Fire2Object6);
		                        DestroyObject(Fire2Object7);
		                        DestroyObject(Fire2Object8);
		                        DestroyObject(Fire2Object9);
		                        DestroyObject(Fire2Object10);
		                        DestroyObject(Fire2Object11);
		                        DestroyObject(Fire2Object12);
		                        DestroyObject(Fire2Object13);
		                        DestroyObject(Fire2Object14);
		                        DestroyObject(Fire2Object15);
		                        DestroyObject(Fire2Object16);
		                        DestroyObject(Fire2Object17);
		                        DestroyObject(Fire2Object18);
		                        DestroyObject(Fire2Object19);
		                        DestroyObject(Fire2Object20);
		                        DestroyObject(Fire2Object21);
		                        DestroyObject(Fire2Object22);
		                        DestroyObject(Fire2Object23);
		                        DestroyObject(Fire2Object24);
		                        DestroyObject(Fire2Object25);
							    DestroyObject(Fire3Object1);
		                        DestroyObject(Fire3Object2);
		                        DestroyObject(Fire3Object3);
		                        DestroyObject(Fire3Object4);
		                        DestroyObject(Fire3Object5);
		                        DestroyObject(Fire3Object6);
		                        DestroyObject(Fire3Object7);
		                        DestroyObject(Fire3Object8);
		                        DestroyObject(Fire3Object9);
		                        DestroyObject(Fire3Object10);
		                        DestroyObject(Fire3Object11);
		                        DestroyObject(Fire3Object12);
		                        DestroyObject(Fire3Object13);
		                        DestroyObject(Fire3Object14);
		                        DestroyObject(Fire3Object15);
		                        DestroyObject(Fire3Object16);
		                        DestroyObject(Fire3Object17);
		                        DestroyObject(Fire3Object18);
		                        DestroyObject(Fire3Object19);
		                        DestroyObject(Fire3Object20);
		                        DestroyObject(Fire3Object21);

		                        DestroyObject(Fire3Object1);
		                        DestroyObject(Fire3Object2);
		                        DestroyObject(Fire3Object3);
		                        DestroyObject(Fire3Object4);
		                        DestroyObject(Fire3Object5);
		                        DestroyObject(Fire3Object6);
		                        DestroyObject(Fire3Object7);
		                        DestroyObject(Fire3Object8);
		                        DestroyObject(Fire3Object9);
		                        DestroyObject(Fire3Object10);
		                        DestroyObject(Fire3Object11);
		                        DestroyObject(Fire3Object12);
		                        DestroyObject(Fire3Object13);
		                        DestroyObject(Fire3Object14);
		                        DestroyObject(Fire3Object15);
		                        DestroyObject(Fire3Object16);
		                        DestroyObject(Fire3Object17);
		                        DestroyObject(Fire3Object18);
		                        DestroyObject(Fire3Object19);
		                        DestroyObject(Fire3Object20);
		                        DestroyObject(Fire3Object21);
							    DestroyObject(Fire3Object1);
		                        DestroyObject(Fire3Object2);
		                        DestroyObject(Fire3Object3);
		                        DestroyObject(Fire3Object4);
		                        DestroyObject(Fire3Object5);
		                        DestroyObject(Fire3Object6);
		                        DestroyObject(Fire3Object7);
		                        DestroyObject(Fire3Object8);
		                        DestroyObject(Fire3Object9);
		                        DestroyObject(Fire3Object10);
		                        DestroyObject(Fire3Object11);
		                        DestroyObject(Fire3Object12);
		                        DestroyObject(Fire3Object13);
		                        DestroyObject(Fire3Object14);
		                        DestroyObject(Fire3Object15);
		                        DestroyObject(Fire3Object16);
		                        DestroyObject(Fire3Object17);
		                        DestroyObject(Fire3Object18);
		                        DestroyObject(Fire3Object19);
		                        DestroyObject(Fire3Object20);
		                        DestroyObject(Fire3Object21);

		                        DestroyObject(Fire3Object1);
		                        DestroyObject(Fire3Object2);
		                        DestroyObject(Fire3Object3);
		                        DestroyObject(Fire3Object4);
		                        DestroyObject(Fire3Object5);
		                        DestroyObject(Fire3Object6);
		                        DestroyObject(Fire3Object7);
		                        DestroyObject(Fire3Object8);
		                        DestroyObject(Fire3Object9);
		                        DestroyObject(Fire3Object10);
		                        DestroyObject(Fire3Object11);
		                        DestroyObject(Fire3Object12);
		                        DestroyObject(Fire3Object13);
		                        DestroyObject(Fire3Object14);
		                        DestroyObject(Fire3Object15);
		                        DestroyObject(Fire3Object16);
		                        DestroyObject(Fire3Object17);
		                        DestroyObject(Fire3Object18);
		                        DestroyObject(Fire3Object19);
		                        DestroyObject(Fire3Object20);
		                        DestroyObject(Fire3Object21);
							    DestroyObject(Fire4Object1);
		                        DestroyObject(Fire4Object2);
		                        DestroyObject(Fire4Object3);
		                        DestroyObject(Fire4Object4);
		                        DestroyObject(Fire4Object5);
		                        DestroyObject(Fire4Object6);
		                        DestroyObject(Fire4Object7);
		                        DestroyObject(Fire4Object8);
		                        DestroyObject(Fire4Object9);
		                        DestroyObject(Fire4Object10);
		                        DestroyObject(Fire4Object11);
		                        DestroyObject(Fire4Object12);
		                        DestroyObject(Fire4Object13);
		                        DestroyObject(Fire4Object14);
		                        DestroyObject(Fire4Object15);
		                        DestroyObject(Fire4Object16);
		                        DestroyObject(Fire4Object17);
		                        DestroyObject(Fire4Object18);
		                        DestroyObject(Fire4Object19);
		                        DestroyObject(Fire4Object20);
		                        DestroyObject(Fire4Object21);
		                        DestroyObject(Fire4Object22);
		                        DestroyObject(Fire4Object23);
		                        DestroyObject(Fire4Object24);
		                        DestroyObject(Fire4Object25);
		                        DestroyObject(Fire4Object26);
		                        DestroyObject(Fire4Object27);
		                        DestroyObject(Fire4Object28);
		                        DestroyObject(Fire4Object29);
		                        DestroyObject(Fire4Object30);
		                        DestroyObject(Fire4Object31);
		                        DestroyObject(Fire4Object32);
		                        DestroyObject(Fire4Object33);
		                        DestroyObject(Fire4Object34);
		                        DestroyObject(Fire4Object35);
		                        DestroyObject(Fire4Object36);
		                        DestroyObject(Fire4Object37);
		                        DestroyObject(Fire4Object38);
		                        DestroyObject(Fire4Object39);
		                        DestroyObject(Fire4Object40);
		                        DestroyObject(Fire4Object41);
		                        DestroyObject(Fire4Object42);

		                        DestroyObject(Fire4Object1);
		                        DestroyObject(Fire4Object2);
		                        DestroyObject(Fire4Object3);
		                        DestroyObject(Fire4Object4);
		                        DestroyObject(Fire4Object5);
		                        DestroyObject(Fire4Object6);
		                        DestroyObject(Fire4Object7);
		                        DestroyObject(Fire4Object8);
		                        DestroyObject(Fire4Object9);
		                        DestroyObject(Fire4Object10);
		                        DestroyObject(Fire4Object11);
		                        DestroyObject(Fire4Object12);
		                        DestroyObject(Fire4Object13);
		                        DestroyObject(Fire4Object14);
		                        DestroyObject(Fire4Object15);
		                        DestroyObject(Fire4Object16);
		                        DestroyObject(Fire4Object17);
		                        DestroyObject(Fire4Object18);
		                        DestroyObject(Fire4Object19);
		                        DestroyObject(Fire4Object20);
		                        DestroyObject(Fire4Object21);
		                        DestroyObject(Fire4Object22);
		                        DestroyObject(Fire4Object23);
		                        DestroyObject(Fire4Object24);
		                        DestroyObject(Fire4Object25);
		                        DestroyObject(Fire4Object26);
		                        DestroyObject(Fire4Object27);
		                        DestroyObject(Fire4Object28);
		                        DestroyObject(Fire4Object29);
		                        DestroyObject(Fire4Object30);
		                        DestroyObject(Fire4Object31);
		                        DestroyObject(Fire4Object32);
		                        DestroyObject(Fire4Object33);
		                        DestroyObject(Fire4Object34);
		                        DestroyObject(Fire4Object35);
		                        DestroyObject(Fire4Object36);
		                        DestroyObject(Fire4Object37);
		                        DestroyObject(Fire4Object38);
		                        DestroyObject(Fire4Object39);
		                        DestroyObject(Fire4Object40);
		                        DestroyObject(Fire4Object41);
		                        DestroyObject(Fire4Object42);

		                        IsThereAFire = 0;

								printf("[system] IsThereAFire = %d", IsThereAFire);

								new string[256];
								format(string, sizeof(string), "* %s has attempted to extinguish the fire, and succeeded", GetName(playerid));
								NearByMessage(playerid, PURPLE, string);
							}
						}
					}
				}
			}
}

public CityTrashT()
{
	new TrashVar = dini_Int("Assets.ini", "CityTrash");

	if(TrashVar < 150000)
	{
		new newTrash = TrashVar+200;
		dini_IntSet("Assets.ini", "CityTrash", newTrash+5000);
	}
	else
	{
	    print("[system][INFO]The city is now at full capacity.");
	    for(new i=0;i<MAX_PLAYERS;i++)

	    if(Jobs[Player[i][Job]][JobType] == 8)
		{
		    SendClientMessage(i, WHITE, "The city is full of trash, please clean it up.");
		}
	}
}

public FuelRand()
{
	RandomFuel();
}

public EngineStart(playerid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	new vID = GetPlayerVehicleID(playerid);
 	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
 	StartingEngine[playerid] = 0;

    if(fuel[vID] == 0)
	{
	    SendClientMessage(playerid, GREY, "This vehicle is out of fuel.");
	    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
	}
	else
	{
		new szMessage[128];
	    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, lights, alarm, doors, bonnet, boot, objective);
	    format(szMessage, sizeof(szMessage), "* The engine would start ((%s))", GetName(playerid));
		NearByMessage(playerid, PURPLE, szMessage);
	}
}

/*public EngineUpgrade2(playerid)
{
	new vID = GetPlayerVehicleID(playerid);

	if(Vehicles[vID][CarGroup] == 1)
	{
	    if(Player[playerid][CopDuty] == 1)
	    {
	        VehicleVel5(playerid);
	    }
	}

	if(vID == Player[playerid][CarLinkID])
	{
	    if(Player[playerid][v1ENGINE] == 1)
	    {
	        VehicleVel2(playerid);
	    }

	    if(Player[playerid][v1ENGINE] == 2)
	    {
	        VehicleVel3(playerid);
	    }

        if(Player[playerid][v1ENGINE] == 3)
	    {
	        VehicleVel4(playerid);
	    }

	    if(Player[playerid][V1TURBO] == 1)
	    {
            VehicleVel2(playerid);
	    }
	}

	if(vID == Player[playerid][Car2LinkID])
	{
	    if(Player[playerid][v2ENGINE] == 1)
	    {
	        VehicleVel2(playerid);
	    }

	    if(Player[playerid][v2ENGINE] == 2)
	    {
	        VehicleVel3(playerid);
	    }

        if(Player[playerid][v2ENGINE] == 3)
	    {
	        VehicleVel4(playerid);
	    }

	    if(Player[playerid][v2TURBO] == 1)
	    {
            VehicleVel2(playerid);
	    }
	}

	if(vID == Player[playerid][Car3LinkID])
	{
	    if(Player[playerid][v3ENGINE] == 1)
	    {
	        VehicleVel2(playerid);
	    }

	    if(Player[playerid][v3ENGINE] == 2)
	    {
	        VehicleVel3(playerid);
	    }

        if(Player[playerid][v3ENGINE] == 3)
	    {
	        VehicleVel4(playerid);
	    }

	    if(Player[playerid][v3TURBO] == 1)
	    {
            VehicleVel2(playerid);
	    }
	}
}*/

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		#pragma tabsize 0
		if(modelid == Player[playerid][Toy1ID])
		{
			Player[playerid][Toy1XO] = fOffsetX;
			Player[playerid][Toy1YO] = fOffsetY;
			Player[playerid][Toy1ZO] = fOffsetZ;

			Player[playerid][Toy1XR] = fRotX;
			Player[playerid][Toy1YR] = fRotY;
			Player[playerid][Toy1ZR] = fRotZ;

			Player[playerid][Toy1XS] = fScaleX;
			Player[playerid][Toy1YS] = fScaleY;
			Player[playerid][Toy1ZS] = fScaleZ;

			SendClientMessage(playerid, WHITE, "All changes have succesfully saved.");

		}
		if(modelid == Player[playerid][Toy2ID])
		{
			Player[playerid][Toy2XO] = fOffsetX;
			Player[playerid][Toy2YO] = fOffsetY;
			Player[playerid][Toy2ZO] = fOffsetZ;

			Player[playerid][Toy2XR] = fRotX;
			Player[playerid][Toy2YR] = fRotY;
			Player[playerid][Toy2ZR] = fRotZ;

			Player[playerid][Toy2XS] = fScaleX;
			Player[playerid][Toy2YS] = fScaleY;
			Player[playerid][Toy2ZS] = fScaleZ;

			SendClientMessage(playerid, WHITE, "All changes have succesfully saved.");

		}
		if(modelid == Player[playerid][Toy3ID])

			Player[playerid][Toy3XO] = fOffsetX;
			Player[playerid][Toy3YO] = fOffsetY;
			Player[playerid][Toy3ZO] = fOffsetZ;

			Player[playerid][Toy3XR] = fRotX;
			Player[playerid][Toy3YR] = fRotY;
			Player[playerid][Toy3ZR] = fRotZ;

			Player[playerid][Toy3XS] = fScaleX;
			Player[playerid][Toy3YS] = fScaleY;
			Player[playerid][Toy3ZS] = fScaleZ;

			SendClientMessage(playerid, WHITE, "All changes have succesfully saved.");
	}
}
/*public NOSTIMER2(playerid)
{
	new vID = GetPlayerVehicleID(playerid);
	new string[128];

	if(Player[playerid][v1NOSFUEL] > 0)
	{
		if(vID == Player[playerid][CarLinkID])
		{
			Player[playerid][v1NOSFUEL] -= 1;
			VehicleVel1(playerid);
			dini_IntSet(string, "v1NOSFUEL", Player[playerid][v1NOSFUEL]);
		}
	}

	if(Player[playerid][v2NOSFUEL] > 0)
	{
		if(vID == Player[playerid][Car2LinkID])
		{
			Player[playerid][v2NOSFUEL] -= 1;
			VehicleVel1(playerid);
			dini_IntSet(string, "v2NOSFUEL", Player[playerid][v2NOSFUEL]);
		}
	}

	if(Player[playerid][v3NOSFUEL] > 0)
	{
		if(vID == Player[playerid][Car3LinkID])
		{
			Player[playerid][v3NOSFUEL] -= 1;
			VehicleVel1(playerid);
			dini_IntSet(string, "v3NOSFUEL", Player[playerid][v3NOSFUEL]);
		}
	}
	if(Player[playerid][NosStreak] < 10)
	{
	    Player[playerid][NosStreak] += 1;
	}
	else
	{
	    new Float:vHP;
	    new randomHP = random(200);
	    GetVehicleHealth(vID, vHP);
	    SetVehicleHealth(vID, vHP-randomHP);
	    Player[playerid][NosStreak] = 0;
	}
}
*/
public SpawnCar(playerid)
{
	new vID = GetPlayerVehicleID(playerid);
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vID, 1, lights, alarm, doors, bonnet, boot, objective);
}

public DProgressBar(playerid)
{
    DestroyProgressBar(Fuel[playerid]);
    Fuel[playerid] = INVALID_BAR_ID;
}

public VehicleAlarm(playerid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
	new vID = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vID, engine, lights, 0, doors, bonnet, boot, objective);
}

public Hotwire(playerid)
{
	new vID,
		string[128],
		rand = random(2);

	vID = GetPlayerVehicleID(playerid);

	if(rand == 0)
	{
		format(string, sizeof(string), "* %s has succesfully hotwired the vehicle.", GetName(playerid));
		printf("%s has hotwired vehicle ID %d", GetName(playerid), vID);
		NearByMessage(playerid, RPCOLOUR, string);

		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);

		SetVehicleParamsEx(vID, 1, lights, alarm, doors, bonnet, boot, objective);
		Hotwiring[playerid] = 0;
	}

	if(rand == 1)
	{
	    format(string, sizeof(string), "* %s has failed to hotwire the vehicle.", GetName(playerid));
	    NearByMessage(playerid, RPCOLOUR, string);

		new randomhp = random(45);
		new Float: oldHP,
		    Float: newHP;

		GetPlayerHealth(playerid, oldHP);
		newHP = oldHP-randomhp;

		SetPlayerHealth(playerid, newHP);
		Hotwiring[playerid] = 0;
	}

}

public FuelCheck(playerid)
{
	new vID = GetPlayerVehicleID(playerid);

	if(vID > 0)
	{
	    if(fuel[vID] == 0)
	    {
	        new engine, lights, alarm, doors, bonnet, boot, objective;
    		GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
    		SetVehicleParamsEx(vID, 0, lights, alarm, doors, bonnet, boot, objective);
	    }
	}
}

public VehIDCheck(playerid)
{
	if(Player[playerid][CarLinkID] == 0)
	{
		Player[playerid][PlayerCarModel] = 0;
	}
	if(Player[playerid][Car2LinkID] == 0)
	{
		Player[playerid][PlayerCarModel2] = 0;
	}
	if(Player[playerid][Car3LinkID] == 0)
	{
		Player[playerid][PlayerCarModel3] = 0;
	}
}

public CheckEngine()
{
    new Float:vhp;
    for(new vehicleid; vehicleid<MAX_VEHICLES;vehicleid++)
    {
		if(GetVehicleModel(vehicleid)==0)continue;
        GetVehicleHealth(vehicleid,vhp);
        if(vhp<400.1)
		{
			SetVehicleHealth(vehicleid,400);
        	new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		}
	}
}

public HungerCheck(playerid)
{
	new Float: HCHealth;
	if(Player[playerid][PlayerHunger] == 0)
	{
	    GetPlayerHealth(playerid, HCHealth);
	    SetPlayerHealth(playerid, HCHealth-15);
		if(HCHealth < 20)
		{
     		SendClientMessage(playerid, YELLOW, "You're starting to loose health, find something to eat.");
		}
	}
	return 1;
}

public HungerTimer()
{
	#pragma tabsize 0

   	 	for(new i; i<MAX_PLAYERS; i++)
        {
                if(IsPlayerConnected(i) && Player[i][PrisonDuration] == 0)
                {
                    Player[i][PlayerHunger] -= 1;
                }
        }
        return 1;
}

public HolsterTimer()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        // Slots 9, 8, 7, 6 worden gebruikt
	        // Slot 9 = wepslot3
	        // Slot 8 = wepslot4
	        // Slot 7 = wepslot5
	        // Slot 6 = wepslot6
	        // Slot 5 = melee
				switch(Player[i][WepSlot10])
				{
				    case 0:
	                {
	                    if(IsPlayerAttachedObjectSlotUsed(i, 4))
			            {
			                RemovePlayerAttachedObject(i, 4);
			            }
	                }
	                case 15:
	                {
	                    if(GetPlayerWeapon(i) != 15)
					    {
					        SetPlayerAttachedObject(i, 4, 334, 7, 0.0, 0.0, -0.18, 100.0, 45.0, 0.0);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 4);
					    }
	                }
				}
	            switch(Player[i][WepSlot1])
	            {
	                case 0:
	                {
	                    if(IsPlayerAttachedObjectSlotUsed(i, 5))
			            {
			                RemovePlayerAttachedObject(i, 5);
			            }
	                }
	                case 3:
	                {
	                    if(GetPlayerWeapon(i) != 3)
					    {
					        SetPlayerAttachedObject(i, 5, 334, 7, 0.0, 0.0, -0.18, 100.0, 45.0, 0.0);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 5);
					    }
	                }
	                case 5:
	                {
	                    if(GetPlayerWeapon(i) != 5)
					    {
					        SetPlayerAttachedObject(i, 5, 336, 7, 0.0, 0.0, -0.18, 100.0, 45.0, 0.0);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 5);
					    }
	                }
	                case 6:
	                {
	                    if(GetPlayerWeapon(i) != 6)
					    {
					        SetPlayerAttachedObject(i, 5, 337, 7, 0.0, 0.0, -0.18, 100.0, 45.0, 0.0);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 5);
					    }
	                }
	                case 7:
	                {
	                    if(GetPlayerWeapon(i) != 7)
					    {
					        SetPlayerAttachedObject(i, 5, 338, 7, 0.0, 0.0, -0.18, 100.0, 45.0, 0.0);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 5);
					    }
	                }
	                case 8:
	                {
	                    if(GetPlayerWeapon(i) != 8)
					    {
					        SetPlayerAttachedObject(i, 5, 339, 7, 0.0, 0.0, -0.18, 100.0, 45.0, 0.0);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 5);
					    }
	                }
	            }
	            switch(Player[i][WepSlot3])
	            {
	                case 0:
	                {
	                    if(IsPlayerAttachedObjectSlotUsed(i, 9))
			            {
			                RemovePlayerAttachedObject(i, 9);
			            }
	                }
	                case 25:
					{
					    if(GetPlayerWeapon(i) != 25)
					    {
					        SetPlayerAttachedObject(i, 9, 349, 16, 0.084126, 0.131737, 0.197423, 176.984542, 92.569320, 14.483574, 1.000000, 1.000000, 1.000000);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 9);
					    }
					}
					case 27:
					{
					    if(GetPlayerWeapon(i) != 27)
					    {
                            SetPlayerAttachedObject(i, 9, 351, 16, 0.100795, 0.057224, -0.082939, 180.000000, 243.483581, 180.000000, 1.000000, 1.000000, 1.000000);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 9);
					    }
					}
	            }
	            switch(Player[i][WepSlot4])
	            {
	                case 0:
	                {
	                    if(IsPlayerAttachedObjectSlotUsed(i, 8))
			            {
			                RemovePlayerAttachedObject(i, 8);
			            }
	                }
	                case 29:
	                {
	                    if(GetPlayerWeapon(i) != 29)
					    {
					        SetPlayerAttachedObject(i, 8, 353, 7, 0.008329, -0.067031, -0.060214, 289.865051, 17.391622, 7.667663, 1.000000, 1.000000, 1.000000);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 8);
					    }
	                }
	            }
	            switch(Player[i][WepSlot5])
	            {
	                case 0:
	                {
	                    if(IsPlayerAttachedObjectSlotUsed(i, 7))
			            {
			                RemovePlayerAttachedObject(i, 7);
			            }
	                }
	                case 30:
	                {
	                    if(GetPlayerWeapon(i) != 30)
					    {
					        SetPlayerAttachedObject(i, 7, 355, 1, -0.130044, -0.127836, 0.025491, 2.044970, 6.239807, 6.833646, 1.000000, 1.000000, 1.000000);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 7);
					    }
	                }
	                case 31:
					{
					    if(GetPlayerWeapon(i) != 31)
					    {
					        SetPlayerAttachedObject(i, 7, 356, 16, 0.019280, 0.118553, 0.396286, 70.920410, 274.673919, 253.978057, 1.000000, 1.000000, 1.000000);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 7);
					    }
					}
	            }
	            switch(Player[i][WepSlot6])
	            {
	                case 0:
	                {
	                    if(IsPlayerAttachedObjectSlotUsed(i, 6))
			            {
			                RemovePlayerAttachedObject(i, 6);
			            }
	                }
	                case 34:
	                {
	                    if(GetPlayerWeapon(i) != 34)
					    {
					        SetPlayerAttachedObject(i, 6, 358, 16, 0.019280, 0.118553, 0.396286, 70.920410, 274.673919, 253.978057, 1.000000, 1.000000, 1.000000);
					    }
					    else
					    {
					        RemovePlayerAttachedObject(i, 6);
	    				}
         			}
         		}
	    }
	}
	return 1;
}

public OnGameModeInit()
{
	mysql = mysql_connect(host, user, db, pass);
	//SetTimer("SavePlayerD", 300000, true);
	//SetTimer("FiveSecondTimer", 5000, true);
	SetTimer("SecondTimer", 1000, true);
 	SetTimer("FireTimer", 1200000, true);
	SetTimer("FuelRand", 3600000, true);
	SetTimer("FuelLower", 44000, true);
    SetTimer("HungerTimer", 300000, true);
    SetTimer("CheckEngine", 500, true);
    SetTimer("VehicleAlarm", 20000, true);
    SetTimer("FuelCheck", 1, true);
    SetTimer("CityTrashT", 100, true);
    SetTimer("HolsterTimer", 200, true);
    SetTimer("RadarTimer", 100, true);
    //SetTimer("OneMinute", 60000, true);

    CreateDynamicPickup(1239, 23, BoatShopX, BoatShopY, BoatShopZ, 0, -1, -1, 150.0);
    CreateDynamicPickup(1239, 23, SellFishX, SellFishY, SellFishZ, 0, -1, -1, 150.0);

    //dini_IntSet("Assets.ini", "CityTrash", -10000);

	if(!strcmp(dini_Get("Assets.ini", "FuelPrice"), "0", true))
	{
	    dini_IntSet("Assets.ini", "FuelPrice", 4);
	    print("[system][error] The fuelprice was 0, it has been set to 4.");
	}

	// Gas Station Textdraws & icons
	for(new i = 0; i < 10; i++)
	{
		format(Bolo[i], 255, "N/A");
	}

	new stringc[256];

	format(stringc, sizeof(stringc), "Gas Station \n$4/unit\n(( /refuel ))", FuelPrice);

	Create3DTextLabel(stringc, YELLOW, GasStation1X, GasStation1Y, GasStation1Z, GasStationTextdraw, 0, 0);
	Create3DTextLabel(stringc, YELLOW, GasStation2X, GasStation2Y, GasStation2Z, GasStationTextdraw, 0, 0);
	Create3DTextLabel(stringc, YELLOW, GasStation3X, GasStation3Y, GasStation3Z, GasStationTextdraw, 0, 0);
	Create3DTextLabel(stringc, YELLOW, GasStation4X, GasStation4Y, GasStation4Z, GasStationTextdraw, 0, 0);
    Create3DTextLabel(stringc, YELLOW, GasStation5X, GasStation5Y, GasStation5Z, GasStationTextdraw, 0, 0);
    Create3DTextLabel(stringc, YELLOW, GasStation6X, GasStation6Y, GasStation6Z, GasStationTextdraw, 0, 0);
	Create3DTextLabel(stringc, YELLOW, GasStation7X, GasStation7Y, GasStation7Z, GasStationTextdraw, 0, 0);
	
    for(new i=0;i<MAX_VEHICLES;i++) {
        fuel[i] = 15;
        if(Vehicles[i][CarGroup] == 1)
        {
            fuel[i] = 75;
        }
    }

	djson_GameModeInit();
	AntiDeAMX();

	new hour, minute, second;
	print("[system] Please wait whilst the script initiates...");

	if(! fexist("Logs/AdminActions.log"))
	{
		dini_Create("Logs/AdminActions.log");
	}

	if(! fexist("Logs/PMchat.log"))
	{
		dini_Create("Logs/PMchat.log");
	}

	if(! fexist("Logs/OOCChat.log"))
	{
		dini_Create("Logs/OOCChat.log");
	}

	if(! fexist("Logs/ICChat.log"))
	{
		dini_Create("Logs/ICChat.log");
	}
	{
	    ManualVehicleEngineAndLights();
	}
	gettime(hour, minute, second);
	#pragma unused minute
	#pragma unused second

	//UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	LoadFilesIntoVars();

	SetGameModeText(VERSION);

	SetWorldTime(hour);


	// Removed, please feel free to re-add this whenever you have a web URL to set folks!
	/*Textdraw1 = TextDrawCreate(1.000000,433.000000,"www.Evolved Gaming .tk");
	TextDrawAlignment(Textdraw1, 0);
	TextDrawBackgroundColor(Textdraw1, 0x000000ff);
	TextDrawFont(Textdraw1, 2);
	TextDrawLetterSize(Textdraw1, 0.499999,1.100000);
	TextDrawColor(Textdraw1, 0xffffffff);
	TextDrawSetOutline(Textdraw1, 1);
	TextDrawSetProportional(Textdraw1, 1);
	TextDrawSetShadow(Textdraw1, 1);*/

	// Phone Answer (inside vehicle)
	CellPhoneTextDrawInVehicle = TextDrawCreate(610.0, 400.0, "~r~ ~k~~VEHICLE_TURRETRIGHT~ ~w~to answer the call.");
	TextDrawUseBox(CellPhoneTextDrawInVehicle, 0);
	TextDrawFont(CellPhoneTextDrawInVehicle, 2);
	TextDrawSetShadow(CellPhoneTextDrawInVehicle, 0);
    TextDrawSetOutline(CellPhoneTextDrawInVehicle, 1);
    TextDrawBackgroundColor(CellPhoneTextDrawInVehicle, 0x000000FF);
    TextDrawColor(CellPhoneTextDrawInVehicle, 0xFFFFFFFF);
    TextDrawAlignment(CellPhoneTextDrawInVehicle, 3);

	// Phone Answer (out of vehicle)
	CellPhoneTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_DUCK~ ~w~to answer the call.");
	TextDrawUseBox(CellPhoneTextDraw, 0);
	TextDrawFont(CellPhoneTextDraw, 2);
	TextDrawSetShadow(CellPhoneTextDraw, 0);
    TextDrawSetOutline(CellPhoneTextDraw, 1);
    TextDrawBackgroundColor(CellPhoneTextDraw, 0x000000FF);
    TextDrawColor(CellPhoneTextDraw, 0xFFFFFFFF);
    TextDrawAlignment(CellPhoneTextDraw, 3);

     // Animation
	AnimationTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_JUMPING~ ~w~ to stop the animation.");
	TextDrawUseBox(AnimationTextDraw, 0);
	TextDrawFont(AnimationTextDraw, 2);
	TextDrawSetShadow(AnimationTextDraw, 0);
    TextDrawSetOutline(AnimationTextDraw, 1);
    TextDrawBackgroundColor(AnimationTextDraw, 0x000000FF);
    TextDrawColor(AnimationTextDraw, 0xFFFFFFFF);
    TextDrawAlignment(AnimationTextDraw, 3);

     // Sprunk
	SprunkTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_FIREWEAPON~ ~w~ to drink the Sprunk ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ to drop the Sprunk.");
	TextDrawUseBox(SprunkTextDraw, 0);
	TextDrawFont(SprunkTextDraw, 2);
	TextDrawSetShadow(SprunkTextDraw, 0);
    TextDrawSetOutline(SprunkTextDraw, 1);
    TextDrawBackgroundColor(SprunkTextDraw, 0x000000FF);
    TextDrawColor(SprunkTextDraw, 0xFFFFFFFF);
    TextDrawAlignment(SprunkTextDraw, 3);

    // Exit
	ExitTextdraw = TextDrawCreate(610.0, 400.0, "Go to the door and press ~r~ ~k~~PED_DUCK~ ~w~ to exit the building.");
	TextDrawUseBox(ExitTextdraw, 0);
	TextDrawFont(ExitTextdraw, 2);
	TextDrawSetShadow(ExitTextdraw, 0);
    TextDrawSetOutline(ExitTextdraw, 1);
    TextDrawBackgroundColor(ExitTextdraw, 0x000000FF);
    TextDrawColor(ExitTextdraw, 0xFFFFFFFF);
    TextDrawAlignment(ExitTextdraw, 3);

	InitVehicles();
	LockVehicles();
	InitHouses();
	InitBusinesses();
	InitJobs();
	InitGroups();
	InitPlots();
	InitATMs();
	InitFactions_Main();
	InitGarages();
	InitFurniture();
	//InitWeedPlants();

	ShowPlayerMarkers(0);
	GeneralDataTimer = SetTimer("SaveGeneralData", 21600000, true);
	PickupsTimer = SetTimer("PickupMessages", 1500, true);
	//AFKTimer = SetTimer("IdleKick", 600000, 1);
	AntiCheatTimer = SetTimer("AntiC", 1000, true);
	WeatherTimer = SetTimer("DynamicWeather", 7200000, true);
	OneSecondTimer = SetTimer("OneSecondPublic", 1000, true);
	OneMinuteTimer = SetTimer("OneMinutePublic", 60000, true);
	
	LoadObjects();
	
	print("--------------------------------------------------------------------------");
	print("[system] Script Initialized.");
	print("--------------------------------------------------------------------------");

	// UsePlayerPedAnims();
	DynamicWeather();
	
    return 1;
}

public FuelLower()
{
	for(new i=0;i<MAX_VEHICLES;i++)
	{
        new vID = GetPlayerVehicleID(i);
       	new engine, lights, alarm, doors, bonnet, boot, objective;
       	GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
       	    if(engine == VEHICLE_PARAMS_ON)
       	    {
       	        new vFuelOld, vFuelNew;
       	        vFuelOld = fuel[vID];
       	        vFuelNew = vFuelOld-1;
       	        fuel[vID] = vFuelNew;

       	        SetProgressBarValue(Fuel[i], fuel[vID]);
       	        UpdateProgressBar(Fuel[i], i);
       	    }
       	    if (fuel[vID]<1)
            {
                fuel[vID] = 0;
                SetVehicleParamsEx(vID, 0, lights, alarm, doors, bonnet, boot, objective);
            }
		}
	return 1;
}

public timer_refuel(playerid)
{
    new vid = GetPlayerVehicleID(playerid);
	 fuel[vid] = fuel[vid] = 100;
	 isrefuelling[playerid] = 0;
	 TogglePlayerControllable(playerid,1);
	 new string[128];
	format(string, sizeof(string), "* %s has finished refuelling their vehicle.", GetName(playerid));
	NearByMessage(playerid, RPCOLOUR, string);
}

public DynamicWeather()
{
   GlobalWeather = random(17);
   SetWeather(GlobalWeather);
   return 1;
}

stock FBIObjects()
{
    CreateDynamicObject(16637, 228.22, 151.12, 1003.03,   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
	CreateDynamicObject(16637, 275.59, 189.36, 1006.81,   90.00, 0.00, 270.00, -1, -1, -1, 100.0);
	CreateDynamicObject(17951, 238.78, 193.84, 1007.87,   90.00, 0.00, 90.00, -1, -1, -1, 100.0);
	CreateDynamicObject(14782, 205.13, 168.18, 1003.01,   0.00, 0.00, 90.00, -1, -1, -1, 100.0);
}

stock VIPobjects()
{
	CreateDynamicPickup(1274, 1, 154.1770, -1946.6176, 5.3871, -1);
	Create3DTextLabel("VIP Lounge\n /enterv", LIGHTRED, 1456.3114,2773.2874,10.8203, 90.0, 0, 0);
	Create3DTextLabel("VIP Lockers\n /viplocker", YELLOW, 1996.4487, 1031.6616, 994.4688, 90.0, 3432, 0);
	Create3DTextLabel("Skin Machine\n /vipclothes", ADUTYCOL, 1990.0588, 1031.5123, 994.4688, 90.0, 3432, 0);
	CreateDynamicObject(2754, 1990.12, 1032.31, 994.37,   0.00, 0.00, 90.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1959.56, 1018.56, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1959.55, 1014.67, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1959.59, 1022.51, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1963.51, 1022.51, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1967.45, 1022.50, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1963.54, 1018.55, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1963.52, 1014.68, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1967.45, 1018.59, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(19128, 1967.43, 1014.68, 991.52,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(14782, 1996.29, 1032.40, 994.47,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
	CreateDynamicObject(1978, 1985.83, 1030.15, 994.50,   0.00, 0.00, 0.00, 3432, -1, -1, 100.0);
}

stock RemoveObjects(playerid)
{
	// Wright Enteprise - HQ
	RemoveBuildingForPlayer(playerid, 1421, 1065.2813, 2078.8047, 10.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 1071.7578, 2079.2266, 10.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1073.8984, 2078.3438, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1069.0313, 2079.1406, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 1057.4141, 2080.1016, 10.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1059.5625, 2079.2109, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1071.8906, 2094.5781, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 939, 1062.4219, 2093.1563, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1066.3984, 2094.5781, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1065.4453, 2093.3359, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1072.5703, 2093.3359, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1061.1406, 2091.9219, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 939, 1064.2188, 2099.2813, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1072.2734, 2099.2813, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1081.3438, 2096.6953, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1064.1172, 2100.4688, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1071.2422, 2100.4688, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 1082.5000, 2104.2734, 10.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1081.0938, 2102.0234, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1080.7188, 2105.8359, 10.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1066.3984, 2108.1719, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1071.8906, 2108.1719, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1061.0703, 2108.4922, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1061.1406, 2107.3516, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1081.5313, 2108.3047, 10.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1072.7422, 2109.4922, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, 1084.2578, 2110.3828, 10.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1414, 1065.6172, 2109.4922, 10.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1448, 1063.1094, 2110.9063, 9.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 1061.1719, 2111.5547, 10.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 1082.5000, 2113.0234, 10.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1421, 1062.3594, 2115.2891, 10.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1072.8672, 2116.3516, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1448, 1066.5313, 2111.9531, 9.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1448, 1068.2734, 2111.9609, 9.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1056.7188, 2119.7031, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1056.7188, 2124.8906, 12.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1448, 1069.3125, 2121.2422, 9.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1061.6328, 2118.4531, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1071.4297, 2116.9688, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1070.2266, 2118.7891, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1060.5781, 2120.3438, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1062.4453, 2121.3750, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1061.2578, 2124.0625, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1061.2109, 2127.3828, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1059.9219, 2125.1172, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1431, 1061.1172, 2130.0391, 10.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1448, 1067.8438, 2120.5547, 9.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1092.5703, 2101.0703, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 1092.5000, 2105.5078, 16.7734, 0.25);

	// Montgomery Gas Station
	RemoveBuildingForPlayer(playerid, 1410, 1380.0391, 453.6797, 19.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1384.3359, 451.7188, 19.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1388.6406, 449.7578, 19.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1392.7969, 447.5234, 19.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1396.7734, 445.0156, 19.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 1395.9297, 444.8438, 18.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1411.7578, 438.7578, 19.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1412.9844, 443.2813, 19.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1449, 1412.8047, 450.0000, 19.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, 1413.4141, 451.1172, 19.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1414.2109, 447.8359, 19.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1415.6094, 454.3594, 19.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1346.1250, 471.2266, 19.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1369.9609, 458.2734, 19.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1361.3281, 462.1172, 19.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1365.6641, 460.2266, 19.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1375.7422, 455.6328, 19.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1348, 1399.7344, 459.7422, 19.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1450, 1394.0391, 462.2266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1482, 1401.9063, 461.3594, 20.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1409.6250, 467.4844, 19.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1405.6172, 469.8984, 19.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1413.6719, 465.0469, 19.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1415.9766, 459.0703, 19.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1350.0469, 479.8359, 19.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1348.0781, 475.5391, 19.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, 1373.1719, 471.1016, 19.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1386.1328, 478.3438, 19.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1399.1484, 472.7188, 19.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1381.8359, 480.1953, 19.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1482, 1390.5078, 472.3984, 20.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1370.3750, 484.5078, 19.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1374.7656, 482.7500, 19.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, 1368.6250, 484.1406, 19.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1448, 1357.7188, 481.7031, 19.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, 1358.4844, 483.6563, 19.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1450, 1355.8516, 483.3906, 19.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1353.9375, 488.3984, 19.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1365.9844, 486.2656, 19.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1357.2500, 489.7500, 19.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1358, 1356.3750, 485.1875, 20.3750, 0.25);

	// Palomino Creek Pier
	RemoveBuildingForPlayer(playerid, 13483, 2113.5781, -96.7344, 0.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 12990, 2113.5781, -96.7344, 0.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.8203, -84.4063, -0.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1369, 2104.0156, -105.2656, 1.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2122.3750, -83.3828, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.5313, -82.8906, -0.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2120.5156, -79.0859, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.4688, -69.7344, 0.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.4922, -73.6172, 0.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 12991, 2161.6328, -102.4766, 1.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2160.3516, -100.8594, 2.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 933, 2159.4063, -93.9219, 1.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 933, 2158.1094, -94.1406, 2.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 933, 2155.9141, -121.0391, 0.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2117.8438, -67.8359, 0.1328, 0.25);

	// Dillimore
	RemoveBuildingForPlayer(playerid, 1438, 670.1094, -550.6563, 15.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 663.3750, -541.6250, 15.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 710.5625, -470.4844, 15.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 710.5938, -468.1797, 15.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 12977, 679.1406, -455.7734, 16.3359, 0.25);

	// Montgomery
	RemoveBuildingForPlayer(playerid, 1440, 1383.2813, 375.4297, 19.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1413.2109, 413.6250, 19.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1412.1875, 411.6641, 19.2500, 0.25);

	// Palomino Creek
	RemoveBuildingForPlayer(playerid, 3276, 2139.7891, 90.2891, 31.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2151.5391, 88.4453, 29.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2163.3281, 86.6016, 27.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 12909, 2159.4297, 91.1250, 19.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2142.5469, 97.5859, 31.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2154.4609, 95.6406, 29.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2166.3828, 93.6875, 27.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2103.7578, 94.2734, 32.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 2106.7266, 102.9688, 32.8750, 0.25);

	// Apocalypse
	/*
    RemoveBuildingForPlayer(playerid, 3991, 1608.1953, -1721.8047, 26.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 3999, 1785.9766, -1564.8594, 25.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 4020, 1544.8359, -1516.8516, 32.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4026, 1497.7969, -1543.7109, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1753.5859, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1729.9375, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1780.1094, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1808.4922, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1839.8672, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 4043, 1608.1953, -1721.8047, 26.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4046, 1479.5234, -1852.6406, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 4047, 1531.6328, -1852.6406, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 4049, 1330.3750, -1793.0781, 22.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 4050, 1350.7578, -1802.2813, 12.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 4051, 1371.8203, -1754.8203, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 4054, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4061, 1544.8359, -1516.8516, 32.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4062, 1529.5000, -1470.5313, 32.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4065, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 4075, 1791.7969, -1716.9844, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4077, 1781.4766, -1648.4219, 26.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 4083, 1334.9766, -1644.1875, 11.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 4096, 1602.9141, -1608.1641, 19.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 4097, 1605.1406, -1728.9375, 18.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 4116, 1345.6250, -1552.9609, 48.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 4129, 1595.0000, -1603.0234, 27.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 4130, 1595.0000, -1603.0234, 27.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 4177, 1686.4375, -1570.1484, 18.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 4181, 1721.7500, -1657.9297, 30.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 4187, 1664.6484, -1691.3203, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 4191, 1353.2578, -1764.5313, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 4194, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1767.2109, -1617.5391, 15.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 4212, 1661.8047, -1826.7188, 24.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 4213, 1654.2813, -1636.8750, 57.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 4214, 1589.4531, -1817.5625, 22.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 4216, 1722.7109, -1661.2109, 38.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4217, 1449.2500, -1852.5703, 22.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 4218, 1497.7031, -1546.6172, 43.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 4219, 1330.3281, -1792.5938, 23.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 4221, 1406.7109, -1499.5625, 69.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 4222, 1575.9375, -1516.5781, 36.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 4223, 1596.5547, -1817.2969, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1407.1953, -1749.3125, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1807.5156, -1625.8828, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 1408.6563, -1407.1719, 28.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1482.0859, -1859.9688, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1648.0156, -1795.0703, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1805.0234, -1692.4453, 25.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4236, 1387.0313, -1715.0234, 30.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 1413.6328, -1721.8203, 28.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1405.2344, -1821.1172, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1411.2188, -1872.9297, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1405.1563, -1871.6016, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4193, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 4010, 1350.7578, -1802.2813, 12.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 4231, 1342.0547, -1800.2188, 25.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1427.3047, -1890.2891, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1442.9375, -1871.4219, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1465.4766, -1848.2500, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1466.9453, -1847.8438, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1419.7344, -1846.5469, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1420.4297, -1845.3438, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1419.6953, -1844.2031, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1420.4922, -1842.4375, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1419.7266, -1842.8516, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1419.6719, -1842.0313, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 4170, 1433.9531, -1844.4063, 21.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1482.0859, -1859.9688, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 4004, 1479.5234, -1852.6406, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1468.0625, -1847.7891, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 4171, 1503.3984, -1848.3359, 21.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4112, 1330.3750, -1793.0781, 22.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 4022, 1353.2578, -1764.5313, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1532, 1353.1328, -1759.6563, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1311.2734, -1746.1172, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1345.7656, -1740.6172, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1325.7109, -1732.8281, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1335.1953, -1731.7813, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1357.5156, -1732.9375, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4021, 1371.8203, -1754.8203, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 4235, 1387.0313, -1715.0234, 30.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1404.9141, -1765.2656, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 4173, 1427.2734, -1756.1797, 15.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1415.3125, -1748.5625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1429.5313, -1748.4219, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1447.9063, -1748.2266, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1413.6328, -1721.8203, 28.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1516.0000, -1748.6016, 13.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 4005, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4106, 1342.9688, -1652.2656, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 4011, 1334.9766, -1644.1875, 11.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4121, 1336.0156, -1604.7344, 25.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1428.9375, -1605.8203, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1416.5859, -1591.7422, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1443.2031, -1592.9453, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4113, 1345.6250, -1552.9609, 48.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3586, 1430.2344, -1496.2266, 16.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 4205, 1432.6875, -1473.6094, 15.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1434.5313, -1501.1016, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1435.8672, -1496.2500, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1405.7656, -1424.2500, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 4239, 1407.9063, -1407.3984, 33.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1411.6250, -1430.1328, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1411.5703, -1416.5391, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1408.6563, -1407.1719, 28.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4016, 1497.7969, -1543.7109, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 4180, 1502.6094, -1467.1250, 24.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 4048, 1531.6328, -1852.6406, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 4227, 1614.6328, -1862.2109, 14.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 3988, 1596.5547, -1817.2969, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 4190, 1629.6484, -1765.8047, 15.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1533.2656, -1749.0234, 12.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1530.1172, -1717.0078, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1693.3906, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1536, 1555.9297, -1677.1250, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1677.7266, 16.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1536, 1555.8906, -1674.1094, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 646, 1553.8672, -1673.4609, 16.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1664.6250, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1658.3438, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1606.6797, -1746.3281, 32.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3757, 1598.1406, -1742.4688, 31.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4091, 1605.1406, -1728.9375, 18.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1601.6484, -1690.1328, 33.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1641.0547, -1706.0234, 18.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1641.0547, -1689.4297, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1641.0547, -1680.2734, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1648.0156, -1795.0703, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 4014, 1664.6484, -1691.3203, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1656.4922, -1689.3281, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1661.8438, -1689.2500, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 4184, 1660.0781, -1674.1250, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1661.8438, -1673.4688, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1656.4922, -1673.5469, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1647.0234, -1663.5938, 22.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1664.0781, -1663.5938, 22.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1676.6328, -1689.4297, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1676.6328, -1683.8984, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1676.6328, -1673.2891, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 1700.1328, -1666.4063, 19.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 1700.1328, -1669.4219, 19.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1788.5078, -1816.5703, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1801.8828, -1817.3047, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1717.5000, -1721.4063, 12.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1721.6719, -1721.2891, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1713.0938, -1721.1797, 13.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1717.5000, -1720.5234, 12.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1721.6719, -1720.3906, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1722.6094, -1721.2891, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1722.6094, -1720.3906, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1733.6563, -1709.1016, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1711.5625, -1703.8203, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 4141, 1721.7500, -1657.9297, 30.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1733.1641, -1695.2109, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 4018, 1791.7969, -1716.9844, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1777.8516, -1677.1953, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1805.0234, -1692.4453, 25.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3979, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4013, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4015, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4188, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4185, 1679.1016, -1634.8203, 13.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1528.9531, -1605.8594, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4090, 1602.9141, -1608.1641, 19.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1646.1172, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1655.4141, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1664.7031, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1674.0000, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 4176, 1686.4375, -1570.1484, 18.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1539.2344, -1481.0781, 8.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1536.5078, -1481.0938, 8.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1534.9297, -1480.9922, 8.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1537.2422, -1479.7422, 8.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1537.9297, -1480.6094, 8.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 4058, 1529.5000, -1470.5313, 32.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 1725.4297, -1637.4375, 19.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 1728.4453, -1637.4375, 19.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1761.4609, -1651.7422, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 4028, 1781.4766, -1648.4219, 26.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 4099, 1770.0469, -1549.4141, 10.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 4079, 1785.9766, -1564.8594, 25.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1792.8047, -1640.9531, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 4189, 1794.6172, -1576.7344, 17.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1799.1563, -1596.5391, 13.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1799.4844, -1594.4063, 14.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1807.4688, -1590.4766, 13.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 4752, 1430.8516, -1340.7500, 23.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 5058, 1457.5625, -1895.9297, 22.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1268, 1841.3359, -1836.4609, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1714.9609, -1909.6328, 12.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1714.9609, -1914.2969, 12.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1727.1953, -1930.8984, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1725.9063, -1923.5000, 12.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1727.1953, -1908.0938, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1727.1953, -1916.3047, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1725.9063, -1908.1797, 12.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1727.1953, -1893.1563, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1725.9063, -1893.5000, 12.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1703.4688, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1710.8359, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1710.8359, -1833.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1703.4688, -1833.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1704.7422, -1829.7969, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1721.1563, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1731.4766, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1741.7969, -1833.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1731.4766, -1833.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1721.1563, -1833.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1723.9297, -1829.7969, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1732.6719, -1830.0781, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1747.1875, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1762.8281, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1778.4766, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1794.1172, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1809.7656, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 1841.3359, -1836.4609, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1442.1250, -1906.3203, 23.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1454.9688, -1906.3203, 23.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1442.1484, -1906.2813, 22.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1454.9922, -1906.2813, 22.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1448.7578, -1901.4141, 22.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1448.7344, -1901.4531, 23.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1440.7344, -1899.8750, 22.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1440.7109, -1899.9141, 23.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1446.3438, -1899.3672, 22.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1468.9453, -1911.5156, 24.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1468.9219, -1899.4922, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1478.6328, -1904.1563, 21.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1478.6094, -1904.1953, 22.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1477.6094, -1899.4922, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1477.6094, -1911.5156, 24.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1485.0469, -1904.1250, 22.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1485.0703, -1904.0859, 21.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1446.3438, -1890.8281, 22.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1468.9219, -1890.8281, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1440.7109, -1886.9375, 23.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1440.7344, -1886.9063, 22.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1465.1875, -1887.8828, 21.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1465.1641, -1887.9219, 22.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1472.3516, -1887.7031, 21.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1472.3281, -1887.7422, 22.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1485.0703, -1887.6328, 21.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1485.0469, -1887.6719, 22.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1478.6328, -1887.7031, 21.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1478.6094, -1887.7422, 22.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1449.5859, -1886.2891, 23.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1449.6094, -1886.2500, 22.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1456.6563, -1886.2500, 22.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1456.6328, -1886.2891, 23.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1561.7969, -1894.7578, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1561.8203, -1894.7188, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1566.1797, -1893.1016, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1573.4531, -1893.1016, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1573.9766, -1894.8281, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1574.0000, -1894.7891, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1561.7969, -1889.8906, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1561.8203, -1889.8594, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1566.1797, -1887.3438, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1561.6250, -1884.8672, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1561.6484, -1884.8281, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1573.4531, -1887.3438, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1574.0000, -1889.9453, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1573.9766, -1889.9844, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1574.0156, -1884.9531, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1574.0391, -1884.9219, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3563, 2063.1328, -1731.7813, 15.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 3559, 2021.1328, -1702.8203, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2022.5938, -1629.7188, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2061.7031, -1717.2734, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3559, 2018.2422, -1732.1719, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3561, 2020.5859, -1717.1875, 15.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3563, 2020.4609, -1641.5078, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3645, 2069.6172, -1556.7031, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3645, 2070.7578, -1586.0156, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 5517, 1883.5234, -1576.4453, 20.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2154.3984, -1580.9453, 16.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2147.1016, -1601.7266, 16.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2182.3359, -1604.1797, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2142.7031, -1657.9297, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2164.9375, -1666.3047, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2141.8672, -1693.3516, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2154.3516, -1713.6641, 17.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 5545, 1971.6563, -1682.3125, 13.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 5634, 1931.3125, -1574.8438, 16.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2074.1797, -1579.1484, 14.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 3561, 2062.3516, -1656.3281, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2063.0234, -1643.9219, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3563, 2063.7813, -1629.0547, 15.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2018.1172, -1656.2344, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 5670, 2059.8672, -1701.2500, 15.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 3772, 1975.5078, -1719.0391, 19.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3773, 1971.2734, -1701.7734, 17.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3774, 1974.9453, -1667.4844, 17.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3772, 1976.1250, -1682.9609, 19.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3773, 1971.3516, -1651.2969, 17.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3774, 1972.3906, -1630.0000, 17.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 5681, 1921.4844, -1778.9141, 18.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1736.9063, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1726.3281, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1958.3672, -1736.5547, 14.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1702.2891, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1667.0313, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 3580, 1975.5078, -1719.0391, 19.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3558, 2018.2422, -1732.1719, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1988.7656, -1702.0469, 15.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 3616, 1971.2734, -1701.7734, 17.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3580, 1976.1250, -1682.9609, 19.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 5412, 1971.6563, -1682.3125, 13.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1991.9844, -1668.3672, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3617, 1974.9453, -1667.4844, 17.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3556, 2020.5859, -1717.1875, 15.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3558, 2021.1328, -1702.8203, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2051.5000, -1688.2734, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2061.7031, -1717.2734, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 5421, 2059.8672, -1701.2500, 15.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 3555, 2063.1328, -1731.7813, 15.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2064.0313, -1687.7031, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 2064.5781, -1704.2969, 13.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1637.8984, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1822.1563, -1623.5156, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1627.6250, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1833.0234, -1611.4766, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1870.2578, -1602.8047, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1821.0313, -1601.2344, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 5476, 1883.5234, -1576.4453, 20.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5630, 1928.4922, -1575.9688, 20.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3556, 2062.3516, -1656.3281, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2018.1172, -1656.2344, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1955.3047, -1649.8828, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1986.5938, -1650.9219, 14.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3616, 1971.3516, -1651.2969, 17.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2011.4375, -1642.6328, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3555, 2020.4609, -1641.5078, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2063.0234, -1643.9219, 15.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1955.0156, -1632.9219, 14.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 3617, 1972.3906, -1630.0000, 17.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2012.9609, -1633.1094, 10.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2022.5938, -1629.7188, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3555, 2063.7813, -1629.0547, 15.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2070.3672, -1712.8203, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2138.3438, -1697.1094, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2141.8672, -1693.3516, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2154.3516, -1713.6641, 17.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2150.8281, -1717.4297, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2169.9453, -1689.4766, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2142.7031, -1657.9297, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2142.8594, -1663.0859, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2165.1094, -1671.4531, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2164.9375, -1666.3047, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2164.2656, -1614.1719, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2184.6641, -1608.7578, 13.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3644, 2070.7578, -1586.0156, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2142.5078, -1604.0703, 13.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2147.1016, -1601.7266, 16.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2154.3984, -1580.9453, 16.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2149.7891, -1583.3125, 13.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3644, 2069.6172, -1556.7031, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2182.3359, -1604.1797, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 17768, 2494.2656, -1696.2109, 17.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 17770, 2485.9063, -1639.3281, 16.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 17771, 2529.8906, -1677.6641, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3654, 2517.4766, -1644.6953, 15.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3647, 2470.8203, -1640.8203, 15.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3592, 2451.7344, -1637.4844, 15.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 3592, 2498.3047, -1638.3281, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3592, 2528.6328, -1658.4453, 16.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 17697, 2494.2656, -1696.2109, 17.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 17698, 2529.8906, -1677.6641, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 17926, 2528.5547, -1679.4375, 16.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 2523.6953, -1678.5938, 14.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 17566, 2520.7344, -1673.8359, 15.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 3589, 2498.3047, -1638.3281, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 17564, 2530.5313, -1663.6641, 15.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3589, 2528.6328, -1658.4453, 16.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2521.6953, -1653.0391, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3649, 2517.4766, -1644.6953, 15.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 17973, 2281.3672, -1643.5313, 19.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 17972, 2393.0625, -1677.5234, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 17879, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 17971, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 3648, 2470.8203, -1640.8203, 15.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 2485.6797, -1644.1094, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 17699, 2485.9063, -1639.3281, 16.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 3589, 2451.7344, -1637.4844, 15.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 6068, 1247.9141, -1429.9688, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 6109, 1219.8984, -1449.4375, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 6195, 1236.5234, -1488.1641, 40.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 6099, 1219.8984, -1449.4375, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 6052, 1247.9141, -1429.9688, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1236.2813, -1417.7031, 12.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 5930, 1134.2500, -1338.0781, 23.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 5708, 1134.2500, -1338.0781, 23.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1178.6016, -1332.0703, 12.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1353.5000, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1343.2656, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 618, 1177.7344, -1315.6641, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1184.8125, -1292.9141, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1184.8125, -1303.1484, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 14674, 1721.6328, -1655.1875, 24.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 14675, 1719.7500, -1655.7656, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2744, 1721.6172, -1655.6641, 21.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1712.5938, -1655.6016, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1727.3672, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1726.7500, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1727.4688, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1730.5469, -1647.6484, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1726.7969, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1727.5156, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1727.3281, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1712.5469, -1663.4688, 21.1641, 0.25);

	// Pier
	RemoveBuildingForPlayer(playerid, 6456, 397.5391, -1848.4922, 12.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 6459, 387.8906, -1900.4375, 9.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 6460, 387.5781, -1918.3672, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6464, 379.0625, -2065.0234, 11.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2081.1875, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 368.9297, -2083.2656, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2050.4844, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -2083.2656, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.7422, -2086.8594, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 6283, 379.0625, -2065.0234, 11.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 390.2031, -2083.2656, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2081.1875, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2050.4844, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1904.1328, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 6299, 387.5781, -1918.3672, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6289, 387.8906, -1900.4375, 9.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 6288, 397.5391, -1848.4922, 12.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1500, 387.5625, -1817.0859, 6.8203, 0.25);*/

	// LSFD
	RemoveBuildingForPlayer(playerid, 3573, 1798.6484, -2057.9141, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 188.7813, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 187.1953, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 185.6016, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 183.9922, 1002.0234, 0.25);

	// Airport
	RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3780, 1381.1172, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 2042.7734, -2442.1875, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3665, 1381.1172, -2541.3750, 14.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2593.0000, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2494.2656, 19.2813, 0.25);

	// PERSHING SQUARE
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1693.3906, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1687.1016, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 646, 1545.5234, -1678.8438, 14.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 646, 1545.5625, -1672.2188, 14.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.6016, -1664.6250, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1546.8672, -1658.3438, 14.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);

    RemoveBuildingForPlayer(playerid, 3777, 831.9609, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3777, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5926, 816.3359, -1217.1484, 26.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 5927, 834.9375, -1249.9375, 19.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5978, 887.9844, -1287.1328, 18.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 3777, 902.3359, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 6005, 895.2578, -1256.9297, 31.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 5836, 816.3359, -1217.1484, 26.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 831.9609, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5835, 834.9375, -1249.9375, 19.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5706, 887.9844, -1287.1328, 18.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5838, 895.2578, -1256.9297, 31.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 902.3359, -1191.1406, 25.0391, 0.25);

    RemoveBuildingForPlayer(playerid, 1438, -88.1094, -1598.7188, 1.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -86.5703, -1595.1406, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 3173, -93.0938, -1593.5234, 1.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 1462, -93.6797, -1588.0781, 1.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 3174, -75.1719, -1596.3047, 1.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -79.2578, -1593.4688, 1.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -72.4141, -1596.7734, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -74.1875, -1583.9922, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 3175, -101.8203, -1577.6875, 1.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1457, -91.0156, -1576.6250, 3.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -100.8203, -1580.4219, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -93.2109, -1569.4844, 1.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 3175, -77.9375, -1581.3125, 1.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1472, -75.5859, -1581.0703, 2.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 3173, -90.6406, -1562.9375, 1.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -77.0625, -1542.6016, 1.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 1457, -71.0000, -1574.0859, 3.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -62.2734, -1569.2891, 1.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -61.6641, -1573.4609, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, -53.8125, -1585.8594, 3.0859, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -56.0625, -1575.6563, 1.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -64.0000, -1550.2578, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 3175, -55.2813, -1557.4531, 1.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -56.1563, -1560.4609, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 727, -49.3984, -1560.0078, 1.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 3174, -44.2891, -1561.3125, 1.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -43.7422, -1563.6875, 2.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 3173, -67.2344, -1544.2188, 1.5547, 0.25);

    RemoveBuildingForPlayer(playerid, 3295, 1099.1172, -358.4766, 77.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1114.2969, -353.8203, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3376, 1070.4766, -355.1641, 77.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3404, 1019.3828, -300.2422, 72.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3404, 1045.5625, -300.6016, 72.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1012.2891, -282.5391, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1023.4219, -279.9063, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1503, 1019.3203, -282.7891, 73.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1047.3125, -280.3359, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1059.2266, -281.2656, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1082.9922, -283.6797, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 13451, 1146.1406, -369.1328, 49.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1009.4766, -440.1797, 54.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1003.7891, -445.6953, 53.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6953, -416.6406, 63.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1008.4375, -428.4063, 58.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.8203, -410.4141, 62.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1041.9297, -422.1328, 58.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1040.8281, -434.0625, 53.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.7969, -385.0078, 71.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.9219, -386.4531, 70.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.9688, -374.4766, 72.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3425, 1015.0938, -361.1016, 84.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6719, -361.6250, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6250, -349.8984, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.5234, -326.4453, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.4766, -314.7188, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.4297, -302.9922, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.3828, -291.2578, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3402, 1019.3828, -300.2422, 72.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1083.6641, -368.5313, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1071.9375, -368.5156, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1060.2109, -368.4922, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3375, 1070.4766, -355.1641, 77.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.7109, -327.0625, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1095.3984, -329.8203, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1095.3828, -327.4766, 73.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.7969, -321.4844, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.9063, -315.9688, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1093.1953, -299.2969, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 3402, 1045.5625, -300.6016, 72.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 13206, 1072.9531, -289.1797, 72.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1093.3047, -293.7813, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1096.1563, -291.2656, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3286, 1099.1172, -358.4766, 77.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1107.1172, -368.5703, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3253, 1106.6406, -319.8750, 73.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1106.4922, -330.0234, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1100.9141, -329.9297, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1106.5469, -328.1641, 73.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1101.2891, -329.5313, 72.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3250, 1110.2422, -298.9453, 73.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1101.6719, -291.3750, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1107.2656, -291.4609, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 672, 1097.4688, -314.2109, 73.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1114.2969, -353.8203, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1117.5781, -330.2109, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1112.0000, -330.1250, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 656, 1116.4453, -326.7578, 72.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1112.7813, -291.5703, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1118.3750, -291.6641, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.4297, -327.7656, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1121.0234, -294.5234, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.6250, -316.7344, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.9297, -300.1172, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.8203, -305.6328, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.7344, -311.2188, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.5391, -322.2500, 73.5703, 0.25);

	// Truck trailers
	RemoveBuildingForPlayer(playerid, 12956, 96.3281, -261.1953, 3.8594, 0.25);

	// Corner Shop
	RemoveBuildingForPlayer(playerid, 12854, 666.4922, -571.1797, 17.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1510, 664.2031, -567.6953, 16.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 664.2109, -567.4141, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2362, 662.9219, -567.0547, 16.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1514, 665.2891, -567.2813, 16.4297, 0.25);
	
	// Trucker depot
	RemoveBuildingForPlayer(playerid, 12858, 272.0625, -359.7656, 8.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 12956, 96.3281, -261.1953, 3.8594, 0.25);
}

stock LoadObjects()
{
	// Group 5 : Wright Enterprise : HQ
	CreateDynamicObject(2000, 1084.37769, 2155.83887, 9.81546,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1084.37769, 2155.83887, 9.81546,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1068.77869, 2128.22705, 6.35550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1068.77869, 2113.24707, 6.35550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1068.77869, 2091.30713, 6.35550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19861, 1099.16650, 2093.50122, 10.30140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19861, 1088.49023, 2076.71167, 12.30190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1082.14026, 2120.52173, 16.10390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1082.14026, 2117.32178, 16.10390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1082.14026, 2114.16187, 16.10390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1082.14026, 2112.72192, 16.10390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1084.10254, 2110.74390, 16.10610,   0.00000, 0.00000, -90.96160);
	CreateDynamicObject(19355, 1091.94788, 2110.62451, 16.10610,   0.00000, 0.00000, -90.96160);
	CreateDynamicObject(19355, 1092.90247, 2110.60376, 16.10610,   0.00000, 0.00000, -90.96160);
	CreateDynamicObject(19355, 1093.60254, 2110.60376, 16.10610,   0.00000, 0.00000, -90.96160);
	CreateDynamicObject(19355, 1087.24255, 2110.70386, 16.10610,   0.00000, 0.00000, -90.96160);
	CreateDynamicObject(19466, 1089.66333, 2110.79810, 17.82620,   0.00000, 0.00000, 90.77171);
	CreateDynamicObject(18981, 1068.77380, 2088.76758, 6.35550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1068.76038, 2091.72827, 6.35550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1068.77869, 0.30710, 6.35550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1072.66235, 2122.57300, 6.49580,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18981, 1083.41455, 2122.56885, 6.49580,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3576, 1071.61877, 2119.91040, 11.38431,   -0.54000, 1.08000, -38.99999);
	CreateDynamicObject(2000, 1089.23779, 2122.06592, 12.42430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1090.08496, 2118.86206, 14.34973,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1089.40247, 2119.92041, 14.32768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1088.59839, 2121.64990, 14.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1089.07837, 2121.64990, 14.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1089.53882, 2121.64990, 14.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2004, 1093.74988, 2122.10107, 14.85970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1082.90332, 2112.68530, 14.34770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1086.11877, 2111.50366, 14.34770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1823, 1084.58496, 2113.12744, 14.34816,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 1094.63928, 2112.05371, 15.42370,   0.00000, 0.00000, -90.00000);


	// Trucker Depot
	CreateDynamicObject(10829, 89.81713, -226.19917, 0.56438,   0.00000, 0.00000, -2.28000);
	CreateDynamicObject(4100, 47.77804, -219.91968, 2.23960,   0.00000, 0.00000, -41.93999);
	CreateDynamicObject(4100, 71.73865, -220.93219, 2.23960,   0.00000, 0.00000, -42.36000);
	CreateDynamicObject(4100, 101.69720, -221.72560, 2.18910,   0.00000, 0.00000, -40.74000);
	CreateDynamicObject(4100, 198.19565, -319.46100, 2.28889,   0.00000, 0.00000, 53.40001);
	CreateDynamicObject(4100, 61.50127, -220.50375, 2.23960,   0.00000, 0.00000, -42.36000);
	CreateDynamicObject(2000, 87.68665, -221.61237, 1.89590,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2000, 87.68660, -221.61240, 0.59590,   0.00000, 0.00000, 88.14000);

	// Montgomery Gas Station
	CreateDynamicObject(18880, 1219.70776, 363.15762, 18.39799,   0.00000, 0.00000, -102.84000);
	CreateDynamicObject(18880, 2078.55640, 48.68791, 25.33254,   0.00000, 0.00000, -77.21996);
	CreateDynamicObject(1350, 532.74054, -150.59911, 36.86632,   0.00000, 0.00000, -7.14000);
	CreateDynamicObject(1350, 520.68280, -126.80280, 36.79391,   0.00000, 0.00000, -183.77994);
	CreateDynamicObject(1350, 537.51880, -134.82791, 36.65308,   0.00000, 0.00000, 82.61996);
	CreateDynamicObject(1350, 516.58246, -144.70296, 36.86356,   0.00000, 0.00000, -96.06004);
	CreateDynamicObject(18880, 1649.15710, -114.31461, 33.88784,   0.00000, 0.00000, 20.10001);
	CreateDynamicObject(4100, 1347.04858, 475.82129, 19.21401,   0.00000, 0.00000, 24.60000);
	CreateDynamicObject(4100, 1352.91040, 488.33557, 19.20315,   0.00000, 0.00000, 25.14001);
	CreateDynamicObject(4100, 2377.92871, 485.52127, 19.13878,   0.00000, 0.00000, -62.34000);
	CreateDynamicObject(4100, 1362.36206, 491.48932, 19.13878,   0.00000, 0.00000, -62.34000);
	CreateDynamicObject(4100, 1387.89087, 480.94049, 19.19880,   0.00000, 0.00000, -62.34000);
	CreateDynamicObject(4100, 1375.18054, 486.18509, 19.13880,   0.00000, 0.00000, -62.34000);
	CreateDynamicObject(4100, 1400.65833, 475.66428, 19.19880,   0.00000, 0.00000, -62.34000);
	CreateDynamicObject(4100, 1403.98193, 467.07932, 19.20724,   0.00000, 0.00000, 25.44001);
	CreateDynamicObject(615, 1358.70496, 486.18298, 19.20248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1359.64636, 482.74985, 19.67760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1356.41736, 484.08261, 19.67760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1361.14929, 485.44296, 19.67760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14468, 1364.16919, 458.98279, 19.80370,   0.00000, 0.00000, -22.13999);
	CreateDynamicObject(14468, 1360.88477, 460.52560, 19.80370,   0.00000, 0.00000, -22.13999);
	CreateDynamicObject(14468, 1368.22485, 457.10638, 19.80370,   0.00000, 0.00000, -22.14000);
	CreateDynamicObject(14468, 1372.32068, 455.32910, 19.80370,   0.00000, 0.00000, -22.14000);
	CreateDynamicObject(14468, 1376.39856, 453.59424, 19.80370,   0.00000, 0.00000, -22.14000);
	CreateDynamicObject(14468, 1379.96863, 451.74390, 19.80370,   0.00000, 0.00000, -22.14000);
	CreateDynamicObject(14468, 1384.05420, 449.96896, 19.80370,   0.00000, 0.00000, -22.14000);
	CreateDynamicObject(14468, 1388.06226, 448.08795, 19.80370,   0.00000, 0.00000, -25.68000);
	CreateDynamicObject(14468, 1391.89209, 446.01224, 19.80370,   0.00000, 0.00000, -25.68000);
	CreateDynamicObject(669, 1396.37476, 444.75555, 19.03585,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1359.76782, 488.84399, 19.41900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1355.61267, 487.02631, 19.41900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1357.47705, 488.84183, 19.41900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1358.73865, 484.59189, 20.22990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1404.57007, 465.88654, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1412.20581, 438.92807, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1412.83667, 441.50476, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1413.28735, 443.94559, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1413.87305, 446.48834, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1414.57861, 448.77423, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1415.02271, 451.00516, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1415.39270, 453.51782, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1415.64368, 455.92752, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1415.93982, 458.22971, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1416.35364, 460.77802, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1414.76929, 461.64313, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1413.14734, 462.52173, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1411.40930, 463.24957, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1409.63928, 464.00925, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1407.74792, 464.72574, 19.38370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1406.00806, 465.39020, 19.38370,   0.00000, 0.00000, 0.00000);
	
	// Roadsigns
	CreateDynamicObject(19992, 2037.96716, 46.25922, 27.70680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19992, 1543.62500, 121.15040, 28.37470,   0.00000, 0.00000, 113.00000);
	CreateDynamicObject(19992, 1550.37598, 109.25780, 28.37470,   0.00000, 0.00000, -69.00000);
	CreateDynamicObject(19992, 1305.58496, -66.37790, 35.50640,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19992, 1312.19141, -78.58860, 35.50640,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(19992, 826.77612, -162.43449, 17.88370,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(19992, 823.19153, -176.23560, 17.88370,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(19992, 537.84631, -147.79041, 36.84170,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(19992, 539.23492, -134.65010, 36.84170,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(19992, 1093.33240, -194.29710, 39.73950,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19992, 1092.28101, -181.62033, 39.73950,   0.00000, 0.00000, 91.00000);
	
	// Palomino Creek Pier
	CreateDynamicObject(19425, 2148.53882, 41.63424, 25.32490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 2148.54980, 38.33305, 25.32490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 2148.55225, 44.93670, 25.32490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 2236.11646, 41.80330, 25.32020,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 2236.11206, 45.08538, 25.32020,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 2236.11426, 38.53890, 25.32020,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 2277.15527, 45.03221, 25.32620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2277.15332, 41.74102, 25.32620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2277.14819, 38.45196, 25.32620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2290.59570, 65.78231, 25.32530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2293.89233, 65.78367, 25.32530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2297.19263, 65.78872, 25.32530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2297.22412, 111.08021, 25.32717,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2293.93042, 111.07497, 25.32717,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2290.62476, 111.07417, 25.32717,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2293.96826, -17.24835, 25.32605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2290.67651, -17.24283, 25.32605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2297.26880, -17.25042, 25.32605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2290.61279, -85.13700, 25.32922,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2293.89038, -85.12271, 25.32922,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2297.19092, -85.12975, 25.32922,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2265.41895, -31.62945, 25.31410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2265.42676, -28.32739, 25.31410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2265.42456, -25.02019, 25.31410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2358.24146, -24.98888, 25.32330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2358.24219, -28.28181, 25.32330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2358.24072, -31.59463, 25.32330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2438.92627, -25.09800, 25.33800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2438.92065, -28.38737, 25.33800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2438.92334, -31.64835, 25.33800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2397.14917, 25.93972, 25.32726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2393.84912, 25.94222, 25.32726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2390.54736, 25.92879, 25.32726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2548.89063, 38.35876, 25.32330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2548.89404, 41.66304, 25.32330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2548.90259, 44.95301, 25.32330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2486.51978, 38.40823, 25.33080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2486.51978, 41.70210, 25.33080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2486.51343, 45.00232, 25.33080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2418.59399, 38.54952, 25.33040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2418.59155, 41.85501, 25.33040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2418.58691, 45.16275, 25.33040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2333.53394, 210.38651, 25.44250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2333.53638, 213.66241, 25.44250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2333.54297, 216.94002, 25.44250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2340.69336, -77.13743, 25.32075,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2343.96460, -77.13745, 25.32075,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2347.26563, -77.13509, 25.32075,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2340.61401, -13.51889, 25.32451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2343.91382, -13.52364, 25.32451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2347.21362, -13.52271, 25.32451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2347.22437, 76.49290, 25.37370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2343.93872, 76.49621, 25.37370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2340.63696, 76.48746, 25.37370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2346.99072, 188.96227, 25.32630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2343.71851, 188.95836, 25.32630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2340.43750, 188.95604, 25.32630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2347.11523, 272.09540, 25.37650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2343.83154, 272.08566, 25.37650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2340.54102, 272.09543, 25.37650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2355.14795, 88.37070, 25.30170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2355.13965, 91.65978, 25.30170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2355.13623, 94.94931, 25.30170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2308.00342, 88.46918, 25.32440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2308.01270, 91.77599, 25.32440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2308.01514, 95.07754, 25.32440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2252.24170, 94.96650, 25.32360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2252.24585, 91.68423, 25.32360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2252.25342, 88.38372, 25.32360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 2460.65088, 79.38818, 25.31805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2463.93384, 79.38479, 25.31805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2467.22998, 79.38992, 25.31805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2460.63989, 6.06250, 25.32656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2463.90991, 6.06304, 25.32656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2467.21069, 6.05825, 25.32656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2299.11938, 79.55702, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.08643, 69.57670, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.11963, 75.50560, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.09009, 65.48604, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.08887, 61.39462, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.08740, 57.28368, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.09863, 53.17160, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.09668, 47.33530, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.09204, 43.22520, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.09009, 39.14233, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.08130, 33.24310, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.08081, 29.13610, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.07935, 25.02580, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.07178, 19.08442, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.06641, 14.99850, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.07837, 8.72768, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.07813, 4.61191, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.07764, 0.49780, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.07886, -3.62040, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.08789, -7.72720, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2299.05737, -16.24740, 26.01170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2306.03149, -23.17920, 26.02750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2310.15161, -23.17850, 26.02750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2315.77686, -23.18490, 26.02750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2319.89038, -23.18370, 26.02750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2327.68896, -23.16970, 26.02750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2331.82544, -23.16996, 26.02750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1346, 2284.66406, 56.37590, 26.85410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18667, 2283.94922, 69.02130, 27.09960,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(970, 2338.77026, -16.20115, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.77124, -12.09300, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.77100, -7.98790, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.74683, -2.59790, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.74829, 1.49590, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(63, 2245.09106, -84.41700, 24.88910,   -40.00000, 113.00000, 11.00000);
	CreateDynamicObject(970, 2338.75391, 5.60288, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.75610, 10.86047, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.75049, 14.97133, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.68237, 20.42149, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 2304.20679, 74.11001, 25.37330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(245, 2235.88232, -86.85580, 24.73290,   -54.00000, -84.00000, -42.00000);
	CreateDynamicObject(2716, 2303.93115, 79.15517, 27.36300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 2303.51294, 79.28736, 25.92460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, 2303.52173, 77.19060, 25.81580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1775, 2304.52173, 29.03950, 26.57830,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 2303.38623, 2.92350, 26.14420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 2303.58325, -3.46050, 26.04110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 2303.52246, -5.13810, 26.04110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19869, 2305.15649, 4.08118, 25.45620,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 2305.98560, 86.45520, 26.02050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2310.09229, 86.45690, 26.02050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2316.52881, 86.47881, 26.02050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2320.65063, 86.47880, 26.02050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2324.74951, 86.47750, 26.02050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2331.90356, 86.47030, 26.02050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2338.68262, 24.53150, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.68140, 28.64480, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73364, 34.46461, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73291, 38.57706, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73242, 42.67780, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73120, 46.77954, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.72729, 50.88030, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73535, 56.97291, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73169, 61.10280, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73462, 65.22460, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73438, 69.31380, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.73340, 73.38970, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2338.74146, 79.64130, 26.00470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 2331.88794, 82.18760, 26.13900,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1256, 2327.44727, 82.12386, 26.13900,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2048, 2324.32202, 81.69720, 28.77990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1227, 2280.55664, 66.03900, 26.21900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2334.65381, -2.65310, 26.16760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 2334.24512, -10.82500, 25.99040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2048, 2332.76099, 65.33388, 28.56210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 2334.44775, 65.48190, 26.15470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1439, 2326.53027, -51.27167, 25.61500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1364, 2312.62207, -19.13201, 26.26260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 2335.96948, -20.43391, 26.59120,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(63, 2104.90234, -86.24627, -1.96480,   91.00000, -4.00000, 0.00000);
	CreateDynamicObject(970, 2248.55396, -88.22243, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2252.66040, -88.22847, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2264.97778, -88.22610, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2269.08716, -88.22400, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2273.19629, -88.22000, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2277.32031, -88.22100, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2281.47998, -88.22240, 26.03110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2283.57227, -86.15034, 26.03110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2283.58057, -82.04020, 26.03110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2283.57764, -77.87950, 26.03110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2283.57324, -65.44150, 26.03110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2283.56860, -61.26650, 26.03110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2283.56592, -57.11400, 26.03110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1340, 2281.41895, -86.51570, 26.62910,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3430, 2249.66406, -84.52798, 27.09600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 2279.68262, -88.76960, 26.12530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 2276.39404, -86.29105, 26.29830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1281, 2272.23901, -86.26127, 26.29830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1281, 2280.65430, -81.06933, 26.29830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, 2274.17505, -76.48776, 25.93800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3935, 2262.76807, -78.87840, 26.80610,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3935, 2256.45850, -78.94118, 26.80610,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1216, 2275.90283, -75.63200, 26.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 2275.94556, -73.50780, 26.17680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 2267.84229, -78.30205, 27.02700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 2251.69409, -78.26449, 27.02700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(803, 2249.00000, -72.28990, 25.73414,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 2266.99878, -75.85860, 31.76150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2269.68823, -64.51250, 26.01180,   -149.00000, -88.00000, -76.00000);
	CreateDynamicObject(647, 2265.52759, -65.91073, 25.74569,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 2261.34009, -65.62865, 26.01237,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 2254.36841, -65.59679, 25.72660,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(3406, 2120.16602, -89.74580, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(9237, 2162.19727, -102.10110, 9.62410,   -0.17000, 0.00000, -58.85500);
	CreateDynamicObject(1439, 2160.93433, -106.14355, 1.78880,   0.00000, 0.00000, -11.00000);
	CreateDynamicObject(944, 2157.66016, -101.71233, 2.58230,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(3406, 2163.53247, -98.47256, -0.44960,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(3406, 2121.31274, -91.38330, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2122.46362, -93.02910, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2112.95630, -94.79440, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2114.11060, -96.43568, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2115.28955, -98.09696, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2108.07227, -103.12830, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2106.91431, -101.49857, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2105.75537, -99.86344, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2098.57300, -104.90257, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2099.70654, -106.55151, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2100.86572, -108.18143, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2116.43115, -99.74155, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2117.57861, -101.38645, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2118.74121, -103.03768, -1.00430,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3881, 2117.13940, -101.39325, 2.95930,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(19810, 2115.37256, -99.88917, 1.91810,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(1775, 2114.83911, -101.12884, 2.18450,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2102.92041, -113.93887, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2107.96826, -121.12089, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2094.54321, -101.88518, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2089.48706, -94.66314, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2110.66431, -90.48721, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2105.62427, -83.27868, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1231, 2097.63403, -111.25813, 3.74940,   0.00000, 0.00000, -49.00000);
	CreateDynamicObject(1231, 2094.63354, -106.85863, 3.74940,   0.00000, 0.00000, -229.00000);
	CreateDynamicObject(1368, 2105.11206, -99.70520, 1.77690,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(3406, 2096.16748, -100.70914, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2091.11548, -93.52786, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2104.57397, -112.77799, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2109.62036, -119.95555, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2109.03174, -91.63504, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(3406, 2103.99829, -84.43134, -1.00430,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1368, 2108.02002, -103.78906, 1.77690,   0.00000, 0.00000, -145.00000);
	CreateDynamicObject(2942, 2118.53613, -97.32730, 1.76450,   0.00000, 0.00000, 215.00000);
	CreateDynamicObject(1775, 2117.31592, -97.90909, 2.15250,   0.00000, 0.00000, -145.00000);
	CreateDynamicObject(1281, 2119.10669, -91.03570, 1.84710,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(1216, 2113.29541, -101.84480, 1.71930,   0.00000, 0.00000, -56.00000);
	CreateDynamicObject(1300, 2113.60278, -100.60371, 1.41310,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(1341, 2116.99023, -92.87633, 2.03800,   0.00000, 0.00000, -55.00000);
	
	// Empty interiors
	CreateObject(14718, 219.80580, 1278.06580, 1081.13281,   360.00000, 0.00000, 0.00000);
	CreateObject(1498, 222.06750, 1273.21338, 1081.14502,   360.10001, 0.00000, -0.66000);

	// Medium interior
	CreateObject(14748, -7.75580, 1408.19067, 1085.42969,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, -2.68719, 1405.85120, 1083.44531,   0.00000, 0.00000, 90.00000);

	// Random mapping
	CreateDynamicObject(19425, 681.65308, -710.13251, 15.08690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 684.25964, -705.57373, 15.03787,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 678.36731, -710.14984, 15.08690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 684.97339, -649.23181, 15.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 684.92694, -710.13300, 15.08690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 681.78766, -649.23315, 15.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 678.50372, -649.23474, 15.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 678.38861, -587.98132, 15.17294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 681.68378, -587.97607, 15.17294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 684.97485, -587.98358, 15.17294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 678.41010, -519.67188, 15.17424,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 681.70380, -519.66760, 15.17424,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 684.99805, -519.66815, 15.17424,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 692.90472, -526.87732, 15.17470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 692.90582, -530.17896, 15.17470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 692.91248, -533.46967, 15.17470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 659.26807, -533.43256, 15.18090,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 659.27234, -530.12714, 15.18090,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 659.25995, -526.81268, 15.18090,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 645.11487, -554.66833, 15.17276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 641.81372, -554.68579, 15.17276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 638.52203, -554.68591, 15.17276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 761.67902, -526.81415, 15.17040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 761.68414, -530.10553, 15.17040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 761.69409, -533.39709, 15.17040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 669.74384, -488.45844, 15.17580,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 669.74286, -485.16882, 15.17580,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 669.74536, -481.85904, 15.17580,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 638.31165, -439.16037, 15.17743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 641.61237, -439.15070, 15.17743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 644.92670, -439.15500, 15.17743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 724.96954, -559.25812, 15.16691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 721.66760, -559.25183, 15.16691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 718.36896, -559.24640, 15.16691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 721.73462, -507.46091, 15.17594,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 718.44763, -507.45563, 15.17594,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 725.00720, -507.45639, 15.17594,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 666.59576, -691.94666, 14.73830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 666.60309, -695.24683, 14.73830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 666.60577, -698.54846, 14.73830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 701.96893, -596.83136, 15.16750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 701.95209, -600.11517, 15.16750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 701.94745, -603.41364, 15.16750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 840.26123, -563.13751, 15.18940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 840.26019, -566.45612, 15.18940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 840.24561, -569.77063, 15.18940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 840.24103, -573.08856, 15.18940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 651.71393, -440.02441, 15.85560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 651.71851, -444.13861, 15.85560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 651.72534, -448.24527, 15.85560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 651.71533, -452.36597, 15.85560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 651.72540, -465.02893, 15.85560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 660.47516, -475.12146, 15.86990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 668.29785, -475.11942, 15.86990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 694.70728, -475.10840, 15.85980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 698.84052, -475.10699, 15.85980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 709.32196, -475.11667, 15.85980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 670.42462, -458.52490, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 670.42712, -462.63583, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 670.42358, -466.72379, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 670.42792, -472.99054, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 672.49902, -475.07959, 16.04270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 676.60553, -475.08932, 16.04270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 686.37323, -475.10025, 16.04270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 690.48041, -475.09915, 16.04270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 692.53290, -473.04086, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 692.56488, -466.79642, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 692.56964, -462.68350, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 692.55725, -458.56769, 16.04410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 714.32880, -475.06845, 15.31211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 724.13336, -475.12885, 15.31211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 675.56702, -471.01376, 17.78860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 687.16412, -471.05670, 17.72260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 674.60248, -475.80350, 16.00930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 688.48535, -475.91074, 15.97520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1209, 689.21423, -465.49167, 15.53100,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1216, 673.66821, -464.87769, 16.18400,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2942, 680.40796, -473.38123, 16.15590,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(970, 686.83032, -587.88617, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.82941, -583.76526, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.82318, -578.35614, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.81665, -574.26630, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.81067, -568.94843, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.80762, -564.83270, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.80188, -560.73151, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.83313, -555.25940, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.83459, -551.12750, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.81451, -545.76074, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.81219, -541.66339, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1364, 690.33807, -567.40302, 16.11710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1364, 690.33197, -575.56769, 16.11710,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1300, 690.10883, -571.43945, 15.69690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 676.59229, -587.88623, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.59711, -583.76459, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.60022, -578.35608, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.59863, -574.24023, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.58173, -568.94843, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.58588, -564.82892, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.58820, -560.71558, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.57910, -555.25940, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.58032, -551.16693, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.58850, -545.76068, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.58807, -541.63983, 15.85110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1300, 672.21802, -566.20605, 15.70130,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1340, 673.71027, -563.93506, 16.53870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 672.23010, -585.95642, 16.03680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18667, 671.73218, -554.93372, 17.19830,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2048, 671.74731, -572.36658, 19.10130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.57568, -518.64380, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 676.57361, -514.53802, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 676.64874, -508.67233, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 676.64850, -504.56705, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 676.65546, -497.01538, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 686.85870, -518.64380, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 686.85809, -514.54456, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 686.83270, -508.67230, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 686.83459, -504.56815, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 686.85150, -497.01541, 15.83800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1368, 690.82208, -514.03497, 16.05780,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2719, 671.76251, -510.71591, 16.81040,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(1216, 672.01727, -508.40091, 15.99060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1300, 692.71600, -496.61877, 15.68790,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 705.29370, -494.73492, 16.04860,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1341, 709.23785, -493.05075, 16.34970,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(970, 686.87280, -611.50592, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.87201, -615.62659, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.89032, -620.74683, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.89209, -624.86768, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.88574, -628.96246, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.88953, -633.05573, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.88184, -637.15826, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.88159, -642.67700, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 686.88452, -650.32599, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.57642, -611.68201, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.57117, -615.80231, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.65833, -620.74683, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.66101, -624.86713, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.65186, -628.99017, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.65643, -633.09143, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.65839, -637.21381, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.62561, -642.67700, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 676.62451, -650.32599, 15.83920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 673.86407, -521.94843, 23.05540,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1216, 672.01642, -634.04639, 15.94210,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3594, 666.92682, -615.40363, 15.68830,   0.00000, 0.00000, -24.00000);
	CreateDynamicObject(933, 663.20496, -613.76392, 15.32020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(933, 662.76660, -615.54419, 15.32020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(933, 661.43427, -614.26483, 15.32020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(933, 662.50659, -614.47467, 16.25620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 671.43542, -622.21851, 15.31310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19869, 671.44037, -617.05536, 15.31310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19869, 668.73004, -610.20959, 15.31310,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19869, 659.10345, -610.15436, 15.31310,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19869, 656.61353, -625.02081, 15.31310,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(19869, 656.61694, -619.83777, 15.31310,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(19869, 656.62982, -612.77887, 15.31310,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1368, 691.01398, -629.38171, 16.05020,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 659.60211, -540.19232, 15.88440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 653.77759, -540.18909, 15.88440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 651.72418, -542.24536, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 651.77960, -554.62451, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 651.77319, -566.95752, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 651.77240, -571.08423, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 651.77173, -575.19421, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 651.73236, -587.94629, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 653.79095, -589.99530, 15.88440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(970, 657.91577, -590.00409, 15.88440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(970, 669.23138, -590.01398, 15.88440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(970, 651.77887, -558.74768, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 651.77838, -562.82013, 15.88440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 655.40936, -557.44153, 14.04080,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(970, 655.87415, -557.44647, 14.04080,   0.00000, -90.00000, -180.00000);
	CreateDynamicObject(970, 654.93732, -559.87158, 15.55480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 656.35065, -559.86389, 15.55480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 654.85748, -570.28650, 15.55480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 656.29773, -570.35352, 15.55480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 655.38599, -572.54578, 14.04080,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(970, 655.74640, -572.53815, 14.04080,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19869, 649.13452, -495.16846, 15.26930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 639.34906, -495.15445, 15.26930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 614.97174, -494.65778, 15.94060,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1775, 712.28229, -513.98389, 16.39190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18667, 663.44061, -624.82440, 17.66910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1368, 1242.69702, 243.08493, 19.24270,   0.00000, 0.00000, -115.00000);
	CreateDynamicObject(1368, 1240.69800, 238.74414, 19.24270,   0.00000, 0.00000, -115.00000);
	CreateDynamicObject(1368, 1237.48010, 231.83667, 19.24270,   0.00000, 0.00000, -115.00000);
	CreateDynamicObject(1368, 1235.44763, 227.30096, 19.24270,   0.00000, 0.00000, -115.00000);
	CreateDynamicObject(1300, 1246.62805, 259.73071, 18.86790,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(2614, 1223.33606, 308.66135, 23.27020,   0.00000, 0.07900, -25.73200);
	CreateDynamicObject(19810, 1223.19226, 306.59311, 22.25710,   0.00000, 0.00000, -205.00000);
	CreateDynamicObject(970, 1217.95129, 309.94241, 19.08160,   0.00000, 0.01200, -113.62200);
	CreateDynamicObject(970, 1216.28149, 306.13449, 19.08060,   0.00000, 0.01200, -113.62200);
	CreateDynamicObject(970, 1214.64539, 302.40958, 19.08060,   0.00000, 0.01200, -113.62200);
	CreateDynamicObject(970, 1213.00696, 298.66830, 19.08060,   0.00000, 0.01200, -113.62200);
	CreateDynamicObject(970, 1212.08789, 296.58203, 19.08060,   0.00000, 0.01200, -113.62200);
	CreateDynamicObject(970, 1213.11108, 293.84882, 19.08060,   0.00000, 0.00000, -203.61400);
	CreateDynamicObject(970, 1223.56140, 289.26273, 19.08060,   -0.00200, 0.03000, -203.61000);
	CreateDynamicObject(970, 1227.31165, 287.61948, 19.08060,   -0.00200, 0.03000, -203.61000);
	CreateDynamicObject(1231, 1234.57605, 302.70209, 21.42540,   0.00000, 0.00000, -58.00000);
	CreateDynamicObject(1216, 1246.14832, 326.53015, 19.36330,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1216, 1245.37097, 324.69995, 19.36330,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1300, 1251.22510, 325.24637, 19.09640,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(1775, 1238.68750, 329.40991, 19.83870,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(933, 1258.03870, 247.87685, 18.54528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(933, 1256.73547, 246.58217, 18.54528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(933, 1256.22070, 248.44421, 18.54528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(933, 1257.06580, 247.57677, 19.49730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 1251.57141, 250.69360, 19.10240,   0.00000, 0.00000, -156.00000);
	CreateDynamicObject(2048, 1240.16064, 234.71130, 21.60010,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(2614, 1371.69031, 406.13187, 24.86590,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(11245, 1368.62097, 403.96899, 29.73410,   0.00000, 0.00000, -207.00000);
	CreateDynamicObject(11245, 1370.93640, 410.07407, 29.73410,   0.00000, 0.00000, -207.00000);
	CreateDynamicObject(11245, 1383.50330, 429.66510, 28.89410,   0.00000, 0.00000, -273.00000);
	CreateDynamicObject(11245, 1362.35046, 381.92834, 28.89410,   0.00000, 0.00000, 193.00000);
	CreateDynamicObject(1364, 1368.31995, 395.21771, 19.53800,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1364, 1365.12720, 387.49301, 19.53800,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1364, 1377.18958, 415.68546, 19.53800,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1775, 1378.73047, 418.67664, 19.84300,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1300, 1366.70459, 391.71860, 19.05360,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(2942, 1374.08582, 407.10159, 19.58920,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(1346, 1378.70630, 434.47717, 20.10640,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(3935, 1384.11877, 431.36050, 20.18540,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(1227, 1394.29871, 369.43939, 19.57160,   0.00000, 0.00000, -118.00000);
	CreateDynamicObject(1231, 1371.55627, 411.86761, 21.39380,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(1231, 1367.06165, 401.98755, 21.39380,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(970, 1401.65503, 420.33572, 19.49620,   0.00000, 0.00000, -23.62300);
	CreateDynamicObject(970, 1404.38000, 421.38831, 19.49620,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(970, 1404.95874, 422.74045, 19.49620,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1359.10950, 458.89066, 18.86570,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1357.84326, 455.90588, 18.86570,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1356.58911, 452.89810, 18.86570,   0.00000, 0.08100, -112.51400);
	CreateDynamicObject(19425, 1355.62219, 450.54520, 18.86570,   0.00000, 0.08100, -112.51400);
	CreateDynamicObject(19425, 1373.59961, 430.94016, 18.70370,   0.00000, 0.00000, -207.00000);
	CreateDynamicObject(19425, 1370.66797, 432.43597, 18.70370,   0.00000, 0.00000, -207.00000);
	CreateDynamicObject(19425, 1367.74585, 433.92386, 18.70370,   0.00000, 0.00000, -207.00000);
	CreateDynamicObject(19425, 1395.77698, 441.25842, 18.86570,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1394.47534, 438.22208, 18.86570,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1393.19934, 435.22678, 18.86570,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1392.34424, 433.19269, 18.86570,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(19425, 1259.22986, 172.24915, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1256.24683, 173.66032, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1253.26172, 175.05692, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1298.81116, 278.52628, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1301.76147, 277.14484, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1329.46912, 331.16217, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1307.70483, 274.33957, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1304.66504, 275.78198, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1326.50378, 332.54001, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1323.53394, 333.88907, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1364.81970, 435.42416, 18.70370,   0.00000, 0.00000, -207.00000);
	CreateDynamicObject(19425, 1217.08008, 353.53149, 18.39130,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(19425, 1329.46912, 331.16217, 18.41330,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19425, 1218.25879, 356.58627, 18.39130,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(19425, 1219.42920, 359.63831, 18.39130,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(19425, 1220.60864, 362.72430, 18.39130,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(19425, 1258.82556, 342.93051, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1257.62817, 339.84464, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1256.43726, 336.76630, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1255.25378, 333.65787, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1291.30701, 328.55103, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1290.14832, 325.50372, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1288.96191, 322.40726, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1287.82361, 319.45944, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1339.83777, 307.05725, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1338.64001, 304.00436, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1337.46667, 300.92157, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(19425, 1336.29834, 297.87769, 18.40130,   0.00600, 0.00600, 68.99600);
	CreateDynamicObject(11245, 1211.32153, 218.20670, 23.49390,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(11245, 1231.10791, 263.41940, 23.44090,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(970, 1214.05090, 219.18684, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1215.72253, 222.94170, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1217.40125, 226.71120, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1219.07434, 230.47682, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1220.74414, 234.22079, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1222.41504, 237.97290, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1224.07581, 241.70010, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1225.73865, 245.43559, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1227.40381, 249.17050, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1229.06226, 252.89310, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1230.72534, 256.62790, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1232.38684, 260.35504, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1232.67896, 261.00851, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1234.19971, 260.34229, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1232.53333, 256.59760, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1230.88171, 252.89079, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1229.21326, 249.14180, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1227.55396, 245.41600, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1225.88318, 241.66341, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1224.22266, 237.93221, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1222.53369, 234.16389, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1220.86536, 230.41455, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1219.20752, 226.67792, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1217.54138, 222.93581, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1215.87671, 219.19310, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1215.57849, 218.52380, 19.41390,   0.00000, 0.00000, -114.00000);
	CreateDynamicObject(970, 1213.70862, 217.08020, 17.88090,   0.00000, 90.00000, -203.00000);
	CreateDynamicObject(970, 1214.22864, 216.85799, 17.88090,   0.00000, 90.00000, -23.00000);
	CreateDynamicObject(970, 1234.01636, 262.67001, 17.88290,   0.00000, 90.00000, -203.00000);
	CreateDynamicObject(970, 1234.54138, 262.43628, 17.88090,   0.00000, 90.00000, -23.00000);
	CreateDynamicObject(3935, 1226.61169, 245.45946, 19.51590,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(638, 1225.46069, 242.96227, 19.47590,   0.00000, 0.00000, -24.01400);
	CreateDynamicObject(638, 1227.74487, 247.94934, 19.47590,   0.00000, 0.00000, -24.01400);
	CreateDynamicObject(638, 1220.94861, 232.77441, 19.47590,   0.00000, 0.00000, -24.01400);
	CreateDynamicObject(638, 1216.71313, 223.02379, 19.47590,   0.00000, 0.00000, -24.01400);
	CreateDynamicObject(638, 1231.80200, 256.99423, 19.47590,   0.00000, 0.00000, -24.01400);
	CreateDynamicObject(8408, 1213.56567, 215.49298, 18.54389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18244, 1223.05188, 247.36320, 23.70390,   90.00000, 0.00000, 65.34000);
	CreateDynamicObject(2614, 1221.17407, 242.95558, 23.55440,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(19329, 1226.91260, 258.38998, 22.36720,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1775, 1225.28870, 253.50284, 19.65470,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(2942, 1223.29236, 247.04910, 19.19810,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1256, 1213.54089, 219.27544, 19.23350,   0.00000, 0.00000, -24.98000);
	CreateDynamicObject(1256, 1215.26550, 223.00002, 19.23350,   0.00000, 0.00000, -24.98000);
	CreateDynamicObject(1256, 1232.22534, 261.11975, 19.23350,   0.00000, 0.00000, -24.98000);
	CreateDynamicObject(1256, 1230.78235, 258.10651, 19.23350,   0.00000, 0.00000, -24.98000);
	CreateDynamicObject(1256, 1209.57068, 208.02692, 19.23350,   0.00000, 0.00000, -171.00000);
	CreateDynamicObject(1346, 1234.09485, 265.78262, 19.85890,   0.00000, 0.00000, -69.00000);
	CreateDynamicObject(1368, 1215.97632, 233.29750, 19.22750,   0.00000, 0.00000, 66.00000);
	CreateDynamicObject(1368, 1218.83044, 239.58032, 19.22750,   0.00000, 0.00000, 66.00000);
	CreateDynamicObject(1300, 1217.20789, 236.43250, 18.88890,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(1341, 1209.23364, 212.79028, 19.55660,   0.00000, 0.00000, -186.00000);
	CreateDynamicObject(1227, 1196.73999, 240.19727, 19.45360,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1227, 1195.72595, 237.89885, 19.45360,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1227, 1194.78357, 235.49657, 19.45360,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1227, 1240.88123, 208.89709, 19.35020,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(1227, 1250.19910, 242.97569, 19.33710,   0.00000, 0.00000, -200.00000);
	CreateDynamicObject(973, 2102.65942, 99.00628, 31.40970,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(1684, 2162.49561, 90.18560, 28.15030,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2973, 2158.43164, 93.57400, 26.35410,   0.00000, 0.00000, -4.00000);
	CreateDynamicObject(2973, 2158.86035, 87.28632, 26.35413,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2973, 2158.20996, 90.91494, 26.35410,   0.00000, 0.00000, -4.00000);
	CreateDynamicObject(1685, 2162.77246, 84.09037, 27.21690,   0.00000, 0.00000, -4.00000);
	CreateDynamicObject(1685, 2161.02710, 84.20128, 27.21690,   0.00000, 0.00000, -4.00000);
	CreateDynamicObject(3881, 2081.69971, 39.40505, 27.16810,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(981, 2100.46826, 40.11721, 26.29630,   0.00000, 0.00000, -179.00000);
	CreateDynamicObject(19467, 2126.33228, 44.06052, 25.36940,   302.00000, 0.00000, -268.00000);
	CreateDynamicObject(19467, 2115.76587, 39.01695, 25.36940,   -62.00000, 0.00000, 270.00000);
	CreateDynamicObject(2008, 2079.60547, 40.94130, 25.41484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 2080.42725, 40.12620, 25.89190,   0.00000, 0.00000, -171.00000);
	CreateDynamicObject(2007, 2083.06714, 37.29070, 25.41500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2007, 2084.06909, 37.31108, 25.41500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2007, 2085.07422, 37.29159, 25.41500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2007, 2082.07397, 37.28848, 25.41500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2007, 2081.13989, 37.27672, 25.41500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 2083.25317, 40.78158, 25.41455,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 668.71118, -568.67255, 16.83420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19465, 665.04095, -565.32422, 17.85310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, 664.27393, -565.33521, 15.31970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 665.92059, -565.77814, 16.80500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 670.75403, -571.75024, 16.83220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 670.75488, -574.60455, 16.83220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 667.66577, -577.21490, 16.83220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 664.77179, -577.22449, 16.83220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2367, 668.97186, -569.27985, 15.33280,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1514, 669.02454, -569.14984, 16.59710,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1848, 664.83057, -576.54584, 15.33270,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1775, 662.69714, -566.84576, 16.41320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2593, 668.79285, -571.48761, 16.21380,   0.00000, 0.00000, -28.00000);
	CreateDynamicObject(1983, 665.33154, -569.29431, 15.33400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1983, 665.33228, -570.24432, 15.33400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1983, 665.33264, -571.19452, 15.33400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2362, 669.48682, -570.84985, 16.37400,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(2543, 666.32550, -569.30298, 15.09340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2541, 670.17920, -575.59985, 15.28300,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1842, 665.48163, -573.67560, 15.77370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2489, 670.58899, -569.48627, 16.77760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, 665.76746, -566.47162, 15.31970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1987, 670.10590, -573.65723, 15.33330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1987, 670.10956, -574.62201, 15.33330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1987, 670.10663, -572.69458, 15.33330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2489, 670.58899, -569.48633, 17.05760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2489, 670.58899, -569.48633, 17.33760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2489, 670.82898, -569.48633, 17.33760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1981, 667.88458, -576.61078, 15.36590,   0.00000, 0.00000, -178.00000);
	CreateDynamicObject(1981, 668.86053, -576.58093, 15.36590,   0.00000, 0.00000, -178.00000);
	CreateDynamicObject(1981, 669.83661, -576.55133, 15.36590,   0.00000, 0.00000, -178.00000);
	CreateDynamicObject(2942, 661.32843, -576.26038, 15.99680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 644.04346, -611.43066, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 644.04889, -610.65558, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1533, 620.48157, -568.77472, 25.10360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 642.30481, -607.41699, 15.85440,   0.00000, 0.00000, 146.00000);
	CreateDynamicObject(970, 639.28845, -605.38409, 15.85440,   0.00000, 0.00000, 146.00000);
	CreateDynamicObject(970, 636.39172, -602.50165, 15.85440,   0.00000, 0.00000, 124.00000);
	CreateDynamicObject(970, 634.38989, -599.53424, 15.85440,   0.00000, 0.00000, 124.00000);
	CreateDynamicObject(970, 632.83539, -595.84430, 15.85440,   0.00000, 0.00000, 102.00000);
	CreateDynamicObject(970, 631.70654, -583.73956, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.71271, -579.63342, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.71686, -575.51672, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.68811, -567.98425, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.67883, -563.86450, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.68219, -559.74628, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.68793, -555.63861, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.68793, -555.63861, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.67432, -551.48273, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.67401, -547.37067, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 631.69299, -546.35028, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 626.39282, -540.13287, 15.85440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 629.63556, -540.13550, 15.85440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 631.71069, -542.23956, 15.85440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 632.31512, -579.65613, 15.97360,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1346, 633.99200, -537.25836, 16.68380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 619.72992, -584.09521, 17.64340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 629.93683, -571.73834, 20.85400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 630.92761, -582.63599, 25.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11245, 630.92761, -560.86603, 25.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 1237.82886, 327.85040, 19.37310,   0.00000, 0.00000, 69.00000);
	/*
	CreateDynamicObject(18862, 1551.01721, -1696.65308, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1552.28479, -1685.83350, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1541.81567, -1693.03723, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1540.21387, -1681.76770, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1545.21753, -1672.34277, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1550.55981, -1666.10608, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1541.42139, -1646.86487, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1548.85144, -1649.70288, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1548.85144, -1649.70288, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1541.99597, -1658.93872, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1529.47656, -1653.29150, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1529.38562, -1630.66272, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1529.69531, -1614.64124, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1545.07373, -1630.14978, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1535.31604, -1671.98071, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1528.74524, -1689.71814, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1530.64368, -1705.41382, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1530.49219, -1716.43396, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1523.74731, -1656.93823, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1521.64819, -1648.17285, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1521.26270, -1638.06189, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1521.92761, -1629.35913, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1536.92834, -1614.22766, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1496.85559, -1687.50439, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1464.10193, -1564.81702, 20.08680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3869, 1505.40454, -1567.06470, 20.08680,   -3.00000, -11.00000, 90.00000);
	CreateDynamicObject(3866, 1472.53223, -1544.83032, 20.08680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1480.31506, -1576.85376, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1488.87610, -1576.63464, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1494.93640, -1575.30103, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1475.04358, -1572.64490, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3869, 1500.93384, -1541.16687, 20.08680,   -3.00000, -11.00000, 0.00000);
	CreateDynamicObject(874, 1521.83081, -1689.77722, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1523.56726, -1671.18311, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1546.77087, -1715.79102, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1479.03235, -1686.40369, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1483.35913, -1736.03748, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1490.89209, -1728.89697, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1498.24438, -1731.87695, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1499.24011, -1742.50513, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1507.72437, -1750.15234, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1509.59473, -1741.22510, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1508.71155, -1732.70654, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1516.32373, -1730.46619, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1516.51880, -1722.74255, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1519.58838, -1715.53406, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1519.88635, -1707.18579, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1520.24207, -1698.98242, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1509.24097, -1715.06152, 13.34380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1510.59363, -1706.48889, 13.34380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1513.42236, -1697.12402, 13.34380,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(874, 1509.91223, -1687.37891, 13.34380,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(874, 1516.07446, -1678.64612, 13.34380,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(874, 1513.77356, -1671.08960, 13.34380,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(4206, 1544.38135, -1731.95422, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1521.08484, -1733.72083, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1500.86755, -1732.69604, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1477.92651, -1732.42615, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1470.89441, -1742.41675, 12.64840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1490.51416, -1742.23853, 12.64840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1490.51416, -1742.23853, 12.64840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1456.12122, -1734.24915, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1441.47974, -1734.76355, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1432.36487, -1726.05823, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1430.14270, -1706.70349, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(625, 1477.89880, -1680.75708, 10.29530,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(712, 1480.64270, -1666.49402, 9.45780,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(712, 1473.34265, -1666.64941, 9.45780,   3.14160, 0.00000, 45.38390);
	CreateDynamicObject(684, 1496.19226, -1671.70251, 13.45780,   3.14160, 0.00000, 42.78910);
	CreateDynamicObject(658, 1486.00427, -1701.54700, 13.02830,   1.00000, 84.00000, -40.00000);
	CreateDynamicObject(658, 1516.66760, -1714.63391, 13.22830,   1.00000, 91.00000, -18.00000);
	CreateDynamicObject(874, 1476.30029, -1733.51379, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1568.67688, -1752.24707, 12.54340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1563.26550, -1737.72778, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1566.57373, -1769.74548, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1546.08545, -1660.95959, 12.56840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(658, 1486.83594, -1606.95789, 13.02830,   1.00000, 84.00000, -40.00000);
	CreateDynamicObject(658, 1445.77222, -1720.28943, 13.02830,   1.00000, 84.00000, 40.00000);
	CreateDynamicObject(10984, 1469.02551, -1576.87756, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1461.78625, -1578.97888, 12.51410,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(3866, 1490.96106, -1556.57349, 9.00680,   0.00000, 40.00000, 0.00000);
	CreateDynamicObject(10984, 1488.68665, -1558.10461, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1485.84009, -1566.53748, 12.51405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1495.55823, -1568.71887, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1478.13672, -1563.09680, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1471.45349, -1575.69824, 15.32040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4113, 1347.91223, -1555.83679, 30.05360,   10.13600, 24.43500, 0.00000);
	CreateDynamicObject(10984, 1352.05457, -1570.83179, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1345.74329, -1569.80212, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1338.28577, -1564.33020, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1317.53296, -1559.13940, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1319.09644, -1548.91467, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1320.65210, -1537.55042, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1355.76367, -1559.91919, 69.86180,   23.71100, 0.18100, 81.67400);
	CreateDynamicObject(3866, 1372.47034, -1563.29236, 64.97480,   -20.81500, 1.99100, 257.64899);
	CreateDynamicObject(10984, 1371.35425, -1567.40137, 59.04880,   7.42100, 9.59300, -20.99600);
	CreateDynamicObject(10984, 1374.14844, -1560.56323, 59.04880,   7.42100, 9.59300, 0.00000);
	CreateDynamicObject(18862, 1453.64233, -1572.96228, 17.85440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1519.84509, -1601.25195, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1547.92761, -1613.54712, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1560.52417, -1612.77551, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1569.09045, -1628.99023, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1575.56641, -1613.41357, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1530.13000, -1632.88428, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1536.76770, -1628.11877, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1544.62585, -1626.45337, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1551.66980, -1608.56775, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1548.59216, -1618.36438, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1548.59216, -1618.36438, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1561.32751, -1608.06860, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1563.47522, -1619.53430, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1567.68958, -1627.22571, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1573.62708, -1609.99500, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1591.84106, -1611.88440, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1589.28174, -1625.63184, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3869, 1514.12268, -1546.64636, 20.08680,   -3.00000, -11.00000, 90.00000);
	CreateDynamicObject(734, 1457.43933, -1620.33350, 11.24550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1500.57190, -1624.26477, 11.24550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1478.74658, -1668.12488, 10.52150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1461.34058, -1709.90906, -8.48350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1369.20703, -1566.52600, 8.36880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1373.31824, -1555.45056, 8.36880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1375.65479, -1546.46399, 8.36880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1380.45801, -1537.78833, 8.36880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1375.98560, -1548.99597, 9.45480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1373.47021, -1558.62915, 9.81680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1389.53174, -1566.82898, 13.61780,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(3866, 1394.77563, -1564.33862, 10.13180,   46.74100, 0.54300, 80.95000);
	CreateDynamicObject(3866, 1387.13672, -1581.23572, 9.58880,   46.74100, 0.54300, 45.95000);
	CreateDynamicObject(10984, 1324.50781, -1564.55981, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1329.07581, -1566.55310, 12.53177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1368.15527, -1784.12842, 19.00500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3866, 1365.48157, -1808.95081, 20.08680,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1365.78137, -1805.96265, 20.08680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4010, 1350.75781, -1802.28125, 12.69530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1362.56799, -1814.94104, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1377.64624, -1815.04590, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1377.59839, -1804.24963, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1371.00830, -1800.42139, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1371.11621, -1778.91565, 15.59200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1368.31909, -1757.35645, 13.57500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(10984, 1377.98364, -1765.15454, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1372.33789, -1743.83386, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1380.51575, -1750.36816, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4002, 1482.54700, -1784.97144, -2.98260,   345.00000, -11.00000, 18.00000);
	CreateDynamicObject(10984, 1500.59070, -1753.21240, 12.51425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1492.56555, -1753.43005, 12.51425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1485.18103, -1753.59912, 12.51425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1474.99292, -1756.17920, 12.51425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1467.56311, -1757.76758, 12.51425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1461.27515, -1753.63538, 12.51425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1518.70776, -1761.60168, 20.28530,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3887, 1477.23022, -1761.62097, 20.28530,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3887, 1447.38879, -1761.49487, 20.28530,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3887, 1428.78955, -1780.49426, 20.28530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1428.72803, -1803.77148, 20.28530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1447.17615, -1820.65308, 20.28530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1485.76953, -1820.50708, 20.28530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1522.11975, -1819.97583, 20.28530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1540.94763, -1801.33667, 20.28530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1540.89685, -1782.05151, 20.28530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 1528.69165, -1769.96082, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1526.98474, -1777.95776, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1535.64758, -1805.67480, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1502.10547, -1791.13733, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1523.24670, -1796.52979, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1515.05823, -1789.42310, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1533.55164, -1792.15723, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1521.25659, -1816.04919, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1549.83472, -1809.55481, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1456.83948, -1794.38391, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1481.59021, -1813.26086, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1501.28162, -1804.35022, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1511.90271, -1805.12866, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1525.20740, -1805.57788, 17.13040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1514.84021, -1761.43127, 17.31140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1553.16089, -1771.82629, 17.31140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1492.40027, -1809.80725, 17.13040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1478.78491, -1804.50281, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1463.30811, -1803.97998, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1452.82031, -1815.33215, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1445.05750, -1763.90955, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1470.21741, -1805.40454, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1459.15051, -1777.66870, 17.13040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1437.64612, -1813.12537, 17.13040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1419.22656, -1809.94263, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1432.10962, -1769.12866, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1433.88220, -1784.05762, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1443.49756, -1774.54468, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1449.37146, -1798.20508, 17.13040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1433.71533, -1793.84351, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1444.57495, -1785.74060, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1418.37439, -1796.02832, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1417.43848, -1782.98340, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1412.69958, -1755.88342, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1453.73877, -1744.00952, 17.13040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1516.37561, -1748.21008, 9.97850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1427.51880, -1748.37415, 9.97850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1260, 1483.56897, -1859.59326, 18.52310,   25.00000, 4.00000, 47.00000);
	CreateDynamicObject(3866, 1545.78784, -1851.28308, 20.08680,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1518.00916, -1851.21252, 20.08680,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1517.62744, -1851.71985, 20.08680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1483.18518, -1851.73071, 20.08680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1455.96265, -1851.56104, 20.08680,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1427.58582, -1853.34802, 20.28530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1532.70032, -1847.44580, 20.28530,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(873, 1529.05493, -1738.94360, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(873, 1530.17114, -1728.85730, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1544.82129, -1734.27759, 12.94380,   0.00000, 0.00000, 185.00000);
	CreateDynamicObject(874, 1542.03247, -1741.37952, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(873, 1542.15637, -1721.63538, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(873, 1555.09570, -1721.43323, 12.94380,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(874, 1555.03137, -1740.10352, 12.94380,   0.00000, 0.00000, 185.00000);
	CreateDynamicObject(874, 1529.75903, -1597.95483, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1520.64136, -1591.27856, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1511.40564, -1590.75452, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1508.66943, -1595.59082, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1502.46814, -1585.25525, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1501.14490, -1594.47876, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1512.47192, -1578.39307, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1493.09180, -1597.75574, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1492.49536, -1585.00317, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1484.94861, -1591.25684, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1478.80762, -1597.09753, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1473.52332, -1585.11316, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1465.31152, -1591.57043, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1487.06860, -1602.91968, 12.52865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1481.65454, -1724.60266, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1453.51392, -1733.02661, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1267, 1420.45862, -1722.98535, 21.40330,   11.00000, 11.00000, 0.00000);
	CreateDynamicObject(3887, 1331.33569, -1769.52893, 20.28530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1331.11572, -1811.86877, 20.28530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1344.42773, -1819.04028, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1336.71252, -1819.59302, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1339.00134, -1811.72876, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1334.37231, -1804.77112, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1334.67126, -1794.76331, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1334.55420, -1778.84460, 12.47355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1430.37927, -1684.97949, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1430.11023, -1666.15540, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1416.67957, -1653.62671, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1398.42761, -1650.93323, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1379.26367, -1650.08813, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1377.22449, -1655.38037, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1428.17676, -1641.59973, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1427.73157, -1622.37329, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1429.62427, -1600.34180, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1448.19312, -1589.48169, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1470.32739, -1594.04858, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1494.08716, -1591.55139, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1517.60254, -1593.34717, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1537.78748, -1585.45020, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1537.78955, -1596.19360, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1260, 1546.77112, -1611.40466, 17.30980,   0.00000, 40.00000, -40.00000);
	CreateDynamicObject(734, 1305.04260, -1839.68628, 10.52150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1304.58777, -1816.01025, 10.52150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 1431.13477, -1708.78918, 12.88390,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(3594, 1455.74646, -1728.78186, 13.06490,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(3593, 1499.30774, -1733.11353, 12.88390,   0.00000, 0.00000, 185.00000);
	CreateDynamicObject(3594, 1541.12646, -1696.09973, 12.88390,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(3866, 1405.21301, -1631.21753, 20.08680,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1408.02747, -1628.33325, 20.08680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1404.65039, -1620.84485, 17.91480,   -15.00000, -25.00000, -25.00000);
	CreateDynamicObject(10984, 1421.40967, -1622.58350, 12.51410,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(10984, 1406.75269, -1635.23083, 11.97110,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(10984, 1398.27405, -1613.57922, 12.51410,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(18862, 1401.27271, -1636.61816, 16.58740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4005, 1404.04370, -1681.30591, 15.22990,   337.00000, 0.00000, 3.00000);
	CreateDynamicObject(10984, 1415.83081, -1662.32983, 12.51410,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(10984, 1397.00732, -1658.39917, 12.51410,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(10984, 1407.06165, -1658.40674, 12.69510,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(4206, 1431.02649, -1585.58191, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1432.33008, -1571.14771, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1427.19653, -1557.22595, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3991, 1613.86523, -1726.23877, 12.14420,   -10.67900, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1624.96301, -1792.95142, 25.69120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1613.81824, -1795.12146, 25.69120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1608.60059, -1794.44812, 25.87220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1619.57227, -1791.41394, 25.87220,   -4.00000, -4.00000, 25.00000);
	CreateDynamicObject(10984, 1589.66516, -1725.58545, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1596.32532, -1722.34583, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1604.92126, -1722.73462, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1613.08191, -1723.22717, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1621.44836, -1724.73291, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1628.74194, -1723.45679, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1582.01062, -1728.15942, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1598.61975, -1730.48999, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1412.92761, -1733.86023, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1409.58508, -1747.46021, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1416.79785, -1743.03394, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4011, 1337.81580, -1643.70288, 6.35910,   0.00000, -18.00000, 0.00000);
	CreateDynamicObject(10984, 1324.84338, -1636.82153, 12.33819,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1327.95435, -1627.87305, 12.33819,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1324.37952, -1646.81860, 12.51920,   0.00000, 0.00000, 59.36700);
	CreateDynamicObject(10984, 1328.69348, -1655.33093, 12.51920,   0.00000, 0.00000, 59.36700);
	CreateDynamicObject(10984, 1595.89893, -1556.96008, 28.52975,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1607.80420, -1557.81604, 28.52975,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1563.00378, -1558.72070, 29.43480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4129, 1594.50610, -1602.21960, 17.08410,   13.57500, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1589.48413, -1621.80627, 12.50372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1598.80359, -1621.68054, 12.50372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1606.03320, -1621.09595, 12.50372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1618.03296, -1623.95776, 12.50372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1611.21582, -1620.15247, 12.50372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1622.76526, -1610.13538, 17.02870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1557.83447, -1675.92908, 16.99550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1557.83667, -1677.38550, 16.99550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1553.29468, -1678.18591, 15.71350,   428.35339, 0.00000, 3.14160);
	CreateDynamicObject(1290, 1603.63171, -1744.97644, 16.86760,   76.00000, 91.00000, 0.00000);
	CreateDynamicObject(10984, 1624.93152, -1783.65576, 23.70020,   -5.97300, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1616.71143, -1784.63684, 23.70020,   -5.97300, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1610.42493, -1785.49109, 23.70020,   -5.97300, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1587.56165, -1801.67126, 18.29430,   0.00000, -25.00000, 0.00000);
	CreateDynamicObject(3887, 1589.26709, -1832.15771, 15.39830,   0.00000, 18.00000, 0.00000);
	CreateDynamicObject(10984, 1580.83179, -1792.30176, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1580.99719, -1802.21289, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1592.30408, -1822.26392, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1583.70984, -1815.20667, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1589.53418, -1820.17871, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1593.36682, -1828.13025, 13.07480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(986, 1573.26147, -1882.43884, 14.16200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(986, 1562.32068, -1882.40637, 14.16200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(986, 1567.43689, -1882.86853, 12.71400,   41.99200, 0.00000, 0.00000);
	CreateDynamicObject(684, 1564.43237, -1898.11621, 12.54100,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(684, 1570.31702, -1898.04883, 12.54100,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(642, 1468.51221, -1905.51892, 22.53125,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(643, 1464.24121, -1885.98145, 21.64063,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(625, 1451.13916, -1892.87561, 22.96880,   265.00000, 0.00000, 3.00000);
	CreateDynamicObject(625, 1472.91443, -1902.04211, 21.70180,   265.00000, 0.00000, -40.00000);
	CreateDynamicObject(642, 1465.38306, -1894.87927, 22.16930,   294.05899, 0.00000, -3.00000);
	CreateDynamicObject(642, 1476.10669, -1891.03516, 22.16930,   294.05899, 0.00000, -43.00000);
	CreateDynamicObject(625, 1468.17737, -1914.08630, 23.69280,   265.00000, 0.00000, -40.00000);
	CreateDynamicObject(625, 1475.45313, -1914.12146, 23.69280,   265.00000, 0.00000, 0.00000);
	CreateDynamicObject(642, 1448.36523, -1901.62268, 22.71230,   294.05899, 0.00000, 30.00000);
	CreateDynamicObject(1260, 1650.43604, -1798.81250, 20.15210,   3.00000, 47.00000, -33.00000);
	CreateDynamicObject(987, 1700.38879, -1872.77405, 12.56602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1712.24854, -1872.69958, 12.56602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1724.19275, -1872.95593, 12.56602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1700.77222, -1899.99963, 15.27200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1700.78040, -1911.83105, 15.27200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1700.70520, -1923.43335, 15.27200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1700.67859, -1935.40588, 15.27200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1700.78406, -1935.19775, 15.27200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1717.89783, -1935.04810, 15.27200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1710.07739, -1935.92139, 11.29000,   -24.07300, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1692.29407, -1934.48499, 10.94661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1693.28149, -1939.42163, 10.94661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1690.53772, -1943.93335, 12.35110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1691.67664, -1937.55383, 12.35110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1714.96118, -1910.53125, 12.57550,   3.00000, 47.00000, 55.00000);
	CreateDynamicObject(1280, 1725.48547, -1915.94580, 12.57550,   3.00000, 47.00000, 0.00000);
	CreateDynamicObject(1280, 1725.15332, -1900.24780, 12.57550,   3.00000, 47.00000, 10.67900);
	CreateDynamicObject(4019, 1776.69250, -1773.97778, 0.75840,   18.00000, 0.00000, 11.00000);
	CreateDynamicObject(700, 1782.44995, -1829.25488, 13.17060,   270.00000, 0.00000, 3.00000);
	CreateDynamicObject(700, 1807.79980, -1826.80945, 13.17060,   270.00000, 0.00000, 43.00000);
	CreateDynamicObject(10984, 1775.88049, -1814.07104, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1767.85400, -1816.26575, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1752.36511, -1814.83630, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1748.49792, -1805.32227, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1746.35938, -1796.75903, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1745.88940, -1789.24634, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1784.59534, -1815.93469, 15.41030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1796.03882, -1812.13867, 15.41030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1814.88220, -1802.25977, 15.41030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1813.11340, -1773.31946, 15.41030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1808.73767, -1807.61426, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1814.88733, -1790.93970, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1814.16516, -1783.62305, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1809.50378, -1760.85461, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1805.19434, -1749.00696, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1807.41919, -1753.64209, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1799.75525, -1742.35535, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1790.21582, -1743.56665, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1780.49475, -1745.15869, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1765.99011, -1714.67053, 12.71680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1775.52002, -1714.06226, 13.25980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1783.80493, -1713.60046, 13.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1793.44653, -1713.56445, 13.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1786.62976, -1711.48950, 12.51610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1772.64478, -1711.40076, 12.51610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1782.76392, -1711.40723, 17.22210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1260, 1800.41956, -1701.01282, 17.18440,   33.00000, 0.00000, 47.00000);
	CreateDynamicObject(1280, 1744.47229, -1864.42114, 12.93730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 1741.64917, -1864.50098, 12.93730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 1741.66443, -1864.40210, 13.66130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 1744.46802, -1864.31860, 13.66130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1259, 1831.72180, -1834.37622, 14.39950,   338.00000, -69.00000, 135.00000);
	CreateDynamicObject(10984, 1850.36975, -1863.41675, 12.36093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1845.63672, -1855.82813, 12.90390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1834.25330, -1840.75452, 12.90390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1709.72266, -1810.80432, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1724.58875, -1814.78284, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1742.72412, -1819.48022, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1764.50806, -1828.71375, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1780.56177, -1833.68860, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1800.53418, -1833.74548, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1818.45227, -1832.76184, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1827.31372, -1851.66943, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1838.61865, -1862.16394, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1825.15112, -1863.60925, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1804.12476, -1855.02563, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1787.48083, -1855.10083, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1789.32178, -1845.28979, 12.58070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1809.86584, -1845.73608, 12.58070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1763.49402, -1853.98083, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1740.01758, -1856.48987, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1725.25525, -1848.50281, 12.50370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1738.57825, -1843.84521, 12.58070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1741.55615, -1823.29846, 12.58070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1728.30115, -1830.76331, 12.58070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1748.68213, -1838.53613, 12.58070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1762.27661, -1844.16370, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1766.94421, -1839.04834, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1771.43481, -1844.04639, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1771.43481, -1844.04639, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1777.68384, -1840.42651, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1776.63867, -1847.69495, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1779.89063, -1855.72729, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1771.45923, -1856.80627, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1762.08154, -1857.74902, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1753.63318, -1853.08118, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1754.37781, -1860.54492, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1748.37610, -1860.87659, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1740.54541, -1860.49194, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1736.82593, -1851.22180, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1730.00952, -1850.78516, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1729.96448, -1859.62939, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1725.53442, -1864.31104, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1723.23535, -1846.12256, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1720.27527, -1854.79871, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1720.53442, -1844.90918, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1715.25610, -1839.76514, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1712.29761, -1847.93335, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1714.76807, -1857.49792, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1705.15503, -1856.13269, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1716.36353, -1866.01465, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1704.53223, -1866.78943, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1704.53223, -1866.78943, 12.50660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1781.35510, -1658.45117, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1784.62903, -1672.14136, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1789.12427, -1665.37732, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1794.11316, -1675.24744, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1802.49817, -1676.13098, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1801.88855, -1663.80688, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1791.81079, -1655.84900, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1774.34631, -1664.00269, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1770.74829, -1671.95129, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1771.45325, -1677.77527, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1769.08667, -1650.62488, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1760.48254, -1641.98828, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1763.51270, -1632.40259, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1773.37964, -1639.26575, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1783.22375, -1642.14270, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1793.72693, -1643.42249, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1801.89795, -1653.80042, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1777.24219, -1648.29028, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1774.16211, -1658.17859, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1776.11902, -1627.92627, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1785.42834, -1631.07434, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1793.67432, -1632.25037, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1767.30786, -1624.69592, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1759.89868, -1621.37402, 13.38786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1777.71619, -1676.35718, 13.40110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1792.34778, -1641.24365, 10.58010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1781.94299, -1544.87976, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1775.31445, -1551.80884, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1771.28662, -1559.96997, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1767.14270, -1571.74731, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1764.99255, -1580.35925, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1814.20764, -1540.58252, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1799.52283, -1543.31860, 12.58440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1801.74670, -1564.73975, 12.38080,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(3866, 1801.71729, -1555.10974, 12.38080,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3866, 1782.71240, -1584.79163, 10.56080,   18.00000, 0.00000, -45.00000);
	CreateDynamicObject(10984, 1795.13855, -1572.90845, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1786.50891, -1570.59656, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1761.65833, -1589.29138, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1769.51843, -1553.46619, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1804.10266, -1559.02783, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1807.59082, -1577.62915, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1798.32214, -1582.36548, 12.36367,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1283, 1820.80762, -1603.36304, 11.81860,   76.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1860.93188, -1678.72595, 36.92340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1857.97058, -1684.38342, 36.92340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1873.72083, -1687.16138, 36.92340,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1883.64270, -1687.39465, 36.92340,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1883.58398, -1679.27942, 36.92340,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1881.74841, -1678.80261, 36.92340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1855.30920, -1666.93994, 33.21350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1864.65967, -1663.99365, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1873.07739, -1664.89661, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1882.57690, -1667.25757, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1897.39368, -1671.28918, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1895.75159, -1689.76428, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1893.96631, -1699.17688, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1884.76318, -1699.02869, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1875.04004, -1699.21326, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1866.20630, -1699.25745, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1860.82166, -1697.75110, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1852.08997, -1702.01501, 30.75634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1708.79504, -1710.59631, 12.76500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1714.04883, -1697.93530, 12.76500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1731.82642, -1691.35205, 12.76500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1733.84644, -1707.05774, 12.76500,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1216, 1720.38000, -1719.94336, 12.68060,   98.00000, 0.00000, 42.00000);
	CreateDynamicObject(1216, 1711.63672, -1715.83691, 12.68060,   98.00000, 0.00000, 42.00000);
	CreateDynamicObject(625, 1710.21899, -1719.28662, 13.00590,   273.00000, 0.00000, 113.00000);
	CreateDynamicObject(3887, 1711.82190, -1769.85547, 12.70044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1718.33386, -1756.33313, 12.70040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 1715.38196, -1778.36694, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1715.95313, -1768.29126, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1715.39063, -1759.86914, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1715.86584, -1754.43530, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1715.69324, -1747.90857, 12.53577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1639.32581, -1714.52686, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1656.98901, -1701.29895, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1658.91992, -1683.61584, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1640.32874, -1692.40442, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1673.80103, -1712.11560, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1658.11987, -1716.18530, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1649.93286, -1708.54639, 12.51850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1664.28137, -1708.58521, 12.51850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1664.28467, -1711.45874, 12.51850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1664.12585, -1697.40930, 12.51850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(4013, 1656.21240, -1639.83887, 21.17860,   11.00000, 0.00000, 3.00000);
	CreateDynamicObject(10984, 1657.05872, -1691.78552, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1649.12024, -1692.81152, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1649.05249, -1701.30334, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1659.62756, -1705.41589, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1666.71167, -1705.87366, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1671.56885, -1706.08374, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1673.14673, -1698.93323, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1664.64709, -1697.10327, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1665.56897, -1716.57959, 12.33373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1678.81543, -1648.35559, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1675.53540, -1654.65710, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1670.17908, -1657.76111, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1664.96423, -1656.13379, 12.33370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1657.77893, -1657.63794, 12.33370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1649.65906, -1660.51550, 12.33370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1643.43079, -1659.59717, 12.33370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1669.46545, -1651.51099, 12.51850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1648.71289, -1651.45703, 12.51850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1639.45105, -1651.33154, 12.51850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 1673.62329, -1574.82397, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1673.59106, -1560.65710, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1688.70605, -1561.16260, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1691.79761, -1575.71521, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1701.79443, -1574.24060, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1701.68726, -1560.78430, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18862, 1688.70117, -1569.67529, 15.69610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1692.26855, -1571.78577, 12.52040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1675.06445, -1571.95789, 12.52040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1678.88391, -1569.00940, 12.52040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1681.89832, -1566.42896, 12.52040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1699.07983, -1566.43726, 12.52040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1676.12830, -1610.58887, 12.33370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1713.47961, -1647.50623, 26.86380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1710.89563, -1664.98950, 26.86380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3866, 1726.04907, -1667.91089, 26.86380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1728.87976, -1650.62622, 26.86380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3866, 1711.00647, -1667.95007, 14.48780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1424.67175, -1873.13257, 7.72730,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(4206, 1407.42310, -1591.37219, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1385.15149, -1588.95435, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1455.87366, -1591.86353, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1447.12549, -1592.00330, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1436.80383, -1592.03894, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.81519, -1590.85815, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.14038, -1569.50171, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.08362, -1578.54492, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.08362, -1578.54492, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1429.11560, -1561.90161, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1429.74683, -1553.60437, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1432.02783, -1549.64368, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.58130, -1602.32776, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.76782, -1611.82117, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.35901, -1619.65662, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.54895, -1626.56689, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.22241, -1634.18066, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.68945, -1641.63196, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1417.94690, -1647.83960, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.50586, -1647.59241, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.03674, -1656.37927, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.21655, -1663.53479, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.01013, -1670.90210, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1428.32446, -1677.49170, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(874, 1427.48950, -1683.27002, 12.52870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1504.09619, -1477.53455, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1504.18054, -1460.05945, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1518.56250, -1461.13135, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1530.17578, -1460.38770, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1540.44885, -1460.43616, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1542.15198, -1476.89575, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1529.49792, -1476.16101, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1518.14063, -1475.96387, 12.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4020, 1544.83594, -1516.85156, 32.45313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1520.16882, -1459.35657, 19.52670,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3887, 1520.12195, -1469.52820, 19.52670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1491.09619, -1469.58228, 19.52670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1491.92334, -1459.58301, 19.52670,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(4206, 1437.52148, -1537.81201, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1442.14392, -1520.38538, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1448.44653, -1503.08276, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1404.35059, -1765.90320, 9.97850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1342.93274, -1579.44104, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1324.61658, -1574.37048, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1309.62036, -1566.66516, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1303.02856, -1556.42017, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1306.21741, -1542.24695, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1311.20178, -1529.97595, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1316.44678, -1519.70935, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1322.38171, -1510.34998, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1327.34045, -1501.75598, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1335.16272, -1491.43799, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1339.82813, -1480.31323, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1341.65759, -1470.76221, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1346.13489, -1462.55151, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1347.05396, -1450.15710, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1348.22742, -1441.47607, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1350.05261, -1431.68445, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1342.22009, -1411.92004, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1349.24487, -1420.61182, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1329.32043, -1401.00671, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1363.45642, -1406.76172, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1378.73535, -1400.26660, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1391.85364, -1411.42395, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1394.64111, -1424.07666, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1400.15430, -1438.49036, 12.43440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1410.94763, -1438.44299, 12.43440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1388.24866, -1399.67737, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1348.98938, -1389.94165, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1232.58081, -1376.54700, 13.08404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1223.81030, -1340.00818, 13.08404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1241.44202, -1350.72119, 13.08404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1220.96265, -1360.13110, 13.08404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1242.30481, -1365.74512, 10.57900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1240.33069, -1326.34119, 10.57900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1236.47144, -1307.61731, 13.08404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1219.96094, -1321.16260, 13.08404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1220.05225, -1297.59387, 10.57900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1179.31543, -1299.78455, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1159.25635, -1301.15894, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1167.36511, -1315.31372, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1155.02576, -1320.85339, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1153.66516, -1333.25623, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1182.79236, -1318.37427, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1172.94739, -1329.41797, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1179.47571, -1333.05823, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1166.81958, -1342.27832, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1155.59229, -1349.49878, 12.99650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1179.30847, -1346.72009, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1167.86633, -1355.26477, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1156.02490, -1363.33618, 12.99650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1176.79932, -1360.65161, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1159.51831, -1376.00684, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18862, 1176.06689, -1377.70850, 16.71690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1150.16199, -1376.17090, 12.99650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1169.31958, -1291.65210, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1149.90930, -1293.08594, 12.36449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1177.86060, -1356.98730, 12.53150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1177.80212, -1316.06042, 12.53150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1154.52026, -1318.45776, 12.53150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1154.43994, -1359.56848, 12.53150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1172.72949, -1376.21167, 12.53150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4206, 1315.56152, -1401.34253, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1304.21887, -1399.67285, 12.36940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1289.67371, -1400.11755, 12.36940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1283.35156, -1411.37341, 12.36940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1271.75745, -1399.80554, 12.21140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1267, 1417.78162, -1417.34180, 15.11600,   -4.00000, 76.00000, -47.00000);
	CreateDynamicObject(1267, 1379.54333, -1400.13293, 13.53600,   -4.00000, 84.00000, 180.00000);
	CreateDynamicObject(734, 1356.17542, -1940.10791, 21.44650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1342.41016, -1905.00000, 18.12850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1378.92114, -1951.19556, 21.44650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1404.54749, -1941.80237, 21.44650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, 1436.08667, -1923.41345, 21.44650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4193, 1359.81042, -1842.05713, 14.08570,   18.00000, 0.00000, 19.00000);
	CreateDynamicObject(874, 1470.71106, -1731.80811, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1462.06665, -1731.04211, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1444.48193, -1733.25977, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1435.91577, -1732.88013, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1428.05786, -1732.09277, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1430.42029, -1719.96094, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1430.45862, -1707.83435, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1430.02515, -1697.64148, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1428.95593, -1690.16785, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(874, 1407.54492, -1731.02307, 12.94380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3269, 1476.88062, -1581.12671, 13.46843,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1900.43823, -1524.42529, 2.96370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1910.62085, -1498.47107, 2.96370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(740, 1909.79749, -1484.95166, 9.78130,   0.00000, 97.00000, -32.00000);
	CreateDynamicObject(10984, 1885.15369, -1370.67712, 13.29240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1912.86609, -1386.83337, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1903.76416, -1386.30798, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1904.41052, -1400.63220, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1894.05981, -1402.26099, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1873.54663, -1423.44568, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1886.04688, -1415.54028, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1897.66797, -1418.51563, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1897.03455, -1432.48950, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1883.09778, -1432.58289, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1874.70117, -1435.16895, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1943.78491, -1434.05261, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1933.81555, -1426.76892, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1922.85376, -1427.87744, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1909.97217, -1428.13818, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1944.76123, -1417.32825, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1958.19263, -1418.11804, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1959.92981, -1431.42041, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1952.14648, -1439.00256, 12.99240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1308, 1870.05603, -1602.67981, 12.78130,   33.00000, -20.00000, 55.00000);
	CreateDynamicObject(3866, 1917.77417, -1586.56201, 20.06080,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1905.92163, -1586.66650, 20.06080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1854.57495, -1590.32617, 20.06080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1866.17578, -1590.27686, 20.06080,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 1878.14539, -1599.72461, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1845.16589, -1598.67603, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1845.68005, -1584.43323, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1898.07385, -1599.54187, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1928.15125, -1597.81677, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1911.73376, -1595.94836, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1896.64978, -1579.23877, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1927.95203, -1579.68677, 12.56573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1838.02576, -1820.50708, 6.57300,   0.10000, 48.00000, 14.00000);
	CreateDynamicObject(10984, 1836.36707, -1807.88196, 6.57300,   0.10000, 48.00000, 14.00000);
	CreateDynamicObject(3594, 1528.87085, -1703.09973, 12.88390,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(735, 1926.48877, -1363.98743, 11.80730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1947.14172, -1394.59558, 12.10730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1954.88977, -1738.91858, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1966.39282, -1740.32166, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1976.65930, -1740.71936, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1986.06177, -1740.49707, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1955.80078, -1728.21484, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1968.94495, -1727.48193, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1984.34021, -1726.33679, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1987.14111, -1712.41675, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1976.08081, -1709.77222, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1966.13428, -1709.32983, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1955.90210, -1709.17078, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1956.75098, -1695.81824, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1956.58386, -1683.05103, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1957.57434, -1668.76416, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1957.86377, -1653.73608, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1958.92078, -1641.30115, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1958.63220, -1628.87427, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1991.04895, -1629.54932, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1991.05847, -1640.02710, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1991.08435, -1651.99072, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1991.07886, -1669.04187, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1990.99146, -1685.80017, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1990.92725, -1696.44556, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1990.79565, -1729.34924, 12.52921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1972.73792, -1695.01172, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1972.81262, -1683.95508, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1973.25378, -1673.30530, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1973.74243, -1662.21167, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1973.88696, -1650.09351, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1974.21594, -1638.52795, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 1974.68518, -1626.51550, 12.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 1960.00879, -1651.91382, 20.15290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1973.26624, -1651.87476, 20.15290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1984.00061, -1651.93103, 20.15290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1983.48438, -1715.22009, 20.15290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1983.62537, -1674.29797, 20.15290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 1960.02893, -1692.62036, 20.15290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 1959.98267, -1716.48499, 20.15290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1923.17725, -1724.51086, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1927.68640, -1681.91174, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1922.31384, -1695.67834, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1922.31384, -1695.67834, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1921.86072, -1667.76941, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1928.60449, -1652.73059, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(735, 1924.80396, -1631.82861, 10.43350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1985.37354, -1773.25439, 19.32410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2033.97925, -1773.09900, 31.12410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2033.96545, -1779.86047, 19.62410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2022.54492, -1773.15356, 19.32410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2005.48083, -1773.30872, 19.32410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1985.68994, -1786.45898, 19.32410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2037.06177, -1777.33582, 20.02410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3887, 2132.38843, -1733.74023, 15.81960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3887, 2147.89185, -1733.65881, 15.81960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10984, 2164.66968, -1668.58362, 13.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2153.26782, -1704.17346, 14.04914,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2153.26782, -1704.17346, 14.04910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 2157.61670, -1663.91907, 14.04910,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(3866, 2153.50464, -1665.00330, 14.04910,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(10984, 2179.31787, -1653.54248, 14.06257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2133.90112, -1690.96594, 14.06257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2137.96973, -1652.51257, 14.06257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2151.49365, -1683.22656, 14.06257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3661, 2061.56543, -1716.22400, 13.31880,   0.00000, 5.60000, 0.00000);
	CreateDynamicObject(3661, 2024.44189, -1715.16479, 13.31880,   0.00000, 5.60000, 0.00000);
	CreateDynamicObject(10984, 2068.74487, -1732.45972, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2067.49878, -1720.14832, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2066.75439, -1703.38220, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2056.34717, -1710.06006, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2055.21191, -1726.88171, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2031.00110, -1729.71814, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2030.52539, -1713.36267, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2018.96545, -1706.48645, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2019.16724, -1718.67358, 12.35796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2019.17285, -1733.72510, 12.45800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3582, 2018.29187, -1654.03528, 14.00310,   0.00000, 8.70000, 80.00000);
	CreateDynamicObject(3582, 2019.96619, -1635.72778, 14.00310,   0.00000, 9.00000, 126.00000);
	CreateDynamicObject(10984, 2018.53821, -1644.65076, 12.53653,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3582, 2062.92676, -1633.36389, 14.00310,   0.00000, 9.00000, -126.00000);
	CreateDynamicObject(3582, 2063.70850, -1652.71399, 14.00310,   0.00000, 9.00000, 126.00000);
	CreateDynamicObject(10984, 2064.70679, -1642.63147, 12.53653,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2068.94434, -1658.74084, 12.33650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 2063.95557, -1573.11938, 12.44835,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3887, 2072.61548, -1569.57825, 12.44840,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 2063.91895, -1593.57153, 12.44572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2080.89063, -1594.56470, 12.44572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2081.23364, -1572.39685, 12.34570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2070.77417, -1549.61572, 12.44572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2066.02661, -1574.91260, 12.44572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2082.24268, -1554.00403, 12.24570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2145.55786, -1596.68823, 20.73270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 2157.08130, -1596.62207, 20.73270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 2153.25854, -1606.59668, 13.33417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2161.25806, -1611.00208, 13.33417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2138.57446, -1593.44885, 13.33417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2159.09937, -1592.72412, 13.33417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2178.31348, -1611.17761, 13.33417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17697, 2494.83936, -1696.42737, 13.95470,   4.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 2453.20459, -1639.78906, 12.38740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2463.65015, -1639.78186, 12.38740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2473.20630, -1640.17468, 12.38740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2480.62695, -1639.84033, 12.38740,   0.00000, 0.00000, 0.00000);
	//InFOROmatic.com-InFOROmatic.com-InFOROmatic.com-InFOROmatic.com
	CreateDynamicObject(10984, 2488.71411, -1640.01221, 12.38740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2496.14868, -1642.10400, 12.38740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2503.78906, -1642.64648, 12.38740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 2527.65039, -1658.72546, 14.18740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 2525.78198, -1673.79065, 14.18740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10984, 2530.61182, -1674.58093, 15.48740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(4206, 2494.89746, -1664.68860, 12.37660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2498.28345, -1678.01868, 12.37660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2479.69604, -1673.82068, 12.37660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2477.76611, -1659.52881, 12.37660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2455.73193, -1659.55847, 12.37660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2436.41333, -1658.68079, 12.37660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2423.48364, -1660.84729, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2425.53589, -1659.19006, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2409.35645, -1662.22607, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2389.60254, -1662.14734, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2369.87012, -1661.99915, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2349.15356, -1660.58459, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2337.53467, -1675.71558, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2342.21362, -1697.25269, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2342.01489, -1719.13843, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2342.69141, -1732.79541, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2363.57422, -1734.85620, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2320.99170, -1734.46313, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2298.96558, -1734.48633, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2280.34814, -1734.13940, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2283.66699, -1755.65576, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2264.67871, -1755.65393, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2245.64404, -1755.81238, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2229.50610, -1757.72388, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2261.65796, -1734.59668, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2241.23462, -1734.38367, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2219.19946, -1734.09998, 12.37660,   0.10000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2039.97827, -1674.48547, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2019.18689, -1673.79834, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2002.23865, -1686.57642, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2001.97791, -1664.30591, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2001.98596, -1643.39331, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2005.24878, -1623.63794, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2011.70435, -1615.97021, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2028.24805, -1618.29578, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2037.07288, -1616.05579, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2041.05933, -1608.23755, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2060.95386, -1615.54785, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2078.97241, -1614.70337, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2079.64844, -1632.78589, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2078.91187, -1651.54944, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2079.29980, -1669.22278, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2061.54663, -1671.70544, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2001.63306, -1708.63452, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2002.34204, -1731.01917, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 2002.38696, -1751.91907, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1978.89600, -1752.58704, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1959.31946, -1751.69373, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1941.73950, -1753.25977, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1943.22656, -1728.08350, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1941.46814, -1707.36670, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1942.08118, -1686.48157, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1942.69312, -1664.49500, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1943.19312, -1642.29993, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1939.36804, -1619.68652, 12.39940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4206, 1557.30737, -1592.22791, 12.44840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1388, 1235.75293, -1322.58813, 12.16910,   3.00000, -57.60000, 27.70000);
	CreateDynamicObject(1391, 1223.15881, -1263.56116, 38.21410,   32.55000, -20.40000, 0.00000);
	CreateDynamicObject(10984, 1212.08105, -1464.86279, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1230.08948, -1465.85632, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1221.94275, -1464.75037, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1212.45593, -1451.36560, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1209.90747, -1434.91541, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1230.57068, -1434.27893, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1221.42615, -1433.93408, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1231.28162, -1450.01794, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1223.43005, -1449.90735, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1207.59021, -1416.26477, 12.66406,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(792, 1232.44153, -1418.00110, 12.71875,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(792, 1206.94971, -1417.53613, 12.66406,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(792, 1232.77625, -1416.55725, 12.71875,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(5463, 1218.37476, -1441.08398, 30.62480,   -8.10000, -9.00000, 0.00000);
	CreateDynamicObject(10984, 1196.59485, -1421.08301, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1201.03418, -1411.38525, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1209.05627, -1407.93420, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10984, 1218.68396, -1407.31006, 12.52462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1403.17358, -1374.24292, 33.22620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1385.64209, -1374.38367, 33.22620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3866, 1383.34436, -1374.83472, 33.22620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3866, 1503.85400, -1893.00586, 39.13610,   0.00000, 0.00000, 0.00000);

	// Pier
	CreateDynamicObject(7025, 400.21097, -1827.50891, 10.14678,   0.00000, 0.00000, -87.96001);
	CreateDynamicObject(3620, 382.02115, -2096.48706, 19.84153,   0.00000, 0.00000, 1.26000);
	CreateDynamicObject(6245, 1281.71606, -778.42023, 1089.74829,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9245, 401.09396, -1848.79871, 18.72293,   0.00000, 0.00000, -91.74001);
	CreateDynamicObject(6300, 379.22260, -2050.89746, -1.20519,   0.00000, 0.00000, 359.59531);
	CreateDynamicObject(9247, 391.15961, -1888.52429, 13.49381,   0.00000, 0.00000, 89.84492);
	CreateDynamicObject(1332, 400.28262, -1859.54883, 7.97468,   0.00000, 0.00000, -176.34245);
	CreateDynamicObject(1462, 395.24371, -1859.15430, 6.91020,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(9247, 390.62442, -1905.39746, 13.49381,   0.00000, 0.00000, 90.14492);
	CreateDynamicObject(9247, 391.14804, -1922.41199, 13.49381,   0.00000, 0.00000, 90.14492);
	CreateDynamicObject(8078, 398.08020, -1869.87366, 10.66725,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(3620, 369.03323, -2096.81763, 19.84153,   0.00000, 0.00000, 1.26000);
	CreateDynamicObject(1522, 385.12192, -1900.58643, 6.76184,   0.00000, 0.00000, -90.83997);
	CreateDynamicObject(1522, 385.67838, -1918.03564, 6.76184,   0.00000, 0.00000, -90.83997);
	CreateDynamicObject(1522, 385.66177, -1883.84302, 6.76184,   0.00000, 0.00000, -90.83997);
	CreateDynamicObject(19470, 387.68045, -1921.89209, 7.92385,   0.00000, 0.00000, 180.06480);
	CreateDynamicObject(19470, 385.70135, -1885.90393, 8.02688,   0.00000, 0.00000, 180.10098);
	CreateDynamicObject(19470, 385.15497, -1902.59985, 7.92385,   0.00000, 0.00000, 180.01421);*/

	// ATMs
    CreateDynamicObject(2942, 1766.12500, -1867.34631, 13.21700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2942, 1761.12500, -1867.30811, 13.21700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2942, 1496.04138, -1749.92249, 15.03790,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2942, 1496.04138, -1749.92249, 15.03790,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2942, 1073.49768, -1861.83630, 13.14180,   0.00000, 0.00000, 180.00000);

	// Random things that make LS look better.
    CreateDynamicObject(1368, 1778.09058, -1867.13538, 13.25710,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1368, 1774.29016, -1867.13538, 13.25710,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1368, 5039.67139, 11215.00781, -1956.60376,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 5039.67139, 11215.00781, -1956.60376,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1273.56104, -1543.89001, 13.25590,   -1.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 1273.56006, -1540.84424, 13.25590,   -1.00000, 0.00000, 90.00000);
	CreateDynamicObject(3935, 1278.24536, -1542.52502, 13.38260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1340, 1282.87610, -1542.64063, 13.62240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, 1267.82397, -1554.30139, 12.92230,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1341, 1277.66125, -1557.43640, 13.52210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1269.37598, -1561.08557, 13.10570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1277.70276, -1561.08948, 13.10570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1286.03357, -1561.08948, 13.10570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1288.09863, -1559.00818, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1288.08679, -155.83800, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1288.09863, -1550.69141, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1288.09863, -1546.54663, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1288.09863, -1542.38733, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1288.09863, -1538.20923, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1288.09863, -1529.86572, 13.10570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1285.99536, -1527.78735, 13.10570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1277.62671, -1527.78735, 13.10570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1269.37598, -1527.78735, 13.10570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 1284.74451, -1541.72632, 12.49655,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1346, 1268.00024, -1540.84424, 13.93440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1234, 1288.10754, -1561.09448, 14.12150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1346, 1268.00024, -1547.58911, 13.93440,   0.00000, 0.00000, 90.00000);

	// Prison Interior
	CreateDynamicObject(19377, 204.41631, 179.86880, 1002.84760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 204.41631, 170.25110, 1002.84760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 204.41631, 160.81747, 1002.84760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 157.12460, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 157.24260, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 160.33299, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 157.12460, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 163.51840, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 160.33299, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 173.13409, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 176.29379, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 179.49001, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 182.69510, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 160.33299, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 163.51840, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 166.72430, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 166.71429, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 169.93170, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 173.13409, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 176.29379, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 179.49001, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 163.51840, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 166.71429, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 169.93170, 1003.89020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 169.93170, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 173.13409, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 176.29379, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 179.49001, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 182.69510, 1007.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 204.24380, 182.69510, 1000.40918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 204.20732, 165.56805, 1001.92932,   0.00000, 0.00000, 90.00000);

	// Prison Exterior
	CreateDynamicObject(9131,1431.9000000,-1884.7000000,18.0000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(9131,1421.0000000,-1884.7002000,15.9700000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(9131,1421.0000000,-1884.7002000,17.9700000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(9131,1431.9000000,-1884.7000000,15.8000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3749,1426.4004000,-1886.4004000,18.4000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(9131,1431.9004000,-1884.7002000,13.7000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(9131,1421.0000000,-1884.7002000,13.7000000,0.0000000,0.0000000,0.0000000);

	CreateDynamicObject(987, 1416.40039, -1902.79980, 13.00000,   0.00000, 0.00000, 267.99500);
	CreateDynamicObject(987, 1415.90002, -1914.90002, 14.00000,   0.00000, 357.00000, 198.00000);
	CreateDynamicObject(987, 1381.00000, -1916.09998, 17.70000,   0.00000, 357.00000, 171.99600);
	CreateDynamicObject(987, 1273.00000, -1935.30005, 28.60000,   0.00000, 356.99500, 141.99500);
	CreateDynamicObject(987, 1392.80005, -1917.59998, 16.70000,   0.00000, 356.99500, 171.99100);
	CreateDynamicObject(987, 1369.19995, -1914.40002, 18.70000,   0.00000, 356.99500, 169.99100);
	CreateDynamicObject(987, 1322.50000, -1904.30005, 22.20000,   0.00000, 356.99500, 167.99100);
	CreateDynamicObject(987, 1357.50000, -1912.20020, 19.60000,   0.00000, 356.99500, 167.98599);
	CreateDynamicObject(987, 1345.79980, -1909.70020, 20.50000,   0.00000, 356.99500, 167.98599);
	CreateDynamicObject(987, 1334.09961, -1907.20020, 21.30000,   0.00000, 356.99500, 165.98700);
	CreateDynamicObject(987, 1310.90002, -1901.90002, 23.10000,   0.00000, 356.99500, 169.98599);
	CreateDynamicObject(987, 1299.09961, -1899.79980, 24.20000,   0.00000, 356.98999, 171.98500);
	CreateDynamicObject(987, 1287.30005, -1898.19995, 25.50000,   0.00000, 356.98999, 175.98500);
	CreateDynamicObject(987, 1275.40002, -1897.40002, 26.80000,   0.00000, 356.98401, 179.98500);
	CreateDynamicObject(987, 1252.19995, -1901.09998, 29.40000,   0.00000, 356.97900, 225.98399);
	CreateDynamicObject(987, 1263.59961, -1897.50000, 28.30000,   0.00000, 356.97299, 197.97900);
	CreateDynamicObject(987, 1243.90002, -1909.69995, 29.90000,   0.00000, 356.97299, 255.98300);
	CreateDynamicObject(987, 1244.19995, -1932.80005, 30.10000,   0.00000, 2.96700, 309.98099);
	CreateDynamicObject(987, 1241.00000, -1921.29980, 30.40000,   0.00000, 358.96201, 285.98001);
	CreateDynamicObject(987, 1260.59998, -1950.90002, 28.80000,   0.00000, 358.96201, 339.97900);
	CreateDynamicObject(987, 1252.00000, -1942.19995, 29.40000,   0.00000, 0.96200, 317.97198);
	CreateDynamicObject(987, 1283.50000, -1958.59998, 28.30000,   0.00000, 358.96201, 349.97699);
	CreateDynamicObject(987, 1296.00000, -1943.09998, 28.30000,   0.00000, 0.96200, 163.97099);
	CreateDynamicObject(987, 1329.80005, -1969.80005, 29.00000,   0.00000, 358.96201, 351.97501);
	CreateDynamicObject(987, 1295.40039, -1960.79980, 28.30000,   0.00000, 358.96201, 335.97299);
	CreateDynamicObject(987, 1306.29980, -1965.70020, 28.30000,   0.00000, 358.96201, 345.97000);
	CreateDynamicObject(987, 1317.90039, -1968.59961, 28.60000,   0.00000, 358.96201, 353.97400);
	CreateDynamicObject(987, 1353.00000, -1975.09998, 30.70000,   0.00000, 358.96201, 351.97400);
	CreateDynamicObject(987, 1341.70020, -1971.50000, 29.70000,   0.00000, 358.96201, 341.97198);
	CreateDynamicObject(987, 1400.59998, -1980.69995, 39.90000,   0.00000, 358.96201, 333.96899);
	CreateDynamicObject(987, 1364.90039, -1976.79980, 32.00000,   0.00000, 358.96201, 355.96799);
	CreateDynamicObject(987, 1376.90039, -1977.70020, 33.90000,   0.00000, 358.96201, 353.96899);
	CreateDynamicObject(987, 1388.70020, -1978.90039, 36.30000,   0.00000, 358.96201, 351.96899);
	CreateDynamicObject(987, 1411.40002, -1986.09998, 44.90000,   0.00000, 358.96201, 311.96799);
	CreateDynamicObject(987, 1399.90002, -2032.30005, 53.20000,   0.00000, 358.96201, 201.96800);
	CreateDynamicObject(987, 1419.40039, -1994.90039, 48.40000,   0.00000, 358.96201, 277.95999);
	CreateDynamicObject(987, 1421.20020, -2006.50000, 50.30000,   0.00000, 358.96201, 257.95901);
	CreateDynamicObject(987, 1418.79980, -2018.09961, 51.10000,   0.00000, 358.96201, 225.96700);
	CreateDynamicObject(987, 1410.50000, -2026.70020, 52.30000,   0.00000, 358.96201, 207.96600);
	CreateDynamicObject(987, 1377.50000, -2040.50000, 54.70000,   0.00000, 358.96201, 191.96700);
	CreateDynamicObject(987, 1388.79980, -2036.79980, 54.00000,   0.00000, 358.96201, 197.96300);
	CreateDynamicObject(987, 1366.00000, -2043.09998, 55.20000,   0.00000, 358.96201, 187.96400);
	CreateDynamicObject(987, 1354.19995, -2044.80005, 55.70000,   0.00000, 358.96201, 187.96001);
	CreateDynamicObject(987, 1318.50000, -2046.90002, 57.00000,   0.00000, 358.96201, 179.96001);
	CreateDynamicObject(987, 1342.29980, -2046.40039, 56.20000,   0.00000, 358.96201, 181.95599);
	CreateDynamicObject(987, 1330.29980, -2046.79980, 56.60000,   0.00000, 358.96201, 179.95599);
	CreateDynamicObject(987, 1306.50000, -2046.90002, 57.30000,   0.00000, 358.96201, 179.95599);
	CreateDynamicObject(987, 1284.09961, -2046.50000, 58.00000,   0.00000, 358.96201, 89.95100);
	CreateDynamicObject(987, 1294.50000, -2046.79980, 57.70000,   0.00000, 358.96201, 179.95100);
	CreateDynamicObject(987, 1284.59998, -2013.35486, 57.90000,   0.00000, 358.96201, 91.95100);
	CreateDynamicObject(987, 1284.20020, -2034.50000, 57.90000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(987, 1271.69995, -2003.09998, 58.00000,   0.00000, 358.96201, 179.94501);
	CreateDynamicObject(987, 1284.29980, -2022.40039, 57.90000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(987, 1283.69995, -2003.59998, 57.80000,   0.00000, 358.96201, 177.94000);
	CreateDynamicObject(987, 1259.79980, -2003.20020, 58.60000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1247.79980, -2003.20020, 58.80000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1229.89990, -2002.80005, 64.50000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1200.00000, -2003.00000, 67.57300,   0.00000, 358.96201, 179.95100);
	CreateDynamicObject(987, 1175.90039, -2002.90039, 68.00000,   0.00000, 358.96201, 179.95100);
	CreateDynamicObject(987, 1188.00000, -2003.00000, 67.78000,   0.00000, 358.96201, 179.95100);
	CreateDynamicObject(987, 1235.79980, -2003.09961, 61.00000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1218.00000, -2002.90002, 67.27000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1163.90002, -2002.69995, 68.00000,   0.00000, 358.96201, 179.95100);
	CreateDynamicObject(987, 1139.80005, -2002.90002, 68.42000,   0.00000, 359.96201, 194.95100);
	CreateDynamicObject(987, 1151.89990, -2002.50000, 68.20000,   0.00000, 358.96201, 181.95000);
	CreateDynamicObject(987, 1128.19995, -2006.00000, 68.42000,   0.00000, 358.96201, 179.94501);
	CreateDynamicObject(987, 1209.00049, -2002.80005, 67.39000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1221.00000, -2002.90039, 67.20000,   0.00000, 358.96201, 179.94000);
	CreateDynamicObject(987, 1429.90002, -1929.19995, 14.20000,   0.00000, 0.00000, 55.99300);
	CreateDynamicObject(987, 1360.69995, -1933.00000, 19.10000,   0.00000, 3.80000, 349.99500);
	CreateDynamicObject(987, 1419.40039, -1934.79980, 15.00000,   0.00000, 3.79600, 29.99300);
	CreateDynamicObject(987, 1407.90039, -1937.90039, 15.70000,   0.00000, 3.80000, 15.99500);
	CreateDynamicObject(987, 1396.00000, -1937.90039, 16.30000,   0.00000, 3.79600, 359.99500);
	CreateDynamicObject(987, 1384.09961, -1936.90039, 17.20000,   0.00000, 3.79600, 355.98999);
	CreateDynamicObject(987, 1372.29980, -1935.09961, 18.20000,   0.00000, 3.79600, 351.99100);
	CreateDynamicObject(987, 1302.90002, -1920.50000, 23.50000,   0.00000, 3.79600, 349.99100);
	CreateDynamicObject(987, 1349.09961, -1930.40039, 19.90000,   0.00000, 3.79600, 347.98599);
	CreateDynamicObject(987, 1337.59961, -1927.70020, 20.80000,   0.00000, 3.79600, 347.98599);
	CreateDynamicObject(987, 1326.09961, -1925.40039, 21.60000,   0.00000, 3.79600, 349.99100);
	CreateDynamicObject(987, 1314.59961, -1922.59961, 22.50000,   0.00000, 3.79600, 345.98700);
	CreateDynamicObject(987, 1291.19995, -1918.30005, 24.70000,   0.00000, 5.79600, 349.99100);
	CreateDynamicObject(987, 1279.30005, -1916.80005, 26.20000,   0.00000, 7.00000, 353.99100);
	CreateDynamicObject(987, 1263.50000, -1928.59998, 29.30000,   0.00000, 6.99800, 67.99000);
	CreateDynamicObject(987, 1267.50000, -1916.90039, 27.90000,   0.00000, 6.99800, 1.98900);
	CreateDynamicObject(987, 1404.70020, -1918.50000, 15.70000,   0.00000, 356.98999, 175.99001);
	CreateDynamicObject(987, 1271.90039, -1955.20020, 28.50000,   0.00000, 358.96201, 343.97101);
	CreateDynamicObject(987, 1284.29980, -1939.79980, 28.40000,   0.00000, 358.96201, 157.96700);
	CreateDynamicObject(987, 1319.09998, -1949.30005, 28.50000,   0.00000, 0.96100, 165.97099);
	CreateDynamicObject(987, 1307.50000, -1946.40039, 28.30000,   0.00000, 0.96100, 163.97099);
	CreateDynamicObject(987, 1354.30005, -1956.09998, 30.60000,   0.00000, 4.96100, 169.97000);
	CreateDynamicObject(987, 1330.70020, -1951.90039, 28.90000,   0.00000, 0.96100, 167.97000);
	CreateDynamicObject(987, 1342.50000, -1954.00000, 29.60000,   0.00000, 0.96100, 169.96899);
	CreateDynamicObject(987, 1366.19995, -1957.50000, 31.90000,   0.00000, 5.96000, 173.96899);
	CreateDynamicObject(987, 1378.09998, -1958.40002, 33.70000,   0.00000, 7.96000, 175.96899);
	CreateDynamicObject(703, 1266.80005, -1924.69995, 28.70000,   0.00000, 0.00000, 58.00000);
	CreateDynamicObject(647, 1264.59998, -1919.30005, 30.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1389.59998, -1959.90002, 36.00000,   0.00000, 9.90100, 173.96800);
	CreateDynamicObject(987, 1401.09998, -1961.80005, 38.80000,   0.00000, 11.89900, 171.96300);
	CreateDynamicObject(987, 1430.59998, -1978.90002, 47.20000,   0.00000, 14.89800, 133.95799);
	CreateDynamicObject(987, 1412.40039, -1964.59961, 41.80000,   0.00000, 14.89700, 165.95399);
	CreateDynamicObject(987, 1422.40039, -1970.59961, 44.70000,   0.00000, 14.89700, 149.95799);
	CreateDynamicObject(987, 1437.09998, -1988.40002, 49.00000,   0.00000, 14.89700, 123.95600);
	CreateDynamicObject(987, 1440.50000, -1999.20020, 49.80000,   0.00000, 4.96000, 108.95700);
	CreateDynamicObject(987, 1440.59961, -2011.09961, 50.50000,   0.00000, 4.96000, 90.95600);
	CreateDynamicObject(987, 1438.09961, -2022.70020, 51.00000,   0.00000, 4.96000, 76.95900);
	CreateDynamicObject(987, 1432.59961, -2033.20020, 51.40000,   0.00000, 4.96000, 60.95800);
	CreateDynamicObject(987, 1423.59961, -2040.90039, 52.10000,   0.00000, 4.96000, 40.95700);
	CreateDynamicObject(987, 1380.19995, -2060.10010, 54.80000,   0.00000, 3.96200, 15.96600);
	CreateDynamicObject(987, 1413.70020, -2047.59961, 52.90000,   0.00000, 3.96100, 33.96400);
	CreateDynamicObject(987, 1402.79980, -2052.39941, 53.60000,   0.00000, 3.96100, 23.96100);
	CreateDynamicObject(987, 1391.59961, -2056.79980, 54.20000,   0.00000, 3.96100, 21.96200);
	CreateDynamicObject(987, 1368.50000, -2062.39990, 55.30000,   0.00000, 3.96100, 11.96300);
	CreateDynamicObject(987, 1356.70020, -2064.00000, 55.70000,   0.00000, 3.96100, 7.95400);
	CreateDynamicObject(987, 1282.50000, -2046.70020, 57.95000,   0.00000, 358.96201, 177.94600);
	CreateDynamicObject(987, 1282.50000, -2046.70020, 57.95000,   0.00000, 358.96201, 177.94600);
	CreateDynamicObject(987, 1270.40002, -2045.90002, 58.10000,   0.00000, 358.96201, 87.95000);
	CreateDynamicObject(987, 1242.59998, -2045.59998, 58.80000,   0.00000, 359.96201, 357.95001);
	CreateDynamicObject(987, 1242.59998, -2053.00000, 58.80000,   0.00000, 358.96201, 89.95000);
	CreateDynamicObject(987, 1242.80005, -2065.10010, 59.10000,   0.00000, 358.96201, 359.94501);
	CreateDynamicObject(987, 1254.40002, -2046.00000, 58.80000,   0.00000, 358.96201, 89.95000);
	CreateDynamicObject(987, 1345.00000, -2065.59961, 56.20000,   0.00000, 3.96100, 7.95400);
	CreateDynamicObject(987, 1242.69995, -2071.89990, 59.10000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(987, 1290.80005, -2066.10010, 57.80000,   0.00000, 0.96200, 359.94000);
	CreateDynamicObject(987, 1254.80005, -2065.30005, 58.80000,   0.00000, 358.96201, 357.94000);
	CreateDynamicObject(987, 1266.80005, -2065.89990, 58.40000,   0.00000, 0.96200, 359.94000);
	CreateDynamicObject(987, 1314.59998, -2066.10010, 57.10000,   0.00000, 0.96200, 359.94000);
	CreateDynamicObject(987, 1278.80005, -2066.00000, 58.10000,   0.00000, 0.96200, 359.94000);
	CreateDynamicObject(987, 1302.90039, -2066.29980, 57.40000,   0.00000, 0.96100, 359.93399);
	CreateDynamicObject(987, 1326.59998, -2066.30005, 56.70000,   0.00000, 0.96100, 3.93400);
	CreateDynamicObject(987, 1338.59998, -2065.60010, 56.40000,   0.00000, 1.96100, 3.93300);
	CreateDynamicObject(987, 1242.50000, -2065.09961, 58.60000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(987, 1227.89990, -2071.89990, 58.90000,   0.00000, 358.96201, 359.94000);
	CreateDynamicObject(987, 1197.80005, -2071.80005, 68.00000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1230.90039, -2071.89941, 58.90000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1224.79980, -2071.89941, 63.80000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1215.79980, -2071.89941, 63.80000,   0.00000, 358.96201, 359.99399);
	CreateDynamicObject(987, 1227.79980, -2071.89941, 63.80000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1215.70020, -2071.89941, 69.00000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1209.70020, -2071.89941, 68.00000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1173.90002, -2071.60010, 68.00000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1185.79980, -2071.59961, 68.00000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1126.80005, -2067.60010, 68.00000,   0.00000, 358.96201, 341.93399);
	CreateDynamicObject(987, 1161.79980, -2071.20020, 68.00000,   0.00000, 358.96201, 359.93399);
	CreateDynamicObject(987, 1150.00000, -2071.29980, 68.00000,   0.00000, 358.96201, 1.93400);
	CreateDynamicObject(987, 1138.09961, -2071.29980, 68.00000,   0.00000, 358.96201, 1.93400);
	CreateDynamicObject(987, 1114.79993, -2067.60010, 68.00000,   0.00000, 358.96201, 359.93301);
	CreateDynamicObject(987, 1242.40002, -2027.09998, 59.10000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(987, 1242.29980, -2015.20020, 59.10000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(987, 1242.50000, -2033.09998, 59.10000,   0.00000, 358.96201, 89.94500);
	CreateDynamicObject(9131, 1238.90002, -2040.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.50000, -2040.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.19995, -2040.69995, 59.99999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.20020, -2040.70020, 59.99999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.79980, -2040.70020, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.50000, -2040.70020, 60.00002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40002, -2038.69995, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.59961, -2040.70020, 60.00001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40002, -2040.19995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.40002, -2038.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2038.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2040.09998, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.50000, -2035.40002, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.40002, -2033.30005, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.79980, -2033.29980, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2034.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2034.00000, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.90002, -2033.30005, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.09961, -2033.29980, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.79980, -2033.29980, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.29980, -2033.29980, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.40002, -2033.30005, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.59998, -2040.69995, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.40039, -2040.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.09961, -2040.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.79980, -2040.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.50000, -2040.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.09961, -2040.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.70020, -2040.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40039, -2040.20020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2038.69995, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.40039, -2038.70020, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.50000, -2035.40002, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09998, -2035.40002, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.40002, -2033.30005, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.40002, -2033.30005, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.00000, -2033.29980, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.29980, -2033.29980, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.59961, -2033.29980, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.90039, -2033.29980, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2034.00000, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.80005, -2033.30005, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2034.69995, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40039, -2039.50000, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2035.40002, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2035.40002, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2039.40002, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2039.40002, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2040.00000, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2035.40002, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.50000, -2035.40002, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.59961, -2040.70020, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90039, -2038.70020, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40002, -2040.19995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40039, -2039.50000, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40002, -2038.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40039, -2039.00000, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40039, -2039.00000, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.69995, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40002, -2039.00000, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40002, -2038.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.40039, -2039.50000, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.09998, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.50000, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.00000, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.40002, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.00000, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.30005, -2040.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.40039, -2038.70020, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2035.40002, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09998, -2035.40002, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2034.69995, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.50000, -2034.00000, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.80005, -2033.30005, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.50000, -2033.30005, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.90002, -2033.30005, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1242.40039, -2033.29980, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.80005, -2033.30005, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1240.59961, -2033.29980, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1241.20020, -2033.29980, 64.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1240.00000, -2038.69995, 61.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1240.00000, -2035.40002, 61.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.69995, -2038.00000, 64.20009,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.69995, -2037.30005, 64.20010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.69995, -2036.80005, 64.20010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.69995, -2036.09998, 64.18010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09998, -2034.69995, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09998, -2034.00000, 60.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09998, -2034.59998, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09961, -2034.00000, 62.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09998, -2034.69995, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1238.90002, -2040.09998, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1239.09961, -2034.00000, 64.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 1267.69995, -2045.30005, 58.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(967, 1258.50000, -2044.90002, 58.50000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(3504, 1255.19995, -2044.90002, 59.90000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(968, 1267.69995, -2045.30005, 59.20000,   0.00000, 0.00000, 0.00000);

	// Dealership interior
	CreateDynamicObject(3865, 284.83670, -122.04270, -103.39450,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, 286.20230, -123.63560, -99.98590,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 286.19604, -120.51005, -99.98590,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 282.73523, -120.50607, -99.98590,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 282.72025, -123.63564, -99.98590,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2773, 287.44818, -125.63037, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 285.53418, -125.64116, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 283.61124, -125.63532, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 281.66757, -125.61810, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 280.66525, -124.63237, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 280.66678, -122.71143, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 280.67529, -120.79131, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 281.24570, -119.06229, -99.35320,   0.00000, 0.00000, -38.00000);
	CreateDynamicObject(2773, 282.82483, -118.34000, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 284.79193, -118.35138, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 286.79672, -118.35001, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 288.26865, -119.16496, -99.35320,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(2773, 288.79666, -120.91676, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 288.77740, -122.86501, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3262, 288.69937, -124.62164, -101.19280,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(18070, 293.82501, -116.43710, -99.50190,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(18070, 293.93701, -116.43710, -96.47790,   0.00000, 180.00000, -47.00000);
	CreateDynamicObject(2165, 293.74506, -118.62419, -99.83430,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2165, 292.19199, -117.05069, -99.83430,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1671, 293.22739, -115.60634, -99.49180,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1671, 294.63934, -117.43098, -99.49180,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1723, 277.19379, -114.48680, -99.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 276.20551, -117.72480, -99.97660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 276.20551, -121.02754, -99.97660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1724, 280.27841, -114.48676, -99.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 276.07935, -114.53513, -99.90640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 284.71249, -113.75670, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 283.94611, -113.71850, -99.91660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 288.70514, -112.36977, -98.16540,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(19364, 287.91580, -113.69970, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19393, 284.71249, -113.69970, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 289.55713, -109.54639, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 289.53726, -106.38365, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 288.67322, -103.47110, -98.16540,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(19364, 286.27356, -102.14086, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 283.09708, -102.14769, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 279.89389, -102.14487, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 276.73947, -102.15757, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 273.60214, -102.15652, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 273.60397, -103.75759, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 273.60797, -106.95985, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 273.60388, -110.14294, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 273.60062, -113.34599, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 281.52036, -113.69973, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 278.33221, -113.69970, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 275.54065, -112.62027, -98.16540,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(19364, 273.20959, -110.42403, -98.16540,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(19377, 284.77219, -108.86240, -99.99200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 284.78555, -99.23569, -99.99200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 274.30609, -99.82799, -99.99200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 274.31097, -109.44136, -99.99200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2957, 278.42316, -102.21708, -98.33390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 280.66891, -118.30920, -100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 280.66891, -127.94570, -100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 291.12231, -127.91770, -100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 291.12231, -118.30920, -100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19353, 293.19553, -114.29505, -98.16540,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19353, 295.46017, -116.55708, -98.16540,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19353, 296.36636, -119.08636, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 291.06982, -113.75670, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 287.91580, -113.75670, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 281.52380, -113.75670, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 278.35910, -113.75670, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 275.15381, -113.75670, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 275.51410, -115.08788, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 275.51410, -118.24790, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 275.51410, -121.44490, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 275.51410, -124.62890, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 275.51410, -127.84090, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 275.51410, -130.96890, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 275.15381, -132.49860, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 278.35779, -132.49860, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 287.91580, -132.49860, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 281.52380, -132.49860, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 284.71579, -132.49860, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 291.06979, -132.49860, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 296.36639, -122.21440, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 296.36639, -125.40140, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 295.37296, -128.09370, -98.16540,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19353, 293.16367, -130.29997, -98.16540,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19353, 292.05341, -132.98824, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 296.32739, -126.32290, -99.93450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 296.32739, -123.33228, -99.93450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 290.35931, -130.65759, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 290.35931, -131.99640, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 287.07932, -130.65759, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 283.79929, -130.65759, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 280.51929, -130.65759, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 277.23929, -130.65759, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 287.07932, -131.99640, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 283.79929, -131.99640, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 280.51929, -131.99640, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 277.23929, -131.99640, -99.79880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 292.23169, -130.53391, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 291.29370, -129.57249, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 289.36340, -129.56641, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 287.43829, -129.56180, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 285.51569, -129.55479, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 283.58527, -129.55589, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 281.66504, -129.56126, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 279.73990, -129.54620, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 277.82175, -129.53433, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 275.87918, -129.53011, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 287.44818, -125.63037, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 285.53418, -125.64116, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 283.61124, -125.63532, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 281.66757, -125.61810, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 280.66525, -124.63237, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 280.66678, -122.71143, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 280.67529, -120.79131, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 281.24570, -119.06229, -99.35320,   0.00000, 0.00000, -38.00000);
	CreateDynamicObject(2773, 282.82483, -118.34000, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 284.79193, -118.35138, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 286.79672, -118.35001, -99.35320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 288.26865, -119.16496, -99.35320,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(2773, 288.79666, -120.91676, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 288.77740, -122.86501, -99.35320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3262, 288.69937, -124.62164, -101.19280,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(2165, 293.74506, -118.62419, -99.83430,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2165, 292.19199, -117.05069, -99.83430,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1671, 293.22739, -115.60634, -99.49180,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1671, 294.63934, -117.43098, -99.49180,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1723, 277.19379, -114.48680, -99.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 276.20551, -117.72480, -99.97660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 276.20551, -121.02754, -99.97660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1724, 280.27841, -114.48676, -99.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 276.07935, -114.53513, -99.90640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 288.70514, -112.36977, -98.16540,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(19364, 287.91580, -113.69970, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19393, 284.71249, -113.69970, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 291.68286, -109.92218, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 289.53726, -106.38365, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 288.67322, -103.47110, -98.16540,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(19364, 286.27356, -102.14086, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 283.09708, -102.14769, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 279.89389, -102.14487, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 276.73947, -102.15757, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 273.60214, -102.15652, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 273.58475, -103.76313, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 273.60797, -106.95985, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 273.60388, -110.14294, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 273.60062, -113.34599, -98.16540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 281.52036, -113.69973, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 278.33221, -113.69970, -98.16540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 275.54065, -112.62027, -98.16540,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(19377, 284.60468, -99.49504, -99.99200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 274.30609, -99.82799, -99.99200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11391, 307.22549, -112.16182, -98.68150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11391, 274.55399, -106.19970, -98.68150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 289.25751, -108.73432, -98.39140,   0.06900, 0.00000, 90.00000);
	CreateDynamicObject(2893, 286.24249, -106.89010, -98.59070,   -16.00000, 0.00000, 0.00000);
	CreateDynamicObject(2893, 286.24069, -106.97510, -98.69670,   139.00000, 0.00000, 0.00000);
	CreateDynamicObject(2893, 288.09009, -106.89010, -98.59070,   -16.00000, 0.00000, 0.00000);
	CreateDynamicObject(2893, 288.09009, -107.00510, -98.69670,   139.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 283.65189, -105.63730, -103.23670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 284.00299, -103.24810, -103.23670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 272.74155, -104.85290, -100.94200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 272.99133, -108.25532, -100.94200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 276.12799, -100.52910, -101.31810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 276.12799, -100.52910, -98.12410,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 277.77219, -100.52300, -96.60810,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19358, 280.78299, -100.52910, -98.12410,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 280.78299, -100.52910, -101.31810,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 280.03769, -100.52300, -96.60810,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19377, 276.72076, -108.93511, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 286.94598, -108.92210, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 284.44620, -99.37997, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 274.03595, -99.35080, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 279.89896, -118.58320, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 279.92035, -127.73029, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 290.26166, -118.57673, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 300.71512, -118.58961, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 290.40906, -128.08107, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 300.84967, -127.99202, -96.43210,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3498, 294.63873, -119.74542, -99.17703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 290.44055, -115.50910, -99.17703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1209, 275.88434, -128.48508, -99.94360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19173, 275.61649, -124.26830, -97.68030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 280.21588, -103.78629, -99.98990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19357, 276.73621, -103.78630, -99.98990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19357, 280.21591, -107.02140, -99.98990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19357, 276.73621, -107.02140, -99.98990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19357, 276.73621, -110.22160, -99.98990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19357, 280.21591, -110.22160, -99.98990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1271, 277.17270, -113.21970, -99.56610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 277.91135, -113.01803, -99.56610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 277.54834, -113.22153, -98.88610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 278.61694, -113.17400, -99.56610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1079, 279.42453, -113.29508, -99.48510,   0.00000, -33.00000, -273.00000);
	CreateDynamicObject(1079, 280.41043, -113.36161, -99.48510,   0.00000, -33.00000, -273.00000);
	CreateDynamicObject(930, 281.92767, -113.24979, -99.39850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 283.06595, -113.25941, -99.39850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 284.01651, -106.64632, -99.39850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2769, 274.06360, -104.79490, -99.03620,   0.00000, 0.00000, -193.00000);
	CreateDynamicObject(2769, 274.05191, -104.59131, -99.03620,   0.00000, 0.00000, -229.00000);
	CreateDynamicObject(1886, 276.02408, -132.01074, -96.25640,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(1886, 292.63553, -114.41790, -96.68310,   25.00000, 0.00000, -10.00000);
	CreateDynamicObject(1886, 295.66519, -117.69530, -96.68310,   25.00000, 0.00000, -90.00000);
	CreateDynamicObject(1886, 290.92810, -116.46000, -96.68310,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1886, 293.77640, -119.33580, -96.68310,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2315, 276.21246, -123.81089, -100.01160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2855, 276.00824, -123.73725, -99.51929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 276.32880, -123.24120, -99.51930,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(2853, 276.17776, -122.33887, -99.51857,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 275.74826, -126.55871, -99.91410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1375, 286.44290, -106.85701, -99.82030,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1375, 288.48154, -106.81493, -99.82030,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1375, 286.47879, -112.57390, -99.82030,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1375, 288.37912, -112.59254, -99.82030,   -180.00000, 0.00000, 0.00000);



	/*// Dealership
	CreateDynamicObject(8408,552.5000000,-1259.2000000,23.4000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(10281,542.2000100,-1293.3000000,28.7000000,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1233,524.9000200,-1273.4000000,16.8000000,0.0000000,0.0000000,218.0000000);
	CreateDynamicObject(1233,543.9003900,-1259.0000000,17.3000000,0.0000000,0.0000000,213.9970000);
	CreateDynamicObject(1569,536.5999800,-1294.3000000,16.2000000,0.0000000,0.0000000,179.9950000);
	CreateDynamicObject(1569,533.7000100,-1294.3000000,16.2000000,0.0000000,0.0000000,357.9950000);
	CreateDynamicObject(10149,556.0999800,-1294.3000000,17.7000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(10149,549.2002000,-1294.2002000,17.7000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1257,532.7000100,-1268.2000000,16.7000000,0.0000000,0.0000000,308.0000000);
	CreateDynamicObject(1231,496.6000100,-1303.3000000,19.0000000,0.0000000,0.0000000,262.0000000);
	CreateDynamicObject(1231,562.5000000,-1253.0000000,19.0000000,0.0000000,0.0000000,299.9980000);
	CreateDynamicObject(1231,513.5000000,-1330.2000000,19.0000000,0.0000000,0.0000000,335.9980000);
	CreateDynamicObject(1231,575.7999900,-1314.3000000,19.0000000,0.0000000,0.0000000,191.9980000);

	// LSFD
	CreateDynamicObject(19355, 236.41080, 183.33380, 1006.26959,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 239.61591, 183.33380, 1006.26959,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 236.41080, 183.33380, 1002.76758,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 241.09241, 183.33380, 1002.76758,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1498, 228.90630, 158.19820, 1000.57843,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14855, 231.48129, 163.85890, 1003.92242,   -360.00000, 0.00000, -1.00000);
    CreateDynamicObject(9131, 1812.66650, -2077.63818, 12.40830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.66650, -2077.63818, 14.55030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.66650, -2077.63818, 16.45430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.68726, -2067.84790, 12.40830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.66650, -2076.89844, 12.40830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.66650, -2076.89844, 14.55030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.66650, -2076.89844, 16.45430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.68726, -2068.56860, 12.40830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.68726, -2067.84790, 14.55030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.68726, -2067.84790, 16.45430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.68726, -2068.56860, 14.55030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1812.68726, -2068.56860, 16.45430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1504, 1764.23987, -2041.31897, 12.93960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 1764.98877, -2040.60876, 12.51360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19428, 1764.21387, -2040.56030, 11.22160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1764.39087, -2040.56030, 11.06260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1764.54993, -2040.56030, 10.95660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1764.70007, -2040.56030, 10.95660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1764.49695, -2040.56030, 11.06260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1764.80615, -2040.56030, 10.95660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1764.14746, -2040.56787, 13.78560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8613, 1692.25476, -2055.10938, 16.13890,   0.00000, 0.00000, -90.00000);

	// PERSHING SQUARE
	CreateDynamicObject(970, 1537.57629, -1666.09314, 13.06796,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1537.57629, -1672.77185, 13.06800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1537.57629, -1679.47839, 13.06800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1232, 1537.80164, -1672.78442, 15.10134,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1548.91345, -1672.43274, 14.26710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1548.91345, -1678.82874, 14.26710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1546.52466, -1678.76831, 13.93129,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1546.57349, -1672.33179, 13.93129,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1547.22498, -1658.46741, 13.27700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1546.77771, -1663.69360, 13.27700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(869, 1546.70764, -1664.59021, 13.27700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1544.08191, -1664.41370, 13.40050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1544.04224, -1658.16479, 13.40050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1546.56494, -1656.01245, 13.40050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1549.34497, -1658.18726, 13.40050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2743, 1546.63831, -1661.29553, 14.18900,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2809, 1546.62439, -1661.28906, 14.18620,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19355, 1543.48950, -1661.34460, 11.08330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1543.32520, -1661.34436, 10.92830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1545.81030, -1661.28516, 12.83390,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(869, 1546.23901, -1657.92236, 13.27700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1549.31787, -1664.41370, 13.40050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1546.56494, -1666.48450, 13.40050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1555.81689, -1675.65784, 18.94910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1233, 1537.60474, -1672.78186, 13.32940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 1545.14417, -1686.17871, 13.29670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1545.14417, -1689.98169, 13.29670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1545.14417, -1693.81567, 13.29670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1285, 1543.95239, -1684.52185, 13.44350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(700, 1547.93958, -1685.98840, 12.90517,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1547.96484, -1689.22815, 12.90517,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1547.86768, -1691.24414, 12.90517,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1547.87769, -1693.80920, 12.90517,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1541.19238, -1707.66907, 15.07550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1540.93323, -1643.10767, 15.07550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1542.86133, -1648.17639, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1542.86133, -1639.90674, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1542.86133, -1644.05042, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19124, 1542.70386, -1650.64331, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1542.71399, -1637.42700, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1553.35242, -1650.64331, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1553.35803, -1637.42700, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1545.51318, -1650.64331, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1550.89111, -1650.64331, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1548.21350, -1650.64331, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3934, 1548.87756, -1643.94226, 27.38730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1550.89111, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1548.21350, -1637.42700, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1545.51318, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1541.50366, -1642.96826, 18.22666,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1541.77136, -1707.71606, 18.22666,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1553.65137, -1653.12732, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1657.24231, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1666.51221, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1670.66675, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.57349, -1661.91211, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19121, 1553.65137, -1659.51721, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1553.65137, -1664.25024, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1554.50891, -1672.74280, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1554.48096, -1678.57263, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1554.47327, -1675.61060, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1568, 1549.41907, -1661.14661, 12.76990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1553.65137, -1680.61584, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1684.68469, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1689.39697, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1698.21313, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1553.65137, -1694.08679, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19121, 1553.80078, -1687.07520, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1553.83386, -1691.81250, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1553.35242, -1700.64966, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1550.89111, -1700.64966, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1548.21350, -1700.64966, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1545.51318, -1700.64966, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1542.70386, -1700.64966, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1542.86133, -1703.36987, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1542.86133, -1707.50952, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1542.86133, -1711.62671, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3934, 1548.87756, -1707.06030, 27.38730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1545.51318, -1714.17688, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1542.90796, -1714.17688, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1548.21350, -1714.17688, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1550.89111, -1714.17688, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1553.35242, -1714.17688, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1556.14148, -1714.17688, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1560.30835, -1714.17688, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1562.93848, -1714.17688, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1565.74866, -1714.17688, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1569.89514, -1714.17688, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1575.17944, -1714.22900, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1714.17688, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1572.49927, -1714.17688, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1577.67261, -1711.61914, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1707.46936, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1702.12695, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1697.98938, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1692.54639, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1688.43445, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1682.87146, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1678.71570, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1673.09656, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1668.95325, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1663.37927, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1659.23926, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.66785, -1653.79871, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1649.65393, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1644.11035, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.67261, -1639.95825, 27.94180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19121, 1577.64917, -1704.90454, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1695.26331, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1685.67932, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1675.93347, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1666.20154, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1656.52637, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1646.87451, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1577.64917, -1637.45715, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1556.14148, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1560.30835, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1565.74866, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1569.89514, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1575.17944, -1637.42700, 27.94180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1572.57129, -1637.42700, 27.79890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1563.07397, -1637.42700, 27.79890,   0.00000, 0.00000, 0.00000);

	// GARBAGE MAN
 	CreateDynamicObject(3749, -58.77431, -1590.52747, 7.27630,   0.00000, 0.00000, 50.00000);
    CreateDynamicObject(1447, -65.16020, -1600.28650, 3.21090,   3.00000, 0.00000, 39.00000);
    CreateDynamicObject(3578, -59.84820, -1581.79517, 1.17200,   0.00000, 0.00000, -37.00000);
    CreateDynamicObject(3578, -66.53379, -1592.44214, 1.17200,   0.00000, 0.00000, -37.00000);
    CreateDynamicObject(3578, -74.71437, -1570.34509, 1.17200,   0.00000, 0.00000, -37.00000);
    CreateDynamicObject(3578, -67.78764, -1569.45923, 1.17200,   0.00000, 0.00000, -127.00000);
    CreateDynamicObject(3578, -60.80945, -1574.87610, 1.17200,   0.00000, 0.00000, -127.00000);
    CreateDynamicObject(3865, -48.97156, -1566.84546, 2.10350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18862, -52.76759, -1565.41064, 3.52360,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18862, -58.35022, -1558.23035, 3.52360,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18862, -53.41080, -1556.44250, 4.62560,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3035, -62.82896, -1564.08154, 2.33800,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3035, -59.16575, -1564.56262, 2.33800,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(18862, -66.63125, -1550.18274, 5.79760,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18862, -69.78871, -1557.44226, 4.68760,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3268, -86.11286, -1592.56091, 1.60850,   0.00000, 0.00000, -130.00000);
    CreateDynamicObject(18862, -77.15752, -1551.59570, 4.68760,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3865, -70.82278, -1563.02917, 2.40354,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3865, -74.64004, -1562.10901, 2.40350,   0.00000, 0.00000, -55.00000);
    CreateDynamicObject(1290, -60.16210, -1578.09998, 7.48980,   0.00000, 0.00000, -76.00000);
    CreateDynamicObject(1290, -97.41480, -1563.83936, 7.48980,   0.00000, 0.00000, -105.00000);
    CreateDynamicObject(3785, -52.09078, -1585.96362, 4.69330,   0.00000, 0.00000, -40.00000);
    CreateDynamicObject(3785, -62.01568, -1597.79651, 4.69330,   0.00000, 0.00000, -40.00000);
    CreateDynamicObject(17055, -87.33571, -1551.23792, 3.81370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16599, -106.08473, -1570.89417, 5.86923,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16001, -96.15504, -1569.56177, 1.62920,   0.00000, 0.00000, 98.00000);
    CreateDynamicObject(16001, -94.21252, -1558.77856, 1.62920,   0.00000, 0.00000, 62.00000);
    CreateDynamicObject(3035, -57.55090, -1567.59937, 2.33800,   0.00000, 0.00000, -68.00000);
    CreateDynamicObject(1290, -74.96340, -1538.60596, 7.48980,   0.00000, 0.00000, -156.00000);

    CreateDynamicObject(7561, 837.66089, -1252.48413, 19.65150,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(8335, 817.82098, -1242.97461, 17.46750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8335, 832.77948, -1242.80701, 17.46750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7516, 839.23914, -1249.80322, 17.46750,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8335, 841.25171, -1243.02075, 25.38290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1380, 827.04919, -1293.90076, 34.33840,   1.00000, 0.00000, 0.00000);
	CreateDynamicObject(1379, 825.14142, -1293.65625, 33.74460,   0.00000, 0.00000, -69.00000);
	CreateDynamicObject(1384, 821.47687, -1294.94080, 48.94700,   0.00000, 0.00000, -69.00000);
	CreateDynamicObject(3474, 859.60901, -1276.57922, 20.20807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, 848.11548, -1171.39429, 19.51980,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3627, 889.39960, -1171.08276, 19.51980,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(5706, 888.68237, -1283.75195, 18.26560,   356.85840, 0.00000, 180.00000);
	CreateDynamicObject(3627, 821.95526, -1204.90186, 19.51980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 913.06671, -1233.79053, 16.23700,   -0.05900, 0.00000, 180.00000);
	CreateDynamicObject(19121, 918.54303, -1235.02283, 16.49180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 921.20258, -1235.06799, 16.49180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 823.05804, -1220.37024, 17.24624,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 823.07281, -1210.05371, 17.24624,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 823.15851, -1199.70947, 17.24624,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 823.15558, -1189.38159, 17.24624,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 832.63568, -1172.53162, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 842.93427, -1172.51379, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 853.31616, -1172.60864, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 863.57977, -1172.60889, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 873.98840, -1172.21948, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 884.28577, -1172.23010, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 894.61438, -1172.28540, 17.32820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 904.90234, -1172.28015, 17.32820,   0.00000, 0.00000, 0.00000);

	// Airport
	CreateDynamicObject(3749, 1961.51062, -2190.24951, 17.80710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11474, 1955.76599, -2189.98389, 13.04770,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1955.76599, -2189.98389, 14.55370,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1955.76599, -2189.98389, 16.05970,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1955.76599, -2189.98389, 17.56570,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1967.41492, -2189.90820, 13.04770,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1967.41492, -2189.90820, 14.55370,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1967.41492, -2189.90820, 16.05970,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(11474, 1967.41492, -2189.90820, 17.56570,   0.00000, 0.00000, 12.00000);*/

	// RCSD BASE
	CreateDynamicObject(3749, 1026.37634, -371.50821, 77.86410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1032.95093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1007.75189, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1007.71191, -360.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3268, 1025.49927, -294.42200, 72.96940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3268, 1060.49927, -294.42200, 72.96940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19463, 1012.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1015.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1019.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1022.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1026.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1029.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1033.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1036.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1040.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1036.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1043.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1047.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1043.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1050.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1054.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1057.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1061.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1064.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1068.25842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1071.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1071.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1073.75842, -289.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1073.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1071.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1068.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1064.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1061.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1057.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1054.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1050.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1047.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1043.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1040.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1036.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1033.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1029.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1026.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1022.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1019.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1015.75842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1012.25842, -299.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1033.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1029.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1026.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1022.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1019.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1015.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1012.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1036.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1040.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1043.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1046.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1050.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1053.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1057.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1060.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1064.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1067.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1070.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1074.25842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1077.75842, -308.54550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1077.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1074.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1070.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1067.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1063.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1060.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1056.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1053.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1049.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1046.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1043.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1039.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1036.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1032.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1029.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1026.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1022.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1019.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1015.75842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19463, 1012.25842, -318.04550, 72.90930,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18850, 1088.12195, -353.06879, 61.96200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18850, 1056.62195, -353.06879, 61.96200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3287, 1072.50403, -344.48611, 75.90650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 1072.50403, -351.48611, 75.90650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 1072.50403, -358.48611, 75.90650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16093, 1110.30151, -301.32339, 76.95850,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(16638, 1110.33545, -302.27740, 75.31250,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(3279, 1011.99292, -365.83731, 72.96360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 1112.56091, -364.94391, 72.96360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3279, 1087.27026, -295.96970, 72.96360,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1044.95093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1056.95093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1068.95093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1080.45093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1092.45093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1119.40125, -371.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1107.45093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1104.45093, -371.99951, 72.52850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1119.40125, -359.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1119.40125, -347.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1119.40125, -335.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1119.40125, -323.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1119.40125, -311.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1119.40125, -305.97601, 72.52850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1119.44666, -294.03879, 72.52850,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(987, 1108.94666, -289.36679, 72.52850,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(987, 1100.68176, -285.67929, 72.53960,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(987, 1089.74878, -280.80530, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1077.83081, -280.82831, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1007.71191, -348.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1007.71191, -336.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1007.71191, -324.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1007.71191, -312.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1007.71191, -300.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1007.71191, -288.04031, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(987, 1007.71191, -280.80530, 72.54930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3267, 1087.17566, -295.34311, 88.52920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3267, 1112.86755, -364.95609, 88.55390,   0.00000, 0.00000, 236.00000);
	CreateDynamicObject(3267, 1012.15619, -365.44971, 88.55400,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(987, 1065.83081, -280.82831, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1053.83081, -280.82831, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1041.83081, -280.82831, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1029.83081, -280.82831, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1019.64178, -280.80731, 72.58460,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10770, 1113.72656, -336.04141, 90.46070,   2.00000, 0.00000, 90.00000);
	CreateDynamicObject(2634, 1107.62830, -330.22690, 74.48230,   2.00000, 0.00000, 90.00000);

	// Gas Pumps
	CreateDynamicObject(1676, 998.87708, -937.50769, 42.88140,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(1676, 1001.95911, -937.09570, 42.88140,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(1676, 1005.95911, -936.53571, 42.88140,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(1676, 1008.95911, -936.10773, 42.88140,   0.00000, 0.00000, 8.00000);

	CreateDynamicObject(1676, 1583.40515, -1697.75586, 6.86230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 1580.93921, -1697.75586, 6.86230, 0.00000, 0.00000, 0.00000);

	//RCSD
    CreateDynamicObject(983, 1544.6687011719, -1620.6209716797, 13.063118934631, 0, 0, 0, -1, -1, -1, 150.0); // Fence 1
    CreateDynamicObject(983, 1544.6687011719, -1635.9771728516, 13.063118934631, 0, 0, 0, -1, -1, -1, 150.0);// Fence 2
    CreateDynamicObject(2930, 1582.53503, -1637.82666, 15.03450,   0.00000, 0.00000, 90.00000); // gate door
    CreateDynamicObject(18755, 266.05609, 117.72520, 1005.50171,   0.00000, 0.00000, 90.00000); //Interior Elevator
    CreateDynamicObject(18756, 265.98050, 117.70580, 1005.51428,   0.00000, 0.00000, 90.00000); // "" Door 1
    CreateDynamicObject(18756, 266.05051, 113.90810, 1005.51630,   0.00000, 0.00000, -90.00000); // "" "" 2
    CreateDynamicObject(18755, 1564.89612, -1669.39014, 29.27150,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18756, 1564.87598, -1665.56030, 29.27180,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(18756, 1564.93091, -1669.35254, 29.27180,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19359, 241.32303, 119.30750, 1006.74597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 244.53300, 119.30750, 1006.74597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 247.61700, 119.30750, 1006.74597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 250.69501, 119.30750, 1006.74597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 240.88589, 119.29530, 1004.38409,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 243.12691, 119.29530, 1004.38409,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 245.36290, 119.29530, 1004.38409,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 247.59689, 119.29530, 1004.38409,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 249.83791, 119.29530, 1004.38409,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 251.49500, 119.30950, 1006.74597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 252.06889, 119.29530, 1004.38409,   0.00000, 0.00000, 90.00000);
    lvpddoor2 = CreateObject(1569, 239.58490, 116.09970, 1002.21301,   0.00000, 0.00000, 90.00000);
    lvpddoor21 = CreateObject(1569, 239.58490, 119.07270, 1002.21301,   0.00000, 0.00000, -90.00000);
	lvpddoor1 = CreateObject(1569, 253.16409, 107.56660, 1002.23688,   0.00000, 0.00000, 90.00000);
    lvpddoor11 = CreateObject(1569, 253.16409, 110.55570, 1002.23688,   0.00000, 0.00000, -90.00000);
	lvpdgate1 = CreateObject(968, 1544.69751, -1630.79980, 13.02970,   0.00000, 90.00000, 90.00000); //gate 1
	lvpdgate2 = CreateObject(971, 1588.66821, -1637.92297, 14.78830,   0.00000, 0.00000, 180.00000); //gate 2
    BaseGate1 = CreateObject(7657, 1026.41565, -371.85690, 74.18440, 0.00000, 0.00000, 0.00000);
    lsfdgate1 = CreateObject(971, 1812.80322, -2072.69702, 12.87520,   0.00000, 0.00000, 90.00000);
    prisongate1 = CreateDynamicObject(2990,1426.4004000,-1884.5996000,16.4000000,0.0000000,0.0000000,179.9950000); // Prison gate 1 (front)
    prisondoor1 = CreateDynamicObject(2963,1238.5000000,-2037.0000000,60.9000000,0.0000000,0.0000000,179.9950000); // Closed

    LSFDDoor1 = CreateDynamicObject(1569, 228.26109, 149.71870, 1002.02417,   0.00000, 0.00000, 90.00000); //Closed
	LSFDDoor11 = CreateDynamicObject(1569, 228.25510, 152.71780, 1002.02417,   0.00000, 0.00000, -90.00000); //Closed

    LSFDDoor2 = CreateDynamicObject(1569, 228.24719, 159.72260, 1002.02399,   0.00000, 0.00000, 90.00000); //Closed
	LSFDDoor21 = CreateDynamicObject(1569, 228.24719, 162.71040, 1002.02399,   0.00000, 0.00000, -90.00000); //Closed

    LSFDDoor3 = CreateDynamicObject(1569, 229.95580, 169.82050, 1002.02460,   0.00000, 0.00000, 0.00000); //Closed
	LSFDDoor31 = CreateDynamicObject(1569, 232.94400, 169.82050, 1002.02460,   0.00000, 0.00000, 180.00000); //Closed

    LSFDDoor4 = CreateDynamicObject(1569, 295.10751, 189.34680, 1006.17078,   0.00000, 0.00000, 0.00000); //Closed
	LSFDDoor41 = CreateDynamicObject(1569, 298.10831, 189.34680, 1006.17078,   0.00000, 0.00000, 180.00000); //Closed

    LSFDDoor5 = CreateDynamicObject(1569, 274.09659, 189.34563, 1006.17145,   0.00000, 0.00000, 0.00000); //Closed
	LSFDDoor51 = CreateDynamicObject(1569, 277.09921, 189.34560, 1006.17139,   0.00000, 0.00000, 180.00000); //Closed

    LSFDDoor6 = CreateDynamicObject(1569, 237.99850, 183.33380, 1002.02161,   0.00000, 0.00000, 0.00000);

	// Groups
	group5door = CreateDynamicObject(1497, 1088.8372, 2110.6506, 14.3458, 0.0000, 0.0000, 0.0000);
	
	// Airport
	airportgate1 = CreateDynamicObject(971, 1961.52905, -2189.73389, 16.05790,   0.00000, 0.00000, 180.00000);

	// Job related
	truckergateobject = CreateDynamicObject(971, 82.75019, -221.24884, 0.62895,   0.00000, 0.00000, -1.86000);
	return 1;
}

Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
    new Float:d;
    d += floatpower(x1-x2, 2.0);
    d += floatpower(y1-y2, 2.0);
    d += floatpower(z1-z2, 2.0);
    d = floatsqroot(d);
	return d;
}

stock PutPlayerInTutorial(playerid, stageid)
{
	switch(stageid)
	{
	    case 0:
	    {
	        new string[128];

	        Player[playerid][Tutorial] = 1;

			TogglePlayerSpectating(playerid, true);

			SetPlayerCameraPos(playerid, 1535.9584, -1676.1428, 18.3828);
			SetPlayerCameraLookAt(playerid, 1553.7861, -1676.4270, 16.1953);
			SetPlayerVirtualWorld(playerid, playerid+6002);

			TogglePlayerControllable(playerid, false);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			format(string, sizeof(string), "Hello there, %s - Welcome to Evolved Gaming  Roleplay.", GetName(playerid));
			SendClientMessage(playerid, WHITE, string);
			SendClientMessage(playerid, WHITE, "This is a roleplaying server, to clarify that you can roleplay - please answer this round of questions.");

			ShowPlayerDialog(playerid, 104, DIALOG_STYLE_LIST, "What is the SA-MP roleplaying definition of 'IC'?", "Internet Connection\nIn Character\nIntegrated Circuit\n", "Select", "Cancel");

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

		}
		case 1:
		{
			SendClientMessage(playerid, WHITE, "Incorrect answer.");
		    SendClientMessage(playerid, WHITE, "It was in-character, we recommend you to read through our rules on the forums");
		    ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
		}
		case 2:
		{
			ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
		}
		case 99:
		{
		    TogglePlayerSpectating(playerid, false);
			SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], SpawnX, SpawnY, SpawnZ, 90, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
			Player[playerid][Tutorial] = 0;
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
		}
	}
	return 1;
}

stock logError(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("errors.txt", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock GroupChatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/GroupChat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock NamechangeLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Namechanges.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock BanLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Bans.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock UnbanLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Unbans.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock StatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Stat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock PMsLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/PMchat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock OOCChatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/OOCChat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock AdminActionsLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/AdminActions.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock ICChatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/ICChat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock MoneyLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Money.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock InitGroups()
{
    new FileName[128];
    for(new i = 0; i < MAX_GROUPS; i++)
    {
        format(FileName, sizeof(FileName), "Groups/Group_%d.ini", i);
        if(fexist(FileName))
        {
            Groups[i][GroupName] = dini_Get(FileName, "GroupName");
            Groups[i][CommandTypes] = dini_Int(FileName, "CommandTypes");
            Groups[i][RankName0] = dini_Get(FileName, "RankName0");
            Groups[i][RankName1] = dini_Get(FileName, "RankName1");
            Groups[i][RankName2] = dini_Get(FileName, "RankName2");
            Groups[i][RankName3] = dini_Get(FileName, "RankName3");
            Groups[i][RankName4] = dini_Get(FileName, "RankName4");
            Groups[i][RankName5] = dini_Get(FileName, "RankName5");
            Groups[i][RankName6] = dini_Get(FileName, "RankName6");
            Groups[i][RankName7] = dini_Get(FileName, "RankName7");
            Groups[i][RankName8] = dini_Get(FileName, "RankName8");
            Groups[i][RankName9] = dini_Get(FileName, "RankName9");
            Groups[i][RankName10] = dini_Get(FileName, "RankName10");
            Groups[i][Skin0] = dini_Int(FileName, "Skin0");
            Groups[i][Skin1] = dini_Int(FileName, "Skin1");
            Groups[i][Skin2] = dini_Int(FileName, "Skin2");
            Groups[i][Skin3] = dini_Int(FileName, "Skin3");
            Groups[i][Skin4] = dini_Int(FileName, "Skin4");
            Groups[i][Skin5] = dini_Int(FileName, "Skin5");
            Groups[i][Skin6] = dini_Int(FileName, "Skin6");
            Groups[i][HQInteriorID] = dini_Int(FileName, "HQInteriorID");
            Groups[i][HQInteriorX] = dini_Float(FileName, "HQInteriorX");
            Groups[i][HQInteriorY] = dini_Float(FileName, "HQInteriorY");
            Groups[i][HQInteriorZ] = dini_Float(FileName, "HQInteriorZ");
            Groups[i][HQExteriorID] = dini_Int(FileName, "HQExteriorID");
            Groups[i][HQExteriorX] = dini_Float(FileName, "HQExteriorX");
            Groups[i][HQExteriorY] = dini_Float(FileName, "HQExteriorY");
            Groups[i][HQExteriorZ] = dini_Float(FileName, "HQExteriorZ");
            Groups[i][SafeX] = dini_Float(FileName, "SafeX");
            Groups[i][SafeY] = dini_Float(FileName, "SafeY");
            Groups[i][SafeZ] = dini_Float(FileName, "SafeZ");
            Groups[i][SafeInteriorID] = dini_Int(FileName, "SafeInteriorID");
            Groups[i][SafeMoney] = dini_Int(FileName, "SafeMoney");
            Groups[i][HQLock] = dini_Int(FileName, "HQLock");
            Groups[i][SavedPot] = dini_Int(FileName, "Pot");
            Groups[i][SavedCrack] = dini_Int(FileName, "Crack");
        	Groups[i][DisbandMinute] = dini_Int(FileName, "DisbandMinute");
	        Groups[i][DisbandHour] = dini_Int(FileName, "DisbandHour");
	        Groups[i][DisbandDay] = dini_Int(FileName, "DisbandDay");
	        Groups[i][DisbandMonth] = dini_Int(FileName, "DisbandMonth");
	        Groups[i][DisbandYear] = dini_Int(FileName, "DisbandYear");
            Groups[i][SafeWorld] = dini_Int(FileName, "SafeWorld");
            Groups[i][MOTD] = dini_Get(FileName, "MOTD");
			Groups[i][SafeMaterials] = dini_Int(FileName, "SafeMaterials");

        	Groups[i][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ], -1, -1, -1, 150.0);

			Groups[i][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[i][SafeX], Groups[i][SafeY], Groups[i][SafeZ],Groups[i][SafeWorld], -1, -1, 150.0);

			printf("[system] Group %d spawned.", i);
       }
    }
	return 1;
}

stock InitJobs()
{
    new FileName[128];
    for(new i = 0; i < MAX_JOBS; i++)
    {
        format(FileName, sizeof(FileName), "Jobs/Job_%d.ini", i);
        if(fexist(FileName))
        {
            Jobs[i][JobName] = dini_Get(FileName, "JobName");
            Jobs[i][JobJoinPosX] = dini_Float(FileName, "JobJoinPosX");
            Jobs[i][JobJoinPosY] = dini_Float(FileName, "JobJoinPosY");
            Jobs[i][JobJoinPosZ] = dini_Float(FileName, "JobJoinPosZ");
            Jobs[i][JobJoinPosWorld] = dini_Int(FileName, "JobJoinPosWorld");
            Jobs[i][JobJoinPosInterior] = dini_Int(FileName, "JobJoinPosInterior");

            Jobs[i][JobMiscLocationOneX] = dini_Float(FileName, "JobMiscLocationOneX");
            Jobs[i][JobMiscLocationOneY] = dini_Float(FileName, "JobMiscLocationOneY");
            Jobs[i][JobMiscLocationOneZ] = dini_Float(FileName, "JobMiscLocationOneZ");
            Jobs[i][JobMiscLocationOneWorld] = dini_Int(FileName, "JobMiscLocationOneWorld");
            Jobs[i][JobMiscLocationOneInterior] = dini_Int(FileName, "JobMiscLocationOneInterior");
            Jobs[i][JobMiscLocationOneMessage] = dini_Get(FileName, "JobMiscLocationOneMessage");

            Jobs[i][JobMiscLocationTwoX] = dini_Float(FileName, "JobMiscLocationTwoX");
            Jobs[i][JobMiscLocationTwoY] = dini_Float(FileName, "JobMiscLocationTwoY");
            Jobs[i][JobMiscLocationTwoZ] = dini_Float(FileName, "JobMiscLocationTwoZ");
            Jobs[i][JobMiscLocationTwoWorld] = dini_Int(FileName, "JobMiscLocationTwoWorld");
            Jobs[i][JobMiscLocationTwoInterior] = dini_Int(FileName, "JobMiscLocationTwoInterior");
            Jobs[i][JobMiscLocationTwoMessage] = dini_Get(FileName, "JobMiscLocationTwoMessage");

            Jobs[i][JobType] = dini_Int(FileName, "JobType");

            Jobs[i][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobJoinPosX], Jobs[i][JobJoinPosY], Jobs[i][JobJoinPosZ], Jobs[i][JobJoinPosWorld], -1, -1, 150.0);
            Jobs[i][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobMiscLocationOneX], Jobs[i][JobMiscLocationOneY], Jobs[i][JobMiscLocationOneZ], Jobs[i][JobMiscLocationOneWorld], -1, -1, 150.0);
            Jobs[i][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobMiscLocationTwoX], Jobs[i][JobMiscLocationTwoY], Jobs[i][JobMiscLocationTwoZ], Jobs[i][JobMiscLocationTwoWorld], -1, -1, 150.0);

            printf("[system] Job %d (%s) spawned.", i, Jobs[i][JobName]);
            SpawnedJobs++;
       }
    }
	return 1;
}

public RefreshNewbieChatForPlayer(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    Player[playerid][CanUseNewbie] = 1;
	}
	return 1;
}

stock findAvailableVehicleID() {
    for(new i = 0; i < MAX_VEHICLES; i++) {
        if(Vehicles[i][CarModel] == 0) {
			return i;
		}
    }

    return -1;
}

stock InitATMs()
{
	new FileName[128], string[128];
	for(new i = 0; i < MAX_ATMS; i++)
	{
	    format(FileName, sizeof(FileName), "ATMs/ATM_%d.ini", i);
		if(fexist(FileName))
		{
			format(string, sizeof(string), "ATM\nID %d\n(( /atm ))", i);
	        ATMs[i][ExteriorX] = dini_Float(FileName, "ExteriorX");
	        ATMs[i][ExteriorY] = dini_Float(FileName, "ExteriorY");
	        ATMs[i][ExteriorZ] = dini_Float(FileName, "ExteriorZ");
	        ATMs[i][ATMToggle] = dini_Int(FileName, "ATMToggle");
	        Create3DTextLabel(string, WHITE, ATMs[i][ExteriorX], ATMs[i][ExteriorY], ATMs[i][ExteriorZ], 20.0, 0, 0);
            printf("[system] ATM %d spawned.", i);
			SpawnedATMs++;
		}
	}
}

stock InitFurniture()
{
	new query[128], temp[255], rows, fields;
	for(new i = 1; i < MAX_FURNITURE; i++)
	{
	    format(query, sizeof(query), "SELECT * FROM furniture WHERE ID=%d", i);
	    mysql_query(mysql, query);
	    mysql_store_result();
	    cache_get_data(rows, fields);
	    if(rows)
	    {
	        cache_get_field_content(0, "ID", temp), Furniture[i][frID] = strval(temp);
            cache_get_field_content(0, "ObjectID", temp), Furniture[i][frObjectID] = strval(temp);
	        cache_get_field_content(0, "X", temp), Furniture[i][frX] = floatstr(temp);
	        cache_get_field_content(0, "Y", temp), Furniture[i][frY] = floatstr(temp);
	        cache_get_field_content(0, "Z", temp), Furniture[i][frZ] = floatstr(temp);
	        cache_get_field_content(0, "rX", temp), Furniture[i][frrX] = floatstr(temp);
	        cache_get_field_content(0, "rY", temp), Furniture[i][frrY] = floatstr(temp);
	        cache_get_field_content(0, "rZ", temp), Furniture[i][frrZ] = floatstr(temp);
	        cache_get_field_content(0, "VW", temp), Furniture[i][frVW] = strval(temp);
	        cache_get_field_content(0, "Active", temp), Furniture[i][frActive] = strval(temp);
	        cache_get_field_content(0, "CocaineGrowth", temp), Furniture[i][CocaineGrowth] = strval(temp);
	        cache_get_field_content(0, "GrowingCocaineAmount", temp), Furniture[i][GrowingCocaineAmount] = strval(temp);

	        if(Furniture[i][frActive] == 1)
	        {
                if(Furniture[i][frObjectID] == 3383)
                {
                    new string[512];
                    new Float: newz = Furniture[i][frZ]+0.5;
                   	format(string, sizeof(string), "Drug Lab\nAmount: %d/50\nState: %d/60", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
                   	Furniture[i][CocaineText] = Create3DTextLabel(string, WHITE, Furniture[i][frX], Furniture[i][frY], newz, 5.0, Furniture[i][frVW], 0);
				}
				if(Furniture[i][frObjectID] == 637)
                {
                    new string[512];
                    new Float: newz = Furniture[i][frZ]+0.5;
                   	format(string, sizeof(string), "Planter\nAmount: %d/10\nState: %d/30", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
                   	Furniture[i][CocaineText] = Create3DTextLabel(string, WHITE, Furniture[i][frX], Furniture[i][frY], newz, 5.0, Furniture[i][frVW], 0);
				}
				if(Furniture[i][frObjectID] == 637 && Furniture[i][CocaineGrowth] != 0)
				{
					Furniture[i][Object] = CreateDynamicObject(638, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ], Furniture[i][frrX], Furniture[i][frrY], Furniture[i][frrZ], Furniture[i][frVW], -1, -1, 100.0);
				}
				else
				{
					Furniture[i][Object] = CreateDynamicObject(Furniture[i][frObjectID], Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ], Furniture[i][frrX], Furniture[i][frrY], Furniture[i][frrZ], Furniture[i][frVW], -1, -1, 100.0);
				}
				printf("[system] Furniture object %d has spawned.", i);
			}
	    }
	    mysql_free_result();
	}
}

stock InitGarages()
{
    new query[128], temp[255], rows, fields;
	for(new i = 0; i < MAX_GARAGES; i++)
	{
	    format(query, sizeof(query), "SELECT * FROM garages WHERE gID=%d", i);
		mysql_query(mysql, query);
		mysql_store_result();
		cache_get_data(rows, fields);
		if(rows)
		{
		    cache_get_field_content(0, "gID", temp), Garage[i][gID] = strval(temp);
		    cache_get_field_content(0, "gInteriorID", temp), Garage[i][gInteriorID] = strval(temp);
		    cache_get_field_content(0, "gLinkedHouse", temp), Garage[i][gLinkedHouse] = strval(temp);
		    cache_get_field_content(0, "gLockedStatus", temp), Garage[i][gLockedStatus] = strval(temp);

		    cache_get_field_content(0, "gExteriorX", temp), Garage[i][gExteriorX] = floatstr(temp);
		    cache_get_field_content(0, "gExteriorY", temp), Garage[i][gExteriorY] = floatstr(temp);
		    cache_get_field_content(0, "gExteriorZ", temp), Garage[i][gExteriorZ] = floatstr(temp);
		    cache_get_field_content(0, "gInteriorX", temp), Garage[i][gInteriorX] = floatstr(temp);
		    cache_get_field_content(0, "gInteriorY", temp), Garage[i][gInteriorY] = floatstr(temp);
		    cache_get_field_content(0, "gInteriorZ", temp), Garage[i][gInteriorZ] = floatstr(temp);

		    new string[128];
		    format(string, sizeof(string), "Garage %d\n(( /entergarage ))");
		    Garage[i][gText] = Create3DTextLabel(string, WHITE, Garage[i][gExteriorX], Garage[i][gExteriorY], Garage[i][gExteriorZ], 25.0, 0, 1);

		    SpawnedGarages++;
		    printf("[system] Garage %d has spawned.", i);
		}
		mysql_free_result();
	}
}

stock InitFactions_Main()
{
	new query[128], temp[255], rows, fields;
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
	    format(query, sizeof(query), "SELECT * FROM factions WHERE fID=%d", i);
		mysql_query(mysql, query);
		mysql_store_result();
		cache_get_data(rows, fields);
		if(rows)
		{
		    cache_get_field_content(0, "fID", temp), Faction[i][fID] = strval(temp);
		    cache_get_field_content(0, "fName", temp), format(Faction[i][fName], 255, "%s", temp);
		    cache_get_field_content(0, "fBank", temp), Faction[i][fBank] = strval(temp);
		    cache_get_field_content(0, "fRank1", temp), format(Faction[i][fRank1], 255, "%s", temp);
            cache_get_field_content(0, "fRank2", temp), format(Faction[i][fRank2], 255, "%s", temp);
            cache_get_field_content(0, "fRank3", temp), format(Faction[i][fRank3], 255, "%s", temp);
            cache_get_field_content(0, "fRank4", temp), format(Faction[i][fRank4], 255, "%s", temp);
            cache_get_field_content(0, "fRank5", temp), format(Faction[i][fRank5], 255, "%s", temp);
            cache_get_field_content(0, "fMemberLock", temp), Faction[i][fMemberLock] = strval(temp);
            cache_get_field_content(0, "fVehicleLock", temp), Faction[i][fVehicleLock] = strval(temp);
            cache_get_field_content(0, "fMembers", temp), Faction[i][fMembers] = strval(temp);
            cache_get_field_content(0, "fVehicle1", temp), Faction[i][fVehicle1] = strval(temp);
            cache_get_field_content(0, "fLinkID1", temp), Faction[i][fLinkID1] = strval(temp);
            cache_get_field_content(0, "fVehicle1X", temp), Faction[i][fVehicle1X] = floatstr(temp);
            cache_get_field_content(0, "fVehicle1Y", temp), Faction[i][fVehicle1Y] = floatstr(temp);
            cache_get_field_content(0, "fVehicle1Z", temp), Faction[i][fVehicle1Z] = floatstr(temp);
            cache_get_field_content(0, "fVehicle1ZAngle", temp), Faction[i][fVehicle1ZAngle] = floatstr(temp);
            cache_get_field_content(0, "fCarCol1", temp), Faction[i][fCarCol1] = strval(temp);
            cache_get_field_content(0, "fCarCol2", temp), Faction[i][fCarCol2] = strval(temp);
            cache_get_field_content(0, "fFuel1", temp), Faction[i][fFuel1] = strval(temp);

            cache_get_field_content(0, "fVehicle2", temp), Faction[i][fVehicle2] = strval(temp);
            cache_get_field_content(0, "fLinkID2", temp), Faction[i][fLinkID2] = strval(temp);
            cache_get_field_content(0, "fVehicle2X", temp), Faction[i][fVehicle2X] = floatstr(temp);
            cache_get_field_content(0, "fVehicle2Y", temp), Faction[i][fVehicle2Y] = floatstr(temp);
            cache_get_field_content(0, "fVehicle2Z", temp), Faction[i][fVehicle2Z] = floatstr(temp);
            cache_get_field_content(0, "fVehicle2ZAngle", temp), Faction[i][fVehicle2ZAngle] = floatstr(temp);
            cache_get_field_content(0, "fCar2Col1", temp), Faction[i][fCar2Col1] = strval(temp);
            cache_get_field_content(0, "fCar2Col2", temp), Faction[i][fCar2Col2] = strval(temp);
            cache_get_field_content(0, "fFuel2", temp), Faction[i][fFuel2] = strval(temp);

            cache_get_field_content(0, "fVehicle3", temp), Faction[i][fVehicle3] = strval(temp);
            cache_get_field_content(0, "fLinkID3", temp), Faction[i][fLinkID3] = strval(temp);
            cache_get_field_content(0, "fVehicle3X", temp), Faction[i][fVehicle3X] = floatstr(temp);
            cache_get_field_content(0, "fVehicle3Y", temp), Faction[i][fVehicle3Y] = floatstr(temp);
            cache_get_field_content(0, "fVehicle3Z", temp), Faction[i][fVehicle3Z] = floatstr(temp);
            cache_get_field_content(0, "fVehicle3ZAngle", temp), Faction[i][fVehicle3ZAngle] = floatstr(temp);
            cache_get_field_content(0, "fCar3Col1", temp), Faction[i][fCar3Col1] = strval(temp);
            cache_get_field_content(0, "fCar3Col2", temp), Faction[i][fCar3Col2] = strval(temp);
            cache_get_field_content(0, "fFuel3", temp), Faction[i][fFuel3] = strval(temp);

            cache_get_field_content(0, "fVehicle4", temp), Faction[i][fVehicle4] = strval(temp);
            cache_get_field_content(0, "fLinkID4", temp), Faction[i][fLinkID4] = strval(temp);
            cache_get_field_content(0, "fVehicle4X", temp), Faction[i][fVehicle4X] = floatstr(temp);
            cache_get_field_content(0, "fVehicle4Y", temp), Faction[i][fVehicle4Y] = floatstr(temp);
            cache_get_field_content(0, "fVehicle4Z", temp), Faction[i][fVehicle4Z] = floatstr(temp);
            cache_get_field_content(0, "fVehicle4ZAngle", temp), Faction[i][fVehicle4ZAngle] = floatstr(temp);
            cache_get_field_content(0, "fCar4Col1", temp), Faction[i][fCar4Col1] = strval(temp);
            cache_get_field_content(0, "fCar4Col2", temp), Faction[i][fCar4Col2] = strval(temp);
            cache_get_field_content(0, "fFuel4", temp), Faction[i][fFuel4] = strval(temp);

            cache_get_field_content(0, "fVehicle5", temp), Faction[i][fVehicle5] = strval(temp);
            cache_get_field_content(0, "fLinkID5", temp), Faction[i][fLinkID5] = strval(temp);
            cache_get_field_content(0, "fVehicle5X", temp), Faction[i][fVehicle5X] = floatstr(temp);
            cache_get_field_content(0, "fVehicle5Y", temp), Faction[i][fVehicle5Y] = floatstr(temp);
            cache_get_field_content(0, "fVehicle5Z", temp), Faction[i][fVehicle5Z] = floatstr(temp);
            cache_get_field_content(0, "fVehicle5ZAngle", temp), Faction[i][fVehicle5ZAngle] = floatstr(temp);
            cache_get_field_content(0, "fCar5Col1", temp), Faction[i][fCar5Col1] = strval(temp);
            cache_get_field_content(0, "fCar5Col2", temp), Faction[i][fCar5Col2] = strval(temp);
            cache_get_field_content(0, "fFuel5", temp), Faction[i][fFuel5] = strval(temp);

            new engine, lights, alarm, doors, bonnet, boot, objective;
			if(Faction[i][fVehicle1] != 0)
			{
				Faction[i][fLinkID1] = CreateVehicle(Faction[i][fVehicle1], Faction[i][fVehicle1X], Faction[i][fVehicle1Y], Faction[i][fVehicle1Z], Faction[i][fVehicle1ZAngle], Faction[i][fCarCol1], Faction[i][fCarCol2], -1);
				FactionVehiclesSpawned[i] += 1;
				fuel[Faction[i][fLinkID1]] = Faction[i][fFuel1];
				GetVehicleParamsEx(Faction[i][fLinkID1], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(Faction[i][fLinkID1], engine, lights, alarm, 1, bonnet, boot, objective);
				Faction[i][fLockStatus1] = 1;
            }
            if(Faction[i][fVehicle2] != 0)
			{
				Faction[i][fLinkID2] = CreateVehicle(Faction[i][fVehicle2], Faction[i][fVehicle2X], Faction[i][fVehicle2Y], Faction[i][fVehicle2Z], Faction[i][fVehicle2ZAngle], Faction[i][fCar2Col1], Faction[i][fCar2Col2], -1);
				FactionVehiclesSpawned[i] += 1;
				fuel[Faction[i][fLinkID2]] = Faction[i][fFuel2];
				GetVehicleParamsEx(Faction[i][fLinkID2], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(Faction[i][fLinkID2], engine, lights, alarm, 1, bonnet, boot, objective);
				Faction[i][fLockStatus2] = 1;
            }
            if(Faction[i][fVehicle3] != 0)
			{
				Faction[i][fLinkID3] = CreateVehicle(Faction[i][fVehicle3], Faction[i][fVehicle3X], Faction[i][fVehicle3Y], Faction[i][fVehicle3Z], Faction[i][fVehicle3ZAngle], Faction[i][fCar3Col1], Faction[i][fCar3Col2], -1);
				FactionVehiclesSpawned[i] += 1;
				fuel[Faction[i][fLinkID3]] = Faction[i][fFuel3];
				GetVehicleParamsEx(Faction[i][fLinkID3], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(Faction[i][fLinkID3], engine, lights, alarm, 1, bonnet, boot, objective);
				Faction[i][fLockStatus3] = 1;
            }
            if(Faction[i][fVehicle4] != 0)
			{
				Faction[i][fLinkID4] = CreateVehicle(Faction[i][fVehicle4], Faction[i][fVehicle4X], Faction[i][fVehicle4Y], Faction[i][fVehicle4Z], Faction[i][fVehicle4ZAngle], Faction[i][fCar4Col1], Faction[i][fCar4Col2], -1);
				FactionVehiclesSpawned[i] += 1;
				fuel[Faction[i][fLinkID4]] = Faction[i][fFuel4];
				GetVehicleParamsEx(Faction[i][fLinkID4], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(Faction[i][fLinkID4], engine, lights, alarm, 1, bonnet, boot, objective);
				Faction[i][fLockStatus4] = 1;
            }
            if(Faction[i][fVehicle5] != 0)
			{
				Faction[i][fLinkID5] = CreateVehicle(Faction[i][fVehicle5], Faction[i][fVehicle5X], Faction[i][fVehicle5Y], Faction[i][fVehicle5Z], Faction[i][fVehicle5ZAngle], Faction[i][fCar5Col1], Faction[i][fCar5Col2], -1);
				FactionVehiclesSpawned[i] += 1;
				fuel[Faction[i][fLinkID5]] = Faction[i][fFuel5];
				GetVehicleParamsEx(Faction[i][fLinkID5], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(Faction[i][fLinkID5], engine, lights, alarm, 1, bonnet, boot, objective);
				Faction[i][fLockStatus5] = 1;
            }
            printf("[system] Faction %d spawned. (+ %d faction vehicles)", i, FactionVehiclesSpawned[i]);
            SpawnedFactions++;
            mysql_free_result();
		}
	}
	return 1;
}

stock InitHouses()
{
    new FileName[128], temp[255], rows, fields;
    for(new i = 0; i < MAX_HOUSES; i++)
    {
        format(FileName, sizeof(FileName), "SELECT * FROM houses WHERE hID=%d", i);
        mysql_query(mysql, FileName);
        mysql_store_result();
        cache_get_data(rows, fields);
        if(rows)
        {
            cache_get_field_content(0, "hInteriorID", temp), Houses[i][hInteriorID] = strval(temp);
            cache_get_field_content(0, "hInteriorX", temp), Houses[i][hInteriorX] = floatstr(temp);
            cache_get_field_content(0, "hInteriorY", temp), Houses[i][hInteriorY] = floatstr(temp);
            cache_get_field_content(0, "hInteriorZ", temp), Houses[i][hInteriorZ] = floatstr(temp);
            cache_get_field_content(0, "hExteriorX", temp), Houses[i][hExteriorX] = floatstr(temp);
            cache_get_field_content(0, "hExteriorY", temp), Houses[i][hExteriorY] = floatstr(temp);
            cache_get_field_content(0, "hExteriorZ", temp), Houses[i][hExteriorZ] = floatstr(temp);
            cache_get_field_content(0, "hInteriorID", temp), Houses[i][hInteriorID] = strval(temp);
            cache_get_field_content(0, "hExteriorID", temp), Houses[i][hExteriorID] = strval(temp);
            cache_get_field_content(0, "HousePrice", temp), Houses[i][HousePrice] = strval(temp);
            cache_get_field_content(0, "VaultMoney", temp), Houses[i][VaultMoney] = strval(temp);
            cache_get_field_content(0, "HouseCocaine", temp), Houses[i][HouseCocaine] = strval(temp);
            cache_get_field_content(0, "HousePot", temp), Houses[i][HousePot] = strval(temp);
            cache_get_field_content(0, "HouseMaterials", temp), Houses[i][HouseMaterials] = strval(temp);
            cache_get_field_content(0, "hOwner", temp), format(Houses[i][hOwner], 255, "%s", temp);
			cache_get_field_content(0, "KeyID", temp), Houses[i][KeyID] = strval(temp);
   			cache_get_field_content(0, "LockStatus", temp), Houses[i][LockStatus] = strval(temp);
   			cache_get_field_content(0, "WeaponSlot1", temp), Houses[i][WeaponSlot1] = strval(temp);
   			cache_get_field_content(0, "WeaponSlot2", temp), Houses[i][WeaponSlot2] = strval(temp);
   			cache_get_field_content(0, "WeaponSlot3", temp), Houses[i][WeaponSlot3] = strval(temp);
   			cache_get_field_content(0, "FluorescentLights", temp), Houses[i][FluorescentLights] = strval(temp);
            cache_get_field_content(0, "CocaineTables", temp), Houses[i][CocaineTables] = strval(temp);

	        if(strcmp(Houses[i][hOwner], "Nobody", true) == 0)
			{
			    Houses[i][LockStatus] = 1;
            	Houses[i][HPickupID] = CreateDynamicPickup(1273, 23, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], 0, -1, -1, 150.0);
            }
            else
            {
                Houses[i][HPickupID] = CreateDynamicPickup(1272, 23, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], 0, -1, -1, 150.0);
            }

            printf("[system] House %d spawned.", i);
            SpawnedHouses++;
            mysql_free_result();
       }
    }
	return 1;
}

stock InitWeedPlants()
{
	new string[128], rows, fields, temp[255];
	for(new i=0; i< MAX_WEEDPLANTS; i++)
	{
	    format(string, sizeof(string), "SELECT * FROM weedplants WHERE ID = %d", i);
	    mysql_query(mysql, string);
	    mysql_store_result();
	    cache_get_data(rows, fields);
	    if(rows)
	    {
	        cache_get_field_content(0, "ID", temp), WeedPlant[i][ID] = strval(temp);
	        cache_get_field_content(0, "weedX", temp), WeedPlant[i][weedX] = floatstr(temp);
	        cache_get_field_content(0, "weedY", temp), WeedPlant[i][weedY] = floatstr(temp);
	        cache_get_field_content(0, "weedZ", temp), WeedPlant[i][weedZ] = floatstr(temp);
	        cache_get_field_content(0, "weedVW", temp), WeedPlant[i][weedVW] = strval(temp);
	        cache_get_field_content(0, "GrowthState", temp), WeedPlant[i][GrowthState] = strval(temp);
	        cache_get_field_content(0, "Active", temp), WeedPlant[i][Active] = strval(temp);
			if(WeedPlant[i][GrowthState] == 120)
			{
				WeedPlantObj[i] = CreateDynamicObject(860, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ],   0.00, 0.00, 0.00, WeedPlant[i][weedVW], -1, -1, 100.0);
	        }
			else
	        {
	            WeedPlantObj[i] = CreateDynamicObject(859, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ],   0.00, 0.00, 0.00, WeedPlant[i][weedVW], -1, -1, 100.0);
			}

	        printf("[system] Weedplant %d spawned.", i);
	        SpawnedWeedPlants++;
	        mysql_free_result();
	    }
	}
}

stock InitBusinesses()
{
    new FileName[128], rows, fields, temp[255];
    for(new i = 0; i < MAX_BUSINESSES; i++)
    {
        format(FileName, sizeof(FileName), "SELECT * FROM businesses WHERE bID = %d", i);
        mysql_query(mysql, FileName);
        mysql_store_result();
        cache_get_data(rows, fields);
        if(rows)
        {
            cache_get_field_content(0, "bExteriorX", temp), Businesses[i][bExteriorX] = floatstr(temp);
            cache_get_field_content(0, "bExteriorY", temp), Businesses[i][bExteriorY] = floatstr(temp);
            cache_get_field_content(0, "bExteriorZ", temp), Businesses[i][bExteriorZ] = floatstr(temp);
            cache_get_field_content(0, "bExteriorID", temp), Businesses[i][bExteriorID] = strval(temp);
            cache_get_field_content(0, "bInteriorX", temp), Businesses[i][bInteriorX] = floatstr(temp);
            cache_get_field_content(0, "bInteriorY", temp), Businesses[i][bInteriorY] = floatstr(temp);
            cache_get_field_content(0, "bInteriorZ", temp), Businesses[i][bInteriorZ] = floatstr(temp);
            cache_get_field_content(0, "bInteriorID", temp), Businesses[i][bInteriorID] = strval(temp);
            cache_get_field_content(0, "bType", temp), Businesses[i][bType] = strval(temp);
            cache_get_field_content(0, "bVault", temp), Businesses[i][bVault] = strval(temp);
            cache_get_field_content(0, "bPrice", temp), Businesses[i][bPrice] = strval(temp);
            cache_get_field_content(0, "bProductPrice1", temp), Businesses[i][bProductPrice1] = strval(temp);
            cache_get_field_content(0, "bProductPrice2", temp), Businesses[i][bProductPrice2] = strval(temp);
            cache_get_field_content(0, "bProductPrice3", temp), Businesses[i][bProductPrice3] = strval(temp);
            cache_get_field_content(0, "bProductPrice4", temp), Businesses[i][bProductPrice4] = strval(temp);
            cache_get_field_content(0, "bProductPrice5", temp), Businesses[i][bProductPrice5] = strval(temp);
            cache_get_field_content(0, "bProductPrice6", temp), Businesses[i][bProductPrice6] = strval(temp);
            cache_get_field_content(0, "bProductPrice7", temp), Businesses[i][bProductPrice7] = strval(temp);
            cache_get_field_content(0, "bProductPrice8", temp), Businesses[i][bProductPrice8] = strval(temp);
            cache_get_field_content(0, "bProductPrice9", temp), Businesses[i][bProductPrice9] = strval(temp);
            cache_get_field_content(0, "bProductPrice10", temp), Businesses[i][bProductPrice10] = strval(temp);
            cache_get_field_content(0, "bProductPrice11", temp), Businesses[i][bProductPrice11] = strval(temp);
            cache_get_field_content(0, "bProductPrice12", temp), Businesses[i][bProductPrice12] = strval(temp);
            cache_get_field_content(0, "bProductPrice13", temp), Businesses[i][bProductPrice13] = strval(temp);
            cache_get_field_content(0, "bProductPrice14", temp), Businesses[i][bProductPrice14] = strval(temp);
			cache_get_field_content(0, "SupplyStatus", temp), Businesses[i][SupplyStatus] = strval(temp);
            cache_get_field_content(0, "bSupplies", temp), Businesses[i][bSupplies] = strval(temp);
            cache_get_field_content(0, "bOwner", temp), format(Businesses[i][bOwner], 255, "%s", temp);
            cache_get_field_content(0, "bSupplyStatus", temp), Businesses[i][bSupplyStatus] = strval(temp);
            cache_get_field_content(0, "bLockStatus", temp), Businesses[i][bLockStatus] = strval(temp);
            cache_get_field_content(0, "bPickupID", temp), Businesses[i][bPickupID] = strval(temp);
            cache_get_field_content(0, "bName", temp), format(Businesses[i][bName], 255, "%s", temp);

           	Businesses[i][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 0, -1, -1, 150.0);

            printf("[system] Business %d spawned.", i);
            SpawnedBusinesses++;
            mysql_free_result();
       }
    }
	return 1;
}

GetVehicleFileID(gameid)
{
	new result;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(gameid == Vehicles[i][GameID])
		{
		    result = i;
		}
	}
	return result;
}

stock SaveVehicles()
{
	for(new i = 0; i < MAX_VEHICLES;  i++)
	{
		SaveExistingVehicle(i);
	}
}

stock SaveExistingVehicle(gameid)
{
	new query[1024], query2[1024], id, rows, fields;

	mysql_format(mysql, query, sizeof(query), "SELECT * FROM vehicles WHERE CarID=%d", gameid);
	mysql_query(mysql, query);
	mysql_store_result();
	cache_get_data(rows, fields);

    if(rows)
    {
        mysql_format(mysql, query, sizeof(query), "UPDATE vehicles SET CarModel=%d, CarColour1=%d, CarColour2=%d, CarNos=%d, CarGroup=%d, CarPosX=%f, CarPosY=%f, CarPosZ=%f, CarPosZAngle=%f, GameID=%d WHERE CarID=%d",
		Vehicles[gameid][CarModel], Vehicles[gameid][CarColour1], Vehicles[gameid][CarColour2], Vehicles[gameid][CarNos], Vehicles[gameid][CarGroup], Vehicles[gameid][CarPosX], Vehicles[gameid][CarPosY], Vehicles[gameid][CarPosZ], Vehicles[gameid][CarZAngle], Vehicles[gameid][GameID], gameid);
		mysql_query(mysql, query);
		mysql_format(mysql, query2, sizeof(query2), "UPDATE vehicles SET CarTrunk1=%d, CarTrunk2=%d, CarTrunk3=%d, CarPot=%d, CarCocaine=%d, CarMaterials=%d WHERE CarID=%d", Vehicles[gameid][CarTrunk1],
		Vehicles[gameid][CarTrunk2], Vehicles[gameid][CarTrunk3], Vehicles[gameid][CarPot], Vehicles[gameid][CarCocaine], Vehicles[gameid][CarMaterials], gameid);
		mysql_query(mysql, query2);
		printf("[system] Vehicle %d has been saved.", id);
    }
    else
    {
        printf("[system] Failed to save vehicle %d", id);
    }
}

stock InitPlots()
{
	new FileName[50];
	for(new p = 0; p < MAX_PLOTS; p++)
	{
    	format(FileName, sizeof(FileName), "Plots/plot_%d.ini", p);
        if(fexist(FileName))
        {
		    if(Plots[p][PlotForSale] == 1)
		    {
				new string[255];
				Plots[p][PlotID] = dini_Int(FileName, "PlotID");
				Plots[p][pos1x] = dini_Float(FileName, "pos1x");
				Plots[p][pos1y] = dini_Float(FileName, "pos1y");
				Plots[p][pos1z] = dini_Float(FileName, "pos1z");
				Plots[p][pos2x] = dini_Float(FileName, "pos2x");
				Plots[p][pos2y] = dini_Float(FileName, "pos2y");
				Plots[p][pos2z] = dini_Float(FileName, "pos2z");
				Plots[p][PlotPrice] = dini_Int(FileName, "PlotPrice");
				Plots[p][OwnedBy] = dini_Get(FileName, "OwnedBy");

				format(string, sizeof(string), "Plot for sale!\n$%d\nID %d", Plots[p][PlotPrice], Plots[p][PlotID]);

				plottext[p] = Create3DTextLabel(string, GREEN, Plots[p][pos1x], Plots[p][pos1y], Plots[p][pos1z], 50.0, 0, 0);
		    }
		    else
		    {
				new string[255];
				format(string, sizeof(string), "Plot sold\nID: %d\nOwned by %s", Plots[p][PlotID], Plots[p][OwnedBy]);

				plottext[p] = Create3DTextLabel(string, GREEN, Plots[p][pos1x], Plots[p][pos1y], Plots[p][pos1z], 50.0, 0, 0);
		    }
		    printf("[system] Plot %d spawned.", p);
		}
	}
}

stock LockVehicles()
{
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(Vehicles[i][CarGroup] == 0)
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 0, bonnet, boot, objective);
			fuel[i] = 35;
		}
		else
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 1, bonnet, boot, objective);
			fuel[i] = 100;
		}
	}
}

stock InitVehicles()
{
	new query[1024], rows, fields, temp[255];
	/*DrivingTestVehicle[1] = CreateVehicle(401, 172.8822, -6.7457, 1.3664, -180.6000, -1, -1, 100);
	DrivingTestVehicle[2] =	CreateVehicle(401, 169.6005, -6.8309, 1.3664, -180.6000, -1, -1, 100);
	DrivingTestVehicle[3] =	CreateVehicle(401, 166.3127, -6.5362, 1.3664, -180.6000, -1, -1, 100);
	DrivingTestVehicle[4] =	CreateVehicle(401, 163.1580, -6.4509, 1.3664, -180.6000, -1, -1, 100);*/

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    mysql_format(mysql, query, sizeof(query), "SELECT * FROM vehicles WHERE CarID = %d", i);
        mysql_query(mysql, query);
        mysql_store_result();
        cache_get_data(rows, fields);
	    if(rows)
	    {
            cache_get_field_content(0, "CarID", temp), Vehicles[i][CarID] = strval(temp);
            cache_get_field_content(0, "CarColour1", temp), Vehicles[i][CarColour1] = strval(temp);
            cache_get_field_content(0, "CarColour2", temp), Vehicles[i][CarColour2] = strval(temp);
            cache_get_field_content(0, "CarModel", temp), Vehicles[i][CarModel] = strval(temp);
            cache_get_field_content(0, "CarNos", temp), Vehicles[i][CarNos] = strval(temp);
            cache_get_field_content(0, "CarGroup", temp), Vehicles[i][CarGroup] = strval(temp);
            cache_get_field_content(0, "CarPosX", temp), Vehicles[i][CarPosX] = floatstr(temp);
            cache_get_field_content(0, "CarPosY", temp), Vehicles[i][CarPosY] = floatstr(temp);
            cache_get_field_content(0, "CarPosZ", temp), Vehicles[i][CarPosZ] = floatstr(temp);
            cache_get_field_content(0, "CarPosZAngle", temp), Vehicles[i][CarZAngle] = floatstr(temp);
            cache_get_field_content(0, "GameID", temp), Vehicles[i][GameID] = strval(temp);
			cache_get_field_content(0, "CarTrunk1", temp), Vehicles[i][CarTrunk1] = strval(temp);
			cache_get_field_content(0, "CarTrunk2", temp), Vehicles[i][CarTrunk2] = strval(temp);
			cache_get_field_content(0, "CarTrunk3", temp), Vehicles[i][CarTrunk3] = strval(temp);
			cache_get_field_content(0, "CarPot", temp), Vehicles[i][CarPot] = strval(temp);
			cache_get_field_content(0, "CarCocaine", temp), Vehicles[i][CarCocaine] = strval(temp);
			cache_get_field_content(0, "CarMaterials", temp), Vehicles[i][CarMaterials] = strval(temp);

	        CarCount++;
	        Vehicles[i][CarID] = i;
			
			if(Vehicles[i][CarModel] != 0)
			{
				if(Vehicles[i][CarModel] != 537 && Vehicles[i][CarModel] != 538 && Vehicles[i][CarModel] != 569 && 570 && Vehicles[i][CarModel] != 590)
				{
					switch(Vehicles[i][CarGroup])
					{
						case 0:
						{
							Vehicles[i][GameID] = CreateVehicle(Vehicles[i][CarModel], Vehicles[i][CarPosX], Vehicles[i][CarPosY], Vehicles[i][CarPosZ], Vehicles[i][CarZAngle], Vehicles[i][CarColour1], Vehicles[i][CarColour2], 600);
							new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 0, bonnet, boot, objective);
						}
						case 1:
						{
							Vehicles[i][GameID] = CreateVehicle(Vehicles[i][CarModel], Vehicles[i][CarPosX], Vehicles[i][CarPosY], Vehicles[i][CarPosZ], Vehicles[i][CarZAngle], Vehicles[i][CarColour1], Vehicles[i][CarColour2], -1, 1);
							new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 1, bonnet, boot, objective);
						}
						case 2 .. 10:
						{
							Vehicles[i][GameID] = CreateVehicle(Vehicles[i][CarModel], Vehicles[i][CarPosX], Vehicles[i][CarPosY], Vehicles[i][CarPosZ], Vehicles[i][CarZAngle], Vehicles[i][CarColour1], Vehicles[i][CarColour2], -1);
							new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(Vehicles[i][GameID], engine, lights, alarm, 1, bonnet, boot, objective);
						}
					}
				}
			}

            printf("[system] Vehicle %d has spawned.", i);
	    }
	    mysql_free_result();
	}
}

stock IsNumeric(string[]) { for (new i = 0, j = strlen(string); i < j; i++) if (string[i] > '9' || string[i] < '0') return 0; return 1; }

public PurchaseCar(playerid, carid, price, slotid)
{
	new string[128];
	if(carid < 400 || carid > 611)
	{
		SendClientMessage(playerid, WHITE, "Valid car IDs start from 400, ending at 611.");
		return 1;
	}
	else
	{
		if(Player[playerid][Money] >= price)
		{
		    switch(slotid)
		    {
		        case 1:
		        {
				    if(Player[playerid][PlayerCarModel] > 0)
				    {
				        SendClientMessage(playerid, WHITE, "You already have a vehicle in slot 1, /abandoncar first.");
				    }
				    else
				    {
						Player[playerid][OwnedCarModSlot0] = 0;
						Player[playerid][OwnedCarModSlot1] = 0;
						Player[playerid][OwnedCarModSlot2] = 0;
						Player[playerid][OwnedCarModSlot3] = 0;
						Player[playerid][OwnedCarModSlot4] = 0;
						Player[playerid][OwnedCarModSlot5] = 0;
						Player[playerid][OwnedCarModSlot6] = 0;
						Player[playerid][OwnedCarModSlot7] = 0;
						Player[playerid][OwnedCarModSlot8] = 0;
						Player[playerid][OwnedCarModSlot9] = 0;
						Player[playerid][OwnedCarModSlot10] = 0;
						Player[playerid][OwnedCarModSlot11] = 0;
						Player[playerid][OwnedCarModSlot12] = 0;
						Player[playerid][OwnedCarModSlot13] = 0;

				        Player[playerid][Money] -= price;
				        Player[playerid][CarX] = OwnedCarSpawnX;
				        Player[playerid][CarY] = OwnedCarSpawnY;
				        Player[playerid][CarZ] = OwnedCarSpawnZ;
				        Player[playerid][PlayerCarModel] = carid;
						Player[playerid][CarHealth] = 1000.0;
						Player[playerid][CarFuel] = 35;
				        Player[playerid][CarCol1] = 0;
				        Player[playerid][CarCol2] = 0;
				        Player[playerid][Car1Mileage] = 0;
				        SpawnOwnedCar(playerid, 1);
				        SavePlayerData(playerid);
				    }
				}
				case 2:
				{
				    if(Player[playerid][PlayerCarModel2] > 0)
				    {
				        SendClientMessage(playerid, WHITE, "You already have a vehicle in slot 2, /abandoncar first.");
				    }
				    else
				    {
						Player[playerid][Car2OwnedCarModSlot0] = 0;
						Player[playerid][Car2OwnedCarModSlot1] = 0;
						Player[playerid][Car2OwnedCarModSlot2] = 0;
						Player[playerid][Car2OwnedCarModSlot3] = 0;
						Player[playerid][Car2OwnedCarModSlot4] = 0;
						Player[playerid][Car2OwnedCarModSlot5] = 0;
						Player[playerid][Car2OwnedCarModSlot6] = 0;
						Player[playerid][Car2OwnedCarModSlot7] = 0;
						Player[playerid][Car2OwnedCarModSlot8] = 0;
						Player[playerid][Car2OwnedCarModSlot9] = 0;
						Player[playerid][Car2OwnedCarModSlot10] = 0;
						Player[playerid][Car2OwnedCarModSlot11] = 0;
						Player[playerid][Car2OwnedCarModSlot12] = 0;
						Player[playerid][Car2OwnedCarModSlot13] = 0;

				        Player[playerid][Money] -= price;
				        Player[playerid][Car2X] = OwnedCarSpawnX;
				        Player[playerid][Car2Y] = OwnedCarSpawnY;
				        Player[playerid][Car2Z] = OwnedCarSpawnZ;
				        Player[playerid][PlayerCarModel2] = carid;
				        Player[playerid][Car2Health] = 1000.0;
						Player[playerid][Car2Fuel] = 35;
				        Player[playerid][Car2Col1] = 0;
				        Player[playerid][Car2Col2] = 0;
				        Player[playerid][Car2Mileage] = 0;
				        SpawnOwnedCar(playerid, 2);
				        SavePlayerData(playerid);
				    }
				}
				case 3:
				{
				    if(Player[playerid][PlayerCarModel3] > 0)
				    {
				        SendClientMessage(playerid, WHITE, "You already have a vehicle in slot 3, /abandoncar first.");
				    }
				    else
				    {
						Player[playerid][Car3OwnedCarModSlot0] = 0;
						Player[playerid][Car3OwnedCarModSlot1] = 0;
						Player[playerid][Car3OwnedCarModSlot2] = 0;
						Player[playerid][Car3OwnedCarModSlot3] = 0;
						Player[playerid][Car3OwnedCarModSlot4] = 0;
						Player[playerid][Car3OwnedCarModSlot5] = 0;
						Player[playerid][Car3OwnedCarModSlot6] = 0;
						Player[playerid][Car3OwnedCarModSlot7] = 0;
						Player[playerid][Car3OwnedCarModSlot8] = 0;
						Player[playerid][Car3OwnedCarModSlot9] = 0;
						Player[playerid][Car3OwnedCarModSlot10] = 0;
						Player[playerid][Car3OwnedCarModSlot11] = 0;
						Player[playerid][Car3OwnedCarModSlot12] = 0;
						Player[playerid][Car3OwnedCarModSlot13] = 0;

				        Player[playerid][Money] -= price;
				        Player[playerid][Car3X] = OwnedCarSpawnX;
				        Player[playerid][Car3Y] = OwnedCarSpawnY;
				        Player[playerid][Car3Z] = OwnedCarSpawnZ;
				        Player[playerid][PlayerCarModel3] = carid;
				        Player[playerid][Car3Health] = 1000.0;
						Player[playerid][Car3Fuel] = 35;
				        Player[playerid][Car3Col1] = 0;
				        Player[playerid][Car3Col2] = 0;
				        Player[playerid][Car3Mileage] = 0;
				        SpawnOwnedCar(playerid, 3);
				        SavePlayerData(playerid);
				    }
				}
		    }
		}
		else
		{
		    format(string, sizeof(string), "You must have $%d to purchase this vehicle.", price);
		    SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

public IsPlayerInInvalidNosVehicle(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
	new carmodel = GetVehicleModel(carid);
	for (new i = 0; i < sizeof(UnmodifiableVehicles); i++)
	{
	    if(carmodel == UnmodifiableVehicles[i]) return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(model == 548 || model == 511 || model == 553 || model == 519 || model == 469 || model == 447 || model == 563 || model == 497 || model == 488 || model == 487 || model == 417 || model == 425 || model == 548 || model == 577 || model == 573 || model == 592 || model == 525 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(Player[playerid][CarLinkID] == vehicleid)
	{
	    Player[playerid][CarCol1] = color1;
	    Player[playerid][CarCol2] = color2;
	}

	if(Player[playerid][Car2LinkID] == vehicleid)
	{
	    Player[playerid][Car2Col1] = color1;
	    Player[playerid][Car2Col2] = color2;
	}

	if(Player[playerid][Car3LinkID] == vehicleid)
	{
	    Player[playerid][Car3Col1] = color1;
	    Player[playerid][Car3Col2] = color2;
	}
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
	    if(Faction[i][fLinkID1] == vehicleid)
	    {
			Faction[i][fCarCol1] = color1;
			Faction[i][fCarCol2] = color2;
	        break;
	    }
	    if(Faction[i][fLinkID2] == vehicleid)
	    {
            Faction[i][fCar2Col1] = color1;
			Faction[i][fCar2Col2] = color2;
	        break;
	    }
	    if(Faction[i][fLinkID3] == vehicleid)
	    {
            Faction[i][fCar3Col1] = color1;
			Faction[i][fCar3Col2] = color2;
	        break;
	    }
	    if(Faction[i][fLinkID4] == vehicleid)
	    {
            Faction[i][fCar4Col1] = color1;
			Faction[i][fCar4Col2] = color2;
	        break;
	    }
	    if(Faction[i][fLinkID5] == vehicleid)
	    {
            Faction[i][fCar5Col1] = color1;
			Faction[i][fCar5Col2] = color2;
	        break;
	    }
	}
	return 1;
}

stock IsVehicleConnected(vehicleid) //By Sacky (edited by Gabriel "Larcius" Cordes)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return 0;
	}
	return 1;
}

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

stock Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToVehicle(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if (IsPlayerConnected(playerid) && IsVehicleConnected(vehicleid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

stock GetClosestVehicle(playerid)
{
	if(IsPlayerConnected(playerid) && IsVehicleConnected(0))
	{
		new closestvehicle=0;
		new Float:closestdist=GetDistanceToVehicle(playerid,0);
		for(new vehicleid=0; vehicleid<MAX_VEHICLES; vehicleid++)
		{
			new Float:dist = GetDistanceToVehicle(playerid,vehicleid);
			if ((dist < closestdist))
			{
				closestdist = dist;
				closestvehicle = vehicleid;
			}
		}
		return closestvehicle;
	}
	return -1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(Player[playerid][ModShop] == 1)
	{
		if(Player[playerid][CarLinkID] == vehicleid || Player[playerid][Car2LinkID] == vehicleid || Player[playerid][Car3LinkID] == vehicleid)
		{
		    GetOwnedCarMods(playerid);
		}
	}
	return 1;
}

public SendToAdmins(colour, string[], requireduty)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	  	if(IsPlayerConnectedEx(i))
	  	{
	  	    if(Player[i][AdminLevel] >= 4)
	  	    {
	  	        if(requireduty == 1 && Player[i][AFKStat] == 0)
	  	        {
	  	        	SendClientMessage(i, colour, string);
	  	        }
	  	        else if(requireduty == 0)
	  	        {
	  	            SendClientMessage(i, colour, string);
	  	        }
		   	}
		}
	}
	return 1;
}

public SendToPD(colour, string[], requireduty)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	  	if(IsPlayerConnectedEx(i))
	  	{
	  	    if(Player[i][Group] == 1)
	  	    {
	  	        if(requireduty == 1 && Player[i][CopDuty] == 1)
	  	        {
	  	        	SendClientMessage(i, colour, string);
	  	        }
	  	        else if(requireduty == 0)
	  	        {
	  	            SendClientMessage(i, colour, string);
	  	        }
		   	}
		}
	}
	return 1;
}

stock RangeBan(playerid)
{
	new string[128];
    if(!IsPlayerConnected(playerid))  return 0;
    new total[32],ip[32];
    GetPlayerIp(playerid, ip, sizeof(ip));
    new cnt;
    for(new i=0;i<strlen(ip);i++)
    {
        if(ip[i] == '.') cnt++;
        if(cnt == 2)
        {
            i++;
            strdel(ip, i, strlen(ip));
            format(total,sizeof(total),"%s*.*",ip);
        }
    }
    format(string, sizeof(string),"banip %s",total);
    SendRconCommand(string);
    return 1;
}

stock GetClosestPlayer(playerid)
{
    new Float:cdist, targetid = -1;
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && playerid != i && (targetid < 0 || cdist > GetDistanceBetweenPlayers(playerid, i)))
        {
            targetid = i;
            cdist = GetDistanceBetweenPlayers(playerid, i);
        }
    }
    return targetid;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

stock Reset(playerid)
{
    Player[playerid][TruckerReload] = 0;
   	Player[playerid][LoadTruck] = 0;
	Player[playerid][OnTruckerRun] = 0;
	Player[playerid][OnTruckerRun1] = 0;
	Player[playerid][OnTruckerRun2] = 0;
 	Player[playerid][CancelRun] = 0;
	Player[playerid][LoadTruck] = 0;
	Player[playerid][OnTruckerRun] = 0;
	Player[playerid][OnTruckerRun1] = 0;
	Player[playerid][OnTruckerRun2] = 0;
	Player[playerid][CancelRun] = 0;
	Player[playerid][House] = 0;
	Player[playerid][HouseReg] = 0;
    Player[playerid][Harvesting] = 0;
    Player[playerid][PendingHandshake] = -1;
	Player[playerid][PendingHandshakeStyle] = 0;
	Player[playerid][PMsEnabled] = 1;
	Player[playerid][Gagged] = 0;
	Player[playerid][Gender] = 0;
	Player[playerid][Race] = 0;
	Player[playerid][SpeedHacksWarn] = 0;
	Player[playerid][CarBeingCarried] = 0;
	Player[playerid][ReportBanStatus] = 0;
	Player[playerid][CarPriceBeingCarried] = 0;
	Player[playerid][Authenticated] = 0;
	Player[playerid][PendingBETAInvite] = 0;
	Player[playerid][ServerTut] = 0;
	Player[playerid][CheckBalance] = 0;
	Player[playerid][Speedo] = 1;
	Player[playerid][CarPaintJobID] = 0;
	Player[playerid][TearGasEffect] = 0;
	Player[playerid][ToggedRadio] = 0;
	Player[playerid][LockedCar2] = 0;
	Player[playerid][LockedCar3] = 0;
	Player[playerid][IsInAnimation] = 0;
	Player[playerid][InterviewPowers] = 0;
	Player[playerid][SniperRecoilEffect] = 0;
	Player[playerid][AttendingBackupCall] = -1;
	Player[playerid][AnsweredQuizQuestions] = 0;
	Player[playerid][oMuted] = 0;
	Player[playerid][nMuted] = 0;
	Player[playerid][RPTutStep] = 0;
	Player[playerid][AdminSkin] = 0;
	Player[playerid][AchievementRank] = 0;
	Player[playerid][ActiveReport] = 0;
    Player[playerid][MeActions] = 0;
	Player[playerid][AdsPlaced] = 0;
	Player[playerid][MatrunsExecuted] = 0;
	Player[playerid][ReportingPlayer] = -1;
	Player[playerid][SpeedHackWarnTime] = 0;
	Player[playerid][IsHacker] = 0;
	Player[playerid][AnticheatWarns] = 0;
	Player[playerid][ACWarnTime] = 0;
	Player[playerid][BeingSpyedOnBy] = -1;
	Player[playerid][Cuffed] = 0;
	Player[playerid][WeaponRefund] = 0;
	Player[playerid][Tazed] = 0;
	Player[playerid][HasJetpack] = 0;
	Player[playerid][LawyerReloadTime] = 0;
	format(Player[playerid][Note], 128, "Nothing");
	Player[playerid][GuardOffer] = -1;
	Player[playerid][PortableRadio] = 0;
    Player[playerid][CarHealth] = 0;
	Player[playerid][Car2Health] = 0;
	Player[playerid][Car3Health] = 0;
	Player[playerid][CarFuel] = 0;
	Player[playerid][Car2Fuel] = 0;
	Player[playerid][Car3Fuel] = 0;
	Player[playerid][CarLinkID] = 0;
	Player[playerid][Car2LinkID] = 0;
	Player[playerid][Car3LinkID] = 0;
	Player[playerid][PlayerCarModel2] = 0;
	Player[playerid][PlayerCarModel3] = 0;
	format(Player[playerid][Accent], 128, "American");
	Player[playerid][RequestingBackup] = 0;
	Player[playerid][PreLoadedAnims] = 0;
 	Player[playerid][PendingCarReceival] = -1;
 	Player[playerid][PendingCarPrice] = 0;
 	Player[playerid][CarSeller] = -1;
	Player[playerid][Rope] = 0;
	GetPlayerName(playerid, Player[playerid][NormalName], 255);
	format(Player[playerid][AdminName], 255, "Nothing");
	Player[playerid][BeingDraggedBy] = -1;
	Player[playerid][PINUnauthedTime] = 0;
	Player[playerid][FindingHouse] = 0;
	Player[playerid][PendingProposal] = -1;
	Player[playerid][LockedCar] = 0;
	Player[playerid][SupplyT] = 0;
	Player[playerid][OnPhoneTime] = 0;
    Player[playerid][ToggedQUIZ] = 0;
	Player[playerid][PINAuth] = 0;
	Player[playerid][ToggedVIP] = 0;
	Player[playerid][ToggedTester] = 0;
	Player[playerid][Blindfolded] = 0;
	Player[playerid][LastKiller] = -1;
	Player[playerid][Job] = 0;
	Player[playerid][AFKStat] = 0;
	Player[playerid][AdminPIN] = 0;
	Player[playerid][GivingSlot] = 0;
	Player[playerid][PlayerSkinSlot1] = 0;
	Player[playerid][OwnedCarModSlot0] = 0;
	Player[playerid][OwnedCarModSlot1] = 0;
	Player[playerid][OwnedCarModSlot2] = 0;
	Player[playerid][OwnedCarModSlot3] = 0;
	Player[playerid][OwnedCarModSlot4] = 0;
	Player[playerid][OwnedCarModSlot5] = 0;
	Player[playerid][OwnedCarModSlot6] = 0;
	Player[playerid][OwnedCarModSlot7] = 0;
	Player[playerid][OwnedCarModSlot8] = 0;
	Player[playerid][OwnedCarModSlot9] = 0;
	Player[playerid][OwnedCarModSlot10] = 0;
	Player[playerid][OwnedCarModSlot11] = 0;
	Player[playerid][OwnedCarModSlot12] = 0;
	Player[playerid][OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot2] = 0;
	Player[playerid][Car2OwnedCarModSlot3] = 0;
	Player[playerid][Car2OwnedCarModSlot4] = 0;
	Player[playerid][Car2OwnedCarModSlot5] = 0;
	Player[playerid][Car2OwnedCarModSlot6] = 0;
	Player[playerid][Car2OwnedCarModSlot7] = 0;
	Player[playerid][Car2OwnedCarModSlot8] = 0;
	Player[playerid][Car2OwnedCarModSlot9] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot2] = 0;
	Player[playerid][Car3OwnedCarModSlot3] = 0;
	Player[playerid][Car3OwnedCarModSlot4] = 0;
	Player[playerid][Car3OwnedCarModSlot5] = 0;
	Player[playerid][Car3OwnedCarModSlot6] = 0;
	Player[playerid][Car3OwnedCarModSlot7] = 0;
	Player[playerid][Car3OwnedCarModSlot8] = 0;
	Player[playerid][Car3OwnedCarModSlot9] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car2ZAngle] = 0;
	Player[playerid][Car3ZAngle] = 0;
	Player[playerid][Car2PaintJobID] = 0;
	Player[playerid][Car3PaintJobID] = 0;
	Player[playerid][Car2Col1] = 0;
	Player[playerid][Car2Col2] = 0;
	Player[playerid][Car3Col1] = 0;
	Player[playerid][Car3Col2] = 0;
	Player[playerid][StonedEffect] = 0;
	Player[playerid][PlayerSkinSlot3] = 0;
	Player[playerid][ToggedRAGE] = 0;
	Player[playerid][BankStatus] = 0;
	Player[playerid][PendingDivorce] = -1;
	Player[playerid][FightBox] = 0;
	Player[playerid][WalkieFrequency] = 0;
	Player[playerid][WalkieTalkie] = 0;
	Player[playerid][VipRank] = 0;
	Player[playerid][BeforeAdminVipRank] = 0;
	Player[playerid][FightKungfu] = 0;
	Player[playerid][FightKneehead] = 0;
	Player[playerid][FightGrabkick] = 0;
	Player[playerid][ToggedOOC] = 0;
	Player[playerid][FightElbow] = 0;
	Player[playerid][HasRadio] = 0;
	Player[playerid][ResetTimer] = 0;
	Player[playerid][CollegeMedia] = 0;
	Player[playerid][CollegeLaw] = 0;
	Player[playerid][CollegeEng] = 0;
	format(Player[playerid][MarriedTo], 255, "Nobody");
	Player[playerid][CollegeMath] = 0;
	Player[playerid][CollegeChem] = 0;
	Player[playerid][SpotlightEffect] = 0;
	Player[playerid][Rags] = 0;
	Player[playerid][IsAtEvent] = 0;
	Player[playerid][Tied] = 0;
	Player[playerid][SuccessfulHits] = 0;
	Player[playerid][ToggledRadio] = 0;
	Player[playerid][FailedHits] = 0;
	Player[playerid][TiedTime] = 0;
	Player[playerid][GuardPrice] = 0;
	Player[playerid][AdminDuty] = 0;
	Player[playerid][Guarding] = 0;
	Player[playerid][Detecting] = 0;
	Player[playerid][MedicDuty] = 0;
	Player[playerid][DetectiveCooldown] = 0;
	Player[playerid][Tazed] = 0;
	Player[playerid][Map] = 0;
	Player[playerid][CarModDelay] = 0;
	Player[playerid][PlayerCarModel] = 0;
	Player[playerid][HasSprayCans] = 0;
	Player[playerid][FindingCar] = 0;
	Player[playerid][HealPrice] = 0;
	Player[playerid][TicketPrice] = 0;
	Player[playerid][Ticketing] = -1;
	Player[playerid][BeingTicketed] = -1;
	Player[playerid][LockedCar] = 0;
	Player[playerid][CollectedFish] = 0;
	Player[playerid][PhoneStat] = 1;
	Player[playerid][FishAttempts] = 0;
	Player[playerid][CantFish] = 0;
	Player[playerid][NineOneOneStep] = 0;
	Player[playerid][AttemptingToHeal] = -1;
	Player[playerid][AdminLevel] = 0;
	Player[playerid][Calling] = -1;
	Player[playerid][InCall] = 0;
	Player[playerid][LastX] = 0.00;
 	Player[playerid][InBusiness] = 0;
 	Player[playerid][CellphoneConsole] = -1;
 	Player[playerid][InHouse] = 0;
 	Player[playerid][CollectedFish] = 1;
 	Player[playerid][InGroupHQ] = 0;
	Player[playerid][InabilityToMatrun] = 0;
	Player[playerid][InabilityToDropCar] = 0;
	Player[playerid][InabilityTrash] = 0;
	Player[playerid][HospitalTime] = 0;
	Player[playerid][MatrunInabilityDuration] = 0;
	Player[playerid][PlayingHours] = 0;
	Player[playerid][CompleteRun] = 0;
	Player[playerid][LoginAttempts] = 0;
	Player[playerid][LastY] = 0.00;
	Player[playerid][CanUseNewbie] = 1;
	Player[playerid][InBusiness] = 0;
	Player[playerid][Business] = 0;
	Player[playerid][AdminActions] = 0;
	Player[playerid][PhoneN] = -1;
	Player[playerid][BankMoney] = 0;
	Player[playerid][Materials] = 0;
	Player[playerid][PlayerHunger] = 100;
	Player[playerid][HouseKey] = -1;
	Player[playerid][HouseKeyID] = -1;
	Player[playerid][CreditCard] = 0;
	Player[playerid][LoanedAmount] = 0;
	Player[playerid][MedicDuty] = 0;
	Player[playerid][TrashCP] = 0;
	Player[playerid][TrashCoolDown] = 0;
	Player[playerid][TrashRoute] = 0;
	Player[playerid][NosBottle] = 0;
	Player[playerid][EngineUpgrade] = 0;
	Player[playerid][Turbo] = 0;
	Player[playerid][v1ENGINE] = 0;
	Player[playerid][v2ENGINE] = 0;
	Player[playerid][v3ENGINE] = 0;
	Player[playerid][V1TURBO] = 0;
	Player[playerid][v2TURBO] = 0;
	Player[playerid][v3TURBO] = 0;
	Player[playerid][GasCan] = 0;
	Player[playerid][v1NOS] = 0;
	Player[playerid][v2NOS] = 0;
	Player[playerid][v3NOS] = 0;
	Player[playerid][v1NOSFUEL] = 0;
	Player[playerid][v2NOSFUEL] = 0;
	Player[playerid][v3NOSFUEL] = 0;
	Player[playerid][ToyBan] = 0;
	Player[playerid][Toy1ID] = 0;
	Player[playerid][Toy1XO] = 0;
	Player[playerid][Toy1YO] = 0;
	Player[playerid][Toy1ZO] = 0;
	Player[playerid][Toy1XR] = 0;
	Player[playerid][Toy1YR] = 0;
	Player[playerid][Toy1ZR] = 0;
	Player[playerid][Toy1XR] = 0;
	Player[playerid][Toy1YR] = 0;
	Player[playerid][Toy1ZR] = 0;
	Player[playerid][Toy2ID] = 0;
	Player[playerid][Toy2XO] = 0;
	Player[playerid][Toy2YO] = 0;
	Player[playerid][Toy2ZO] = 0;
	Player[playerid][Toy2XR] = 0;
	Player[playerid][Toy2YR] = 0;
	Player[playerid][Toy2ZR] = 0;
	Player[playerid][Toy2XR] = 0;
	Player[playerid][Toy2YR] = 0;
	Player[playerid][Toy2ZR] = 0;
	Player[playerid][Toy3ID] = 0;
	Player[playerid][Toy3XO] = 0;
	Player[playerid][Toy3YO] = 0;
	Player[playerid][Toy3ZO] = 0;
	Player[playerid][Toy3XR] = 0;
	Player[playerid][Toy3YR] = 0;
	Player[playerid][Toy3ZR] = 0;
	Player[playerid][Toy3XR] = 0;
	Player[playerid][Toy3YR] = 0;
	Player[playerid][Toy3ZR] = 0;
	Player[playerid][BadgeNumber] = 0;
	Player[playerid][GCPID] = 501;
	Player[playerid][IsSpeccing] = 0;
	Player[playerid][NMute] = 0;
	Player[playerid][VIPTokens] = 0;
	Player[playerid][MaterialPackages] = 0;
	Player[playerid][Checkpoint] = 0;
	Player[playerid][AdminDuty] = 0;
	Player[playerid][Gender] = 0;
	Player[playerid][Race] = 0;
	Player[playerid][PrisonID] = 0;
	Player[playerid][PrisonDuration] = 0;
	Player[playerid][Tutorial] = 0;
	Player[playerid][Muted] = 0;
	Player[playerid][PendingInvite] = 0;
	Player[playerid][CrackEffect] = 0;
	Player[playerid][KnifeCount] = 0;
	Spectator[playerid][SpecSpectatingPlayer] = -1;
	Player[playerid][ContractPrice] = 0;
	format(Player[playerid][Contract], 255, "None");
	Player[playerid][BaseballBatCount] = 0;
	Player[playerid][LastZ] = 0.00;
	Player[playerid][CarY] = 0.00;
	Player[playerid][CarX] = 0.00;
	Player[playerid][CarZ] = 0.00;
	Player[playerid][PlayerCarModel] = 0;
	Player[playerid][CarZAngle] = 0;
	Player[playerid][CarCol1] = 0;
	Player[playerid][CarCol2] = 0;
	Player[playerid][GotInCopCar] = 0;
	Player[playerid][LastWorld] = 0;
	Player[playerid][ModShop] = 0;
	Player[playerid][SpamCount] = 0;
	Player[playerid][LastInterior] = 0;
	Player[playerid][Group] = 0;
	Player[playerid][GroupRank] = 0;
	Player[playerid][Banned] = 0;
	Player[playerid][Money] = 0;
	UnconfirmedSave[playerid] = 0;
	ResetPlayerWeaponsEx(playerid);
	Player[playerid][LastSkin] = 1;
	Player[playerid][LastHealth] = 100.00;
	Player[playerid][LastArmour] = 0.00;
	format(Player[playerid][Warning1], 255, "None");
	format(Player[playerid][Warning2], 255, "None");
	format(Player[playerid][Warning3], 255, "None");
	format(Player[playerid][AdminName], 255, "None");
	Player[playerid][Identity] = 0;
	Player[playerid][License] = 0;
	Player[playerid][BeingAssasinated] = -1;
	Player[playerid][PlayerToAssasinate] = -1;
	Player[playerid][AssigningHitTo] = -1;
	Player[playerid][Age] = 0;
	Player[playerid][CriminalOffences] = 0;
	GetPlayerIp(playerid, Player[playerid][LastIP], 21);
	ClearCriminalRecord(playerid);
	Player[playerid][Calling] = -1;
	Player[playerid][InCall] = 0;
	Player[playerid][BeingCalled] = -1;
	Player[playerid][Tester] = 0;
	Player[playerid][Cocaine] = 0;
	Player[playerid][Pot] = 0;
	Player[playerid][CallConnectingTime] = -1;
	return 1;
}

stock GetDistanceBetweenPlayers(playerid, playerid2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:dis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	dis = floatsqroot((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1));
	return floatround(dis);
}

stock IsInvalidSkin(skin)
{
    #define	MAX_BAD_SKINS   14
    new badSkins[MAX_BAD_SKINS] =
    {

    };

    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skin == badSkins[i] || skin < 0 || skin >= 300) return true;
    }

    return false;
}

stock GetRPName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }
    return name;
}

stock SaveVehicleHealth(playerid)
{
	new Car1ID = Player[playerid][CarLinkID];
	new Float:Car1HP = Player[playerid][CarHealth];
	new Car2ID = Player[playerid][Car2LinkID];
	new Float:Car2HP = Player[playerid][Car2Health];
	new Car3ID = Player[playerid][Car3LinkID];
	new Float:Car3HP = Player[playerid][Car3Health];

	GetVehicleHealth(Car1ID, Car1HP);
	GetVehicleHealth(Car2ID, Car2HP);
	GetVehicleHealth(Car3ID, Car3HP);

  	Player[playerid][CarHealth] = Car1HP;
	Player[playerid][Car2Health] = Car2HP;
	Player[playerid][Car3Health] = Car3HP;
}

stock LoadVehicleFuel(playerid)
{
	new vFuelAmount1,
		vID1;

    new vFuelAmount2,
		vID2;

    new vFuelAmount3,
		vID3;

	vID1 = Player[playerid][CarLinkID];
	vFuelAmount1 = Player[playerid][CarFuel];
	fuel[vID1] = vFuelAmount1;

	vID2 = Player[playerid][Car2LinkID];
	vFuelAmount2 = Player[playerid][Car2Fuel];
	fuel[vID2] = vFuelAmount2;

	vID3 = Player[playerid][Car3LinkID];
	vFuelAmount3 = Player[playerid][Car3Fuel];
	fuel[vID3] = vFuelAmount3;
}

stock SaveVehicleFuel(playerid)
{
	new vID1 = Player[playerid][CarLinkID];
	new vID2 = Player[playerid][Car2LinkID];
	new vID3 = Player[playerid][Car3LinkID];

	if(vID1 > 0)
	{
	    Player[playerid][CarFuel] = fuel[vID1];
	}
	if(vID2 > 0)
	{
	    Player[playerid][Car2Fuel] = fuel[vID2];
	}
	if(vID3 > 0)
	{
	    Player[playerid][Car3Fuel] = fuel[vID3];
	}
}

stock MatrixTransformVector(Float:vector[3], Float:m[4][4], &Float:resx, &Float:resy, &Float:resz)
{
        resz = vector[2] * m[0][0] + vector[1] * m[0][1] + vector[0] * m[0][2] + m[0][3];
        resy = vector[2] * m[1][0] + vector[1] * m[1][1] + vector[0] * m[1][2] + m[1][3];
        resx = -(vector[2] * m[2][0] + vector[1] * m[2][1] + vector[0] * m[2][2] + m[2][3]);
}
stock RotatePointVehicleRotation(vehid, Float:Invector[3], &Float:resx, &Float:resy, &Float:resz, worldspace=0)
{
    new Float:Quaternion[4];
    new Float:transformationmatrix[4][4];

    GetVehicleRotationQuat(vehid, Quaternion[0], Quaternion[1], Quaternion[2], Quaternion[3]);

    new Float:xx = Quaternion[0] * Quaternion[0];
    new Float:xy = Quaternion[0] * Quaternion[1];
    new Float:xz = Quaternion[0] * Quaternion[2];
    new Float:xw = Quaternion[0] * Quaternion[3];
    new Float:yy = Quaternion[1] * Quaternion[1];
    new Float:yz = Quaternion[1] * Quaternion[2];
    new Float:yw = Quaternion[1] * Quaternion[3];
    new Float:zz = Quaternion[2] * Quaternion[2];
    new Float:zw = Quaternion[2] * Quaternion[3];

    transformationmatrix[0][0] = 1 - 2 * ( yy + zz );
    transformationmatrix[0][1] =     2 * ( xy - zw );
    transformationmatrix[0][2] =     2 * ( xz + yw );
    transformationmatrix[0][3] = 0.0;

    transformationmatrix[1][0] =     2 * ( xy + zw );
    transformationmatrix[1][1] = 1 - 2 * ( xx + zz );
    transformationmatrix[1][2] =     2 * ( yz - xw );
    transformationmatrix[1][3] = 0.0;

    transformationmatrix[2][0] =     2 * ( xz - yw );
    transformationmatrix[2][1] =     2 * ( yz + xw );
    transformationmatrix[2][2] = 1 - 2 * ( xx + yy );
    transformationmatrix[2][3] = 0;

    transformationmatrix[3][0] = 0;
    transformationmatrix[3][1] = 0;
    transformationmatrix[3][2] = 0;
    transformationmatrix[3][3] = 1;
    MatrixTransformVector(Invector, transformationmatrix, resx, resy, resz);
    if (worldspace == 1)
	{
        new Float:fX, Float:fY, Float:fZ;
        GetVehiclePos(vehid, fX, fY, fZ);
        resx += fX;
        resy += fY;
        resz += fZ;
    }
}

stock RandomFuel()
{
	// removed
}

stock RefuelSystemGC(playerid)
{
	if(Player[playerid][GasCan] == 2)
	{
	    SendClientMessage(playerid, GREY, "Your gascan is already full.");
	}

	if(Player[playerid][GasCan] == 0)
	{
	    SendClientMessage(playerid, GREY, "You need to buy a Gas Can before refueling it.");
	}

	if(Player[playerid][GasCan] == 1)
	{
		new FuelPrice2 = dini_Int("Assets.ini", "FuelPrice");
		new TotalPay = FuelPrice2*25;
		new string[255];

		if(Player[playerid][Money] >= TotalPay)
	    {
			Player[playerid][Money] -= 75;
			Player[playerid][GasCan] = 2;
			format(string, sizeof(string), "* %s has refilled their Gas Can.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
	    }

		if(Player[playerid][Money] < TotalPay)
	    {
			format(string, sizeof(string), "You need %d to refuel your gascan", FuelPrice2);
			SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

/*
new engine, lights, alarm, doors, bonnet, boot, objective;
    new vid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == VEHICLE_PARAMS_OFF)
*/
stock RefuelSystem(playerid)
{
	new vID,
	    vFuel,
	    FuelAmount,
	    TotalFuelPrice,
		PlayerState;

	vID = GetPlayerVehicleID(playerid);
	vFuel = fuel[vID];
	FuelAmount = 100-vFuel;
	FuelPrice = dini_Int("Assets.ini", "FuelPrice");
	TotalFuelPrice = FuelAmount*FuelPrice;
	new engine, lights, alarm, doors, bonnet, boot, objective;
    new vid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == VEHICLE_PARAMS_OFF)
	{
		if(Player[playerid][Money] >= TotalFuelPrice)
		{
			if (PlayerState != PLAYER_STATE_DRIVER)
			{
				SetCameraBehindPlayer(playerid);
			    TogglePlayerControllable(playerid, 0);
				isrefuelling[playerid] = 1;
				SetTimerEx("timer_refuel", 4500, false, "i", playerid);

				new string[128];
			    format(string, sizeof(string), "* %s has started refuelling their vehicle. ($%d)", GetName(playerid), TotalFuelPrice);
				NearByMessage(playerid, RPCOLOUR, string);
				Player[playerid][Money] -= TotalFuelPrice;

				fuel[vID] = vFuel+FuelAmount;

				SetProgressBarValue(Fuel[playerid], 100);
				UpdateProgressBar(Fuel[playerid], playerid);

				if(Player[playerid][CopDuty] == 1 && Player[playerid][Group] == 1)
				{
					new str3[128];
					format(str3, sizeof(str3), "The RCSD has paid for your fuel. ($%d)", TotalFuelPrice);
					SendClientMessage(playerid, GREY, str3);
					Player[playerid][Money] += TotalFuelPrice;
					Groups[1][SafeMoney] -= TotalFuelPrice;
				}
				if(Player[playerid][Group] == 4)
				{
		            if(GetVehicleModel(vID) == 490 || GetVehicleModel(vID) == 407)
		            {
						new str3[128];
						format(str3, sizeof(str3), "The LSFD has paid for your fuel. ($%d)", TotalFuelPrice);
						SendClientMessage(playerid, GREY, str3);
						Player[playerid][Money] += TotalFuelPrice;
						Groups[4][SafeMoney] -= TotalFuelPrice;
					}
				}
			}
		 }
	    else
		{
		 	new str2[128];
			format(str2, sizeof(str2), "You need %d to fully refill your vehicle.", TotalFuelPrice);
			SendClientMessage(playerid, WHITE, str2);
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "Turn off your engine to refuel your vehicle");
	}
	return 1;
}

stock GetName(playerid)
{
    new Name[MAX_PLAYER_NAME];

    if(IsPlayerConnected(playerid))
    {
		GetPlayerName(playerid, Name, sizeof(Name));
	}
	else
	{
	    Name = "Disconnected/Nothing";
	}

	return Name;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				setarg(paramPos, 0, _:floatstr(string[stringPos]));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos))  == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach(Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

public NearByMessageEx(playerid, color, string[], Float: range)
{
	new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i) && IsPlayerSpawned(i))
	   	{
	   		GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
	   		if(IsPlayerInRangeOfPoint(i, range, PlayerX, PlayerY, PlayerZ))
	   		{
			    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	    	    {
	    			SendClientMessage(i, color, string);
	    		}
	    	}
		}
	}
}

public SavePlayerData(playerid)
{
	if(Player[playerid][Authenticated] == 1)
	{
	    new pName[48];
	    format(pName, sizeof(pName), "%s", Player[playerid][NormalName]);
		GetPlayerHealth(playerid, Player[playerid][LastHealth]);
		GetPlayerArmour(playerid, Player[playerid][LastArmour]);
		Player[playerid][Car1VW] = GetVehicleVirtualWorld(Player[playerid][CarLinkID]);
		Player[playerid][Car2VW] = GetVehicleVirtualWorld(Player[playerid][Car2LinkID]);
		Player[playerid][Car3VW] = GetVehicleVirtualWorld(Player[playerid][Car3LinkID]);
		Player[playerid][LastInterior] = GetPlayerInterior(playerid);
		
        GetOwnedCarMods(playerid);
		new vID1 = Player[playerid][CarLinkID];
		new vID2 = Player[playerid][Car2LinkID];
		new vID3 = Player[playerid][Car3LinkID];

		GetVehiclePos(vID1, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
		GetVehiclePos(vID2, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
		GetVehiclePos(vID3, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
		GetVehicleZAngle(vID1, Player[playerid][CarZAngle]);
		GetVehicleZAngle(vID2, Player[playerid][Car2ZAngle]);
		GetVehicleZAngle(vID3, Player[playerid][Car3ZAngle]);

		if(vID1 > 0)
		{
		    Player[playerid][CarFuel] = fuel[vID1];
		}
		if(vID2 > 0)
		{
		    Player[playerid][Car2Fuel] = fuel[vID2];
		}
		if(vID3 > 0)
		{
		    Player[playerid][Car3Fuel] = fuel[vID3];
		}

		new Car1ID = Player[playerid][CarLinkID];
		new Float:Car1HP = Player[playerid][CarHealth];
		new Car2ID = Player[playerid][Car2LinkID];
		new Float:Car2HP = Player[playerid][Car2Health];
		new Car3ID = Player[playerid][Car3LinkID];
		new Float:Car3HP = Player[playerid][Car3Health];

		GetVehicleHealth(Car1ID, Car1HP);
		GetVehicleHealth(Car2ID, Car2HP);
		GetVehicleHealth(Car3ID, Car3HP);

		Player[playerid][CarHealth] = Car1HP;
		Player[playerid][Car2Health] = Car2HP;
		Player[playerid][Car3Health] = Car3HP;

		GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);

		// MySQL
		/*new query[1024];
		mysql_format(mysql, query, sizeof(query), "UPDATE users SET AdminLevel=%d, MedicDuty=%d, LastX=%f, NineOneOneStep=%d, WeaponRefund=%d WHERE NormalName='%s'", Player[playerid][AdminLevel], Player[playerid][MedicDuty], Player[playerid][LastX], Player[playerid][NineOneOneStep], Player[playerid][WeaponRefund], pName);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE users SET LastY=%f, InterviewPowers=%d, FightBox=%d WHERE NormalName='%s'", Player[playerid][LastY], Player[playerid][InterviewPowers], Player[playerid][FightBox], pName);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE users SET LastZ=%f WHERE NormalName='%s'", Player[playerid][LastZ], pName);
		mysql_tquery(mysql, query, "", "");*/

		new query1[1024], query2[1024], query3[1024], query4[1024], query5[1024], query6[1024],
		query7[1024], query8[1024], query9[1024], query10[1024],
		query11[1024], query12[1024], query13[1024], query14[1024], query15[1024], query16[1024], query17[1024], query18[1024], query19[1024], query20[1024],
		query21[1024], query22[1024], query23[1024], query24[1024], query25[1024], query26[1024], query27[1024], query28[1024], query29[1024], query30[1024],
		query31[1024], query32[1024], query33[1024], query34[1024], query35[1024], query36[1024], query37[1024], query38[1024], query39[1024], query40[1024],
		query41[1024], query42[1024], query43[1024], query44[1024], query45[1024], query46[1024], query47[1024], query48[1024], query49[1024], query50[1024],
		query51[1024], query52[1024], query53[1024], query54[1024], query55[1024], query56[1024];

		mysql_format(mysql, query53, sizeof(query53), "UPDATE users SET Car1VW=%d, Car2VW=%d, Car3VW=%d, Car1Mileage=%d, Car2Mileage=%d, Car3Mileage=%d WHERE NormalName='%s'", Player[playerid][Car1VW], Player[playerid][Car2VW], Player[playerid][Car3VW],
		Player[playerid][Car1Mileage], Player[playerid][Car2Mileage], Player[playerid][Car3Mileage], pName);
		mysql_format(mysql, query52, sizeof(query52), "UPDATE users SET Tickets=%d, LicensePoints=%d, LastWorld=%d WHERE NormalName='%s'", Player[playerid][Tickets], Player[playerid][LicensePoints], GetPlayerVirtualWorld(playerid), pName);
		mysql_format(mysql, query47, sizeof(query47), "UPDATE users SET LastZ=%f, LastX=%f, LastY=%f, PlayerCarModel=%d, PlayerCarModel2=%d, PlayerCarModel3=%d WHERE NormalName='%s'", Player[playerid][LastZ], Player[playerid][LastX], Player[playerid][LastY],
		Player[playerid][PlayerCarModel], Player[playerid][PlayerCarModel2], Player[playerid][PlayerCarModel3], GetName(playerid));
		mysql_format(mysql, query46, sizeof(query46), "UPDATE users SET LastZ=%f, PlayerHunger=%d, Money=%d WHERE NormalName='%s'", Player[playerid][LastZ], Player[playerid][PlayerHunger], Player[playerid][Money], pName);
		mysql_format(mysql, query1, sizeof(query1), "UPDATE users SET AdminLevel=%d, MedicDuty=%d, LastX=%f, NineOneOneStep=%d, WeaponRefund=%d WHERE NormalName='%s'", Player[playerid][AdminLevel], Player[playerid][MedicDuty], Player[playerid][LastX], Player[playerid][NineOneOneStep], Player[playerid][WeaponRefund], pName);
		mysql_format(mysql, query2, sizeof(query2), "UPDATE users SET LastY=%f, InterviewPowers=%d, FightBox=%d WHERE NormalName='%s'", Player[playerid][LastY], Player[playerid][InterviewPowers], Player[playerid][FightBox], pName);
		mysql_format(mysql, query3, sizeof(query3), "UPDATE users SET FightKungfu=%d, FightKneehead=%d, FightGrabkick=%d, IsInAnimation=%d, FightElbow=%d, AnticheatWarns=%d WHERE NormalName='%s'", Player[playerid][FightKungfu], Player[playerid][FightKneehead], Player[playerid][FightGrabkick], Player[playerid][IsInAnimation],
		Player[playerid][FightElbow], pName);
		mysql_format(mysql, query50, sizeof(query50), "UPDATE users SET SavedMP3Link='%s' WHERE NormalName='%s'", Player[playerid][SavedMP3Link], pName);
		mysql_format(mysql, query4, sizeof(query4), "UPDATE users SET ResetTimer=%d, SpeedHacksWarn=%d, HasRadio=%d, LawyerReloadTime=%d, LockedCar=%d, LockedCar2=%d, LockedCar3=%d WHERE NormalName='%s'", Player[playerid][ResetTimer], Player[playerid][SpeedHacksWarn],
		Player[playerid][HasRadio], Player[playerid][LawyerReloadTime], Player[playerid][LockedCar], Player[playerid][LockedCar2], Player[playerid][LockedCar3], pName);
		mysql_format(mysql, query5, sizeof(query5), "UPDATE users SET Detecting=%d, HasMapApp=%d, RPTutStep=%d, AnsweredQuizQuestions=%d, HasRadioApp=%d, HasAdApp=%d, HasPagesApp=%d WHERE NormalName='%s'", Player[playerid][Detecting], Player[playerid][HasMapApp],
		Player[playerid][RPTutStep], Player[playerid][AnsweredQuizQuestions], Player[playerid][HasRadioApp], Player[playerid][HasAdApp], Player[playerid][HasPagesApp], pName);
		mysql_format(mysql, query6, sizeof(query6), "UPDATE users SET PendingProposal=%d, Harvesting=%d, PendingDivorce=%d, ToggledRadio=%d, DetectiveCooldown=%d, ACWarnTime=%d, BeforeAdminVipRank=%d WHERE NormalName='%s'", Player[playerid][PendingProposal],
		Player[playerid][Harvesting], Player[playerid][PendingDivorce], Player[playerid][ToggledRadio], Player[playerid][DetectiveCooldown], Player[playerid][ACWarnTime], Player[playerid][BeforeAdminVipRank], pName);
		mysql_format(mysql, query7, sizeof(query7), "UPDATE users SET CarBeingCarried=%d, CarPriceCarried=%d, TieTimer=%d, LastWorld=%d, CollegeMedia=%d, CollegeLaw=%d, CollegeEng=%d, CollegeMath=%d WHERE NormalName='%s'", Player[playerid][CarBeingCarried],
		Player[playerid][CarPriceCarried], Player[playerid][TieTimer], Player[playerid][LastWorld], Player[playerid][CollegeMedia], Player[playerid][CollegeLaw], Player[playerid][CollegeEng], Player[playerid][CollegeMath], pName);
		mysql_format(mysql, query8, sizeof(query8), "UPDATE users SET PhoneStat=%d, ServerTut=%d, WalkieTalkie=%d, WalkieFrequency=%d, LastInterior=%d, ToggedOOC=%d WHERE NormalName='%s'", Player[playerid][PhoneStat], Player[playerid][ServerTut], Player[playerid][WalkieTalkie], Player[playerid][WalkieFrequency], Player[playerid][LastInterior], Player[playerid][ToggedOOC], pName);
		mysql_format(mysql, query9, sizeof(query9), "UPDATE users SET Guarding=%d, GuardOffer=%d, GuardPrice=%d, FindingCar=%d, ActiveCrimeReport='%s', IsHacker=%d, LastSkin=%d, Rope=%d, Rags=%d WHERE NormalName='%s'", Player[playerid][Guarding],
		Player[playerid][GuardOffer], Player[playerid][GuardPrice], Player[playerid][FindingCar], Player[playerid][ActiveCrimeReport], Player[playerid][IsHacker], Player[playerid][LastSkin], Player[playerid][Rope], Player[playerid][Rags], pName);
		mysql_format(mysql, query10, sizeof(query10), "UPDATE users SET Tied=%d, SpeedHackWarnTime=%d, HasJetpack=%d, TiedTime=%d, LastHealth=%f, LastArmour=%f, LastLoginMinute=%d, LastLoginHour=%d, LastLoginDay=%d WHERE NormalName='%s'", Player[playerid][Tied],
		Player[playerid][SpeedHackWarnTime], Player[playerid][HasJetpack], Player[playerid][TiedTime], Player[playerid][LastHealth], Player[playerid][LastArmour], Player[playerid][LastLoginMinute], Player[playerid][LastLoginHour], Player[playerid][LastLoginDay], pName);
		mysql_format(mysql, query11, sizeof(query11), "UPDATE users SET LastLoginMonth=%d, PotEffect=%d, HouseInterior=%d, BusinessInterior=%d, HouseExterior=%d, PhoneN=%d, Map=%d, Calling=%d, InCall=%d WHERE NormalName='%s'", Player[playerid][LastLoginMonth],
		Player[playerid][PotEffect], Player[playerid][HouseInterior], Player[playerid][BusinessInterior], Player[playerid][HouseExterior], Player[playerid][PhoneN], Player[playerid][Map], Player[playerid][Calling], Player[playerid][InCall], pName);
		mysql_format(mysql, query12, sizeof(query12), "UPDATE users SET CarHealth=%f, Car2Health=%f, Car3Health=%f, CarFuel=%d, Car2Fuel=%d, Car3Fuel=%d, CarLinkID=%d, Car2LinkID=%d, Car3LinkID=%d WHERE NormalName='%s'", Player[playerid][CarHealth],
		Player[playerid][Car2Health], Player[playerid][Car3Health], Player[playerid][CarFuel], Player[playerid][Car2Fuel], Player[playerid][Car3Fuel], Player[playerid][CarLinkID], Player[playerid][Car2LinkID], Player[playerid][Car3LinkID], pName);
		mysql_format(mysql, query13, sizeof(query13), "UPDATE users SET ActiveReport=%d, BeingCalled=%d, CallConnectingTime=%d, PlayingHours=%d, BusinessExterior=%d, LastLoginYear=%d, CarX=%f, CarPriceBeingCarried=%d WHERE NormalName='%s'", Player[playerid][ActiveReport],
		Player[playerid][BeingCalled], Player[playerid][CallConnectingTime], Player[playerid][PlayingHours], Player[playerid][BusinessExterior], Player[playerid][LastLoginYear], Player[playerid][CarX], Player[playerid][CarPriceBeingCarried], pName);
		mysql_format(mysql, query14, sizeof(query14), "UPDATE users SET CarY=%f, CarZ=%f, Car2X=%f, Car2Y=%f, Car2Z=%f, Car3X=%f, Car3Y=%f, Car3Z=%f WHERE NormalName='%s'", Player[playerid][CarY], Player[playerid][CarZ],
		Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z], pName);
		mysql_format(mysql, query15, sizeof(query15), "UPDATE users SET PlayerCarModel=%d, PlayerCarModel2=%d, PlayerCarModel3=%d, CarZAngle=%f, Car2ZAngle=%f, Car3ZAngle=%f, CarCol1=%d, CarCol2=%d WHERE NormalName='%s'", Player[playerid][PlayerCarModel], Player[playerid][PlayerCarModel2], Player[playerid][PlayerCarModel3],
		Player[playerid][CarZAngle], Player[playerid][Car2ZAngle], Player[playerid][Car3ZAngle], Player[playerid][CarCol1], Player[playerid][CarCol2], pName);
		mysql_format(mysql, query16, sizeof(query16), "UPDATE users SET Car2Col1=%d, Car2Col2=%d, Car3Col1=%d, Car3Col2=%d, Car1Plate='%s', Car2Plate='%s', Car3Plate='%s', LastIP='%s', House=%d WHERE NormalName='%s'", Player[playerid][Car2Col1], Player[playerid][Car2Col2],
		Player[playerid][Car3Col1], Player[playerid][Car3Col2], Player[playerid][Car1Plate], Player[playerid][Car2Plate], Player[playerid][Car3Plate], Player[playerid][LastIP], Player[playerid][House], pName);
		mysql_format(mysql, query17, sizeof(query17), "UPDATE users SET HouseReg=%d, Banned=%d, Muted=%d, CrackEffect=%d, CellphoneConsole=%d, hExtX=%f, hExtY=%f, hExtZ=%f WHERE NormalName='%s'", Player[playerid][HouseReg], Player[playerid][Banned],
		Player[playerid][Muted], Player[playerid][CrackEffect], Player[playerid][CellphoneConsole], Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ], pName);
		mysql_format(mysql, query18, sizeof(query18), "UPDATE users SET hIntX=%f, hIntY=%f, hIntZ=%f, hIntID=%d, hExtID=%d, HasSprayCans=%d, ToggedQUIZ=%d, bExtX=%d, bExtY=%d WHERE NormalName='%s'", Player[playerid][hIntX], Player[playerid][hIntY],
		Player[playerid][hIntZ], Player[playerid][hIntID], Player[playerid][hExtID], Player[playerid][HasSprayCans], Player[playerid][ToggedQUIZ], Player[playerid][bExtX], Player[playerid][bExtY], pName);
		mysql_format(mysql, query19, sizeof(query19), "UPDATE users SET bExtZ=%f, bIntX=%f, bIntY=%f, bIntZ=%f, bIntID=%d, bExtID=%d, InHouse=%d, InGroupHQ=%d WHERE NormalName'%s'", Player[playerid][bExtZ], Player[playerid][bIntX],
		Player[playerid][bIntY], Player[playerid][bIntZ], Player[playerid][bIntID], Player[playerid][bExtID], Player[playerid][InHouse], Player[playerid][InGroupHQ], pName);
		mysql_format(mysql, query20, sizeof(query20), "UPDATE users SET GroupID=%d, GroupRank=%d WHERE NormalName='%s'", Player[playerid][Group], Player[playerid][GroupRank], pName);
		mysql_format(mysql, query21, sizeof(query21), "UPDATE users SET SpotlightEffect=%d, CarModDelay=%d, WepSlot1=%d, Job=%d, Authenticated=%d, InBusiness=%d, WepSlot2=%d, WepSlot3=%d WHERE NormalName='%s'", Player[playerid][SpotlightEffect], Player[playerid][CarModDelay],
		Player[playerid][WepSlot1], Player[playerid][Job], Player[playerid][Authenticated], Player[playerid][InBusiness], Player[playerid][WepSlot2], Player[playerid][WepSlot3], pName);
		mysql_format(mysql, query22, sizeof(query22), "UPDATE users SET GotInCopCar=%d, WepSlot4=%d, BankMoney=%d, WepSlot5=%d, WepSlot6=%d, CompleteRun=%d, LoginAttempts=%d, WepSlot7=%d, WepSlot8=%d WHERE NormalName='%s'", Player[playerid][GotInCopCar], Player[playerid][WepSlot4],
		Player[playerid][BankMoney], Player[playerid][WepSlot5], Player[playerid][WepSlot6], Player[playerid][CompleteRun], Player[playerid][LoginAttempts], Player[playerid][WepSlot7], Player[playerid][WepSlot8], pName);
		mysql_format(mysql, query23, sizeof(query23), "UPDATE users SET WepSlot9=%d, WepSlot10=%d, WepSlot11=%d, Warning1='%s', Warning2='%s', Warning3='%s', AdminName='%s', DisguisedName='%s'  WHERE NormalName='%s'", Player[playerid][WepSlot9], Player[playerid][WepSlot10],
		Player[playerid][WepSlot11], Player[playerid][Warning1], Player[playerid][Warning2], Player[playerid][Warning3], Player[playerid][AdminName], Player[playerid][DisguisedName], pName);
		mysql_format(mysql, query24, sizeof(query24), "UPDATE users SET Speedo=%d, Note='%s', PhoneBook=%d, BuyingCar=%d, SellingCar=%d, TicketPrice=%d, Ticketing=%d, BeingTicketed=%d, Blindfolded=%d WHERE NormalName='%s'", Player[playerid][Speedo], Player[playerid][Note],
		Player[playerid][PhoneBook], Player[playerid][BuyingCar], Player[playerid][SellingCar], Player[playerid][TicketPrice], Player[playerid][Ticketing], Player[playerid][BeingTicketed], Player[playerid][Blindfolded], pName);
		mysql_format(mysql, query25, sizeof(query25), "UPDATE users SET AdminSkin=%d, PendingBETAInvite=%d, ToggedRAGE=%d, GivingSlot=%d, ToggedRadio=%d, Identity=%d, License=%d, Gagged=%d, ReportBanStatus=%d, PMsEnabled=%d WHERE NormalName='%s'", Player[playerid][AdminSkin], Player[playerid][PendingBETAInvite],
		Player[playerid][ToggedRAGE], Player[playerid][GivingSlot], Player[playerid][ToggedRadio], Player[playerid][Identity], Player[playerid][License], Player[playerid][Gagged], Player[playerid][ReportBanStatus], Player[playerid][PMsEnabled], pName);
		mysql_format(mysql, query26, sizeof(query26), "UPDATE users SET MatrunsExecuted=%d, CheckBalance=%d, MeActions=%d, AdsPlaced=%d, PreLoadedAnims=%d, AchievementRank=%d, PINAuth=%d, PendingCarReceival=%d, PendingCarPrice=%d, CarSeller=%d WHERE NormalName='%s'", Player[playerid][MatrunsExecuted], Player[playerid][CheckBalance],
		Player[playerid][MeActions], Player[playerid][AdsPlaced], Player[playerid][PreLoadedAnims], Player[playerid][AchievementRank], Player[playerid][PINAuth], Player[playerid][PendingCarReceival], Player[playerid][PendingCarPrice], Player[playerid][CarSeller], pName);
		mysql_format(mysql, query27, sizeof(query27), "UPDATE users SET Accent='%s', AttendingBackupCall=%d, PINUnauthedTime=%d, SniperRecoilEffect=%d, BeingSpyedOnBy=%d, BeingDraggedBy=%d, Tester=%d, PortableRadio=%d, CarPaintJobID=%d, Car2PaintJobID=%d WHERE NormalName='%s'", Player[playerid][Accent], Player[playerid][AttendingBackupCall],
		Player[playerid][PINUnauthedTime], Player[playerid][SniperRecoilEffect], Player[playerid][BeingSpyedOnBy], Player[playerid][BeingDraggedBy], Player[playerid][Tester], Player[playerid][PortableRadio], Player[playerid][CarPaintJobID], Player[playerid][Car2PaintJobID], pName);
		mysql_format(mysql, query28, sizeof(query28), "UPDATE users SET Car3PaintJobID=%d, LastKiller=%d, RequestingBackup=%d, FindingHouse=%d, Age=%d, AdminPIN=%d, AFKStat=%d, HadSprunk=%d, Gender=%d, Race=%d WHERE NormalName='%s'", Player[playerid][Car3PaintJobID], Player[playerid][LastKiller],
		Player[playerid][RequestingBackup], Player[playerid][FindingHouse], Player[playerid][Age], Player[playerid][AdminPIN], Player[playerid][AFKStat], Player[playerid][HadSprunk], Player[playerid][Gender], Player[playerid][Race], pName);
		mysql_format(mysql, query29, sizeof(query29), "UPDATE users SET FailedHits=%d, SupplyT=%d, Successfulhits=%d, PrisonDuration=%d, CantFish=%d, PlayerSkinSlot1=%d, PlayerSkinSlot2=%d, PlayerSkinSlot3=%d, StonedEffect=%d, FishAttempts=%d WHERE NormalName='%s'", Player[playerid][FailedHits], Player[playerid][SupplyT],
		Player[playerid][SuccessfulHits], Player[playerid][PrisonDuration], Player[playerid][CantFish], Player[playerid][PlayerSkinSlot1], Player[playerid][PlayerSkinSlot2], Player[playerid][PlayerSkinSlot3], Player[playerid][StonedEffect], Player[playerid][FishAttempts], pName);
		mysql_format(mysql, query30, sizeof(query30), "UPDATE users SET OnPhoneTime=%d, CollectedFish=%d, BankStatus=%d, PrisonID=%d, SpamCount=%d, AdminDuty=%d, PendingInvite=%d, Cocaine=%d, Pot=%d, BaseballBatCount=%d WHERE NormalName='%s'", Player[playerid][OnPhoneTime], Player[playerid][CollectedFish],
	 	Player[playerid][BankStatus], Player[playerid][PrisonID], Player[playerid][SpamCount], Player[playerid][AdminDuty], Player[playerid][PendingInvite], Player[playerid][Cocaine], Player[playerid][Pot], Player[playerid][BaseballBatCount], pName);
		mysql_format(mysql, query31, sizeof(query31), "UPDATE users SET nMuted=%d, oMuted=%d, KnifeCount=%d, CopDuty=%d, FireDuty=%d, Contract='%s', AdminActions=%d, MarriedTo='%s', SecondsLoggedIn=%d, HealPrice=%d WHERE NormalName='%s'",Player[playerid][nMuted], Player[playerid][oMuted],
		Player[playerid][KnifeCount], Player[playerid][CopDuty], Player[playerid][FireDuty], Player[playerid][Contract], Player[playerid][AdminActions], Player[playerid][MarriedTo], Player[playerid][SecondsLoggedIn], Player[playerid][HealPrice], pName);
		mysql_format(mysql, query32, sizeof(query32), "UPDATE users SET AttemptingToHeal=%d, ContractPrice=%d, ModShop=%d, AssigningHitTo=%d, PlayerToAssasinate=%d, BeingAssasinated=%d, OwnedCarModSlot0=%d, OwnedCarModSlot1=%d WHERE NormalName='%s'", Player[playerid][AttemptingToHeal], Player[playerid][ContractPrice],
		Player[playerid][ModShop], Player[playerid][AssigningHitTo], Player[playerid][PlayerToAssasinate], Player[playerid][BeingAssasinated], Player[playerid][OwnedCarModSlot0], Player[playerid][OwnedCarModSlot1], pName);
		mysql_format(mysql, query33, sizeof(query33), "UPDATE users SET OwnedCarModSlot2=%d, OwnedCarModSlot3=%d, OwnedCarModSlot4=%d, OwnedCarModSlot5=%d, OwnedCarModSlot6=%d, OwnedCarModSlot7=%d, OwnedCarModSlot8=%d, OwnedCarModSlot9=%d, OwnedCarModSlot10=%d, OwnedCarModSlot11=%d WHERE NormalName='%s'", Player[playerid][OwnedCarModSlot2], Player[playerid][OwnedCarModSlot3],
		Player[playerid][OwnedCarModSlot4], Player[playerid][OwnedCarModSlot5], Player[playerid][OwnedCarModSlot6], Player[playerid][OwnedCarModSlot7], Player[playerid][OwnedCarModSlot8], Player[playerid][OwnedCarModSlot9], Player[playerid][OwnedCarModSlot10], Player[playerid][OwnedCarModSlot11], pName);
		mysql_format(mysql, query34, sizeof(query34), "UPDATE users SET OwnedCarModSlot12=%d, OwnedCarModSlot13=%d, Car2OwnedCarModSlot0=%d, Car2OwnedCarModSlot1=%d, Car2OwnedCarModSlot2=%d, Car2OwnedCarModSlot3=%d, Car2OwnedCarModSlot4=%d, Car2OwnedCarModSlot5=%d, Car2OwnedCarModSlot6=%d, Car2OwnedCarModSlot7=%d, Car2OwnedCarModSlot8=%d WHERE NormalName='%s'", Player[playerid][OwnedCarModSlot12], Player[playerid][OwnedCarModSlot13],
		Player[playerid][Car2OwnedCarModSlot0], Player[playerid][Car2OwnedCarModSlot1], Player[playerid][Car2OwnedCarModSlot2], Player[playerid][Car2OwnedCarModSlot3], Player[playerid][Car2OwnedCarModSlot4], Player[playerid][Car2OwnedCarModSlot5], Player[playerid][Car2OwnedCarModSlot6], Player[playerid][Car2OwnedCarModSlot7], Player[playerid][Car2OwnedCarModSlot8], pName);
		mysql_format(mysql, query35, sizeof(query35), "UPDATE users SET Car2OwnedCarModSlot9=%d, Car2OwnedCarModSlot10=%d, Car2OwnedCarModSlot11=%d, Car2OwnedCarModSlot12=%d, Car2OwnedCarModSlot13=%d, Car3OwnedCarModSlot0=%d, Car3OwnedCarModSlot1=%d, Car3OwnedCarModSlot2=%d, Car3OwnedCarModSlot3=%d, Car3OwnedCarModSlot4=%d, Car3OwnedCarModSlot5=%d WHERE NormalName='%s'", Player[playerid][Car2OwnedCarModSlot9], Player[playerid][Car2OwnedCarModSlot10],
		Player[playerid][Car2OwnedCarModSlot11], Player[playerid][Car2OwnedCarModSlot12], Player[playerid][Car2OwnedCarModSlot13], Player[playerid][Car3OwnedCarModSlot0], Player[playerid][Car3OwnedCarModSlot1], Player[playerid][Car3OwnedCarModSlot2], Player[playerid][Car3OwnedCarModSlot3], Player[playerid][Car3OwnedCarModSlot4], Player[playerid][Car3OwnedCarModSlot5], pName);
		mysql_format(mysql, query36, sizeof(query36), "UPDATE users SET Car3OwnedCarModSlot6=%d, Car3OwnedCarModSlot7=%d, Car3OwnedCarModSlot8=%d, Car3OwnedCarModSlot9=%d, Car3OwnedCarModSlot10=%d, Car3OwnedCarModSlot11=%d, Car3OwnedCarModSlot12=%d, Car3OwnedCarModSlot13=%d, BadgeNumber=%d, GCPID=%d WHERE NormalName='%s'", Player[playerid][Car3OwnedCarModSlot6], Player[playerid][Car3OwnedCarModSlot7],
		Player[playerid][Car3OwnedCarModSlot8], Player[playerid][Car3OwnedCarModSlot9], Player[playerid][Car3OwnedCarModSlot10], Player[playerid][Car3OwnedCarModSlot11], Player[playerid][Car3OwnedCarModSlot12], Player[playerid][Car3OwnedCarModSlot13], Player[playerid][BadgeNumber], Player[playerid][GCPID], pName);
		mysql_format(mysql, query37, sizeof(query37), "UPDATE users SET IsSpeccing=%d, NMute=%d, VIPTokens=%d, Materials=%d, Cuffed=%d, InabilityToMatrun=%d, InabilityToDropCar=%d, InabilityToTrash=%d, HospitalTime=%d, Hospitalized=%d WHERE NormalName='%s'", Player[playerid][IsSpeccing], Player[playerid][NMute],
		Player[playerid][VIPTokens], Player[playerid][Materials], Player[playerid][Cuffed], Player[playerid][InabilityToMatrun], Player[playerid][InabilityToDropCar], Player[playerid][InabilityTrash], Player[playerid][HospitalTime], Player[playerid][Hospitalized], pName);
		mysql_format(mysql, query38, sizeof(query38), "UPDATE users SET MatrunInabilityDuration=%d, TutorialStep=%d, CriminalOffences=%d, MaterialPackages=%d, Checkpoint=%d, Business=%d, TearGasEffect=%d, Offence1='%s', Offence2='%s', Offence3='%s' WHERE NormalName='%s'", Player[playerid][MatrunInabilityDuration], Player[playerid][TutorialStep],
		Player[playerid][CriminalOffences], Player[playerid][MaterialPackages], Player[playerid][Checkpoint], Player[playerid][Business], Player[playerid][TearGasEffect], Player[playerid][Offence1], Player[playerid][Offence2], Player[playerid][Offence3], pName);
		mysql_format(mysql, query39, sizeof(query39), "UPDATE users SET Offence4='%s', Offence5='%s', Offence6='%s', LastCarID=%d, pTazer=%d, pBadge=%d, PlayerHunger=%d, HouseKey=%d, HouseKeyID=%d, CreditCard=%d WHERE NormalName='%s'", Player[playerid][Offence4], Player[playerid][Offence5],
		Player[playerid][Offence6], Player[playerid][LastCarID], Player[playerid][pTazer], Player[playerid][pBadge], Player[playerid][PlayerHunger], Player[playerid][HouseKey], Player[playerid][HouseKeyID], Player[playerid][CreditCard], pName);
		mysql_format(mysql, query40, sizeof(query40), "UPDATE users SET LoanedAmount=%d, TrashCP=%d, TrashCoolDown=%d, TrashRoute=%d, NosBottle=%d, GasCan=%d, v1NOS=%d, v1NOSFUEL=%d, v2NOS=%d, v2NOSFUEL=%d WHERE NormalName='%s'", Player[playerid][LoanedAmount], Player[playerid][TrashCP],
		Player[playerid][TrashCoolDown], Player[playerid][TrashRoute], Player[playerid][NosBottle], Player[playerid][GasCan], Player[playerid][v1NOS], Player[playerid][v1NOSFUEL], Player[playerid][v2NOS], Player[playerid][v2NOSFUEL], pName);
		mysql_format(mysql, query41, sizeof(query41), "UPDATE users SET v3NOS=%d, v3NOSFUEL=%d, NosStreak=%d, OwnedPlotID=%d, Turbo=%d, v1ENGINE=%d, v2ENGINE=%d, v3ENGINE=%d, v1TURBO=%d, v2TURBO=%d WHERE NormalName='%s'", Player[playerid][v3NOS], Player[playerid][v3NOSFUEL],
		Player[playerid][NosStreak], Player[playerid][OwnedPlotID], Player[playerid][Turbo], Player[playerid][v1ENGINE], Player[playerid][v2ENGINE], Player[playerid][v3ENGINE], Player[playerid][V1TURBO], Player[playerid][v2TURBO], pName);
		mysql_format(mysql, query42, sizeof(query42), "UPDATE users SET v3TURBO=%d, ToyBan=%d, Toy1ID=%d, Toy1XO=%f, Toy1YO=%f, Toy1ZO=%f, Toy1XR=%f, Toy1YR=%f, Toy1ZR=%f, Toy1XS=%f WHERE NormalName='%s'", Player[playerid][v3TURBO], Player[playerid][ToyBan],
		Player[playerid][Toy1ID], Player[playerid][Toy1XO], Player[playerid][Toy1YO], Player[playerid][Toy1ZO], Player[playerid][Toy1XR], Player[playerid][Toy1YR], Player[playerid][Toy1ZR], Player[playerid][Toy1XS], pName);
		mysql_format(mysql, query43, sizeof(query43), "UPDATE users SET Toy1YS=%f, Toy1ZS=%f, Toy2ID=%d, Toy2XO=%f, Toy2YO=%f, Toy2ZO=%f, Toy2XR=%f, Toy2YR=%f, Toy2ZR=%f, Toy2XS=%f WHERE NormalName='%s'", Player[playerid][Toy1YS], Player[playerid][Toy1ZS],
		Player[playerid][Toy2ID], Player[playerid][Toy2XO], Player[playerid][Toy2YO], Player[playerid][Toy2ZO], Player[playerid][Toy2XR], Player[playerid][Toy2YR], Player[playerid][Toy2ZR], Player[playerid][Toy2XS], pName);
		mysql_format(mysql, query44, sizeof(query44), "UPDATE users SET Toy2YS=%f, Toy2ZS=%f, Toy3ID=%d, Toy3XO=%f, Toy3YO=%f, Toy3ZO=%f, Toy3XR=%f, Toy3YR=%f, Toy3ZR=%f, Toy3XS=%f WHERE NormalName='%s'", Player[playerid][Toy2YS], Player[playerid][Toy2ZS],
		Player[playerid][Toy3ID], Player[playerid][Toy3XO], Player[playerid][Toy3YO], Player[playerid][Toy3ZO], Player[playerid][Toy3XR], Player[playerid][Toy3YR], Player[playerid][Toy3ZR], Player[playerid][Toy3XS], pName);
		mysql_format(mysql, query45, sizeof(query45), "UPDATE users SET Toy3YS=%f, Toy3ZS=%f, ModX=%f, ModY=%f, ModZ=%f, TruckerReload=%d, OnTruckerRun=%d, VipRank=%d, PotSeeds=%d WHERE NormalName='%s'", Player[playerid][Toy3YS], Player[playerid][Toy3ZS],
		Player[playerid][ModX], Player[playerid][ModY], Player[playerid][ModZ], Player[playerid][TruckerReload], Player[playerid][OnTruckerRun], Player[playerid][VipRank], Player[playerid][PotSeeds], pName);
		mysql_format(mysql, query49, sizeof(query49), "UPDATE users SET Faction=%d, FactionRank=%d, StreetSweeperReload=%d, Tickets=%d, LicensePoints=%d, LastWorld=%d WHERE NormalName='%s'", Player[playerid][FactionID], Player[playerid][FactionRank], Player[playerid][StreetSweeperReload],
		Player[playerid][Tickets], Player[playerid][LicensePoints], Player[playerid][LastWorld], GetName(playerid));
		mysql_format(mysql, query51, sizeof(query51), "UPDATE users SET Car1Trunk1=%d, Car1Trunk2=%d, Car1Trunk3=%d, Car2Trunk1=%d, Car2Trunk2=%d, Car2Trunk3=%d, Car3Trunk1=%d, Car3Trunk2=%d, Car3Trunk3=%d WHERE NormalName='%s'", Player[playerid][Car1Trunk1], Player[playerid][Car1Trunk2],
		Player[playerid][Car1Trunk3], Player[playerid][Car2Trunk1], Player[playerid][Car2Trunk2], Player[playerid][Car2Trunk3], Player[playerid][Car3Trunk1], Player[playerid][Car3Trunk2], Player[playerid][Car3Trunk3], pName);
		mysql_format(mysql, query54, sizeof(query54), "UPDATE users SET Fish1=%d, Fish2=%d, Fish3=%d, Fish4=%d, Fish5=%d WHERE NormalName='%s'", Player[playerid][Fish1], Player[playerid][Fish2], Player[playerid][Fish3], Player[playerid][Fish4], Player[playerid][Fish5], pName);
		mysql_format(mysql, query55, sizeof(query55), "UPDATE users SET Car1Pot=%d, Car2Pot=%d, Car3Pot=%d, Car1Cocaine=%d, Car2Cocaine=%d, Car3Cocaine=%d, Car1Materials=%d, Car2Materials=%d, Car3Materials=%d WHERE NormalName='%s'", Player[playerid][Car1Pot],
		Player[playerid][Car2Pot], Player[playerid][Car3Pot], Player[playerid][Car1Cocaine], Player[playerid][Car2Cocaine], Player[playerid][Car3Cocaine], Player[playerid][Car1Materials], Player[playerid][Car2Materials], Player[playerid][Car3Materials], pName);
		mysql_format(mysql, query56, sizeof(query56), "UPDATE users SET CarryingVests=%d WHERE NormalName = '%s'", Player[playerid][CarryingVests], pName);
		
		mysql_tquery(mysql, query1, "", "");
		mysql_tquery(mysql, query2, "", "");
		mysql_tquery(mysql, query3, "", "");
		mysql_tquery(mysql, query4, "", "");
		mysql_tquery(mysql, query5, "", "");
		mysql_tquery(mysql, query6, "", "");
		mysql_tquery(mysql, query7, "", "");
		mysql_tquery(mysql, query8, "", "");
		mysql_tquery(mysql, query9, "", "");
		mysql_tquery(mysql, query10, "", "");
		mysql_tquery(mysql, query11, "", "");
		mysql_tquery(mysql, query12, "", "");
		mysql_tquery(mysql, query13, "", "");
		mysql_tquery(mysql, query14, "", "");
		mysql_tquery(mysql, query15, "", "");
		mysql_tquery(mysql, query16, "", "");
		mysql_tquery(mysql, query17, "", "");
		mysql_tquery(mysql, query18, "", "");
		mysql_tquery(mysql, query19, "", "");
		mysql_tquery(mysql, query20, "", "");
		mysql_tquery(mysql, query21, "", "");
		mysql_tquery(mysql, query22, "", "");
		mysql_tquery(mysql, query23, "", "");
		mysql_tquery(mysql, query24, "", "");
		mysql_tquery(mysql, query25, "", "");
		mysql_tquery(mysql, query26, "", "");
		mysql_tquery(mysql, query27, "", "");
		mysql_tquery(mysql, query28, "", "");
		mysql_tquery(mysql, query29, "", "");
		mysql_tquery(mysql, query30, "", "");
		mysql_tquery(mysql, query31, "", "");
		mysql_tquery(mysql, query32, "", "");
		mysql_tquery(mysql, query33, "", "");
		mysql_tquery(mysql, query34, "", "");
		mysql_tquery(mysql, query35, "", "");
		mysql_tquery(mysql, query36, "", "");
		mysql_tquery(mysql, query37, "", "");
		mysql_tquery(mysql, query38, "", "");
		mysql_tquery(mysql, query39, "", "");
		mysql_tquery(mysql, query40, "", "");
		mysql_tquery(mysql, query41, "", "");
		mysql_tquery(mysql, query42, "", "");
		mysql_tquery(mysql, query43, "", "");
		mysql_tquery(mysql, query44, "", "");
		mysql_tquery(mysql, query45, "", "");
		mysql_tquery(mysql, query46, "", "");
		mysql_tquery(mysql, query47, "", "");
		mysql_tquery(mysql, query48, "", "");
		mysql_tquery(mysql, query49, "", "");
		mysql_tquery(mysql, query50, "", "");
		mysql_tquery(mysql, query51, "", "");
		mysql_tquery(mysql, query52, "", "");
		mysql_tquery(mysql, query53, "", "");
		mysql_tquery(mysql, query53, "", "");
		mysql_tquery(mysql, query54, "", "");
		mysql_tquery(mysql, query55, "", "");
		mysql_tquery(mysql, query56, "", "");

		printf("%s has been saved", GetName(playerid));
	}
	return 1;
}
public SetPlayerPosEx(playerid, Float: posx, Float: posy, Float: posz, interior, virtualworld)
{
	if(GetPlayerState(playerid) == 2)
	{
	    SetPlayerVirtualWorld(playerid, virtualworld);
	    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), virtualworld);
	    LinkVehicleToInterior(GetPlayerVehicleID(playerid), interior);
	    SetPlayerInterior(playerid, interior);
	    SetVehiclePos(GetPlayerVehicleID(playerid), posx, posy, posz);
	    return 1;
	}
	else
	{
	    SetPlayerVirtualWorld(playerid, virtualworld);
	    SetPlayerInterior(playerid, interior);
	    SetPlayerPos(playerid, posx, posy, posz);
	    return 1;
	}
}

public RegisterPlayer(playerid, password[])
{
	new string[255], Year, Month, Day, Minute, Hour, Second, Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name, sizeof(Name));
	format(string, sizeof(string), "Accounts/%s.ini", Name);
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	if(!fexist(string))
	{
	    MaxRegistered++;
	    dini_Create(string);
	    dini_Set(string, "Password", password);
	    dini_IntSet(string, "AdminLevel", 0);
	    dini_FloatSet(string, "LastX", 0.0);
	    format(Player[playerid][Password], 128, "%s", password);
	    dini_FloatSet(string, "LastY", 0.0);
	   	dini_FloatSet(string, "LastZ", 0.0);
	    dini_IntSet(string, "LastWorld", 0);
	    dini_IntSet(string, "LastInterior", 0);
	    dini_FloatSet(string, "LastHealth", Player[playerid][LastHealth]);
	    dini_FloatSet(string, "LastArmour", Player[playerid][LastArmour]);
	    dini_IntSet(string, "LastSkin", Player[playerid][LastSkin]);
	    dini_IntSet(string, "LastLoginMinute", Minute);
	    dini_IntSet(string, "LastLoginHour", Hour);
	    dini_IntSet(string, "LastLoginDay", Day);
	    dini_IntSet(string, "LastLoginMonth", Month);
	    dini_IntSet(string, "LastLoginYear", Year);
	    dini_Set(string, "LastIP", Player[playerid][LastIP]);
	    dini_IntSet(string, "Group", Player[playerid][Group]);
	    dini_IntSet(string, "GroupRank", Player[playerid][GroupRank]);
	    dini_IntSet(string, "House", Player[playerid][House]);
	    dini_IntSet(string, "HouseReg", Player[playerid][HouseReg]);
	    dini_IntSet(string, "Banned", Player[playerid][Banned]);
	    dini_IntSet(string, "Muted", Player[playerid][Muted]);
	    dini_IntSet(string, "Money", Player[playerid][Money]);
	    dini_IntSet(string, "WepSlot1", Player[playerid][WepSlot1]);
	    dini_IntSet(string, "WepSlot2", Player[playerid][WepSlot2]);
	    dini_IntSet(string, "WepSlot3", Player[playerid][WepSlot3]);
	    dini_IntSet(string, "WepSlot4", Player[playerid][WepSlot4]);
	    dini_IntSet(string, "WepSlot5", Player[playerid][WepSlot5]);
	    dini_IntSet(string, "WepSlot6", Player[playerid][WepSlot6]);
	    dini_IntSet(string, "WepSlot7", Player[playerid][WepSlot7]);
	    dini_IntSet(string, "WepSlot8", Player[playerid][WepSlot8]);
	    dini_IntSet(string, "WepSlot9", Player[playerid][WepSlot9]);
	    dini_IntSet(string, "WepSlot10", Player[playerid][WepSlot10]);
	    dini_IntSet(string, "WepSlot11", Player[playerid][WepSlot11]);
	    dini_IntSet(string, "WepSlot0", Player[playerid][WepSlot0]);
	    dini_Set(string, "Warning1", Player[playerid][Warning1]);
	    dini_Set(string, "Warning2", Player[playerid][Warning2]);
	    dini_Set(string, "Warning3", Player[playerid][Warning3]);
	    dini_IntSet(string, "Identity", Player[playerid][Identity]);
	    dini_IntSet(string, "License", Player[playerid][License]);
	    dini_IntSet(string, "Age", Player[playerid][Age]);
	    dini_IntSet(string, "ContractPrice", Player[playerid][ContractPrice]);
	    dini_Set(string, "Contract", Player[playerid][Contract]);
  	 	dini_IntSet(string, "PrisonDuration", Player[playerid][PrisonDuration]);
        dini_IntSet(string, "PrisonID", Player[playerid][PrisonID]);
        dini_IntSet(string, "Tutorial", Player[playerid][Tutorial]);
        dini_IntSet(string, "Hospitalized", Player[playerid][Hospitalized]);
        dini_IntSet(string, "CriminalOffences", Player[playerid][CriminalOffences]);
        dini_Set(string, "Offence1", Player[playerid][Offence1]);
        dini_Set(string, "Offence2", Player[playerid][Offence2]);
        dini_Set(string, "Offence3", Player[playerid][Offence3]);
        dini_Set(string, "Offence4", Player[playerid][Offence4]);
        dini_Set(string, "Offence5", Player[playerid][Offence5]);
        dini_Set(string, "Offence6", Player[playerid][Offence6]);
        dini_IntSet(string, "Gender", Player[playerid][Gender]);
        dini_IntSet(string, "Race", Player[playerid][Race]);
        dini_IntSet(string, "Job", Player[playerid][Job]);
        dini_IntSet(string, "Materials", Player[playerid][Materials]);
		dini_IntSet(string, "PlayerHunger", Player[playerid][PlayerHunger]);
		dini_IntSet(string, "HouseKey", Player[playerid][HouseKey]);
		dini_IntSet(string, "HouseKeyID", Player[playerid][HouseKeyID]);
		dini_IntSet(string, "CreditCard", Player[playerid][CreditCard]);
		dini_IntSet(string, "LoanedAmount", Player[playerid][LoanedAmount]);
		dini_Set(string, "Car1Plate", Player[playerid][Car1Plate]);
		dini_Set(string, "Car2Plate", Player[playerid][Car2Plate]);
		dini_Set(string, "Car3Plate", Player[playerid][Car3Plate]);
		dini_IntSet(string, "TruckerReload", Player[playerid][TruckerReload]);
		dini_IntSet(string, "MedicDuty", Player[playerid][MedicDuty]);
		dini_IntSet(string, "TrashCP", Player[playerid][TrashCP]);
		dini_IntSet(string, "TrashCoolDown", Player[playerid][TrashCoolDown]);
		dini_IntSet(string, "TrashRoute", Player[playerid][TrashRoute]);
		dini_IntSet(string, "NosBottle", Player[playerid][NosBottle]);
		dini_IntSet(string, "EngineUpgrade", Player[playerid][EngineUpgrade]);
		dini_IntSet(string, "Turbo", Player[playerid][Turbo]);
		dini_IntSet(string, "v1ENGINE", Player[playerid][v1ENGINE]);
		dini_IntSet(string, "v2ENGINE", Player[playerid][v2ENGINE]);
		dini_IntSet(string, "v3ENGINE", Player[playerid][v3ENGINE]);
		dini_IntSet(string, "V1TURBO", Player[playerid][V1TURBO]);
		dini_IntSet(string, "v2TURBO", Player[playerid][v2TURBO]);
		dini_IntSet(string, "v3TURBO", Player[playerid][v3TURBO]);
		dini_IntSet(string, "GasCan", Player[playerid][GasCan]);
		dini_IntSet(string, "v1NOS", Player[playerid][v1NOS]);
		dini_IntSet(string, "v2NOS", Player[playerid][v2NOS]);
		dini_IntSet(string, "v3NOS", Player[playerid][v3NOS]);
		dini_IntSet(string, "v1NOSFUEL", Player[playerid][v1NOSFUEL]);
		dini_IntSet(string, "v2NOSFUEL", Player[playerid][v2NOSFUEL]);
		dini_IntSet(string, "v3NOSFUEL", Player[playerid][v3NOSFUEL]);
		dini_IntSet(string, "NosStreak", Player[playerid][NosStreak]);
		dini_IntSet(string, "OwnedPlotID", Player[playerid][OwnedPlotID]);
		dini_IntSet(string, "ToyBan", Player[playerid][ToyBan]);
		dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
		dini_FloatSet(string, "Toy1XO", Player[playerid][Toy1XO]);
		dini_FloatSet(string, "Toy1YO", Player[playerid][Toy1YO]);
		dini_FloatSet(string, "Toy1ZO", Player[playerid][Toy1ZO]);
		dini_FloatSet(string, "Toy1XR", Player[playerid][Toy1XR]);
		dini_FloatSet(string, "Toy1YR", Player[playerid][Toy1YR]);
		dini_FloatSet(string, "Toy1ZR", Player[playerid][Toy1ZR]);
		dini_FloatSet(string, "Toy1XS", Player[playerid][Toy1XS]);
		dini_FloatSet(string, "Toy1YS", Player[playerid][Toy1YS]);
		dini_FloatSet(string, "Toy1ZS", Player[playerid][Toy1ZS]);
		dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
		dini_FloatSet(string, "Toy2XO", Player[playerid][Toy2XO]);
		dini_FloatSet(string, "Toy2YO", Player[playerid][Toy2YO]);
		dini_FloatSet(string, "Toy2ZO", Player[playerid][Toy2ZO]);
		dini_FloatSet(string, "Toy2XR", Player[playerid][Toy2XR]);
		dini_FloatSet(string, "Toy2YR", Player[playerid][Toy2YR]);
		dini_FloatSet(string, "Toy2ZR", Player[playerid][Toy2ZR]);
		dini_FloatSet(string, "Toy2XS", Player[playerid][Toy2XS]);
		dini_FloatSet(string, "Toy2YS", Player[playerid][Toy2YS]);
		dini_FloatSet(string, "Toy2ZS", Player[playerid][Toy2ZS]);
		dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
		dini_FloatSet(string, "Toy3XO", Player[playerid][Toy3XO]);
		dini_FloatSet(string, "Toy3YO", Player[playerid][Toy3YO]);
		dini_FloatSet(string, "Toy3ZO", Player[playerid][Toy3ZO]);
		dini_FloatSet(string, "Toy3XR", Player[playerid][Toy3XR]);
		dini_FloatSet(string, "Toy3YR", Player[playerid][Toy3YR]);
		dini_FloatSet(string, "Toy3ZR", Player[playerid][Toy3ZR]);
		dini_FloatSet(string, "Toy3XS", Player[playerid][Toy3XS]);
		dini_FloatSet(string, "Toy3YS", Player[playerid][Toy3YS]);
		dini_FloatSet(string, "Toy3ZS", Player[playerid][Toy3ZS]);
		dini_FloatSet(string, "CarHealth", Player[playerid][CarHealth]);
		dini_FloatSet(string, "Car2Health", Player[playerid][Car2Health]);
		dini_FloatSet(string, "Car3Health", Player[playerid][Car3Health]);
		dini_FloatSet(string, "CarFuel", Player[playerid][CarFuel]);
		dini_FloatSet(string, "Car2Fuel", Player[playerid][Car2Fuel]);
		dini_FloatSet(string, "Car3Fuel", Player[playerid][Car3Fuel]);
        dini_IntSet(string, "BadgeNumber", Player[playerid][BadgeNumber]);
        dini_IntSet(string, "GCPID", Player[playerid][GCPID]);
        dini_IntSet(string, "IsSpeccing", Player[playerid][IsSpeccing]);
        dini_IntSet(string, "NMute", Player[playerid][NMute]);
        dini_IntSet(string, "VIPTokens", Player[playerid][VIPTokens]);
        dini_IntSet(string, "AdminActions", Player[playerid][AdminActions]);
        dini_IntSet(string, "SecondsLoggedIn", Player[playerid][SecondsLoggedIn]);
        dini_IntSet(string, "BankMoney", Player[playerid][BankMoney]);
        dini_IntSet(string, "Crack", 0);
        dini_IntSet(string, "Pot", 0);
        dini_IntSet(string, "nMuted", Player[playerid][nMuted]);
        dini_IntSet(string, "Business", Player[playerid][Business]);
        dini_IntSet(string, "PhoneN", Player[playerid][PhoneN]);
        dini_IntSet(string, "PlayingHours", Player[playerid][PlayingHours]);
        dini_IntSet(string, "PhoneBook", Player[playerid][PhoneBook]);
        dini_IntSet(string, "InabilityToMatrun", Player[playerid][InabilityToMatrun]);
        dini_IntSet(string, "InabilityToDropCar", Player[playerid][InabilityToDropCar]);
        dini_IntSet(string, "InabilityTrash", Player[playerid][InabilityTrash]);
        dini_IntSet(string, "CantFish", Player[playerid][CantFish]);
        dini_IntSet(string, "CollectedFish", Player[playerid][CollectedFish]);
        dini_FloatSet(string, "CarX", Player[playerid][CarX]);
        dini_FloatSet(string, "CarY", Player[playerid][CarY]);
        dini_FloatSet(string, "CarZ", Player[playerid][CarZ]);
        dini_FloatSet(string, "CarZAngle", Player[playerid][CarZAngle]);
        dini_IntSet(string, "CarModel", Player[playerid][PlayerCarModel]);
        dini_IntSet(string, "CarCol1", Player[playerid][CarCol1]);
        dini_IntSet(string, "CarCol2", Player[playerid][CarCol2]);
        dini_IntSet(string, "Rope", Player[playerid][Rope]);
        dini_IntSet(string, "Rags", Player[playerid][Rags]);
        dini_IntSet(string, "FailedHits", Player[playerid][FailedHits]);
        dini_IntSet(string, "SuccessfulHits", Player[playerid][SuccessfulHits]);
        dini_IntSet(string, "CarLock", Player[playerid][LockedCar]);
        dini_IntSet(string, "Radio", Player[playerid][HasRadio]);
        dini_IntSet(string, "CollegeMedia", Player[playerid][CollegeMedia]);
        dini_IntSet(string, "CollegeLaw", Player[playerid][CollegeLaw]);
        dini_IntSet(string, "CollegeEng", Player[playerid][CollegeEng]);
        dini_IntSet(string, "CollegeMath", Player[playerid][CollegeMath]);
        dini_IntSet(string, "CollegeChem", Player[playerid][CollegeChem]);
        dini_Set(string, "MarriedTo", Player[playerid][MarriedTo]);
        dini_IntSet(string, "FightBox", Player[playerid][FightBox]);
        dini_IntSet(string, "FightKungfu", Player[playerid][FightKungfu]);
        dini_IntSet(string, "FightGrabkick", Player[playerid][FightGrabkick]);
        dini_IntSet(string, "FightKneehead", Player[playerid][FightKneehead]);
        dini_IntSet(string, "FightElbow", Player[playerid][FightElbow]);
        dini_IntSet(string, "VipRank", Player[playerid][VipRank]);
		dini_IntSet(string, "BeforeAdminVipRank", Player[playerid][BeforeAdminVipRank]);
        dini_IntSet(string, "WalkieTalkie", Player[playerid][WalkieTalkie]);
        dini_IntSet(string, "BankStatus", Player[playerid][BankStatus]);
        dini_IntSet(string, "PlayerSkinSlot1", Player[playerid][PlayerSkinSlot1]);
        dini_IntSet(string, "PlayerSkinSlot2", Player[playerid][PlayerSkinSlot2]);
        dini_IntSet(string, "PlayerSkinSlot3", Player[playerid][PlayerSkinSlot3]);
        dini_IntSet(string, "AdminPIN", Player[playerid][AdminPIN]);
        dini_IntSet(string, "OwnedCarModSlot0", Player[playerid][OwnedCarModSlot0]);
        dini_IntSet(string, "OwnedCarModSlot1", Player[playerid][OwnedCarModSlot1]);
        dini_IntSet(string, "OwnedCarModSlot2", Player[playerid][OwnedCarModSlot2]);
        dini_IntSet(string, "OwnedCarModSlot3", Player[playerid][OwnedCarModSlot3]);
        dini_IntSet(string, "OwnedCarModSlot4", Player[playerid][OwnedCarModSlot4]);
        dini_IntSet(string, "OwnedCarModSlot5", Player[playerid][OwnedCarModSlot5]);
        dini_IntSet(string, "OwnedCarModSlot6", Player[playerid][OwnedCarModSlot6]);
        dini_IntSet(string, "OwnedCarModSlot7", Player[playerid][OwnedCarModSlot7]);
        dini_IntSet(string, "OwnedCarModSlot8", Player[playerid][OwnedCarModSlot8]);
        dini_IntSet(string, "OwnedCarModSlot9", Player[playerid][OwnedCarModSlot9]);
        dini_IntSet(string, "OwnedCarModSlot10", Player[playerid][OwnedCarModSlot10]);
        dini_IntSet(string, "OwnedCarModSlot11", Player[playerid][OwnedCarModSlot11]);
        dini_IntSet(string, "OwnedCarModSlot12", Player[playerid][OwnedCarModSlot12]);
        dini_IntSet(string, "OwnedCarModSlot13", Player[playerid][OwnedCarModSlot13]);
        dini_Set(string, "AdminName", Player[playerid][AdminName]);
        dini_Set(string, "NormalName", Player[playerid][NormalName]);
        dini_IntSet(string, "AdminSkin", Player[playerid][AdminSkin]);
        dini_Set(string, "Accent", Player[playerid][Accent]);
        dini_IntSet(string, "WalkieFrequency", Player[playerid][WalkieFrequency]);
        dini_IntSet(string, "PortableRadio", Player[playerid][PortableRadio]);
        dini_Set(string, "Note", Player[playerid][Note]);
        dini_IntSet(string, "CarPaintJobID", Player[playerid][CarPaintJobID]);
		dini_IntSet(string, "MeActions", Player[playerid][MeActions]);
        dini_IntSet(string, "AdsPlaced", Player[playerid][AdsPlaced]);
        dini_IntSet(string, "MatrunsExecuted", Player[playerid][MatrunsExecuted]);
        dini_IntSet(string, "HasMapApp", Player[playerid][HasMapApp]);
        dini_IntSet(string, "HasAdApp", Player[playerid][HasAdApp]);
        dini_IntSet(string, "HasPagesApp", Player[playerid][HasPagesApp]);
        dini_IntSet(string, "HasRadioApp", Player[playerid][HasRadioApp]);
        dini_IntSet(string, "AnsweredQuizQuestions", Player[playerid][AnsweredQuizQuestions]);
        dini_IntSet(string, "AchievementRank", Player[playerid][AchievementRank]);
        dini_IntSet(string, "Tester", Player[playerid][Tester]);
        dini_IntSet(string, "oMuted", Player[playerid][oMuted]);
        dini_IntSet(string, "Car2OwnedCarModSlot0", Player[playerid][Car2OwnedCarModSlot0]);
        dini_IntSet(string, "Car2OwnedCarModSlot1", Player[playerid][Car2OwnedCarModSlot1]);
        dini_IntSet(string, "Car2OwnedCarModSlot2", Player[playerid][Car2OwnedCarModSlot2]);
        dini_IntSet(string, "Car2OwnedCarModSlot3", Player[playerid][Car2OwnedCarModSlot3]);
        dini_IntSet(string, "Car2OwnedCarModSlot4", Player[playerid][Car2OwnedCarModSlot4]);
        dini_IntSet(string, "Car2OwnedCarModSlot5", Player[playerid][Car2OwnedCarModSlot5]);
        dini_IntSet(string, "Car2OwnedCarModSlot6", Player[playerid][Car2OwnedCarModSlot6]);
        dini_IntSet(string, "Car2OwnedCarModSlot7", Player[playerid][Car2OwnedCarModSlot7]);
        dini_IntSet(string, "Car2OwnedCarModSlot8", Player[playerid][Car2OwnedCarModSlot8]);
        dini_IntSet(string, "Car2OwnedCarModSlot9", Player[playerid][Car2OwnedCarModSlot9]);
        dini_IntSet(string, "Car2OwnedCarModSlot10", Player[playerid][Car2OwnedCarModSlot10]);
        dini_IntSet(string, "Car2OwnedCarModSlot11", Player[playerid][Car2OwnedCarModSlot11]);
        dini_IntSet(string, "Car2OwnedCarModSlot12", Player[playerid][Car2OwnedCarModSlot12]);
        dini_IntSet(string, "Car2OwnedCarModSlot13", Player[playerid][Car2OwnedCarModSlot13]);
        dini_IntSet(string, "Car3OwnedCarModSlot0", Player[playerid][Car3OwnedCarModSlot0]);
        dini_IntSet(string, "Car3OwnedCarModSlot1", Player[playerid][Car3OwnedCarModSlot1]);
        dini_IntSet(string, "Car3OwnedCarModSlot2", Player[playerid][Car3OwnedCarModSlot2]);
        dini_IntSet(string, "Car3OwnedCarModSlot3", Player[playerid][Car3OwnedCarModSlot3]);
        dini_IntSet(string, "Car3OwnedCarModSlot4", Player[playerid][Car3OwnedCarModSlot4]);
        dini_IntSet(string, "Car3OwnedCarModSlot5", Player[playerid][Car3OwnedCarModSlot5]);
        dini_IntSet(string, "Car3OwnedCarModSlot6", Player[playerid][Car3OwnedCarModSlot6]);
        dini_IntSet(string, "Car3OwnedCarModSlot7", Player[playerid][Car3OwnedCarModSlot7]);
        dini_IntSet(string, "Car3OwnedCarModSlot8", Player[playerid][Car3OwnedCarModSlot8]);
        dini_IntSet(string, "Car3OwnedCarModSlot9", Player[playerid][Car3OwnedCarModSlot9]);
        dini_IntSet(string, "Car3OwnedCarModSlot10", Player[playerid][Car3OwnedCarModSlot10]);
        dini_IntSet(string, "Car3OwnedCarModSlot11", Player[playerid][Car3OwnedCarModSlot11]);
        dini_IntSet(string, "Car3OwnedCarModSlot12", Player[playerid][Car3OwnedCarModSlot12]);
        dini_IntSet(string, "Car3OwnedCarModSlot13", Player[playerid][Car3OwnedCarModSlot13]);
        dini_IntSet(string, "PlayerCarModel2", Player[playerid][PlayerCarModel2]);
        dini_IntSet(string, "PlayerCarModel3", Player[playerid][PlayerCarModel3]);
        dini_FloatSet(string, "Car2ZAngle", Player[playerid][Car2ZAngle]);
        dini_FloatSet(string, "Car3ZAngle", Player[playerid][Car3ZAngle]);
        dini_IntSet(string, "Car2Col1", Player[playerid][Car2Col1]);
        dini_IntSet(string, "Car2Col2", Player[playerid][Car2Col2]);
        dini_IntSet(string, "Car3Col1", Player[playerid][Car3Col1]);
        dini_IntSet(string, "Car3Col2", Player[playerid][Car3Col2]);
        dini_IntSet(string, "Car2PaintJobID", Player[playerid][Car2PaintJobID]);
        dini_IntSet(string, "Car3PaintJobID", Player[playerid][Car3PaintJobID]);
		dini_FloatSet(string, "Car2X", Player[playerid][Car2X]);
		dini_FloatSet(string, "Car2Y", Player[playerid][Car2Y]);
		dini_FloatSet(string, "Car2Z", Player[playerid][Car2Z]);
		dini_FloatSet(string, "Car3X", Player[playerid][Car3X]);
		dini_FloatSet(string, "Car3Y", Player[playerid][Car3Y]);
		dini_FloatSet(string, "Car3Z", Player[playerid][Car3Z]);
		dini_IntSet(string, "CheckBalance", Player[playerid][CheckBalance]);
		dini_IntSet(string, "LockedCar2", Player[playerid][LockedCar2]);
		dini_IntSet(string, "LockedCar3", Player[playerid][LockedCar3]);
		dini_IntSet(string, "ReportBanStatus", Player[playerid][ReportBanStatus]);
		dini_IntSet(string, "AdminDuty", Player[playerid][AdminDuty]);

		// MySQL
		new query[255];
		format(query, sizeof(query), "INSERT INTO `users` (`NormalName`, `Password`) VALUES ('%s', '%s')", GetName(playerid), password);
		mysql_query(mysql, string);

	    Player[playerid][BankMoney] = NoobCash;
	    Player[playerid][Money] = NoobCash / 3;
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, Player[playerid][Money]);

	    Player[playerid][LastLoginMinute] = Minute;
	    Player[playerid][LastLoginHour] = Hour;
	    Player[playerid][LastLoginDay] = Day;
	    Player[playerid][LastLoginMonth] = Month;
	    Player[playerid][LastLoginYear] = Year;

	    if(strlen(Player[playerid][Accent]) < 1)
		{
			format(Player[playerid][Accent], 128, "American");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "That account already exists! Login!");
	}
	return 1;
}

stock SpawnOwnedCar(playerid, slotid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		switch(slotid)
		{
		    case 1:
		    {
		        if(Player[playerid][PlayerCarModel] >= 1)
		        {
		            if(Player[playerid][CarLinkID] >= 1)
		            {
		                DestroyVehicle(Player[playerid][CarLinkID]);
	                    Player[playerid][CarLinkID] = 0;
		            }

				    OwnedCarCount++;
				    Player[playerid][CarLinkID] = CreateVehicle(Player[playerid][PlayerCarModel], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ], Player[playerid][CarZAngle], Player[playerid][CarCol1], Player[playerid][CarCol2], -1);
                    SetVehicleNumberPlate(Player[playerid][CarLinkID], Player[playerid][Car1Plate]);
					SetVehicleToRespawn(Player[playerid][CarLinkID]);
					SetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
					SendClientMessage(playerid, WHITE, "Your first owned vehicle has been spawned. If you can't find it, please use the /callcar command.");
                    SetVehicleVirtualWorld(Player[playerid][CarLinkID], Player[playerid][Car1VW]);
					for(new i = 0; i < MAX_VEHICLES; i++)
					{
						if(Vehicles[i][GameID] == 0)
						{
							Vehicles[i][GameID] = Player[playerid][CarLinkID];
							Vehicles[i][CarTrunk1] = Player[playerid][Car1Trunk1];
							Vehicles[i][CarTrunk2] = Player[playerid][Car1Trunk2];
							Vehicles[i][CarTrunk3] = Player[playerid][Car1Trunk3];
							Vehicles[i][CarPot] =  Player[playerid][Car1Pot];
							Vehicles[i][CarCocaine] =  Player[playerid][Car1Cocaine];
							Vehicles[i][CarMaterials] =  Player[playerid][Car1Materials];
							break;
						}
					}
						
					if(GetVehicleModel(Player[playerid][CarLinkID]) != Player[playerid][PlayerCarModel])
					{
		                DestroyVehicle(Player[playerid][CarLinkID]);
               			Player[playerid][CarLinkID] = 0;
					    Player[playerid][CarLinkID] = CreateVehicle(Player[playerid][PlayerCarModel], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ], Player[playerid][CarZAngle], Player[playerid][CarCol1], Player[playerid][CarCol2], -1);
						Vehicles[CarCount][GameID] = Player[playerid][CarLinkID];
						
						for(new i = 0; i < MAX_VEHICLES; i++)
						{
							if(Vehicles[i][GameID] == 0)
							{
								Vehicles[i][GameID] = Player[playerid][CarLinkID];
								Vehicles[i][CarTrunk1] = Player[playerid][Car1Trunk1];
								Vehicles[i][CarTrunk2] = Player[playerid][Car1Trunk2];
								Vehicles[i][CarTrunk3] = Player[playerid][Car1Trunk3];
								Vehicles[i][CarPot] =  Player[playerid][Car1Pot];
								Vehicles[i][CarCocaine] =  Player[playerid][Car1Cocaine];
								Vehicles[i][CarMaterials] =  Player[playerid][Car1Materials];
								break;
							}
						}
					}

				    ChangeVehiclePaintjob(Player[playerid][CarLinkID], 3);

					if(Player[playerid][OwnedCarModSlot0] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot0]);
				    }

					if(Player[playerid][OwnedCarModSlot1] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot1]);
				    }

					if(Player[playerid][OwnedCarModSlot2] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot2]);
				    }

					if(Player[playerid][OwnedCarModSlot3] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot3]);
				    }

					if(Player[playerid][OwnedCarModSlot4] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot4]);
				    }

					if(Player[playerid][OwnedCarModSlot5] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot5]);
				    }

					if(Player[playerid][OwnedCarModSlot6] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot6]);
				    }

					if(Player[playerid][OwnedCarModSlot7] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot7]);
				    }

					if(Player[playerid][OwnedCarModSlot9] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot9]);
				    }

					if(Player[playerid][OwnedCarModSlot10] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot10]);
				    }

					if(Player[playerid][OwnedCarModSlot11] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot11]);
				    }

					if(Player[playerid][OwnedCarModSlot12] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot12]);
				    }

					if(Player[playerid][OwnedCarModSlot13] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot13]);
				    }
			    }
		    }
		    case 2:
		    {
		        if(Player[playerid][PlayerCarModel2] >= 1)
		        {
		            if(Player[playerid][Car2LinkID] >= 1)
		            {
		                DestroyVehicle(Player[playerid][Car2LinkID]);
		                Player[playerid][Car2LinkID] = 0;
		            }

					//CarCount++;
				    OwnedCarCount++;
				    Player[playerid][Car2LinkID] = CreateVehicle(Player[playerid][PlayerCarModel2], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z], Player[playerid][Car2ZAngle], Player[playerid][Car2Col1], Player[playerid][Car2Col2], -1);
				    SetVehicleNumberPlate(Player[playerid][Car2LinkID], Player[playerid][Car2Plate]);
					SetVehicleToRespawn(Player[playerid][Car2LinkID]);
					SetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
				    SendClientMessage(playerid, WHITE, "Your second owned vehicle has been spawned. If you can't find it, please use the /callcar command.");
                    SetVehicleVirtualWorld(Player[playerid][Car2LinkID], Player[playerid][Car2VW]);
					Vehicles[CarCount][GameID] = Player[playerid][Car2LinkID];
					for(new i = 0; i < MAX_VEHICLES; i++)
					{
						if(Vehicles[i][GameID] == 0)
						{
							Vehicles[i][GameID] = Player[playerid][Car2LinkID];
							Vehicles[i][CarTrunk1] = Player[playerid][Car2Trunk1];
							Vehicles[i][CarTrunk2] = Player[playerid][Car2Trunk2];
							Vehicles[i][CarTrunk3] = Player[playerid][Car2Trunk3];
							Vehicles[i][CarPot] =  Player[playerid][Car2Pot];
							Vehicles[i][CarCocaine] =  Player[playerid][Car2Cocaine];
							Vehicles[i][CarMaterials] =  Player[playerid][Car2Materials];
							break;
						}
					}
						
					if(GetVehicleModel(Player[playerid][Car2LinkID]) != Player[playerid][PlayerCarModel2])
					{
		                DestroyVehicle(Player[playerid][Car2LinkID]);
		                Player[playerid][Car2LinkID] = 0;
					    Player[playerid][Car2LinkID] = CreateVehicle(Player[playerid][PlayerCarModel2], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z], Player[playerid][Car2ZAngle], Player[playerid][Car2Col1], Player[playerid][Car2Col2], -1);
						Vehicles[CarCount][GameID] = Player[playerid][Car2LinkID];
						
						for(new i = 0; i < MAX_VEHICLES; i++)
						{
							if(Vehicles[i][GameID] == 0)
							{
								Vehicles[i][GameID] = Player[playerid][Car2LinkID];
								Vehicles[i][CarTrunk1] = Player[playerid][Car2Trunk1];
								Vehicles[i][CarTrunk2] = Player[playerid][Car2Trunk2];
								Vehicles[i][CarTrunk3] = Player[playerid][Car2Trunk3];
								Vehicles[i][CarPot] =  Player[playerid][Car2Pot];
								Vehicles[i][CarCocaine] =  Player[playerid][Car2Cocaine];
								Vehicles[i][CarMaterials] =  Player[playerid][Car2Materials];
								break;
							}
						}
					}

				    ChangeVehiclePaintjob(Player[playerid][Car2LinkID], 3);

					if(Player[playerid][Car2OwnedCarModSlot0] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot0]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot1] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot1]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot2] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot2]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot3] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot3]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot4] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot4]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot5] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot5]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot6] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot6]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot7] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot7]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot9] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot9]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot10] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot10]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot11] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot11]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot12] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot12]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot13] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot13]);
				    }
					//CarCount++
		    	}
		    }
		    case 3:
		    {
		        if(Player[playerid][PlayerCarModel3] >= 1)
		        {
				    //CarCount++;
				    OwnedCarCount++;
				    Player[playerid][Car3LinkID] = CreateVehicle(Player[playerid][PlayerCarModel3], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z], Player[playerid][Car3ZAngle], Player[playerid][Car3Col1], Player[playerid][Car3Col2], -1);
				    SetVehicleNumberPlate(Player[playerid][Car3LinkID], Player[playerid][Car3Plate]);
					SetVehicleToRespawn(Player[playerid][Car3LinkID]);
					SetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
				    SendClientMessage(playerid, WHITE, "Your third owned vehicle has been spawned. If you can't find it, please use the /callcar command.");
                    SetVehicleVirtualWorld(Player[playerid][Car3LinkID], Player[playerid][Car3VW]);

					for(new i = 0; i < MAX_VEHICLES; i++)
					{
						if(Vehicles[i][GameID] == 0)
						{
							Vehicles[i][GameID] = Player[playerid][Car3LinkID];
							Vehicles[i][CarTrunk1] = Player[playerid][Car3Trunk1];
							Vehicles[i][CarTrunk2] = Player[playerid][Car3Trunk2];
							Vehicles[i][CarTrunk3] = Player[playerid][Car3Trunk3];
							Vehicles[i][CarPot] =  Player[playerid][Car3Pot];
							Vehicles[i][CarCocaine] =  Player[playerid][Car3Cocaine];
							Vehicles[i][CarMaterials] =  Player[playerid][Car3Materials];
							break;
						}
					}
					
					if(GetVehicleModel(Player[playerid][Car3LinkID]) != Player[playerid][PlayerCarModel3])
					{
		                DestroyVehicle(Player[playerid][Car3LinkID]);
		                Player[playerid][Car3LinkID] = 0;
					    Player[playerid][Car3LinkID] = CreateVehicle(Player[playerid][PlayerCarModel3], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z], Player[playerid][Car3ZAngle], Player[playerid][Car3Col1], Player[playerid][Car3Col2], -1);
						for(new i = 0; i < MAX_VEHICLES; i++)
						{
							if(Vehicles[i][GameID] == 0)
							{
								Vehicles[i][GameID] = Player[playerid][Car3LinkID];
								Vehicles[i][CarTrunk1] = Player[playerid][Car3Trunk1];
								Vehicles[i][CarTrunk2] = Player[playerid][Car3Trunk2];
								Vehicles[i][CarTrunk3] = Player[playerid][Car3Trunk3];
								Vehicles[i][CarPot] =  Player[playerid][Car3Pot];
								Vehicles[i][CarCocaine] =  Player[playerid][Car3Cocaine];
								Vehicles[i][CarMaterials] =  Player[playerid][Car3Materials];
								break;
							}
						}
					}

				    ChangeVehiclePaintjob(Player[playerid][Car3LinkID], 3);

					if(Player[playerid][Car3OwnedCarModSlot0] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot0]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot1] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot1]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot2] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot2]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot3] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot3]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot4] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot4]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot5] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot5]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot6] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot6]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot7] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot7]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot9] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot9]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot10] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot10]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot11] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot11]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot12] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot12]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot13] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot13]);
				    }
				}
		    }
		}
	}
}

public GetOwnedCarMods(playerid)
{
	Player[playerid][OwnedCarModSlot0] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 0);
	Player[playerid][OwnedCarModSlot1] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 1);
	Player[playerid][OwnedCarModSlot2] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 2);
	Player[playerid][OwnedCarModSlot3] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 3);
	Player[playerid][OwnedCarModSlot4] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 4);
	Player[playerid][OwnedCarModSlot5] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 5);
	Player[playerid][OwnedCarModSlot6] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 6);
	Player[playerid][OwnedCarModSlot7] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 7);
	Player[playerid][OwnedCarModSlot8] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 8);
	Player[playerid][OwnedCarModSlot9] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 9);
	Player[playerid][OwnedCarModSlot10] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 10);
	Player[playerid][OwnedCarModSlot11] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 11);
	Player[playerid][OwnedCarModSlot12] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 12);
	Player[playerid][OwnedCarModSlot13] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 13);

	Player[playerid][Car2OwnedCarModSlot0] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 0);
	Player[playerid][Car2OwnedCarModSlot1] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 1);
	Player[playerid][Car2OwnedCarModSlot2] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 2);
	Player[playerid][Car2OwnedCarModSlot3] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 3);
	Player[playerid][Car2OwnedCarModSlot4] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 4);
	Player[playerid][Car2OwnedCarModSlot5] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 5);
	Player[playerid][Car2OwnedCarModSlot6] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 6);
	Player[playerid][Car2OwnedCarModSlot7] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 7);
	Player[playerid][Car2OwnedCarModSlot8] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 8);
	Player[playerid][Car2OwnedCarModSlot9] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 9);
	Player[playerid][Car2OwnedCarModSlot10] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 10);
	Player[playerid][Car2OwnedCarModSlot11] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 11);
	Player[playerid][Car2OwnedCarModSlot12] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 12);
	Player[playerid][Car2OwnedCarModSlot13] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 13);

	Player[playerid][Car3OwnedCarModSlot0] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 0);
	Player[playerid][Car3OwnedCarModSlot1] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 1);
	Player[playerid][Car3OwnedCarModSlot2] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 2);
	Player[playerid][Car3OwnedCarModSlot3] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 3);
	Player[playerid][Car3OwnedCarModSlot4] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 4);
	Player[playerid][Car3OwnedCarModSlot5] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 5);
	Player[playerid][Car3OwnedCarModSlot6] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 6);
	Player[playerid][Car3OwnedCarModSlot7] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 7);
	Player[playerid][Car3OwnedCarModSlot8] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 8);
	Player[playerid][Car3OwnedCarModSlot9] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 9);
	Player[playerid][Car3OwnedCarModSlot10] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 10);
	Player[playerid][Car3OwnedCarModSlot11] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 11);
	Player[playerid][Car3OwnedCarModSlot12] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 12);
	Player[playerid][Car3OwnedCarModSlot13] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 13);

	return 1;
}

public OnPlayerLoginAttempt(playerid, password[])
{
	new string[255], Year, Month, Day, Minute, Hour, Second, Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name, sizeof(Name));
	format(string, sizeof(string), "Accounts/%s.ini", Name);

	if(Player[playerid][LoginAttempts] == 3)
	{
	    new hour, minute, second, day, year, month;
        gettime(hour, minute, second);
        getdate(year, month, day);
        #pragma unused second
	    new IP[45];
	    GetPlayerIp(playerid, IP, sizeof(IP));
		format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PASSWORD ATTEMPTS | System", day, month, year, hour, minute, IP, Name);
	    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
	    Kick(playerid);
	}

	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	if(fexist(string))
	{
	    if(strcmp(dini_Get(string, "Password"), password, false) == 0)
	    {
	        MaxLoggedIn++;
	        Player[playerid][Authenticated] = 1;
	        Player[playerid][Password] = dini_Get(string, "Password");
	        Player[playerid][AdminLevel] = dini_Int(string, "AdminLevel");
	        Player[playerid][LastX] = dini_Float(string, "LastX");
	        Player[playerid][LastY] = dini_Float(string, "LastY");
	        Player[playerid][LastZ] = dini_Float(string, "LastZ");
	        Player[playerid][LastWorld] = dini_Int(string, "LastWorld");
	        Player[playerid][LastInterior] = dini_Int(string, "LastInterior");
	        Player[playerid][LastSkin] = dini_Int(string, "LastSkin");
	        Player[playerid][LastHealth] = dini_Float(string, "LastHealth");
	        Player[playerid][LastArmour] = dini_Float(string, "LastArmour");
	        Player[playerid][LastLoginYear] = dini_Int(string, "LastLoginYear");
	        Player[playerid][LastLoginMonth] = dini_Int(string, "LastLoginMonth");
	        Player[playerid][LastLoginDay] = dini_Int(string, "LastLoginDay");
	        Player[playerid][Group] = dini_Int(string, "Group");
	        Player[playerid][GroupRank] = dini_Int(string, "GroupRank");
	        Player[playerid][House] = dini_Int(string, "House");
	        Player[playerid][HouseReg] = dini_Int(string, "HouseReg");
	        Player[playerid][Banned] = dini_Int(string, "Banned");
	        Player[playerid][Muted] = dini_Int(string, "Muted");
	        Player[playerid][Money] = dini_Int(string, "Money");
	        Player[playerid][WepSlot1] = dini_Int(string, "WepSlot1");
	        Player[playerid][WepSlot2] = dini_Int(string, "WepSlot2");
	        Player[playerid][WepSlot3] = dini_Int(string, "WepSlot3");
	        Player[playerid][WepSlot4] = dini_Int(string, "WepSlot4");
	        Player[playerid][WepSlot5] = dini_Int(string, "WepSlot5");
	        Player[playerid][WepSlot6] = dini_Int(string, "WepSlot6");
	        Player[playerid][WepSlot7] = dini_Int(string, "WepSlot7");
	        Player[playerid][WepSlot8] = dini_Int(string, "WepSlot8");
	        Player[playerid][WepSlot9] = dini_Int(string, "WepSlot9");
	        Player[playerid][WepSlot10] = dini_Int(string, "WepSlot10");
	        Player[playerid][WepSlot11] = dini_Int(string, "WepSlot11");
	        Player[playerid][WepSlot0] = dini_Int(string, "WepSlot0");
	        Player[playerid][Warning1] = dini_Get(string, "Warning1");
	        Player[playerid][Warning2] = dini_Get(string, "Warning2");
	        Player[playerid][Warning3] = dini_Get(string, "Warning3");
	        Player[playerid][Identity] = dini_Int(string, "Identity");
 	        Player[playerid][License] = dini_Int(string, "License");
	        Player[playerid][Age] = dini_Int(string, "Age");
	    	Player[playerid][ContractPrice] = dini_Int(string, "ContractPrice");
	    	Player[playerid][Contract] = dini_Get(string, "Contract");
  	 		Player[playerid][PrisonDuration] = dini_Int(string, "PrisonDuration");
        	Player[playerid][PrisonID] = dini_Int(string, "PrisonID");
        	Player[playerid][Tutorial] = dini_Int(string, "Tutorial");
        	Player[playerid][Hospitalized] = dini_Int(string, "Hospitalized");
        	Player[playerid][CriminalOffences] = dini_Int(string, "CriminalOffences");
        	Player[playerid][Offence1] = dini_Get(string, "Offence1");
        	Player[playerid][Offence2] = dini_Get(string, "Offence2");
        	Player[playerid][Offence3] = dini_Get(string, "Offence3");
        	Player[playerid][Offence4] = dini_Get(string, "Offence4");
        	Player[playerid][Offence5] = dini_Get(string, "Offence5");
        	Player[playerid][Offence6] = dini_Get(string, "Offence6");
        	Player[playerid][Gender] = dini_Int(string, "Gender");
        	Player[playerid][Race] = dini_Int(string, "Race");
        	Player[playerid][Job] = dini_Int(string, "Job");
        	Player[playerid][Materials] = dini_Int(string, "Materials");
        	Player[playerid][PlayerHunger] = dini_Int(string, "PlayerHunger");
        	Player[playerid][HouseKey] = dini_Int(string, "HouseKey");
        	Player[playerid][HouseKeyID] = dini_Int(string, "HouseKeyID");
        	Player[playerid][CreditCard] = dini_Int(string, "CreditCard");
        	Player[playerid][Car1Plate] = dini_Get(string, "Car1Plate");
        	Player[playerid][Car2Plate] = dini_Get(string, "Car2Plate");
        	Player[playerid][Car3Plate] = dini_Get(string, "Car3Plate");
        	Player[playerid][LoanedAmount] = dini_Int(string, "LoanedAmount");
        	Player[playerid][TruckerReload] = dini_Int(string, "TruckerReload");
        	Player[playerid][MedicDuty] = dini_Int(string, "MedicDuty");
        	Player[playerid][TrashCP] = dini_Int(string, "TrashCP");
        	Player[playerid][TrashCoolDown] = dini_Int(string, "TrashCoolDown");
        	Player[playerid][TrashRoute] = dini_Int(string, "TrashRoute");
            Player[playerid][NosBottle] = dini_Int(string, "NosBottle");
            Player[playerid][EngineUpgrade] = dini_Int(string, "EngineUpgrade");
            Player[playerid][Turbo] = dini_Int(string, "Turbo");
            Player[playerid][v1ENGINE] = dini_Int(string, "v1ENGINE");
            Player[playerid][v2ENGINE] = dini_Int(string, "v2ENGINE");
            Player[playerid][v3ENGINE] = dini_Int(string, "v3ENGINE");
            Player[playerid][V1TURBO] = dini_Int(string, "V1TURBO");
            Player[playerid][v2TURBO] = dini_Int(string, "v2TURBO");
            Player[playerid][v3TURBO] = dini_Int(string, "v3TURBO");
            Player[playerid][GasCan] = dini_Int(string, "GasCan");
        	Player[playerid][v1NOS] = dini_Int(string, "v1NOS");
        	Player[playerid][v2NOS] = dini_Int(string, "v2NOS");
        	Player[playerid][v3NOS] = dini_Int(string, "v3NOS");
        	Player[playerid][v1NOSFUEL] = dini_Int(string, "v1NOSFUEL");
        	Player[playerid][v2NOSFUEL] = dini_Int(string, "v2NOSFUEL");
        	Player[playerid][v3NOSFUEL] = dini_Int(string, "v3NOSFUEL");
        	Player[playerid][NosStreak] = dini_Int(string, "NosStreak");
        	Player[playerid][OwnedPlotID] = dini_Int(string, "OwnedPlotID");
        	Player[playerid][ToyBan] = dini_Int(string, "ToyBan");
        	Player[playerid][Toy1ID] = dini_Int(string, "Toy1ID");
        	Player[playerid][Toy1XO] = dini_Float(string, "Toy1XO");
        	Player[playerid][Toy1YO] = dini_Float(string, "Toy1YO");
        	Player[playerid][Toy1ZO] = dini_Float(string, "Toy1ZO");
        	Player[playerid][Toy1XR] = dini_Float(string, "Toy1XR");
        	Player[playerid][Toy1YR] = dini_Float(string, "Toy1YR");
        	Player[playerid][Toy1ZR] = dini_Float(string, "Toy1ZR");
        	Player[playerid][Toy1XS] = dini_Float(string, "Toy1XS");
        	Player[playerid][Toy1YS] = dini_Float(string, "Toy1YS");
        	Player[playerid][Toy1ZS] = dini_Float(string, "Toy1ZS");
        	Player[playerid][Toy2ID] = dini_Int(string, "Toy2ID");
        	Player[playerid][Toy2XO] = dini_Float(string, "Toy2XO");
        	Player[playerid][Toy2YO] = dini_Float(string, "Toy2YO");
        	Player[playerid][Toy2ZO] = dini_Float(string, "Toy2ZO");
        	Player[playerid][Toy2XR] = dini_Float(string, "Toy2XR");
        	Player[playerid][Toy2YR] = dini_Float(string, "Toy2YR");
        	Player[playerid][Toy2ZR] = dini_Float(string, "Toy2ZR");
        	Player[playerid][Toy2XS] = dini_Float(string, "Toy2XS");
        	Player[playerid][Toy2YS] = dini_Float(string, "Toy2YS");
        	Player[playerid][Toy2ZS] = dini_Float(string, "Toy2ZS");
        	Player[playerid][Toy3ID] = dini_Int(string, "Toy3ID");
        	Player[playerid][Toy3XO] = dini_Float(string, "Toy3XO");
        	Player[playerid][Toy3YO] = dini_Float(string, "Toy3YO");
        	Player[playerid][Toy3ZO] = dini_Float(string, "Toy3ZO");
        	Player[playerid][Toy3XR] = dini_Float(string, "Toy3XR");
        	Player[playerid][Toy3YR] = dini_Float(string, "Toy3YR");
        	Player[playerid][Toy3ZR] = dini_Float(string, "Toy3ZR");
        	Player[playerid][Toy3XS] = dini_Float(string, "Toy3XS");
        	Player[playerid][Toy3YS] = dini_Float(string, "Toy3YS");
        	Player[playerid][Toy3ZS] = dini_Float(string, "Toy3ZS");
            Player[playerid][CarHealth] = dini_Float(string, "CarHealth");
        	Player[playerid][Car2Health] = dini_Float(string, "Car2Health");
        	Player[playerid][Car3Health] = dini_Float(string, "Car3Health");
			Player[playerid][CarFuel] = dini_Int(string, "CarFuel");
        	Player[playerid][Car2Fuel] = dini_Int(string, "Car2Fuel");
        	Player[playerid][Car3Fuel] = dini_Int(string, "Car3Fuel");
        	Player[playerid][BadgeNumber] = dini_Int(string, "BadgeNumber");
        	Player[playerid][GCPID] = dini_Int(string, "GCPID");
        	Player[playerid][IsSpeccing] = dini_Int(string, "IsSpeccing");
        	Player[playerid][NMute] = dini_Int(string, "NMute");
        	Player[playerid][VIPTokens] = dini_Int(string, "VIPTokens");
        	Player[playerid][AdminActions] = dini_Int(string, "AdminActions");
        	Player[playerid][SecondsLoggedIn] = dini_Int(string, "SecondsLoggedIn");
        	Player[playerid][BankMoney] = dini_Int(string, "BankMoney");
        	Player[playerid][Cocaine] = dini_Int(string, "Crack");
        	Player[playerid][Pot] = dini_Int(string, "Pot");
        	Player[playerid][nMuted] = dini_Int(string, "nMuted");
        	Player[playerid][Business] = dini_Int(string, "Business");
        	Player[playerid][PhoneN] = dini_Int(string, "PhoneN");
        	Player[playerid][PlayingHours] = dini_Int(string, "PlayingHours");
        	Player[playerid][PhoneBook] = dini_Int(string, "PhoneBook");
        	Player[playerid][InabilityToMatrun] = dini_Int(string, "InabilityToMatrun");
        	Player[playerid][InabilityToDropCar] = dini_Int(string, "InabilityToDropCar");
        	Player[playerid][InabilityTrash] = dini_Int(string, "InabilityTrash");
        	Player[playerid][CantFish] = dini_Int(string, "CantFish");
        	Player[playerid][CollectedFish] = dini_Int(string, "CollectedFish");
        	Player[playerid][CarX] = dini_Float(string, "CarX");
            Player[playerid][CarY] = dini_Float(string, "CarY");
            Player[playerid][CarZ] = dini_Float(string, "CarZ");
            Player[playerid][PlayerCarModel] = dini_Int(string, "CarModel");
            Player[playerid][CarZAngle] = dini_Float(string, "CarZAngle");
            Player[playerid][CarCol1] = dini_Int(string, "CarCol1");
            Player[playerid][CarCol2] = dini_Int(string, "CarCol2");
			Player[playerid][Rope] = dini_Int(string, "Rope");
			Player[playerid][Rags] = dini_Int(string, "Rags");
        	Player[playerid][FailedHits] = dini_Int(string, "FailedHits");
         	Player[playerid][SuccessfulHits] = dini_Int(string, "SuccessfulHits");
         	Player[playerid][LockedCar] = dini_Int(string, "CarLock");
         	Player[playerid][HasRadio] = dini_Int(string, "Radio");
    		Player[playerid][CollegeMedia] = dini_Int(string, "CollegeMedia");
		    Player[playerid][CollegeLaw] = dini_Int(string, "CollegeLaw");
		    Player[playerid][CollegeEng] = dini_Int(string, "CollegeEng");
		    Player[playerid][CollegeMath] = dini_Int(string, "CollegeMath");
			Player[playerid][CollegeChem] = dini_Int(string, "CollegeChem");
			Player[playerid][MarriedTo] = dini_Get(string, "MarriedTo");
			Player[playerid][FightBox] = dini_Int(string, "FightBox");
			Player[playerid][FightKungfu] = dini_Int(string, "FightKungfu");
			Player[playerid][FightKneehead] = dini_Int(string, "FightKneehead");
			Player[playerid][FightGrabkick] = dini_Int(string, "FightGrabkick");
			Player[playerid][FightElbow] = dini_Int(string, "FightElbow");
			Player[playerid][VipRank] = dini_Int(string, "VipRank");
			Player[playerid][BeforeAdminVipRank] = dini_Int(string, "BeforeAdminVipRank");
			Player[playerid][WalkieTalkie] = dini_Int(string, "WalkieTalkie");
			Player[playerid][BankStatus] = dini_Int(string, "BankStatus");
			Player[playerid][PlayerSkinSlot1] = dini_Int(string, "PlayerSkinSlot1");
			Player[playerid][PlayerSkinSlot2] = dini_Int(string, "PlayerSkinSlot2");
			Player[playerid][PlayerSkinSlot3] = dini_Int(string, "PlayerSkinSlot3");
			Player[playerid][AdminPIN] = dini_Int(string, "AdminPIN");
			Player[playerid][OwnedCarModSlot0] = dini_Int(string, "OwnedCarModSlot0");
			Player[playerid][OwnedCarModSlot1] = dini_Int(string, "OwnedCarModSlot1");
			Player[playerid][OwnedCarModSlot2] = dini_Int(string, "OwnedCarModSlot2");
			Player[playerid][OwnedCarModSlot3] = dini_Int(string, "OwnedCarModSlot3");
			Player[playerid][OwnedCarModSlot4] = dini_Int(string, "OwnedCarModSlot4");
			Player[playerid][OwnedCarModSlot5] = dini_Int(string, "OwnedCarModSlot5");
			Player[playerid][OwnedCarModSlot6] = dini_Int(string, "OwnedCarModSlot6");
			Player[playerid][OwnedCarModSlot7] = dini_Int(string, "OwnedCarModSlot7");
			Player[playerid][OwnedCarModSlot8] = dini_Int(string, "OwnedCarModSlot8");
			Player[playerid][OwnedCarModSlot9] = dini_Int(string, "OwnedCarModSlot9");
			Player[playerid][OwnedCarModSlot10] = dini_Int(string, "OwnedCarModSlot10");
			Player[playerid][OwnedCarModSlot11] = dini_Int(string, "OwnedCarModSlot11");
			Player[playerid][OwnedCarModSlot12] = dini_Int(string, "OwnedCarModSlot12");
			Player[playerid][OwnedCarModSlot13] = dini_Int(string, "OwnedCarModSlot13");
            Player[playerid][AdminName] = dini_Get(string, "AdminName");
            Player[playerid][NormalName] = dini_Get(string, "NormalName");
            Player[playerid][AdminSkin] = dini_Int(string, "AdminSkin");
            Player[playerid][Accent] = dini_Get(string, "Accent");
            Player[playerid][WalkieFrequency] = dini_Int(string, "WalkieFrequency");
            Player[playerid][PortableRadio] = dini_Int(string, "PortableRadio");
            Player[playerid][Note] = dini_Get(string, "Note");
            Player[playerid][CarPaintJobID] = dini_Int(string, "CarPaintJobID");
            Player[playerid][MeActions] = dini_Int(string, "MeActions");
	        Player[playerid][AdsPlaced] = dini_Int(string, "AdsPlaced");
	        Player[playerid][MatrunsExecuted] = dini_Int(string, "MatrunsExecuted");
        	Player[playerid][HasMapApp] = dini_Int(string, "HasMapApp");
        	Player[playerid][HasAdApp] = dini_Int(string, "HasAdApp");
        	Player[playerid][HasPagesApp] = dini_Int(string, "HasPagesApp");
        	Player[playerid][HasRadioApp] = dini_Int(string, "HasRadioApp");
        	Player[playerid][AnsweredQuizQuestions] = dini_Int(string, "AnsweredQuizQuestions");
            Player[playerid][AchievementRank] = dini_Int(string, "AchievementRank");
            Player[playerid][Tester] = dini_Int(string, "Tester");
            Player[playerid][oMuted] = dini_Int(string, "oMuted");
            Player[playerid][Car2OwnedCarModSlot0] = dini_Int(string, "Car2OwnedCarModSlot0");
            Player[playerid][Car2OwnedCarModSlot1] = dini_Int(string, "Car2OwnedCarModSlot1");
            Player[playerid][Car2OwnedCarModSlot2] = dini_Int(string, "Car2OwnedCarModSlot2");
            Player[playerid][Car2OwnedCarModSlot3] = dini_Int(string, "Car2OwnedCarModSlot3");
            Player[playerid][Car2OwnedCarModSlot4] = dini_Int(string, "Car2OwnedCarModSlot4");
            Player[playerid][Car2OwnedCarModSlot5] = dini_Int(string, "Car2OwnedCarModSlot5");
            Player[playerid][Car2OwnedCarModSlot6] = dini_Int(string, "Car2OwnedCarModSlot6");
            Player[playerid][Car2OwnedCarModSlot7] = dini_Int(string, "Car2OwnedCarModSlot7");
            Player[playerid][Car2OwnedCarModSlot8] = dini_Int(string, "Car2OwnedCarModSlot8");
            Player[playerid][Car2OwnedCarModSlot9] = dini_Int(string, "Car2OwnedCarModSlot9");
            Player[playerid][Car2OwnedCarModSlot10] = dini_Int(string, "Car2OwnedCarModSlot10");
            Player[playerid][Car2OwnedCarModSlot11] = dini_Int(string, "Car2OwnedCarModSlot11");
            Player[playerid][Car2OwnedCarModSlot12] = dini_Int(string, "Car2OwnedCarModSlot12");
            Player[playerid][Car2OwnedCarModSlot13] = dini_Int(string, "Car2OwnedCarModSlot13");
            Player[playerid][Car3OwnedCarModSlot0] = dini_Int(string, "Car3OwnedCarModSlot0");
            Player[playerid][Car3OwnedCarModSlot1] = dini_Int(string, "Car3OwnedCarModSlot1");
            Player[playerid][Car3OwnedCarModSlot2] = dini_Int(string, "Car3OwnedCarModSlot2");
            Player[playerid][Car3OwnedCarModSlot3] = dini_Int(string, "Car3OwnedCarModSlot3");
            Player[playerid][Car3OwnedCarModSlot4] = dini_Int(string, "Car3OwnedCarModSlot4");
            Player[playerid][Car3OwnedCarModSlot5] = dini_Int(string, "Car3OwnedCarModSlot5");
            Player[playerid][Car3OwnedCarModSlot6] = dini_Int(string, "Car3OwnedCarModSlot6");
            Player[playerid][Car3OwnedCarModSlot7] = dini_Int(string, "Car3OwnedCarModSlot7");
            Player[playerid][Car3OwnedCarModSlot8] = dini_Int(string, "Car3OwnedCarModSlot8");
            Player[playerid][Car3OwnedCarModSlot9] = dini_Int(string, "Car3OwnedCarModSlot9");
            Player[playerid][Car3OwnedCarModSlot10] = dini_Int(string, "Car3OwnedCarModSlot10");
            Player[playerid][Car3OwnedCarModSlot11] = dini_Int(string, "Car3OwnedCarModSlot11");
            Player[playerid][Car3OwnedCarModSlot12] = dini_Int(string, "Car3OwnedCarModSlot12");
            Player[playerid][Car3OwnedCarModSlot13] = dini_Int(string, "Car3OwnedCarModSlot13");
            Player[playerid][PlayerCarModel3] = dini_Int(string, "PlayerCarModel3");
            Player[playerid][PlayerCarModel2] = dini_Int(string, "PlayerCarModel2");
            Player[playerid][Car2X] = dini_Float(string, "Car2X");
            Player[playerid][Car2Y] = dini_Float(string, "Car2Y");
            Player[playerid][Car2Z] = dini_Float(string, "Car2Z");
            Player[playerid][Car3X] = dini_Float(string, "Car3X");
            Player[playerid][Car3Y] = dini_Float(string, "Car3Y");
            Player[playerid][Car3Z] = dini_Float(string, "Car3Z");
            Player[playerid][Car2PaintJobID] = dini_Int(string, "Car2PaintJobID");
            Player[playerid][Car3PaintJobID] = dini_Int(string, "Car3PaintJobID");
            Player[playerid][Car2ZAngle] = dini_Int(string, "Car2ZAngle");
            Player[playerid][Car3ZAngle] = dini_Int(string, "Car3ZAngle");
            Player[playerid][Car2Col1] = dini_Int(string, "Car2Col1");
            Player[playerid][Car2Col2] = dini_Int(string, "Car2Col2");
            Player[playerid][Car3Col1] = dini_Int(string, "Car3Col1");
            Player[playerid][Car3Col2] = dini_Int(string, "Car3Col2");
            Player[playerid][CheckBalance] = dini_Int(string, "CheckBalance");
            Player[playerid][LockedCar2] = dini_Int(string, "LockedCar2");
			Player[playerid][LockedCar3] = dini_Int(string, "LockedCar3");
			Player[playerid][ReportBanStatus] = dini_Int(string, "ReportBanStatus");
			Player[playerid][AdminDuty] = dini_Int(string, "AdminDuty");

			if(Player[playerid][AdminDuty] == 1)
			{
			    if(strlen(Player[playerid][AdminName]) >= 1 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
			    {
			        SendClientMessage(playerid, WHITE, "You are now on admin duty. You will appear on the /admins list and you'll be able to view reports.");
			        Player[playerid][AdminDuty] = 1;

			        if(Player[playerid][AdminLevel] >= 3)
			        {
			        	SetPlayerHealth(playerid, 500000);
			        }

			        format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

			        SetPlayerName(playerid, Player[playerid][AdminName]);
			        SetPlayerSkin(playerid, Player[playerid][AdminSkin]);

			        if(Player[playerid][HospitalTime] >= 1)
			        {
			            Player[playerid][HospitalTime] = 0;
			            SetCameraBehindPlayer(playerid);
			            SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
			            SetPlayerDrunkLevel(playerid, 0);
			            SendClientMessage(playerid, WHITE, "You have been de-hospitalized.");
			        }

			        format(string, sizeof(string), "%s (%s) is now on Admin Duty (just authenticated, but logged on duty).", Player[playerid][AdminName], Player[playerid][NormalName]);
			        SendToAdmins(ADMINORANGE, string, 0);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You haven't set an administrators' name yet.");
		        }
			}

            if(strlen(Player[playerid][AdminName]) < 1)
            {
                format(Player[playerid][AdminName], 128, "Nothing");
            }

            if(strlen(Player[playerid][NormalName]) < 1)
            {
                format(Player[playerid][NormalName], 255, "%s", GetName(playerid));
            }

            if(strfind(Player[playerid][Note], "Nothing", false))
            {
                if(strlen(Player[playerid][Note]) == 0)
                {
                    format(Player[playerid][Note], 128, "Nothing");
                }
                else
                {
	                format(string, sizeof(string), "OFFLINE NOTE FROM AN ADMIN: %s", Player[playerid][Note]);
	                SendClientMessage(playerid, ADMINORANGE, string);

	                format(Player[playerid][Note], 128, "Nothing");
                }
            }
            else
            {
                format(Player[playerid][Note], 128, "Nothing");
            }

            if(strlen(Player[playerid][Password]) < 1)
            {
                ShowPlayerDialog(playerid, 3666, DIALOG_STYLE_PASSWORD, "Password", "Please change your password.", "Login", "Cancel");
            }

			if(Player[playerid][GroupRank] >= 1 && Player[playerid][Group] < 1)
			{
			    Player[playerid][GroupRank] = 0;
			}

			if(Player[playerid][AdminLevel] == -1)
			{
			    SendClientMessage(playerid, WHITE, "You are no longer an administrator.");
			    Player[playerid][AdminLevel] = 0;
			}

			if(Player[playerid][Banned] == -1)
			{
			    SendClientMessage(playerid, WHITE, "Unban Successful.");
			    Player[playerid][Banned] = 0;
			}

			SpawnOwnedCar(playerid, 1);
			SpawnOwnedCar(playerid, 2);
			SpawnOwnedCar(playerid, 3);

	        if(Player[playerid][Banned] == 1 || Player[playerid][Banned] == 2 || Player[playerid][Banned] == 4)
	        {
	    		new hour, minute, second, day, year, month;
        		gettime(hour, minute, second);
        		getdate(year, month, day);
	            new IP[45];
	    		GetPlayerIp(playerid, IP, sizeof(IP));
				format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | CONNECTING ON A BANNED ACCOUNT | System", day, month, year, hour, minute, IP, Name);
				BanLog(string);
	            SendClientMessage(playerid, ANNOUNCEMENT, "You are banned from this server!");
	            format(string, sizeof(string), "Ban: %s has been auto-banned, defined reason: Attempted Ban Evasion.", Name);
	            printf("[system] %s has been auto-banned for attempting to login on a banned account.", Name);
				Ban(playerid);
	            SendClientMessageToAll(LIGHTRED, string);
	            return 1;
			}

			if(Player[playerid][AdminLevel] >= 1)
			{
				format(string, sizeof(string), "%s has authenticated (authenticating using their character password).", Name);
				SendToAdmins(ADMINORANGE, string, 0);
			}

			if(strlen(Player[playerid][Accent]) < 1)
			{
			    SendClientMessage(playerid, WHITE, "You currently don't have an accent set, it has been set to 'American' by default (use /accent).");
				format(Player[playerid][Accent], 128, "American");
			}

         	if(Player[playerid][Group] >= 1)
         	{
			    format(string, sizeof(string), "%s from your group has logged in.", Name);
			    GroupMessage(playerid, ANNOUNCEMENT, string);

		        format(string, sizeof(string), "Group MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
		        SendClientMessage(playerid, ANNOUNCEMENT, string);
         	}

			GivePlayerMoney(playerid, Player[playerid][Money]);

			if(Player[playerid][AdminLevel] >= 1)
			{
			    if(Player[playerid][AdminPIN] == 0)
			    {
			        TogglePlayerControllable(playerid, false);
			        SendClientMessage(playerid, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
			        ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
			    }
			    else
			    {
			        Player[playerid][PINUnauthedTime] = 1;
			        SendClientMessage(playerid, WHITE, "You have 10 seconds to login before you are auto-kicked.");
			        TogglePlayerControllable(playerid, false);
					ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
				}
			}

	        if(Player[playerid][Tutorial] < 1)
	        {
		    	SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 0, 0, 0, 0, 0, 0, 0);
		    	SpawnPlayer(playerid);

		    	Player[playerid][ResetTimer] = 1;

		    	SetPlayerInterior(playerid, Player[playerid][LastInterior]);
		    	SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);

				new Flaw = floatround(Player[playerid][LastHealth], floatround_ceil);
		    	SetPlayerHealth(playerid, Flaw);

				Flaw = floatround(Player[playerid][LastArmour], floatround_ceil);
		    	SetPlayerArmour(playerid, Flaw);

		    	if(strcmp(Player[playerid][Offence1], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 1);
		    	}
		    	if(strcmp(Player[playerid][Offence2], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 2);
		    	}
		    	if(strcmp(Player[playerid][Offence3], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 3);
		    	}
		    	if(strcmp(Player[playerid][Offence4], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 4);
		    	}
		    	if(strcmp(Player[playerid][Offence5], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 5);
		    	}
		    	if(strcmp(Player[playerid][Offence6], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 6);
		    	}
	    	}
	    	else
	    	{
	    	    PutPlayerInTutorial(playerid, 0);
	    	}

	    	if(Day == Player[playerid][LastLoginDay] && Month == Player[playerid][LastLoginMonth] && Year == Player[playerid][LastLoginYear])
	    	{
    	        format(string, sizeof(string), "Welcome back, %s. You last logged in earlier today at %d:%d.", Name, Player[playerid][LastLoginHour], Player[playerid][LastLoginMinute]);
    	        SendClientMessage(playerid, WHITE, string);
	    	}
	    	else
	    	{
	    		format(string, sizeof(string), "Welcome back, %s. You last logged in on %d/%d/%d at %d:%d.", Name, Player[playerid][LastLoginDay], Player[playerid][LastLoginMonth], Player[playerid][LastLoginYear], Player[playerid][LastLoginHour], Player[playerid][LastLoginMinute]);
	    		SendClientMessage(playerid, WHITE, string);
	    	}

	    	Player[playerid][LastLoginMinute] = Minute;
	    	Player[playerid][LastLoginHour] = Hour;
	    	Player[playerid][LastLoginDay] = Day;
	    	Player[playerid][LastLoginMonth] = Month;
	    	Player[playerid][LastLoginYear] = Year;

	    	SetPlayerSkin(playerid, Player[playerid][LastSkin]);
	    }
	    else
	    {
	        new Sum;
	        Sum = 3-Player[playerid][LoginAttempts];
	        SendClientMessage(playerid, ADMINORANGE, "The password you have entered does not match your account. Please try again or use the forums.");
	        Player[playerid][LoginAttempts]++;
			format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-kicked.", Sum);
			SendClientMessage(playerid, WHITE, string);
			ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to Evolved Gaming  Roleplay\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");

			if(Player[playerid][LoginAttempts] == 3)
			{
			    new hour, minute, second, day, year, month;
			    gettime(hour, minute, second);
			    getdate(year, month, day);
			    #pragma unused second
			    new IP[45];
			    GetPlayerIp(playerid, IP, sizeof(IP));
			    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
			    Kick(playerid);
			}

		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must register first.");
	}
	return 1;
}

stock QuickSave(playerid)
{
	Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
	Player[playerid][LastInterior] = GetPlayerInterior(playerid);

	GetOwnedCarMods(playerid);

	SavePlayerData(playerid);
	return true;
}

stock LoadFilesIntoVars()
{
	//----------------------------------------------------------------------------------------
	if(fexist("Spawn.ini"))
	{
	    print("[system] Loading Spawn.ini");
	    SpawnX = dini_Float("Spawn.ini", "SpawnX");
	    SpawnY = dini_Float("Spawn.ini", "SpawnY");
	    SpawnZ = dini_Float("Spawn.ini", "SpawnZ");
	    SpawnInt = dini_Int("Spawn.ini", "SpawnInt");
	    SpawnWorld = dini_Int("Spawn.ini", "SpawnWorld");
	    print("[system] Loaded file Spawn.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Spawn.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Ranks.ini"))
	{
	    print("[system] Loading Ranks.ini");
	    OOCRanks[Rank1] = dini_Get("Ranks.ini", "Rank1");
	   	OOCRanks[Rank2] = dini_Get("Ranks.ini", "Rank2");
	   	OOCRanks[Rank3] = dini_Get("Ranks.ini", "Rank3");
	   	OOCRanks[Rank4] = dini_Get("Ranks.ini", "Rank4");
	   	OOCRanks[Rank5] = dini_Get("Ranks.ini", "Rank5");
	    print("[system] Loaded file Ranks.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Ranks.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Configuration.ini"))
	{
	    print("[system] Loading Configuration.ini");
	    Anticheat = 1;
	    print("[system] Loaded file Configuration.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Configuration.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("VisitorAnalysis.ini"))
	{
	    MaxVisitors = dini_Int("VisitorAnalysis.ini", "MaxVisitors");
	    MaxRegistered = dini_Int("VisitorAnalysis.ini", "MaxRegistered");
	    MaxLoggedIn = dini_Int("VisitorAnalysis.ini", "MaxLoggedIn");
		TotalConnections = dini_Int("VisitorAnalysis.ini", "TotalConnections");
	}
	else
	{
	    dini_Create("VisitorAnalysis.ini");
	    dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", 0);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", 0);
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Assets.ini"))
	{
	    print("[system] Loading Assets.ini");
	    Prison1X = dini_Float("Assets.ini", "Prison1X");
	    Prison1Y = dini_Float("Assets.ini", "Prison1Y");
	    Prison1Z = dini_Float("Assets.ini", "Prison1Z");
	    Prison1Int = dini_Int("Assets.ini", "Prison1Int");
	    Prison1World = dini_Int("Assets.ini", "Prison1World");
	    Prison2X = dini_Float("Assets.ini", "Prison2X");
	    Prison2Y = dini_Float("Assets.ini", "Prison2Y");
	    Prison2Z = dini_Float("Assets.ini", "Prison2Z");
	    Prison2Int = dini_Int("Assets.ini", "Prison2Int");
	    Prison2World = dini_Int("Assets.ini", "Prison2World");
	    LockerPosX = dini_Float("Assets.ini", "LockerPosX");
	    LockerPosY = dini_Float("Assets.ini", "LockerPosY");
	    LockerPosZ = dini_Float("Assets.ini", "LockerPosZ");
	    LockerPosInt = dini_Int("Assets.ini", "LockerPosInt");
	    HospitalSpawnX = dini_Float("Assets.ini", "HospitalSpawnX");
	    HospitalSpawnY = dini_Float("Assets.ini", "HospitalSpawnY");
	    HospitalSpawnZ = dini_Float("Assets.ini", "HospitalSpawnZ");
	    HospitalInt = dini_Int("Assets.ini", "HospitalInt");
	    ArrestPosX = dini_Float("Assets.ini", "ArrestPosX");
	    ArrestPosY = dini_Float("Assets.ini", "ArrestPosY");
	    ArrestPosZ = dini_Float("Assets.ini", "ArrestPosZ");
	    BankIntX = dini_Float("Assets.ini", "BankIntX");
	    BankIntY = dini_Float("Assets.ini", "BankIntY");
	    BankIntZ = dini_Float("Assets.ini", "BankIntZ");
	    BankIntID = dini_Int("Assets.ini", "BankIntID");
	    BankExtX = dini_Float("Assets.ini", "BankExtX");
	    BankExtY = dini_Float("Assets.ini", "BankExtY");
	    BankExtZ = dini_Float("Assets.ini", "BankExtZ");
	    PrisonDoor1X = dini_Float("Assets.ini", "PrisonDoor1X");
	    PrisonDoor1Y = dini_Float("Assets.ini", "PrisonDoor1Y");
	    PrisonDoor1Z = dini_Float("Assets.ini", "PrisonDoor1Z");
	    PrisonDoor1X1 = dini_Float("Assets.ini", "PrisonDoor1X1");
	    PrisonDoor1Y1 = dini_Float("Assets.ini", "PrisonDoor1Y1");
	    PrisonDoor1Z1 = dini_Float("Assets.ini", "PrisonDoor1Z1");
	    PrisonDoor1Int = dini_Int("Assets.ini", "PrisonDoor1Int");
		PrisonDoor2X = dini_Float("Assets.ini", "PrisonDoor2X");
		PrisonDoor2Y = dini_Float("Assets.ini", "PrisonDoor2Y");
		PrisonDoor2Z = dini_Float("Assets.ini", "PrisonDoor2Z");
		PrisonDoor2Int1 = dini_Int("Assets.ini", "PrisonDoor2Int1");
		PrisonDoor2X2 = dini_Float("Assets.ini", "PrisonDoor2X2");
		PrisonDoor2Y2 = dini_Float("Assets.ini", "PrisonDoor2Y2");
		PrisonDoor2Z2 = dini_Float("Assets.ini", "PrisonDoor2Z2");
		PrisonDoor2Int2 = dini_Int("Assets.ini", "PrisonDoor2Int2");
	    DropCarX = dini_Float("Assets.ini", "DropCarX");
	    DropCarY = dini_Float("Assets.ini", "DropCarY");
	    DropCarZ = dini_Float("Assets.ini", "DropCarZ");
	    FishX = dini_Float("Assets.ini", "FishX");
	    FishY = dini_Float("Assets.ini", "FishY");
	    FishZ = dini_Float("Assets.ini", "FishZ");
	    OwnedCarSpawnX = dini_Float("Assets.ini", "OwnedCarSpawnX");
	    OwnedCarSpawnY = dini_Float("Assets.ini", "OwnedCarSpawnY");
	    OwnedCarSpawnZ = dini_Float("Assets.ini", "OwnedCarSpawnZ");
	    HospitalSpawnX2 = dini_Float("Assets.ini", "HospitalSpawnX2");
	    HospitalSpawnY2 = dini_Float("Assets.ini", "HospitalSpawnY2");
	    HospitalSpawnZ2 = dini_Float("Assets.ini", "HospitalSpawnZ2");
	    HospitalInt2 = dini_Int("Assets.ini", "HospitalInt2");
 	    Harvest1X = dini_Float("Assets.ini", "Harvest1X");
	    Harvest1Y = dini_Float("Assets.ini", "Harvest1Y");
	    Harvest1Z = dini_Float("Assets.ini", "Harvest1Z");
 	    Harvest2X = dini_Float("Assets.ini", "Harvest2X");
	    Harvest2Y = dini_Float("Assets.ini", "Harvest2Y");
	    Harvest2Z = dini_Float("Assets.ini", "Harvest2Z");
	    Harvest3X = dini_Float("Assets.ini", "Harvest3X");
	    Harvest3Y = dini_Float("Assets.ini", "Harvest3Y");
	    Harvest3Z = dini_Float("Assets.ini", "Harvest3Z");
	    Harvest4X = dini_Float("Assets.ini", "Harvest4X");
	    Harvest4Y = dini_Float("Assets.ini", "Harvest4Y");
	    Harvest4Z = dini_Float("Assets.ini", "Harvest4Z");
	    Harvest5X = dini_Float("Assets.ini", "Harvest5X");
	    Harvest5Y = dini_Float("Assets.ini", "Harvest5Y");
	    Harvest5Z = dini_Float("Assets.ini", "Harvest5Z");
	    Tax = dini_Int("Assets.ini", "TaxRate");
	    LockerPos2X = dini_Float("Assets.ini", "LockerPos2X");
	    LockerPos2Y = dini_Float("Assets.ini", "LockerPos2Y");
	    LockerPos2Z = dini_Float("Assets.ini", "LockerPos2Z");
	    LockerPos2Int = dini_Int("Assets.ini", "LockerPos2Int");
	    FuelPrice = dini_Int("Assets.ini", "FuelPrice");
	    CityTrash = dini_Int("Assets.ini", "CityTrash");


	    if(dini_Isset("Assets.ini", "WAPNews"))
	    {
	        dini_Set("Assets.ini", "WAPNews", "There's a new application interface, enjoy!");
	    }

		PrisonPickup1 = CreateDynamicPickup(1239, 23, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z, 0, -1, -1, 150.0);
	    BankPickupID = CreateDynamicPickup(1239, 23, BankExtX, BankExtY, BankExtZ, 0, -1, -1, 150.0);
	    ArrestPosPickup = CreateDynamicPickup(1239, 23, ArrestPosX, ArrestPosY, ArrestPosZ, 0, -1, -1, 150.0);
	    print("[system] Loaded file Assets.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Assets.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	return 1;
}

public IsDateInThePast(day, month, year)
{
	new curday, curmonth, curyear;
	getdate(curyear, curmonth, curday);

	if(curyear > year)
	{
	    return 1;
	}
	else
	{
	    if(curyear == year)
	    {
	        if(curmonth > month)
	        {
	        	return 1;
	        }
	        else
	        {
	            if(curday > day)
	            {
	                return 1;
	            }
	            else
	            {
	                return 0;
	            }
	        }
	    }
	    else
	    {
	        return 1;
	    }
	}
}

public UntazePlayer(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    if(Player[playerid][Tazed] == 1)
	    {
	        TogglePlayerControllable(playerid, true);
	        ClearAnimations(playerid);
	        Player[playerid][Tazed] = 0;
	    }
	}
	return 1;
}

public SaveGeneralData()
{
	SaveGroups();
	UpdateAnalysis();
	SaveJobs();
	SaveHouses();
	SaveFactions();
	SaveGarages();
	SaveBusinesses();
	SaveFurni();

	if(CurGMX == 1)
	{
	    SendClientMessageToAll(WHITE, "Any changes made now will not be saved until the server has fully rebooted.");

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    TogglePlayerControllable(i, false);
		    QuickSave(i);
		}

		CurGMX = 2;

	}

	return 1;
}

public DoGMX()
{
	SendRconCommand("gmx");
	return 1;
}

stock GetPlayerID(string[])
{
    for(new i = 0; i <= MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i) == 1)
		{
            new testname[MAX_PLAYER_NAME];
	    	GetPlayerName(i, testname, sizeof(testname));
	    	if(strcmp(testname, string, true, strlen(string))  == 0)
	    	{
	        	return i;
	    	}
		}
    }
    return INVALID_PLAYER_ID;
}

public GMXPrep(playerid, reason[])
{
	new string[128];
	format(string, sizeof(string), "Admin %s has initiated a server restart, it will occur in the next 30 seconds, reason: %s", GetName(playerid), reason);
	SendClientMessageToAll(LIGHTRED, string);
	SetTimer("DoGMX", 30000, false);
	SetTimer("SaveGeneralData", 26000, false);
	CurGMX = 1;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new vehslot;
	if(response)
	{
	    if(strfind(inputtext, "%") == -1)
		{
			switch(dialogid)
			{
			    case 15000:
			    {
			        if(!strlen(inputtext) || strlen(inputtext) > 25)
			        {
			            ShowPlayerDialog(playerid, 15000, DIALOG_STYLE_PASSWORD, "Registration", "Please fill in a valid password (0-25 characters)", "Register", "");
			        }
			        else if(strlen(inputtext) > 0 && strlen(inputtext) < 25)
	            	{
		                new escpass[100];
		                mysql_real_escape_string(inputtext, escpass);
		                MySQL_Register(playerid, escpass);
	            	}
			    }
			    case 15001:
			    {
					new query[200], escapepass[100];
					mysql_real_escape_string(inputtext, escapepass);
					format(query, sizeof(query), "SELECT NormalName FROM users WHERE NormalName = '%s' AND Password = '%s'", GetName(playerid), escapepass);
					mysql_query(mysql, query);
					mysql_store_result();
					new rows = mysql_num_rows();
					if(rows == 1)
					{
					    SendClientMessage(playerid, LIGHTRED, "Please wait while we spawn your character.");
						MySQL_Login(playerid);
					}
					else if(!rows)
					{
					    ShowPlayerDialog(playerid, 15001, DIALOG_STYLE_PASSWORD, "Login failed", "Wrong password! Your attempt has been logged.", "Login", "");
					}
					mysql_free_result();
			    }
				case 9001:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 9011, DIALOG_STYLE_INPUT, "RECORD CHECK", "Please enter a valid name", "Search", "Close");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 9012, DIALOG_STYLE_INPUT, "LICENSE CHECK", "Please enter a license plate", "Search", "Close");
				        }
				        case 2:
				        {
				            ShowPlayerDialog(playerid, 9013, DIALOG_STYLE_LIST, "BOLOS", "Add a BOLO\nView BOLOs", "Choose", "Exit");
				        }
				        case 3:
				        {
				            ShowPlayerDialog(playerid, 9020, DIALOG_STYLE_INPUT, "Trackify", "Enter in a valid number.", "Choose", "Cancel");
				        }
				    }
				}
				case 9020:
				{
				    new number = strval(inputtext);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(Player[i][PhoneN] == number)
					    {
					        if(Player[i][PhoneStat] == 0)
					        {
					            SendClientMessage(playerid, WHITE, "This phone is currently unreachable.");
							}
							else
							{
							    GetPlayerPos(i, Player[i][LastX], Player[i][LastY], Player[i][LastZ]);
								Player[playerid][Checkpoint] = 1;
							    SetPlayerCheckpoint(playerid, Player[i][LastX], Player[i][LastY], Player[i][LastZ], 5.0);
							    SendClientMessage(playerid, WHITE, "A checkpoint has been set to his last known location.");
							}
					        break;
					    }
					    else if(i == MAX_PLAYERS)
					    {
					        SendClientMessage(playerid, WHITE, "This phone is currently unreachable.");
					    }
					}
				}
				case 9013:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 9015, DIALOG_STYLE_INPUT, "Enter a new BOLO", "Enter a new BOLO (less than 200 characters)", "Choose", "Cancel");
				        }
				        case 1:
				        {
				            new string[1024];
				            format(string, sizeof(string), "%s\n%s\n%s\n%s\n%s\nNext Page", Bolo[0], Bolo[1], Bolo[2], Bolo[3], Bolo[4]);
							ShowPlayerDialog(playerid, 9014, DIALOG_STYLE_LIST, "BOLOs", string, "Choose", "Exit");
				        }
				    }
				}
				case 9015:
				{
				    SendClientMessage(playerid, WHITE, "BOLO has been added.");

				    format(Bolo[9], 200, "%s", Bolo[8]);
				    format(Bolo[8], 200, "%s", Bolo[7]);
				    format(Bolo[7], 200, "%s", Bolo[6]);
				    format(Bolo[6], 200, "%s", Bolo[5]);
				    format(Bolo[5], 200, "%s", Bolo[4]);
				    format(Bolo[4], 200, "%s", Bolo[3]);
				    format(Bolo[3], 200, "%s", Bolo[2]);
				    format(Bolo[2], 200, "%s", Bolo[1]);
				    format(Bolo[1], 200, "%s", Bolo[0]);
				    format(Bolo[0], 200, "%s", inputtext);

				}
				case 9014:
				{
				    switch(listitem)
				    {
				        case 5:
				        {
                            new string[1024];
				            format(string, sizeof(string), "%s\n%s\n%s\n%s\n%s", Bolo[5], Bolo[6], Bolo[7], Bolo[8], Bolo[9]);
				            ShowPlayerDialog(playerid, 9016, DIALOG_STYLE_LIST, "BOLOs", string, "Choose", "Exit");
				        }
				    }
				}
				case 9012:
				{
					new cplate[255], playerinfo[512], notregistered[128];
					format(notregistered, sizeof(notregistered), "123-ABC");
					format(cplate, sizeof(cplate), "%s", inputtext);

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(!strcmp(notregistered, cplate))
					    {
					        format(playerinfo, sizeof(playerinfo), "Registration: INVALID", GetName(i), Player[playerid][PlayerCarModel], Player[playerid][CarLinkID]);
							ShowPlayerDialog(playerid, 9013, DIALOG_STYLE_MSGBOX, "Vehicle Registration", playerinfo, "Done", "");
					    }
					    else if(!strcmp(Player[i][Car1Plate], cplate))
					    {
	                        format(playerinfo, sizeof(playerinfo), "Owner: %s\nVehicle: %d (( %d ))\nRegistration: VALID", GetName(i), Player[playerid][PlayerCarModel], Player[playerid][CarLinkID]);
							ShowPlayerDialog(playerid, 9013, DIALOG_STYLE_MSGBOX, "Vehicle Registration", playerinfo, "Done", "");
					        break;
					    }
					    else if(!strcmp(Player[i][Car2Plate], cplate))
					    {
					        format(playerinfo, sizeof(playerinfo), "Owner: %s\nVehicle: %d (( %d ))\nRegistration: VALID", GetName(i), Player[playerid][PlayerCarModel2], Player[playerid][Car2LinkID]);
							ShowPlayerDialog(playerid, 9013, DIALOG_STYLE_MSGBOX, "Vehicle Registration", playerinfo, "Done", "");
					        break;
					    }
					    else if(!strcmp(Player[i][Car3Plate], cplate))
					    {
					        format(playerinfo, sizeof(playerinfo), "Owner: %s\nVehicle: %d (( %d ))\nRegistration: VALID", GetName(i), Player[playerid][PlayerCarModel3], Player[playerid][Car3LinkID]);
							ShowPlayerDialog(playerid, 9013, DIALOG_STYLE_MSGBOX, "Vehicle Registration", playerinfo, "Done", "");
					        break;
					    }
					}
				}
				case 9011:
				{
					new string[1024];
					new namestr[128], JobString[128];
                    new pID = GetPlayerID(inputtext);
					if(Player[pID][Job] >= 1)
					{
					    format(JobString, sizeof(JobString), "%s", Jobs[Player[pID][Job]]);
					}
					else
					{
					    format(JobString, sizeof(JobString), "Unemployed");
					}
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
	         			if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
						{
							format(namestr, sizeof(namestr), "%s", inputtext);
	   						if(Player[pID][HouseReg] == 0)
	   						{
								if(Player[pID][PhoneN] == -1)
								{
									format(string, sizeof(string), "Age: %d\nCrimes: %d\nVehicle 1 Plate: %s\nVehicle 2 Plate: %s\nVehicle 3 Plate: %s\nPhone number: N/A\nJob: %s\nTicket(s): $%d\nLicense Points: %d", Player[pID][Age], Player[pID][CriminalOffences], Player[pID][Car1Plate], Player[pID][Car2Plate], Player[pID][Car3Plate], JobString, Player[playerid][LicensePoints]);
								}
								else {
									format(string, sizeof(string), "Age: %d\nCrimes: %d\nVehicle 1 Plate: %s\nVehicle 2 Plate: %s\nVehicle 3 Plate: %s\nPhone number: %d\nJob: %s\nTicket(s): $%d\nLicense Points: %d", Player[pID][Age], Player[pID][CriminalOffences], Player[pID][Car1Plate], Player[pID][Car2Plate], Player[pID][Car3Plate], Player[playerid][PhoneN], JobString, Player[playerid][LicensePoints]);
								}
							}
	   						else
	   						{
								if(Player[pID][PhoneN])
	   						    format(string, sizeof(string), "Age: %d\nCrimes: %d\nHouse: %d\nVehicle 1 Plate: %s\nVehicle 2 Plate: %s\nVehicle 3 Plate: %s\nPhone number: %d\nJob: %s\nTicket(s): $%d\nLicense Points: %d", Player[pID][Age], Player[pID][CriminalOffences], Player[pID][House], Player[pID][Car1Plate], Player[pID][Car2Plate], Player[pID][Car3Plate], Player[playerid][PhoneN], JobString, Player[playerid][Tickets], Player[playerid][LicensePoints]);
	   						}

	   						ShowPlayerDialog(playerid, 271623, DIALOG_STYLE_MSGBOX, namestr, string, "Close", "");
						}
					}
				}
				case 3720:
				{
					if(inputtext[128] == Player[playerid][CreditCard])
					{
					   	ShowPlayerDialog(playerid, 3721, DIALOG_STYLE_LIST, "ATM", "View balance\nWithdraw", "Close", "");
					}
					else
					{
				        ShowPlayerDialog(playerid, 3719, DIALOG_STYLE_MSGBOX, "ATM", "You have entered an invalid PIN\nIf you forgot your old one, request a new credit card.", "Close", "");
				    }
				}
				case 3721:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        new string[128];
					        format(string, sizeof(string), "Bank: $%d\nLoans: $%d", Player[playerid][BankMoney], Player[playerid][LoanedAmount]);
					        ShowPlayerDialog(playerid, 3722, DIALOG_STYLE_MSGBOX, "ATM", string, "Close", "");
					    }
					    case 1:
					    {
							ShowPlayerDialog(playerid, 3723, DIALOG_STYLE_LIST, "ATM", "$100\n$250\n$500\n$1000", "Choose", "Close");
					    }
					}
				}
				case 3723:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        if(Player[playerid][BankMoney] >= 100)
					        {
								Player[playerid][BankMoney] -= 100;
								Player[playerid][Money] += 100;

								NearByMessage(playerid, PURPLE, "** $100 would roll out of the ATM");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to withdraw!");
					        }
					    }
					    case 1:
					    {
					        if(Player[playerid][BankMoney] >= 250)
					        {
	                            Player[playerid][BankMoney] -= 250;
								Player[playerid][Money] += 250;

								NearByMessage(playerid, PURPLE, "** $250 would roll out of the ATM");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to withdraw!");
					        }
					    }
					    case 2:
					    {
					        if(Player[playerid][BankMoney] >= 500)
					        {
	                            Player[playerid][BankMoney] -= 500;
								Player[playerid][Money] += 500;

								NearByMessage(playerid, PURPLE, "** $500 would roll out of the ATM");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to withdraw!");
					        }
					    }
					    case 3:
					    {
					        if(Player[playerid][BankMoney] >= 1000)
					        {
	                            Player[playerid][BankMoney] -= 1000;
								Player[playerid][Money] += 1000;

								NearByMessage(playerid, PURPLE, "** $1000 would roll out of the ATM");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to withdraw!");
					        }
					    }
					}
				}
				case 7777:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
							ShowPlayerDialog(playerid, 7778, DIALOG_STYLE_LIST, "Choose an amount", "$5,000\n$7,500\n$10,000\n$15,000", "Choose", "Cancel");
				        }
				        case 1:
				        {
				            new string[255];
				            format(string, sizeof(string), "Current amount loaned:\n$%d", Player[playerid][LoanedAmount]);
							ShowPlayerDialog(playerid, 7779, DIALOG_STYLE_MSGBOX, "Current loan(s)", string, "Close", "");
				        }
				        case 2:
				        {
				            new string[255];
				            format(string, sizeof(string), "Pay back: $%d", Player[playerid][LoanedAmount]);
							ShowPlayerDialog(playerid, 7780, DIALOG_STYLE_LIST, "Loans", string, "Accept", "Cancel");
				        }
				    }
				}

				case 7780:
				{
				    switch(listitem)
					{
					    case 0:
						{
						    if(Player[playerid][BankMoney] >= Player[playerid][LoanedAmount])
						    {
						        Player[playerid][BankMoney] -= Player[playerid][LoanedAmount];
						        Player[playerid][LoanedAmount] = 0;
						        SendClientMessage(playerid, WHITE, "You have succesfully paid back your loan.");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You don't have enough money to pay your loan back.");
							}
						}
					}
				}

				case 7778:
				{
				    switch(listitem)
				    {
						case 0:
				        {
				            new string[255];
							if(Player[playerid][LoanedAmount] == 0)
							{
								ShowPlayerDialog(playerid, 7760, DIALOG_STYLE_MSGBOX, "Notice", "{A1A1A1}The Red County Bank\n{F5F2F2}You have succesfully loaned {169C11}$5,000{F5F2F2} from the bank.\nEvery paycheck there will be {169C11}$350{F5F2F2} taken from your paycheck.", "Close", "");
								Player[playerid][LoanedAmount] = 6000;
								Player[playerid][BankMoney] += 5000;
							}
							else
							{
							    format(string, sizeof(string), "Before opening a new loan please pay back your old loan of $%d", Player[playerid][LoanedAmount]);
							    ShowPlayerDialog(playerid, 7660, DIALOG_STYLE_MSGBOX, "ERROR", string, "Close", "");
							}
				        }
				        case 1:
				        {
	                        new string[255];
							if(Player[playerid][LoanedAmount] == 0)
							{
								ShowPlayerDialog(playerid, 7760, DIALOG_STYLE_MSGBOX, "Notice", "{A1A1A1}The Red County Bank\n{F5F2F2}You have succesfully loaned {169C11}$7,500{F5F2F2} from the bank.\nEvery paycheck there will be {169C11}$350{F5F2F2} taken from your paycheck.", "Close", "");
								Player[playerid][LoanedAmount] = 8500;
								Player[playerid][BankMoney] += 7500;
							}
							else
							{
							    format(string, sizeof(string), "Before opening a new loan please pay back your old loan of $%d", Player[playerid][LoanedAmount]);
							    ShowPlayerDialog(playerid, 7660, DIALOG_STYLE_MSGBOX, "ERROR", string, "Close", "");
							}
						}
						case 2:
						{
						    new string[255];
	                        if(Player[playerid][LoanedAmount] == 0)
							{
								ShowPlayerDialog(playerid, 7760, DIALOG_STYLE_MSGBOX, "Notice", "{A1A1A1}The Red County Bank\n{F5F2F2}You have succesfully loaned {169C11}$10,000{F5F2F2} from the bank.\nEvery paycheck there will be {169C11}$350{F5F2F2} taken from your paycheck.", "Close", "");
	                            Player[playerid][LoanedAmount] = 11000;
								Player[playerid][BankMoney] += 10000;
							}
							else
							{
							    format(string, sizeof(string), "Before opening a new loan please pay back your old loan of $%d", Player[playerid][LoanedAmount]);
							    ShowPlayerDialog(playerid, 7660, DIALOG_STYLE_MSGBOX, "ERROR", string, "Close", "");
							}
						}
						case 3:
						{
						    new string[255];
	                        if(Player[playerid][LoanedAmount] == 0)
							{
								ShowPlayerDialog(playerid, 7760, DIALOG_STYLE_MSGBOX, "Notice", "{A1A1A1}The Red County Bank\n{F5F2F2}You have succesfully loaned {169C11}$15,000{F5F2F2} from the bank.\nEvery paycheck there will be {169C11}$350{F5F2F2} taken from your paycheck.", "Close", "");
	                            Player[playerid][LoanedAmount] = 16000;
								Player[playerid][BankMoney] += 15000;
							}
							else
							{
							    format(string, sizeof(string), "Before opening a new loan please pay back your old loan of $%d", Player[playerid][LoanedAmount]);
							    ShowPlayerDialog(playerid, 7660, DIALOG_STYLE_MSGBOX, "ERROR", string, "Close", "");
							}
						}
				    }
				}

	            case 1236:
				{
					switch(listitem)
					{
					    case 1:
					    {
				    		SetPlayerCheckpoint(playerid, 2073.23706, -1831.72522, 12.54308, 5.0);
							Player[playerid][Checkpoint] = 1;
				 			Player[playerid][Map] = 1;
				   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Idlewood Pay 'n' Spray has been set!");
					    }
					    case 2:
					    {
					        SetPlayerCheckpoint(playerid, 1024.77100, -1030.94348, 31.05533, 5.0);
							Player[playerid][Checkpoint] = 1;
				 			Player[playerid][Map] = 1;
				   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Temple Pay 'n' Spray has been set!");
					    }
					    case 3:
					    {
				            SetPlayerCheckpoint(playerid, 1024.77100, -1030.94348, 31.05533, 5.0);
							Player[playerid][Checkpoint] = 1;
				 			Player[playerid][Map] = 1;
				   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Transfender has been set!");
					    }
					    case 4:
					    {
				            SetPlayerCheckpoint(playerid, 2651.6111, -2003.6633, 13.3828, 5.0);
							Player[playerid][Checkpoint] = 1;
				 			Player[playerid][Map] = 1;
				   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Loco Low Co has been set!");
						}
						case 5:
						{
						    SetPlayerCheckpoint(playerid, -2709.0222, 213.2845, 4.1441, 5.0);
						    Player[playerid][Checkpoint] = 1;
						    Player[playerid][Map] = 1;
						    SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Wheel Arch Angel has been set!");
						}
					}
				}

				case 1001:
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    ShowPlayerDialog(playerid, 2000, DIALOG_STYLE_LIST, "Walls", "Wall 1 (19426)\nFloor 1 (19356)\nDoor 1 (1502)\nWall 2 (19386)\nWall 3 (19385)\nWall 4 (19377)", "Choose", "Cancel");
		                }

		                case 1:
		                {
		                    ShowPlayerDialog(playerid, 2001, DIALOG_STYLE_LIST, "Buildings", "Building 1 (19491)", "Choose", "Cancel");
		                }

		                case 2:
		                {
		                    ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "Lamps", "Lamp 1 (19124)", "Choose", "Cancel");
		                }
						case 3:
						{
						    ShowPlayerDialog(playerid, 6009, DIALOG_STYLE_INPUT, "Custom IDs", "Please enter an object ID", "Choose", "Cancel");
						}
		            }
		        }

		        case 6009:
		        {
					switch(inputtext[128])
					{
						case 0:
						{
							new custID = strval(inputtext);
							new Float: px, Float: py, Float: pz;
			             	GetPlayerPos(playerid, px, py, pz);

							totalPlayerObjects[playerid] += 1;

							Objects[playerid][totalPlayerObjects[playerid]][Model] = custID;
			    			Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);
						}
					}
				}

		        case 2000:
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
	                     	new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 19426;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

							new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
		                }

		                case 1:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 19356;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}

		                case 2:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 1502;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}

		                case 3:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 19386;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}

						case 4:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 19385;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}

						case 5:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 19377;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}
		            }
		        }

		        case 2001:
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 12991;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}
		            }
		        }

		        case 2002:
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    new Float: px, Float: py, Float: pz;
		                    GetPlayerPos(playerid, px, py, pz);

		                    totalPlayerObjects[playerid] += 1;

		                    Objects[playerid][totalPlayerObjects[playerid]][Model] = 19124;
		                    Objects[playerid][totalPlayerObjects[playerid]][ID] = totalPlayerObjects[playerid];

							Objects[playerid][totalPlayerObjects[playerid]][LinkID] = CreateObject(Objects[playerid][totalPlayerObjects[playerid]][Model], px+1, py, pz, 0, 0, 0);

	                        new string[255];
							format(string, sizeof(string), "You have spawned in object ID %d", Objects[playerid][totalPlayerObjects[playerid]][ID]);
							SendClientMessage(playerid, -1, string);
						}
		            }
		        }

		        case 1100:
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    EditObject(playerid, Objects[playerid][1][LinkID]);
		                }
		                case 1:
		                {
		                    EditObject(playerid, Objects[playerid][2][LinkID]);
		                }
		                case 2:
		                {
		                    EditObject(playerid, Objects[playerid][3][LinkID]);
		                }
		                case 3:
		                {
		                    EditObject(playerid, Objects[playerid][4][LinkID]);
		                }
		                case 4:
		                {
		                    EditObject(playerid, Objects[playerid][5][LinkID]);
		                }
		                case 5:
		                {
		                    EditObject(playerid, Objects[playerid][6][LinkID]);
		                }
		                case 6:
		                {
		                    EditObject(playerid, Objects[playerid][7][LinkID]);
		                }
		                case 7:
		                {
		                    EditObject(playerid, Objects[playerid][8][LinkID]);
		                }
		                case 8:
		                {
		                    EditObject(playerid, Objects[playerid][9][LinkID]);
		                }
		                case 9:
		                {
		                    EditObject(playerid, Objects[playerid][10][LinkID]);
		                }
		                case 10:
		                {
		                    EditObject(playerid, Objects[playerid][11][LinkID]);
		                }
		                case 11:
		                {
		                    EditObject(playerid, Objects[playerid][12][LinkID]);
		                }
		                case 12:
		                {
		                    EditObject(playerid, Objects[playerid][13][LinkID]);
		                }
		                case 13:
		                {
		                    EditObject(playerid, Objects[playerid][14][LinkID]);
		                }
		                case 14:
		                {
		                    EditObject(playerid, Objects[playerid][15][LinkID]);
		                }
		                case 15:
		                {
		                    EditObject(playerid, Objects[playerid][16][LinkID]);
		                }
		                case 16:
		                {
		                    EditObject(playerid, Objects[playerid][17][LinkID]);
		                }
		                case 17:
		                {
		                    EditObject(playerid, Objects[playerid][18][LinkID]);
		                }
		                case 18:
		                {
		                    EditObject(playerid, Objects[playerid][19][LinkID]);
		                }
		                case 19:
		                {
		                    EditObject(playerid, Objects[playerid][20][LinkID]);
		                }
		                case 20:
		                {
	                        ShowPlayerDialog(playerid, 1201, DIALOG_STYLE_LIST, "OBJECTS", "Object 21\nObject 22\nObject 23\nObject 24\nObject 25\nObject 26\nObject 27\nObject 28\nObject 29\nObject 30\nObject 31\nObject 32\nObject 33\nObject 34\nObject 35\nObject 36\nObject 37\nObject 38\nObject 39\nObject 40", "Choose", "Cancel");
						}
		            }
		        }

		        case 1101:
		        {
		            switch(listitem)
		            {
	                    case 0:
		                {
		                    EditObject(playerid, Objects[playerid][21][LinkID]);
		                }
		                case 1:
		                {
		                    EditObject(playerid, Objects[playerid][22][LinkID]);
		                }
		                case 2:
		                {
		                    EditObject(playerid, Objects[playerid][23][LinkID]);
		                }
		                case 3:
		                {
		                    EditObject(playerid, Objects[playerid][24][LinkID]);
		                }
		                case 4:
		                {
		                    EditObject(playerid, Objects[playerid][25][LinkID]);
		                }
		                case 5:
		                {
		                    EditObject(playerid, Objects[playerid][26][LinkID]);
		                }
		                case 6:
		                {
		                    EditObject(playerid, Objects[playerid][27][LinkID]);
		                }
		                case 7:
		                {
		                    EditObject(playerid, Objects[playerid][28][LinkID]);
		                }
		                case 8:
		                {
		                    EditObject(playerid, Objects[playerid][29][LinkID]);
		                }
		                case 9:
		                {
		                    EditObject(playerid, Objects[playerid][30][LinkID]);
		                }
		                case 10:
		                {
		                    EditObject(playerid, Objects[playerid][31][LinkID]);
		                }
		                case 11:
		                {
		                    EditObject(playerid, Objects[playerid][32][LinkID]);
		                }
		                case 12:
		                {
		                    EditObject(playerid, Objects[playerid][33][LinkID]);
		                }
		                case 13:
		                {
		                    EditObject(playerid, Objects[playerid][34][LinkID]);
		                }
		                case 14:
		                {
		                    EditObject(playerid, Objects[playerid][35][LinkID]);
		                }
		                case 15:
		                {
		                    EditObject(playerid, Objects[playerid][36][LinkID]);
		                }
		                case 16:
		                {
		                    EditObject(playerid, Objects[playerid][37][LinkID]);
		                }
		                case 17:
		                {
		                    EditObject(playerid, Objects[playerid][38][LinkID]);
		                }
		                case 18:
		                {
		                    EditObject(playerid, Objects[playerid][39][LinkID]);
		                }
		                case 19:
		                {
		                    EditObject(playerid, Objects[playerid][40][LinkID]);
		                }
		            }
		        }

		        case 1200:
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    DestroyObject(Objects[playerid][1][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 1:
		                {
		                    DestroyObject(Objects[playerid][2][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 2:
		                {
		                    DestroyObject(Objects[playerid][3][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 3:
		                {
		                    DestroyObject(Objects[playerid][4][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 4:
		                {
		                    DestroyObject(Objects[playerid][5][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 5:
		                {
		                    DestroyObject(Objects[playerid][6][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 6:
		                {
		                    DestroyObject(Objects[playerid][7][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 7:
		                {
		                    DestroyObject(Objects[playerid][8][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 8:
		                {
		                    DestroyObject(Objects[playerid][9][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 9:
		                {
		                    DestroyObject(Objects[playerid][10][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 10:
		                {
		                    DestroyObject(Objects[playerid][11][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 11:
		                {
		                    DestroyObject(Objects[playerid][12][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 12:
		                {
		                    DestroyObject(Objects[playerid][13][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 13:
		                {
		                    DestroyObject(Objects[playerid][14][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 14:
		                {
		                    DestroyObject(Objects[playerid][15][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 15:
		                {
		                    DestroyObject(Objects[playerid][16][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 16:
		                {
		                    DestroyObject(Objects[playerid][17][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 17:
		                {
		                    DestroyObject(Objects[playerid][18][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 18:
		                {
		                    DestroyObject(Objects[playerid][19][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 19:
		                {
		                    DestroyObject(Objects[playerid][20][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 20:
		                {
							ShowPlayerDialog(playerid, 1201, DIALOG_STYLE_LIST, "OBJECTS", "Object 21\nObject 22\nObject 23\nObject 24\nObject 25\nObject 26\nObject 27\nObject 28\nObject 29\nObject 30\nObject 31\nObject 32\nObject 33\nObject 34\nObject 35\nObject 36\nObject 37\nObject 38\nObject 39\nObject 40", "Choose", "Cancel");
		                }
		            }
		        }

		        case 1201:
		        {
		            switch(listitem)
					{
					    case 0:
		                {
		                    DestroyObject(Objects[playerid][21][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 1:
		                {
		                    DestroyObject(Objects[playerid][22][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 2:
		                {
		                    DestroyObject(Objects[playerid][23][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 3:
		                {
		                    DestroyObject(Objects[playerid][24][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 4:
		                {
		                    DestroyObject(Objects[playerid][25][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 5:
		                {
		                    DestroyObject(Objects[playerid][26][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 6:
		                {
		                    DestroyObject(Objects[playerid][27][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 7:
		                {
		                    DestroyObject(Objects[playerid][28][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 8:
		                {
		                    DestroyObject(Objects[playerid][29][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 9:
		                {
		                    DestroyObject(Objects[playerid][30][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 10:
		                {
		                    DestroyObject(Objects[playerid][31][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 11:
		                {
		                    DestroyObject(Objects[playerid][32][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 12:
		                {
		                    DestroyObject(Objects[playerid][33][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 13:
		                {
		                    DestroyObject(Objects[playerid][34][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 14:
		                {
		                    DestroyObject(Objects[playerid][35][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 15:
		                {
		                    DestroyObject(Objects[playerid][36][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 16:
		                {
		                    DestroyObject(Objects[playerid][37][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 17:
		                {
		                    DestroyObject(Objects[playerid][38][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 18:
		                {
		                    DestroyObject(Objects[playerid][39][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
		                case 19:
		                {
		                    DestroyObject(Objects[playerid][40][LinkID]);
		                    SendClientMessage(playerid, -1, "You've deleted an object.");
		                }
					}
		        }

				case 57434567:
				{
					switch(vehslot)
						{
	      					case 0:
								{
									if(Player[playerid][PlayerCarModel] > 0)
										{
											if(Player[playerid][Checkpoint]==0)
												{
													new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
													GetVehiclePos(Player[playerid][CarLinkID], CurCarX, CurCarY, CurCarZ);
													SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
													Player[playerid][Checkpoint] = 1;
													Player[playerid][FindingCar] = 1;
													SendClientMessage(playerid, WHITE, "A checkpoint has been placed at your car. If you can't reach it, /re to contact an admin.");
												}
												else
												{
													SendClientMessage(playerid, WHITE, "You already have an active checkpoint, /kc or reach it first!");
												}
										}
								}
							case 1:
								{
									if(Player[playerid][PlayerCarModel2] > 0)
										{
											if(Player[playerid][Checkpoint] == 0)
												{
													new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
													GetVehiclePos(Player[playerid][Car2LinkID], CurCarX, CurCarY, CurCarZ);
													SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
													Player[playerid][Checkpoint] = 1;
													Player[playerid][FindingCar] = 1;
													SendClientMessage(playerid, WHITE, "A checkpoint has been placed at your car. If you can't reach it, /re to contact an admin.");
												}
												else
												{
													SendClientMessage(playerid, WHITE, "You already have an active checkpoint, /kc or reach it first!");
												}
										}
								}
							case 2:
								{
									if(Player[playerid][PlayerCarModel3] > 0)
										{
											if(Player[playerid][Checkpoint] == 0)
												{
													new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
													GetVehiclePos(Player[playerid][Car3LinkID], CurCarX, CurCarY, CurCarZ);
													SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
													Player[playerid][Checkpoint] = 1;
													Player[playerid][FindingCar] = 1;
													SendClientMessage(playerid, WHITE, "A checkpoint has been placed at your car. If you can't reach it, /re to contact an admin.");
												}
												else
												{
													SendClientMessage(playerid, WHITE, "You already have an active checkpoint, /kc or reach it first!");
												}
										}
								}
						}
				}
			    case 364:
			    {
			        new string[128];

			        switch(listitem)
			        {

			            case 0:
			            {
			                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

							if(Player[playerid][MeActions] >= 100)
							{
							    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 100 | Status: Achieved.", Player[playerid][MeActions]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 100 | Status: Unachieved.", Player[playerid][MeActions]);
							    SendClientMessage(playerid, GREY, string);
							}

							if(Player[playerid][MeActions] >= 200)
							{
							    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 200 | Status: Achieved.", Player[playerid][MeActions]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 200 | Status: Unachieved.", Player[playerid][MeActions]);
							    SendClientMessage(playerid, GREY, string);
							}

			                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
			            }
			            case 1:
			            {
			                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

							if(Player[playerid][AnsweredQuizQuestions] >= 100)
							{
							    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Award for: 100 | Status: Achieved.", Player[playerid][AnsweredQuizQuestions]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Award for: 100 | Status: Unachieved.", Player[playerid][AnsweredQuizQuestions]);
							    SendClientMessage(playerid, GREY, string);
							}

							if(Player[playerid][AnsweredQuizQuestions] >= 200)
							{
							    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Status: Achieved.", Player[playerid][AnsweredQuizQuestions]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Award for: 200 | Status: Unachieved.", Player[playerid][AnsweredQuizQuestions]);
							    SendClientMessage(playerid, GREY, string);
							}

							SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
			            }
			            case 2:
			            {
			                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

							if(Player[playerid][AdsPlaced] >= 100)
							{
							    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 100 | Status: Achieved.", Player[playerid][AdsPlaced]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 100 | Status: Unachieved.", Player[playerid][AdsPlaced]);
							    SendClientMessage(playerid, GREY, string);
							}

							if(Player[playerid][AdsPlaced] >= 200)
							{
							    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 200 | Status: Achieved.", Player[playerid][AdsPlaced]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 200 | Status: Unachieved.", Player[playerid][AdsPlaced]);
							    SendClientMessage(playerid, GREY, string);
							}

							SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
			            }
			            case 3:
			            {
			                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

							if(Player[playerid][MatrunsExecuted] >= 100)
							{
							    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 100 | Status: Achieved.", Player[playerid][MatrunsExecuted]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 100 | Status: Unachieved.", Player[playerid][MatrunsExecuted]);
							    SendClientMessage(playerid, GREY, string);
							}

							if(Player[playerid][MatrunsExecuted] >= 200)
							{
							    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 200 | Status: Achieved.", Player[playerid][MatrunsExecuted]);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 200 | Status: Unachieved.", Player[playerid][MatrunsExecuted]);
							    SendClientMessage(playerid, GREY, string);
							}

							SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
			            }
			        }
			    }
			    case 594:
			    {
			        if(response == 0)
			        {
			            SendClientMessage(playerid, WHITE, "Fine, have it your way!");
			            Kick(playerid);
			        }
			        else
			        {
				        if(strlen(inputtext) >= 3 && strlen(inputtext) < 20)
				        {
				            new string[128];
				            format(string, sizeof(string), "Accounts/%s.ini", inputtext);

				            if(fexist(string))
				            {
				                ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
				                SendClientMessage(playerid, WHITE, "Sorry, that name is taken.");
				            }
				            else
				            {
				                if(strfind(inputtext, "_") != -1)
				                {
						            SetPlayerName(playerid, inputtext);
						            SendClientMessage(playerid, YELLOW, "Your name has been changed!");
									ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_PASSWORD, "Registration", "Please enter your password to register your account.", "Register", "Cancel");
									SendClientMessage(playerid, ANNOUNCEMENT, "You will automatically be logged in, once you have registered.");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "You must include an underscore.");
					                ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
					            }
				            }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Sorry - that's not valid either.");
				            ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
				        }
			        }
			    }
			    case 3625:
			    {
					switch(listitem)
					{
					    case 0:
					    {
							if(Player[playerid][BankMoney] > Player[playerid][PendingCarPrice])
							{
						        if(Player[playerid][GivingSlot] == 1)
						        {
						            if(Player[playerid][CarLinkID] >= 1)
						            {
						                DestroyVehicle(Player[playerid][CarLinkID]);
						                Player[playerid][CarLinkID] = 0;
						                Player[playerid][PlayerCarModel] = 0;
						            }

						            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

						            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][CarLinkID]);
						            Player[Player[playerid][PendingCarReceival]][CarLinkID] = 0;

									new SellerID = Player[playerid][CarSeller];
									Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
									Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
									Player[playerid][PendingCarPrice] = 0;

									new string[128];
									format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
									NearByMessage(playerid, RPCOLOUR, string);

						            Player[playerid][PlayerCarModel] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel];

						            Player[playerid][PendingCarReceival] = -1;
						            SpawnOwnedCar(playerid, 1);

									Player[playerid][v1NOS] = Player[SellerID][v1NOS];
						            Player[playerid][v1NOSFUEL] = Player[SellerID][v1NOSFUEL];
						            Player[playerid][v1ENGINE] = Player[SellerID][v1ENGINE];
						            Player[playerid][V1TURBO] = Player[SellerID][V1TURBO];
						            Player[playerid][CarHealth] = Player[SellerID][CarHealth];
						            Player[SellerID][CarHealth] = 0;
						            Player[SellerID][v1NOSFUEL] = 0;
						            Player[SellerID][v1NOS] = 0;
									Player[SellerID][v1ENGINE] = 0;
									Player[playerid][Car1Trunk1] = Player[SellerID][Car1Trunk1];
									Player[playerid][Car1Trunk2] = Player[SellerID][Car1Trunk2];
									Player[playerid][Car1Trunk3] = Player[SellerID][Car1Trunk3];
									Player[playerid][Car1Mileage] = Player[playerid][Car1Mileage];
									format(Player[playerid][Car1Plate], 255, "%s", Player[SellerID][Car1Plate]);

						            Player[Player[playerid][PendingCarReceival]][PlayerCarModel] = 0;
						        }

						        if(Player[playerid][GivingSlot] == 2)
						        {
						            if(Player[playerid][CarLinkID] >= 1)
						            {
						                DestroyVehicle(Player[playerid][CarLinkID]);
						                Player[playerid][CarLinkID] = 0;
						                Player[playerid][PlayerCarModel] = 0;
						            }

						            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car2LinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

						            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car2LinkID]);
						            Player[Player[playerid][PendingCarReceival]][Car2LinkID] = 0;

						            new SellerID = Player[playerid][CarSeller];
									Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
									Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];

									new string[128];
									format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
									NearByMessage(playerid, RPCOLOUR, string);

						            Player[playerid][PlayerCarModel] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel2];

						            Player[playerid][PendingCarReceival] = -1;
						            Player[playerid][PendingCarPrice] = 0;

						            SpawnOwnedCar(playerid, 1);

						            Player[playerid][v1NOS] = Player[SellerID][v2NOS];
						            Player[playerid][v1NOSFUEL] = Player[SellerID][v2NOSFUEL];
						            Player[playerid][v1ENGINE] = Player[SellerID][v2ENGINE];
									Player[playerid][V1TURBO] = Player[SellerID][v2TURBO];
						            Player[playerid][CarHealth] = Player[SellerID][Car2Health];
						            Player[SellerID][Car2Health] = 0;
						            Player[SellerID][v2NOSFUEL] = 0;
						            Player[SellerID][v2NOS] = 0;
						            Player[SellerID][v2ENGINE] = 0;
						            Player[playerid][Car1Trunk1] = Player[SellerID][Car2Trunk1];
									Player[playerid][Car1Trunk2] = Player[SellerID][Car2Trunk2];
									Player[playerid][Car1Trunk3] = Player[SellerID][Car2Trunk3];
									Player[playerid][Car1Mileage] = Player[playerid][Car2Mileage];
						            format(Player[playerid][Car1Plate], 255, "%s", Player[SellerID][Car2Plate]);

						            Player[Player[playerid][PendingCarReceival]][PlayerCarModel2] = 0;
						        }

						        if(Player[playerid][GivingSlot] == 3)
						        {
						            if(Player[playerid][CarLinkID] >= 1)
						            {
						                DestroyVehicle(Player[playerid][CarLinkID]);
						                Player[playerid][CarLinkID] = 0;
						                Player[playerid][PlayerCarModel] = 0;
						            }

						            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car3LinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

						            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car3LinkID]);
						            Player[Player[playerid][PendingCarReceival]][Car3LinkID] = 0;

						            new SellerID = Player[playerid][CarSeller];
									Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
									Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];

									new string[128];
									format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
									NearByMessage(playerid, RPCOLOUR, string);

						            Player[playerid][PlayerCarModel] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel3];

						            Player[playerid][PendingCarReceival] = -1;
						            Player[playerid][PendingCarPrice] = 0;

						            SpawnOwnedCar(playerid, 1);

						            Player[playerid][v1NOS] = Player[SellerID][v3NOS];
						            Player[playerid][v1NOSFUEL] = Player[SellerID][v3NOSFUEL];
						            Player[playerid][v1ENGINE] = Player[SellerID][v3ENGINE];
						            Player[playerid][V1TURBO] = Player[SellerID][v3TURBO];
						            Player[playerid][CarHealth] = Player[SellerID][Car3Health];
						            Player[SellerID][Car3Health] = 0;
						            Player[SellerID][v3NOSFUEL] = 0;
						            Player[SellerID][v3NOS] = 0;
	                                Player[SellerID][v3ENGINE] = 0;
	                                Player[playerid][Car1Trunk1] = Player[SellerID][Car3Trunk1];
									Player[playerid][Car1Trunk2] = Player[SellerID][Car3Trunk2];
									Player[playerid][Car1Trunk3] = Player[SellerID][Car3Trunk3];
									Player[playerid][Car1Mileage] = Player[playerid][Car3Mileage];
	                                format(Player[playerid][Car1Plate], 255, "%s", Player[SellerID][Car3Plate]);

						            Player[Player[playerid][PendingCarReceival]][PlayerCarModel3] = 0;
						        }
						    }
						}
					    case 1:
					    {
					        if(Player[playerid][GivingSlot] == 1)
					        {
					            if(Player[playerid][Car2LinkID] >= 1)
					            {
					                DestroyVehicle(Player[playerid][Car2LinkID]);
					                Player[playerid][Car2LinkID] = 0;
					                Player[playerid][PlayerCarModel2] = 0;
					            }

					            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][CarLinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

					            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][CarLinkID]);
					            Player[Player[playerid][PendingCarReceival]][CarLinkID] = 0;

					            new SellerID = Player[playerid][CarSeller];
								Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
								Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
								Player[playerid][PendingCarPrice] = 0;

								new string[128];
								format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

					            Player[playerid][PlayerCarModel2] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel];

					            Player[playerid][PendingCarReceival] = -1;

					            SpawnOwnedCar(playerid, 2);

					            Player[playerid][v2NOS] = Player[SellerID][v1NOS];
					            Player[playerid][v2NOSFUEL] = Player[SellerID][v1NOSFUEL];
					            Player[playerid][v2ENGINE] = Player[SellerID][v1ENGINE];
					            Player[playerid][v2TURBO] = Player[SellerID][V1TURBO];
					            Player[playerid][Car2Health] = Player[SellerID][CarHealth];
					            Player[SellerID][CarHealth] = 0;
					            Player[SellerID][v1NOSFUEL] = 0;
					            Player[SellerID][v1NOS] = 0;
					            Player[SellerID][v1ENGINE] = 0;
					            Player[playerid][Car2Trunk1] = Player[SellerID][Car1Trunk1];
								Player[playerid][Car2Trunk2] = Player[SellerID][Car1Trunk2];
								Player[playerid][Car2Trunk3] = Player[SellerID][Car1Trunk3];
								Player[playerid][Car2Mileage] = Player[playerid][Car1Mileage];
					            format(Player[playerid][Car2Plate], 255, "%s", Player[SellerID][Car1Plate]);

					            Player[Player[playerid][PendingCarReceival]][PlayerCarModel] = 0;
					        }

					        if(Player[playerid][GivingSlot] == 2)
					        {
					            if(Player[playerid][Car2LinkID] >= 1)
					            {
					                DestroyVehicle(Player[playerid][Car2LinkID]);
					                Player[playerid][Car2LinkID] = 0;
					                Player[playerid][PlayerCarModel2] = 0;
					            }

					            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

					            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car2LinkID]);
					            Player[Player[playerid][PendingCarReceival]][Car2LinkID] = 0;

					            new SellerID = Player[playerid][CarSeller];
								Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
								Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
								Player[playerid][PendingCarPrice] = 0;

								new string[128];
								format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

					            Player[playerid][PlayerCarModel2] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel2];

					            Player[playerid][PendingCarReceival] = -1;

					            SpawnOwnedCar(playerid, 2);

					            Player[playerid][v2NOS] = Player[SellerID][v2NOS];
					            Player[playerid][v2NOSFUEL] = Player[SellerID][v2NOSFUEL];
					            Player[playerid][Car2Health] = Player[SellerID][Car2Health];
					            Player[playerid][v2ENGINE] = Player[SellerID][v2ENGINE];
					            Player[playerid][v2TURBO] = Player[SellerID][v2TURBO];
					            Player[SellerID][Car2Health] = 0;
					            Player[SellerID][v2NOSFUEL] = 0;
					            Player[SellerID][v2NOS] = 0;
					            Player[SellerID][v2ENGINE] = 0;
					            Player[playerid][Car2Trunk1] = Player[SellerID][Car2Trunk1];
								Player[playerid][Car2Trunk2] = Player[SellerID][Car2Trunk2];
								Player[playerid][Car2Trunk3] = Player[SellerID][Car2Trunk3];
								Player[playerid][Car2Mileage] = Player[playerid][Car2Mileage];
					            format(Player[playerid][Car2Plate], 255, "%s", Player[SellerID][Car2Plate]);

					            Player[Player[playerid][PendingCarReceival]][PlayerCarModel2] = 0;
					        }

					        if(Player[playerid][GivingSlot] == 3)
					        {
					            if(Player[playerid][Car2LinkID] >= 1)
					            {
					                DestroyVehicle(Player[playerid][Car2LinkID]);
					                Player[playerid][Car2LinkID] = 0;
					                Player[playerid][PlayerCarModel2] = 0;
					            }

					            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car3LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

					            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car3LinkID]);
					            Player[Player[playerid][PendingCarReceival]][Car3LinkID] = 0;

					            new SellerID = Player[playerid][CarSeller];
								Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
								Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
								Player[playerid][PendingCarPrice] = 0;

								new string[128];
								format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

					            Player[playerid][PlayerCarModel2] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel3];

					            Player[playerid][PendingCarReceival] = -1;

					            SpawnOwnedCar(playerid, 2);

					            Player[playerid][v2NOS] = Player[SellerID][v3NOS];
					            Player[playerid][v2NOSFUEL] = Player[SellerID][v3NOSFUEL];
					            Player[playerid][Car2Health] = Player[SellerID][Car3Health];
					            Player[playerid][v2ENGINE] = Player[SellerID][v3ENGINE];
					            Player[playerid][v2TURBO] = Player[SellerID][v3TURBO];
					            Player[SellerID][Car3Health] = 0;
					            Player[SellerID][v3NOSFUEL] = 0;
					            Player[SellerID][v3ENGINE] = 0;
					            Player[SellerID][v3NOS] = 0;
					            Player[playerid][Car2Trunk1] = Player[SellerID][Car3Trunk1];
								Player[playerid][Car2Trunk2] = Player[SellerID][Car3Trunk2];
								Player[playerid][Car2Trunk3] = Player[SellerID][Car3Trunk3];
								Player[playerid][Car2Mileage] = Player[playerid][Car3Mileage];
					            format(Player[playerid][Car2Plate], 255, "%s", Player[SellerID][Car3Plate]);

					            Player[Player[playerid][PendingCarReceival]][PlayerCarModel3] = 0;
					        }
					    }
					    case 2:
					    {
					        if(Player[playerid][GivingSlot] == 1)
					        {
					            if(Player[playerid][Car3LinkID] >= 1)
					            {
					                DestroyVehicle(Player[playerid][Car3LinkID]);
					                Player[playerid][Car3LinkID] = 0;
					                Player[playerid][PlayerCarModel3] = 0;
					            }

					            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][CarLinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

					            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][CarLinkID]);
					            Player[Player[playerid][PendingCarReceival]][CarLinkID] = 0;

					            new SellerID = Player[playerid][CarSeller];
								Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
								Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
								Player[playerid][PendingCarPrice] = 0;

								new string[128];
								format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

					            Player[playerid][PlayerCarModel3] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel];

					            Player[playerid][PendingCarReceival] = -1;

					            SpawnOwnedCar(playerid, 3);

					            Player[playerid][v3NOS] = Player[SellerID][v1NOS];
					            Player[playerid][v3NOSFUEL] = Player[SellerID][v1NOSFUEL];
					            Player[playerid][Car3Health] = Player[SellerID][CarHealth];
					            Player[playerid][v3ENGINE] = Player[SellerID][v1ENGINE];
					            Player[playerid][v3TURBO] = Player[SellerID][V1TURBO];
					            Player[SellerID][CarHealth] = 0;
					            Player[SellerID][v1NOSFUEL] = 0;
					            Player[SellerID][v1NOS] = 0;
					            Player[SellerID][v1ENGINE] = 0;
					            Player[playerid][Car3Trunk1] = Player[SellerID][Car1Trunk1];
								Player[playerid][Car3Trunk2] = Player[SellerID][Car1Trunk2];
								Player[playerid][Car3Trunk3] = Player[SellerID][Car1Trunk3];
								Player[playerid][Car3Mileage] = Player[playerid][Car1Mileage];
					            format(Player[playerid][Car3Plate], 255, "%s", Player[SellerID][Car1Plate]);

					            Player[Player[playerid][PendingCarReceival]][PlayerCarModel] = 0;
					        }

					        if(Player[playerid][GivingSlot] == 2)
					        {
					            if(Player[playerid][Car3LinkID] >= 1)
					            {
					                DestroyVehicle(Player[playerid][Car3LinkID]);
					                Player[playerid][Car3LinkID] = 0;
					                Player[playerid][PlayerCarModel3] = 0;
					            }

					            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car2LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

					            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car2LinkID]);
					            Player[Player[playerid][PendingCarReceival]][Car2LinkID] = 0;

					            new SellerID = Player[playerid][CarSeller];
								Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
								Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
								Player[playerid][PendingCarPrice] = 0;

								new string[128];
								format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

					            Player[playerid][PlayerCarModel3] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel2];

					            Player[playerid][PendingCarReceival] = -1;

					            SpawnOwnedCar(playerid, 3);

					            Player[playerid][v3NOS] = Player[SellerID][v2NOS];
					            Player[playerid][v3NOSFUEL] = Player[SellerID][v2NOSFUEL];
					            Player[playerid][Car3Health] = Player[SellerID][Car2Health];
					            Player[playerid][v3ENGINE] = Player[SellerID][v2ENGINE];
					            Player[playerid][v3TURBO] = Player[SellerID][v2TURBO];
					            Player[SellerID][Car2Health] = 0;
					            Player[SellerID][v2NOSFUEL] = 0;
					            Player[SellerID][v2ENGINE] = 0;
					            Player[SellerID][v2NOS] = 0;
					            Player[playerid][Car3Trunk1] = Player[SellerID][Car2Trunk1];
								Player[playerid][Car3Trunk2] = Player[SellerID][Car2Trunk2];
								Player[playerid][Car3Trunk3] = Player[SellerID][Car2Trunk3];
								Player[playerid][Car3Mileage] = Player[playerid][Car2Mileage];
					            format(Player[playerid][Car3Plate], 255, "%s", Player[SellerID][Car2Plate]);

					            Player[Player[playerid][PendingCarReceival]][PlayerCarModel2] = 0;
					        }

					        if(Player[playerid][GivingSlot] == 3)
					        {
					            if(Player[playerid][Car3LinkID] >= 1)
					            {
					                DestroyVehicle(Player[playerid][Car3LinkID]);
					                Player[playerid][Car3LinkID] = 0;
					                Player[playerid][PlayerCarModel3] = 0;
					            }

					            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

					            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car3LinkID]);
					            Player[Player[playerid][PendingCarReceival]][Car3LinkID] = 0;

					            new SellerID = Player[playerid][CarSeller];
								Player[SellerID][BankMoney] += Player[playerid][PendingCarPrice];
								Player[playerid][BankMoney] -= Player[playerid][PendingCarPrice];
								Player[playerid][PendingCarPrice] = 0;

								new string[128];
								format(string, sizeof(string), "%s has sold their vehicle to %s", GetName(SellerID), GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

					            Player[playerid][PlayerCarModel3] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel3];

					            Player[playerid][PendingCarReceival] = -1;

					            SpawnOwnedCar(playerid, 3);

					            Player[playerid][v3NOS] = Player[SellerID][v3NOS];
					            Player[playerid][v3NOSFUEL] = Player[SellerID][v3NOSFUEL];
					            Player[playerid][Car3Health] = Player[SellerID][Car3Health];
					            Player[playerid][v3ENGINE] = Player[SellerID][v3ENGINE];
					            Player[playerid][v3TURBO] = Player[SellerID][v3TURBO];
					            Player[SellerID][Car3Health] = 0;
					            Player[SellerID][v3NOSFUEL] = 0;
					            Player[SellerID][v3ENGINE] = 0;
					            Player[SellerID][v3NOS] = 0;
					            Player[playerid][Car3Trunk1] = Player[SellerID][Car3Trunk1];
								Player[playerid][Car3Trunk2] = Player[SellerID][Car3Trunk2];
								Player[playerid][Car3Trunk3] = Player[SellerID][Car3Trunk3];
								Player[playerid][Car3Mileage] = Player[playerid][Car3Mileage];
					            format(Player[playerid][Car3Plate], 255, "%s", Player[SellerID][Car3Plate]);

					            Player[Player[playerid][PendingCarReceival]][PlayerCarModel3] = 0;
					        }
					    }
					}
			    }

				case 357:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(Player[playerid][Toy1ID] != 0)
				            {
				                SendClientMessage(playerid, WHITE, "You've deleted your first toy.");
				                Player[playerid][Toy1ID] = 0;

								Player[playerid][Toy1XO] = 0;
				                Player[playerid][Toy1YO] = 0;
				                Player[playerid][Toy1ZO] = 0;

				                Player[playerid][Toy1XR] = 0;
				                Player[playerid][Toy1YR] = 0;
				                Player[playerid][Toy1ZR] = 0;

				                Player[playerid][Toy1XS] = 0;
				                Player[playerid][Toy1YS] = 0;
				                Player[playerid][Toy1ZS] = 0;
				            }
				            else
				            {
				                SendClientMessage(playerid, YELLOW, "You don't have a toy in slot 1.");
				            }
				        }
				        case 1:
				        {
				            if(Player[playerid][Toy2ID] != 0)
				            {
				                SendClientMessage(playerid, WHITE, "You've deleted your second toy.");
				                Player[playerid][Toy2ID] = 0;

								Player[playerid][Toy2XO] = 0;
				                Player[playerid][Toy2YO] = 0;
				                Player[playerid][Toy2ZO] = 0;

				                Player[playerid][Toy2XR] = 0;
				                Player[playerid][Toy2YR] = 0;
				                Player[playerid][Toy2ZR] = 0;

				                Player[playerid][Toy2XS] = 0;
				                Player[playerid][Toy2YS] = 0;
				                Player[playerid][Toy2ZS] = 0;
				            }
				            else
				            {
				                SendClientMessage(playerid, YELLOW, "You don't have a toy in slot 2.");
				            }
				        }
				        case 2:
				        {
				            if(Player[playerid][Toy3ID] != 0)
				            {
				                SendClientMessage(playerid, WHITE, "You've deleted your third toy.");
				                Player[playerid][Toy3ID] = 0;

								Player[playerid][Toy3XO] = 0;
				                Player[playerid][Toy3YO] = 0;
				                Player[playerid][Toy3ZO] = 0;

				                Player[playerid][Toy3XR] = 0;
				                Player[playerid][Toy3YR] = 0;
				                Player[playerid][Toy3ZR] = 0;

				                Player[playerid][Toy3XS] = 0;
				                Player[playerid][Toy3YS] = 0;
				                Player[playerid][Toy3ZS] = 0;
				            }
				            else
				            {
				                SendClientMessage(playerid, YELLOW, "You don't have a toy in slot 3.");
				            }
				        }
				    }
				}

				case 356:
				{
				    switch(listitem)
					{
						case 0:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 199)
					        {
		  						if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
								{
									ShowPlayerDialog(playerid, 400, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
								}
								else
								{
									SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
								}
								}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
						}
	                    case 1:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 199)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 401, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 2:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 499)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 402, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 3:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 499)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 403, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 4:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 649)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 404, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 5:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 299)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 405, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 6:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 549)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 408, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 7:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 549)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 409, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					    case 8:
					    {
							#pragma tabsize 0
							if(Player[playerid][Money] > 549)
					        {
			    			if(Businesses[Player[playerid][InBusiness]][bSupplies] > 0)
							{
								ShowPlayerDialog(playerid, 410, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
							}
	        				else
							{
								SendClientMessage(playerid, WHITE, "This store doesn't have enough supplies.");
							}
							}
							else
							{
								SendClientMessage(playerid, RED, "You don't have enough money.");
							}
					    }
					}
				}

				case 2090:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, true);
				            SendClientMessage(playerid, WHITE, "You have turned nametags on.");
				        }

				        case 1:
				        {
				            for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, false);
				            SendClientMessage(playerid, WHITE, "You have turned nametags off.");
				        }
				    }
				}

				case 358:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 406, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 407, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
				        }
				        case 2:
				        {
				            ShowPlayerDialog(playerid, 1408, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
				        }
				        case 3:
				        {
				            ShowPlayerDialog(playerid, 1409, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
				        }
				        case 4:
				        {
				            ShowPlayerDialog(playerid, 1410, DIALOG_STYLE_LIST, "Save to?", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
				        }
				    }
				}

				case 400:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = HAT1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    Player[playerid][Money] -= 200;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 200;
						    SendClientMessage(playerid, WHITE, "You've stored your hat in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = HAT1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    Player[playerid][Money] -= 200;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 200;
						    SendClientMessage(playerid, WHITE, "You've stored your hat in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = HAT1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    Player[playerid][Money] -= 200;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 200;
						    SendClientMessage(playerid, WHITE, "You've stored your hat in Slot 3");
				        }
				    }
				}

				case 401:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = HAT2;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    Player[playerid][Money] -= 200;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 200;
						    SendClientMessage(playerid, WHITE, "You've stored your hat in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = HAT2;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    Player[playerid][Money] -= 200;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 200;
						    SendClientMessage(playerid, WHITE, "You've stored your hat in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = HAT2;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    Player[playerid][Money] -= 200;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 200;
						    SendClientMessage(playerid, WHITE, "You've stored your hat in Slot 3");
				        }
				    }
				}

				case 402:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = HELMET1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    Player[playerid][Money] -= 500;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 500;
						    SendClientMessage(playerid, WHITE, "You've stored your helmet in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = HELMET1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    Player[playerid][Money] -= 500;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 500;
						    SendClientMessage(playerid, WHITE, "You've stored your helmet in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = HELMET1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    Player[playerid][Money] -= 500;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 500;
						    SendClientMessage(playerid, WHITE, "You've stored your helmet in Slot 3");
				        }
				    }
				}

				case 403:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = HELMET2;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    Player[playerid][Money] -= 650;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 650;
						    SendClientMessage(playerid, WHITE, "You've stored your helmet in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = HELMET2;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    Player[playerid][Money] -= 500;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 500;
						    SendClientMessage(playerid, WHITE, "You've stored your helmet in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = HELMET2;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    Player[playerid][Money] -= 500;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 500;
						    SendClientMessage(playerid, WHITE, "You've stored your helmet in Slot 3");
				        }
				    }
				}

				case 404:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = BANDANA1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    Player[playerid][Money] -= 650;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 650;
						    SendClientMessage(playerid, WHITE, "You've stored your bandana in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = BANDANA1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    Player[playerid][Money] -= 650;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 650;
						    SendClientMessage(playerid, WHITE, "You've stored your bandana in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = BANDANA1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    Player[playerid][Money] -= 650;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 650;
						    SendClientMessage(playerid, WHITE, "You've stored your bandana in Slot 3");
				        }
				    }
				}
				case 405:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = MUSTACHE1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    Player[playerid][Money] -= 300;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 300;
						    SendClientMessage(playerid, WHITE, "You've stored your mustache in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = MUSTACHE1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    Player[playerid][Money] -= 300;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 300;
						    SendClientMessage(playerid, WHITE, "You've stored your mustache in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = MUSTACHE1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    Player[playerid][Money] -= 300;
						    Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						    Businesses[Player[playerid][InBusiness]][bVault] += 300;
						    SendClientMessage(playerid, WHITE, "You've stored your mustache in Slot 3");
				        }
				    }
				}
				case 406:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = PDCAP1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your police cap in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = PDCAP1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your police cap in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = PDCAP1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your police cap in Slot 3");
				        }
				    }
				}
				case 407:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = PDHAT1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Chief's hat in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = PDHAT1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Chief's hat in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = PDHAT1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Chief's hat in Slot 3");
				        }
				    }
				}
				case 1408:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = 18637;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Riot Shield in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = 18637;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Riot Shield in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = 18637;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Riot Shield in Slot 3");
				        }
				    }
				}
				case 1409:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = 18637;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Riot Shield in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = 18637;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Riot Shield in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = 18637;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your Riot Shield in Slot 3");
				        }
				    }
				}
				case 408:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = GLASSES1;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = GLASSES1;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = GLASSES1;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 3");
				        }
				    }
				}
				case 409:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = GLASSES2;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = GLASSES2;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = GLASSES2;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 3");
				        }
				    }
				}
				case 410:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new string[128];
							Player[playerid][Toy1ID] = GLASSES3;
			    			dini_IntSet(string, "Toy1ID", Player[playerid][Toy1ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 1");
				        }
				        case 1:
				        {
				            new string[128];
							Player[playerid][Toy2ID] = GLASSES3;
			    			dini_IntSet(string, "Toy2ID", Player[playerid][Toy2ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 2");
				        }
				        case 2:
				        {
				            new string[128];
							Player[playerid][Toy3ID] = GLASSES3;
			    			dini_IntSet(string, "Toy3ID", Player[playerid][Toy3ID]);
						    SendClientMessage(playerid, WHITE, "You've stored your glasses in Slot 3");
				        }
				    }
				}

				case 354:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(IsPlayerAttachedObjectSlotUsed(playerid, 1))
							{
							    EditAttachedObject(playerid, 1);
							}
				        }
	                    case 1:
				        {
				            if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
							{
							    EditAttachedObject(playerid, 2);
							}
				        }
				        case 2:
				        {
				            if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
							{
							    EditAttachedObject(playerid, 3);
							}
				        }
				    }
				}

				case 355:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(Player[playerid][Toy1ID] > 0)
							{
		    					SetPlayerAttachedObject(playerid, 1, Player[playerid][Toy1ID], 2, Player[playerid][Toy1XO], Player[playerid][Toy1YO], Player[playerid][Toy1ZO], Player[playerid][Toy1XR], Player[playerid][Toy1YR], Player[playerid][Toy1ZR]);
							}

							if(Player[playerid][Toy1ID] == 0)
							{
							    SendClientMessage(playerid, GREY, "You don't have a toy in that slot.");
							}
						}
						case 1:
						{

							if(Player[playerid][Toy2ID] > 0)
							{
		    					SetPlayerAttachedObject(playerid, 2, Player[playerid][Toy2ID], 2, Player[playerid][Toy2XO], Player[playerid][Toy2YO], Player[playerid][Toy2ZO], Player[playerid][Toy2XR], Player[playerid][Toy2YR], Player[playerid][Toy2ZR]);
							}

	                        if(Player[playerid][Toy2ID] == 0)
							{
							    SendClientMessage(playerid, GREY, "You don't have a toy in that slot.");
							}
						}
						case 2:
						{
	                        if(Player[playerid][Toy3ID] > 0)
							{
		 						SetPlayerAttachedObject(playerid, 3, Player[playerid][Toy3ID], 2, Player[playerid][Toy3XO], Player[playerid][Toy3YO], Player[playerid][Toy3ZO], Player[playerid][Toy3XR], Player[playerid][Toy3YR], Player[playerid][Toy3ZR]);
							}

	                        if(Player[playerid][Toy3ID] == 0)
							{
							    SendClientMessage(playerid, GREY, "You don't have a toy in that slot.");
							}
						}
					}
				}

				case 700:
				{
				    switch(listitem)
					{
					    case 0:
					    {
					        ShowPlayerDialog(playerid, 701, DIALOG_STYLE_LIST, "Spoilers", "Spoiler 1\nSpoiler 2", "Choose", "Cancel");
					    }
					    case 1:
					    {
					        ShowPlayerDialog(playerid, 702, DIALOG_STYLE_LIST, "Wheels", "Wheels 1\nWheels 2", "Choose", "Cancel");
					    }
					    case 2:
					    {
					        AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
					    }
					}
				}

				case 701:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        AddVehicleComponent(GetPlayerVehicleID(playerid), 1000);
				        }
				        case 1:
				        {
				            AddVehicleComponent(GetPlayerVehicleID(playerid), 1001);
				        }
				    }
				}

				case 702:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
				        }
				        case 1:
				        {
				            AddVehicleComponent(GetPlayerVehicleID(playerid), 1083);
				        }
				    }
				}

				case 94:
			    {
			        if(Player[playerid][CarBeingCarried] >= 1)
			        {
			            switch(listitem)
			            {
			                case 0:
			                {
			                    if(Player[playerid][Money] >= Player[playerid][CarPriceBeingCarried])
			                    {
				                    PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
						        	Businesses[Player[playerid][InBusiness]][bVault] += Player[playerid][CarPriceBeingCarried];
						        	Player[playerid][CarFuel] = 25;
						        	format(Player[playerid][Car1Plate], 255, "123-ABC");
					        	}
					        	else
					        	{
					        	    SendClientMessage(playerid, WHITE, "You don't have enough money on you.");
					        	}
			                }
			                case 1:
			                {
			                    if(Player[playerid][Money] >= Player[playerid][CarPriceBeingCarried])
			                    {
				                    PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 2);
						        	Businesses[Player[playerid][InBusiness]][bVault] += Player[playerid][CarPriceBeingCarried];
						        	Player[playerid][Car2Fuel] = 25;
						        	format(Player[playerid][Car2Plate], 255, "123-ABC");
					        	}
					        	else
					        	{
					        	    SendClientMessage(playerid, WHITE, "You don't have enough money on you.");
					        	}
			                }
			                case 2:
			                {
			                    if(Player[playerid][Money] >= Player[playerid][CarPriceBeingCarried])
			                    {
				                    PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 3);
						        	Businesses[Player[playerid][InBusiness]][bVault] += Player[playerid][CarPriceBeingCarried];
						        	Player[playerid][Car3Fuel] = 25;
						        	format(Player[playerid][Car1Plate], 255, "123-ABC");
					        	}
					        	else
					        	{
					        	    SendClientMessage(playerid, WHITE, "You don't have enough money on you.");
					        	}
			                }
			            }
			        }
			    }
			    case 104:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                Kick(playerid);
					    }
					    case 1:
					    {
					        ShowPlayerDialog(playerid, 1110, DIALOG_STYLE_LIST, "What is the definition of Metagaming.", "Forcing an action on other players\nMixing OOC with IC\nExceeding the mats limit.", "Choose", "");
					    }
					    case 2:
					    {
					        Kick(playerid);
					    }
				    }
			    }
			    case 1110:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                Kick(playerid);
			            }
			            case 1:
			            {
			                ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_LIST, "What does deathmatching/DM mean", "Killing/Attacking a person for no reason\n/q to avoid someone killing you\nDriving unrealisticly", "Choose", "");
			            }
			            case 2:
			            {
			                Kick(playerid);
			            }
			        }
			    }
			    case 1111:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_LIST, "What does RK stand for", "Road Kill\nRandom Kill\nRevenge Kill", "Choose", "");
			            }
			            case 1:
						{
						    Kick(playerid);
						}
						case 2:
						{
						    Kick(playerid);
						}
			        }
			    }
			    case 1112:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                Kick(playerid);
			            }
			            case 1:
			            {
							Kick(playerid);
			            }
			            case 2:
			            {
			                ShowPlayerDialog(playerid, 1113, DIALOG_STYLE_LIST, "When can you perform extreme RP", "Whenever I want\nWhen he/she is tied up\nOnly with consent", "Choose", "");
			            }
			        }
			    }
			    case 1113:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                Kick(playerid);
			            }
			            case 1:
			            {
							Kick(playerid);
			            }
			            case 2:
			            {
			            	PutPlayerInTutorial(playerid, 2);
					        SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
					}
			    }
			    case 105:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                SendClientMessage(playerid, WHITE, "Alright, let's get stuck in then. ");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                SendClientMessage(playerid, WHITE, "INTRODUCTION");
			                SendClientMessage(playerid, WHITE, "Welcome to the server tutorial. This tutorial was created to help you around the server, so you know where things");
			                SendClientMessage(playerid, WHITE, "are, and the basic parts of game play on our server - we have quite a few very unique features you may not be used to.");
			                SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			                Player[playerid][ServerTut] = 1;
			            }
			            case 1:
			            {
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
			                SendClientMessage(playerid, WHITE, "Roger that, so let's get a bit of vital information before you can spawn!");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			        }
			    }
			    case 106:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                Player[playerid][Gender] = 1;
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                //ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
	                        ShowPlayerDialog(playerid, 108, DIALOG_STYLE_LIST, "Please Specify Your Race", "White\nAsian\nBlack\nHispanic", "Select", "Cancel");
							SendClientMessage(playerid, WHITE, "Okay, so you're a dude. Let's just get your character's race.");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			            case 1:
			            {
			                Player[playerid][Gender] = 2;
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                //ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
	                        ShowPlayerDialog(playerid, 108, DIALOG_STYLE_LIST, "Please Specify Your Race", "White\nAsian\nBlack\nHispanic", "Select", "Cancel");
							SendClientMessage(playerid, WHITE, "Okay, so you're a chick. Let's just get your character's race.");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			        }
			    }
			    case 108:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][Gender] == 1)
			                {
			                    Player[playerid][LastSkin] = 60;
							}
							else
							{
							    Player[playerid][LastSkin] = 56; // woman
							}
		                	Player[playerid][Race] = 1;
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                SendClientMessage(playerid, WHITE, "Okay, so you're White, please specify an age and then you're all set.");
			                ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			            case 1:
			            {
			                if(Player[playerid][Gender] == 1)
			                {
			                    Player[playerid][LastSkin] = 59;
							}
							else
							{
							    Player[playerid][LastSkin] = 226;
							}
			                Player[playerid][Race] = 2;
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                SendClientMessage(playerid, WHITE, "Okay, so you're Asian, please specify an age and then you're all set.");
			                ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			            case 2:
			            {
			                if(Player[playerid][Gender] == 1)
			                {
			                    Player[playerid][LastSkin] = 4;
							}
							else
							{
							    Player[playerid][LastSkin] = 148;
							}
			                Player[playerid][Race] = 3;
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                SendClientMessage(playerid, WHITE, "Okay, so you're Black, please specify an age and then you're all set.");
			                ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			            case 3:
			            {
			                if(Player[playerid][Gender] == 1)
			                {
			                    Player[playerid][LastSkin] = 184;
							}
							else
							{
							    Player[playerid][LastSkin] = 55;
							}
			                Player[playerid][Race] = 4;
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			                SendClientMessage(playerid, WHITE, "Okay, so you're Hispanic, please specify an age and then you're all set.");
			                ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
			                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			            }
			        }
			    }
			    case 107:
			    {
			        new string[128];
			        listitem += 18;
			        Player[playerid][Age] = listitem;
			        Player[playerid][Tutorial] = 0;
			        SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			        format(string, sizeof(string), "Okay, so your character is %d.", Player[playerid][Age]);
			        SendClientMessage(playerid, WHITE, string);
			        SendClientMessage(playerid, WHITE, "Now, we can let you spawn. We hope that you enjoy your experience here and play here regularly.");
			        SendClientMessage(playerid, WHITE, "If you have any server-related questions, please use /n or /requestmod. If you wish to just have a chat, please use /o");
	                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

	                PutPlayerInTutorial(playerid, 99);
			    }
			    case 1195:
				{
				    if(strcmp(inputtext, "yes", true) == 0)
					{
						ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_PASSWORD, "Registration", "Please enter your password to register your account.", "Register", "Cancel");
						SendClientMessage(playerid, ANNOUNCEMENT, "You will automatically be logged in, once you have registered.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "Incorrect - You may not play.");
					    Kick(playerid);
					}
			    }
				case 346:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(BonusCar >= 1)
			                {
			                    new string[128];
			                    format(string, sizeof(string), "Blista Compact ($8,000)\nClover ($4,300)\nStallion ($5,700)\nTampa ($3,800)\n%s\n", VehicleNames[BonusCar-400]);
			                	ShowPlayerDialog(playerid, 347, DIALOG_STYLE_LIST, "Vehicle Dealership - Special Deals", string, "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, 347, DIALOG_STYLE_LIST, "Vehicle Dealership - Special Deals", "Blista Compact ($8,000)\nClover ($4,300)\nStallion ($5,700)\nTampa ($3,800)\n", "Select", "Cancel");
							}
						}
			            case 1:
			            {
			                ShowPlayerDialog(playerid, 348, DIALOG_STYLE_LIST, "Vehicle Dealership - Low-Riders", "Blade ($22,000)\nRemington ($28,000)\nSavanna ($30,000)\nSlamvan ($32,000)\nTornado ($24,500)\n", "Select", "Cancel");
			            }
			            case 2:
			            {
			                ShowPlayerDialog(playerid, 349, DIALOG_STYLE_LIST, "Vehicle Dealership - Saloon Cars", "Elegant ($34,000)\nPremier ($30,000)\nSentinel ($45,000)\nStretch ($55,000)\nSunrise ($33,000)\nWashington ($38,000)\n", "Select", "Cancel");
			            }
			            case 3:
			            {
			                ShowPlayerDialog(playerid, 350, DIALOG_STYLE_LIST, "Vehicle Dealership - 4x4 / Off-Roaders / Pickups", "Huntley ($48,000)\nLandstalker ($37,000)\nMesa ($35,000)\nRancher ($43,000)\nSandking ($60,000)\nYosemite ($10,000)\n", "Select", "Cancel");
			            }
			            case 4:
			            {
			                ShowPlayerDialog(playerid, 310, DIALOG_STYLE_LIST, "Vehicle Dealership - Bikes", "Wayfarer ($15,000)\nFCR-900 ($20,000)\nPCJ-600 ($20,000)\nFreeway ($21,000)\nSanchez ($8,000)", "Select", "Cancel");
			            }
			            case 5:
			            {
			                ShowPlayerDialog(playerid, 351, DIALOG_STYLE_LIST, "Vehicle Dealership - Sports / Muscle / Supercars", "Banshee ($265,000)\nBuffalo ($80,000)\nComet ($105,000)\nPhoenix ($27,500)\nSultan ($250,000)\n", "Select", "Cancel");
			            }
						case 6:
			            {
			                if(Player[playerid][VipRank] == 0)
			                {
			                	ShowPlayerDialog(playerid, 353, DIALOG_STYLE_LIST, "Vehicle Dealership - Imports", "Stratum ($35,000)\nFlash ($45,000)", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, 353, DIALOG_STYLE_LIST, "Vehicle Dealership - Imports", "Stratum ($35,000)\nFlash ($45,000)\nElegy ($75,000)", "Select", "Cancel");
							}
						}
						case 7:
						{
							ShowPlayerDialog(playerid, 1354, DIALOG_STYLE_LIST, "Vehicle Dealership - Specialised vehicles", "Taxi ($15,000)\nCabbie ($12,500)\nHotdog Van ($35,000)", "Select", "Cancel");
						}
						case 8:
						{
							ShowPlayerDialog(playerid, 370, DIALOG_STYLE_LIST, "Vehicle Dealership - Vans", "Burrito ($20,000)\nRumpo ($25,000)\nBenson ($40,000)", "Select", "Cancel");
						}
			            case 9:
			            {
			                ShowPlayerDialog(playerid, 352, DIALOG_STYLE_LIST, "Vehicle Dealership - VIP Models", "Cheetah ($200,000)\nBullet ($875,000)\nInfernus ($1,500,000)\nNRG-500 ($150,000)\nTurismo ($400,000)\nMaverick ($2,000,000)", "Select", "Cancel");
			            }
			        }
			    }
				
				case 370:
				{
					switch(listitem)
					{
						case 0:
						{
							if(Player[playerid][Money] >= 20000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 482;
					            Player[playerid][CarPriceBeingCarried] = 20000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 1:
						{
							if(Player[playerid][Money] >= 25000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 440;
					            Player[playerid][CarPriceBeingCarried] = 25000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 2:
						{
							if(Player[playerid][Money] >= 40000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 499;
					            Player[playerid][CarPriceBeingCarried] = 40000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
					}
				}

			    case 9123:
			    {
			        switch(listitem)
					{
					    case 0:
					    {
							if(Player[playerid][BankMoney] >= 50000 || Player[playerid][VipRank] >= 2 && Player[playerid][VipRank] != 4)
							{
							    new query[256];
								new nfactionid = SpawnedFactions+1;
								Player[playerid][FactionID] = nfactionid;
								Player[playerid][FactionRank] = 5;
								Faction[nfactionid][fID] = nfactionid;
								Faction[nfactionid][fMemberLock] = 5;
								Faction[nfactionid][fBank] = 0;
								Faction[nfactionid][fVehicleLock] = 0;
								format(Faction[nfactionid][fRank1], 255, "None");
								format(Faction[nfactionid][fRank2], 255, "None");
								format(Faction[nfactionid][fRank3], 255, "None");
								format(Faction[nfactionid][fRank4], 255, "None");
								format(Faction[nfactionid][fRank5], 255, "None");
								format(Faction[nfactionid][fName], 255, "None");
								if(Player[playerid][VipRank] >= 2 && Player[playerid][VipRank] != 4)
								{

								}
								else
								{
								    Player[playerid][BankMoney] -= 50000;
								}
								Faction[nfactionid][fMembers]++;

								format(query, sizeof(query), "INSERT INTO factions (fID) VALUES (%d)", Faction[nfactionid][fID]);
								mysql_query(mysql, query);
								SaveFaction(nfactionid);

								SendClientMessage(playerid, WHITE, "Congratulations! You've made a faction, use /factions to edit it.");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You need $50,000 in your bank to make a faction or VIP Silver+");
							}
					    }
					}
			    }

			    case 9125:
			    {
					switch(listitem)
					{
					    case 0:
					    {
					    	ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
						}
						case 1:
						{
							new string[1024];
							new fid = Player[playerid][FactionID];
			                format(string, sizeof(string), "Faction Name: %s\nFaction Bank: $%s\nFaction Members: %d/%d\nVehicles: %d/%d\nVehicle 1: %s (%d)\nVehicle 2: %s (%d)\nVehicle 3: %s (%d)\nVehicle 4: %s (%d)\nVehicle 5: %s (%d)", Faction[Player[playerid][FactionID]][fName], IntToFormattedStr(Faction[Player[playerid][FactionID]][fBank]), Faction[Player[playerid][FactionID]][fMembers], Faction[Player[playerid][FactionID]][fMemberLock],
							FactionVehiclesSpawned[fid], Faction[Player[playerid][FactionID]][fVehicleLock], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID1])), Faction[fid][fLinkID1], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID2])), Faction[fid][fLinkID2], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID3])), Faction[fid][fLinkID3], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID4])), Faction[fid][fLinkID4], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID5])), Faction[fid][fLinkID5]);
			                ShowPlayerDialog(playerid, 9201, DIALOG_STYLE_MSGBOX, "Faction Information", string, "Exit", "");
						}
						case 2:
						{
							if(Faction[Player[playerid][FactionID]][fMembers] == Faction[Player[playerid][FactionID]][fMemberLock])
							{
								ShowPlayerDialog(playerid, 6251, DIALOG_STYLE_MSGBOX, "Error", "You have reached your member limit, consider upgrading it.", "Exit", "");
							}
							else
							{
								ShowPlayerDialog(playerid, 9202, DIALOG_STYLE_INPUT, "Invite", "Please type the ID of the player you want to invite", "Choose", "Close");
							}
						}
						case 3:
						{
						    ShowPlayerDialog(playerid, 9203, DIALOG_STYLE_LIST, "Upgrades", "Add +5 to the member limit\nAdd +1 to maximum vehicles", "Choose", "Close");
						}
						case 4:
						{
						    new fid = Player[playerid][FactionID];
						    if(Faction[fid][fVehicleLock] > FactionVehiclesSpawned[fid])
							{
						    	ShowPlayerDialog(playerid, 9204, DIALOG_STYLE_LIST, "Vehicle Management", "Disband Vehicles\nAdd vehicles", "Choose", "Close");
							}
							else
							{
							    ShowPlayerDialog(playerid, 9204, DIALOG_STYLE_LIST, "Vehicle Management", "Disband Vehicles", "Choose", "Close");
							}
						}
					}
			    }
			    case 9207:
			    {
			        switch(listitem)
			        {
				        case 0:
				        {
			    			new fid = Player[playerid][FactionID];
	     					if(fGivingCar[playerid] == 1)
	     					{
				    			Faction[fid][fVehicle1] = Player[playerid][PlayerCarModel];
								Faction[fid][fLinkID1] = Player[playerid][CarLinkID];
								GetVehiclePos(Faction[fid][fLinkID1], Faction[fid][fVehicle1X], Faction[fid][fVehicle1Y], Faction[fid][fVehicle1Z]);
								GetVehicleZAngle(Faction[fid][fLinkID1], Faction[fid][fVehicle1ZAngle]);
								Faction[fid][fCarCol1] = Player[playerid][CarCol1];
								Faction[fid][fCarCol2] = Player[playerid][CarCol2];

								Player[playerid][PlayerCarModel] = 0;
								Player[playerid][CarLinkID] = 0;

								Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car1Plate], 255, "0");
								Player[playerid][v1NOS] = 0;
		      					Player[playerid][v1NOSFUEL] = 0;
		      					Player[playerid][V1TURBO] = 0;
		      					Player[playerid][v1ENGINE] = 0;
						      	FactionVehiclesSpawned[fid]++;

								SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
	                            SaveFaction(fid);
							}
							if(fGivingCar[playerid] == 2)
							{
								Faction[fid][fVehicle1] = Player[playerid][PlayerCarModel2];
								Faction[fid][fLinkID1] = Player[playerid][Car2LinkID];
								GetVehiclePos(Faction[fid][fLinkID1], Faction[fid][fVehicle1X], Faction[fid][fVehicle1Y], Faction[fid][fVehicle1Z]);
								GetVehicleZAngle(Faction[fid][fLinkID1], Faction[fid][fVehicle1ZAngle]);
								Faction[fid][fCarCol1] = Player[playerid][Car2Col1];
								Faction[fid][fCarCol2] = Player[playerid][Car2Col2];

								Player[playerid][PlayerCarModel2] = 0;
								Player[playerid][Car2LinkID] = 0;

								Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car2Plate], 255, "0");
		      					Player[playerid][v2NOS] = 0;
					            Player[playerid][v2NOSFUEL] = 0;
					            Player[playerid][v2TURBO] = 0;
					            Player[playerid][v2ENGINE] = 0;
					            FactionVehiclesSpawned[fid]++;

								SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
	                            SaveFaction(fid);
							}
							else if(fGivingCar[playerid] == 3)
							{
	      						Faction[fid][fVehicle1] = Player[playerid][PlayerCarModel3];
								Faction[fid][fLinkID1] = Player[playerid][Car3LinkID];
								GetVehiclePos(Faction[fid][fLinkID1], Faction[fid][fVehicle1X], Faction[fid][fVehicle1Y], Faction[fid][fVehicle1Z]);
								GetVehicleZAngle(Faction[fid][fLinkID1], Faction[fid][fVehicle1ZAngle]);
								Faction[fid][fCarCol1] = Player[playerid][Car3Col1];
								Faction[fid][fCarCol2] = Player[playerid][Car3Col2];

								Player[playerid][PlayerCarModel3] = 0;
								Player[playerid][Car3LinkID] = 0;
								Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;
						        format(Player[playerid][Car3Plate], 255, "0");
						        Player[playerid][v3NOS] = 0;
						        Player[playerid][v3NOSFUEL] = 0;
						        Player[playerid][v3TURBO] = 0;
						        Player[playerid][v3ENGINE] = 0;
						        FactionVehiclesSpawned[fid]++;

	                            SaveFaction(fid);
	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
							}
						}
						case 1:
						{
						    new fid = Player[playerid][FactionID];
	     					if(fGivingCar[playerid] == 1)
	     					{
				    			Faction[fid][fVehicle2] = Player[playerid][PlayerCarModel];
								Faction[fid][fLinkID2] = Player[playerid][CarLinkID];
								GetVehiclePos(Faction[fid][fLinkID2], Faction[fid][fVehicle2X], Faction[fid][fVehicle2Y], Faction[fid][fVehicle2Z]);
								GetVehicleZAngle(Faction[fid][fLinkID2], Faction[fid][fVehicle2ZAngle]);
								Faction[fid][fCar2Col1] = Player[playerid][CarCol1];
								Faction[fid][fCar2Col2] = Player[playerid][CarCol2];

								Player[playerid][PlayerCarModel] = 0;
								Player[playerid][CarLinkID] = 0;

								Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car1Plate], 255, "0");
								Player[playerid][v1NOS] = 0;
		      					Player[playerid][v1NOSFUEL] = 0;
		      					Player[playerid][V1TURBO] = 0;
		      					Player[playerid][v1ENGINE] = 0;
						      	FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							if(fGivingCar[playerid] == 2)
							{
								Faction[fid][fVehicle2] = Player[playerid][PlayerCarModel2];
								Faction[fid][fLinkID2] = Player[playerid][Car2LinkID];
								GetVehiclePos(Faction[fid][fLinkID2], Faction[fid][fVehicle2X], Faction[fid][fVehicle2Y], Faction[fid][fVehicle2Z]);
								GetVehicleZAngle(Faction[fid][fLinkID2], Faction[fid][fVehicle2ZAngle]);
								Faction[fid][fCar2Col1] = Player[playerid][Car2Col1];
								Faction[fid][fCar2Col2] = Player[playerid][Car2Col2];

								Player[playerid][PlayerCarModel2] = 0;
								Player[playerid][Car2LinkID] = 0;

								Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car2Plate], 255, "0");
		      					Player[playerid][v2NOS] = 0;
					            Player[playerid][v2NOSFUEL] = 0;
					            Player[playerid][v2TURBO] = 0;
					            Player[playerid][v2ENGINE] = 0;
					            FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							else if(fGivingCar[playerid] == 3)
							{
	      						Faction[fid][fVehicle2] = Player[playerid][PlayerCarModel3];
								Faction[fid][fLinkID2] = Player[playerid][Car3LinkID];
								GetVehiclePos(Faction[fid][fLinkID2], Faction[fid][fVehicle2X], Faction[fid][fVehicle2Y], Faction[fid][fVehicle2Z]);
								GetVehicleZAngle(Faction[fid][fLinkID2], Faction[fid][fVehicle2ZAngle]);
								Faction[fid][fCar2Col1] = Player[playerid][Car3Col1];
								Faction[fid][fCar2Col2] = Player[playerid][Car3Col2];

								Player[playerid][PlayerCarModel3] = 0;
								Player[playerid][Car3LinkID] = 0;
								Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;
						        format(Player[playerid][Car3Plate], 255, "0");
						        Player[playerid][v3NOS] = 0;
						        Player[playerid][v3NOSFUEL] = 0;
						        Player[playerid][v3TURBO] = 0;
						        Player[playerid][v3ENGINE] = 0;
						        FactionVehiclesSpawned[fid]++;
						        SaveFaction(fid);

								SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
							}
						}
						case 2: //v3
						{
						    new fid = Player[playerid][FactionID];
	     					if(fGivingCar[playerid] == 1)
	     					{
				    			Faction[fid][fVehicle3] = Player[playerid][PlayerCarModel];
								Faction[fid][fLinkID3] = Player[playerid][CarLinkID];
								GetVehiclePos(Faction[fid][fLinkID3], Faction[fid][fVehicle3X], Faction[fid][fVehicle3Y], Faction[fid][fVehicle3Z]);
								GetVehicleZAngle(Faction[fid][fLinkID3], Faction[fid][fVehicle3ZAngle]);
								Faction[fid][fCar3Col1] = Player[playerid][CarCol1];
								Faction[fid][fCar3Col2] = Player[playerid][CarCol2];

								Player[playerid][PlayerCarModel] = 0;
								Player[playerid][CarLinkID] = 0;

								Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car1Plate], 255, "0");
								Player[playerid][v1NOS] = 0;
		      					Player[playerid][v1NOSFUEL] = 0;
		      					Player[playerid][V1TURBO] = 0;
		      					Player[playerid][v1ENGINE] = 0;
						      	FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							if(fGivingCar[playerid] == 2)
							{
								Faction[fid][fVehicle3] = Player[playerid][PlayerCarModel2];
								Faction[fid][fLinkID3] = Player[playerid][Car2LinkID];
								GetVehiclePos(Faction[fid][fLinkID3], Faction[fid][fVehicle3X], Faction[fid][fVehicle3Y], Faction[fid][fVehicle3Z]);
								GetVehicleZAngle(Faction[fid][fLinkID3], Faction[fid][fVehicle3ZAngle]);
								Faction[fid][fCar3Col1] = Player[playerid][Car2Col1];
								Faction[fid][fCar3Col2] = Player[playerid][Car2Col2];

								Player[playerid][PlayerCarModel2] = 0;
								Player[playerid][Car2LinkID] = 0;

								Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car2Plate], 255, "0");
		      					Player[playerid][v2NOS] = 0;
					            Player[playerid][v2NOSFUEL] = 0;
					            Player[playerid][v2TURBO] = 0;
					            Player[playerid][v2ENGINE] = 0;
					            FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							else if(fGivingCar[playerid] == 3)
							{
	      						Faction[fid][fVehicle3] = Player[playerid][PlayerCarModel3];
								Faction[fid][fLinkID3] = Player[playerid][Car3LinkID];
								GetVehiclePos(Faction[fid][fLinkID3], Faction[fid][fVehicle3X], Faction[fid][fVehicle3Y], Faction[fid][fVehicle3Z]);
								GetVehicleZAngle(Faction[fid][fLinkID3], Faction[fid][fVehicle3ZAngle]);
								Faction[fid][fCar3Col1] = Player[playerid][Car3Col1];
								Faction[fid][fCar3Col2] = Player[playerid][Car3Col2];

								Player[playerid][PlayerCarModel3] = 0;
								Player[playerid][Car3LinkID] = 0;
								Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;
						        format(Player[playerid][Car3Plate], 255, "0");
						        Player[playerid][v3NOS] = 0;
						        Player[playerid][v3NOSFUEL] = 0;
						        Player[playerid][v3TURBO] = 0;
						        Player[playerid][v3ENGINE] = 0;
						        FactionVehiclesSpawned[fid]++;
						        SaveFaction(fid);

								SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
							}
						}
						case 3:
						{
						    new fid = Player[playerid][FactionID];
	     					if(fGivingCar[playerid] == 1)
	     					{
				    			Faction[fid][fVehicle4] = Player[playerid][PlayerCarModel];
								Faction[fid][fLinkID4] = Player[playerid][CarLinkID];
								GetVehiclePos(Faction[fid][fLinkID4], Faction[fid][fVehicle4X], Faction[fid][fVehicle4Y], Faction[fid][fVehicle4Z]);
								GetVehicleZAngle(Faction[fid][fLinkID4], Faction[fid][fVehicle4ZAngle]);
								Faction[fid][fCar4Col1] = Player[playerid][CarCol1];
								Faction[fid][fCar4Col2] = Player[playerid][CarCol2];

								Player[playerid][PlayerCarModel] = 0;
								Player[playerid][CarLinkID] = 0;

								Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car1Plate], 255, "0");
								Player[playerid][v1NOS] = 0;
		      					Player[playerid][v1NOSFUEL] = 0;
		      					Player[playerid][V1TURBO] = 0;
		      					Player[playerid][v1ENGINE] = 0;
						      	FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							if(fGivingCar[playerid] == 2)
							{
								Faction[fid][fVehicle4] = Player[playerid][PlayerCarModel2];
								Faction[fid][fLinkID4] = Player[playerid][Car2LinkID];
								GetVehiclePos(Faction[fid][fLinkID4], Faction[fid][fVehicle4X], Faction[fid][fVehicle4Y], Faction[fid][fVehicle4Z]);
								GetVehicleZAngle(Faction[fid][fLinkID4], Faction[fid][fVehicle4ZAngle]);
								Faction[fid][fCar4Col1] = Player[playerid][Car2Col1];
								Faction[fid][fCar4Col2] = Player[playerid][Car2Col2];

								Player[playerid][PlayerCarModel2] = 0;
                                Player[playerid][Car2LinkID] = 0;

								Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car2Plate], 255, "0");
		      					Player[playerid][v2NOS] = 0;
					            Player[playerid][v2NOSFUEL] = 0;
					            Player[playerid][v2TURBO] = 0;
					            Player[playerid][v2ENGINE] = 0;
					            FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							else if(fGivingCar[playerid] == 3)
							{
	      						Faction[fid][fVehicle4] = Player[playerid][PlayerCarModel3];
								Faction[fid][fLinkID4] = Player[playerid][Car3LinkID];
								GetVehiclePos(Faction[fid][fLinkID4], Faction[fid][fVehicle4X], Faction[fid][fVehicle4Y], Faction[fid][fVehicle4Z]);
								GetVehicleZAngle(Faction[fid][fLinkID4], Faction[fid][fVehicle4ZAngle]);
								Faction[fid][fCar4Col1] = Player[playerid][Car3Col1];
								Faction[fid][fCar4Col2] = Player[playerid][Car3Col2];

								Player[playerid][PlayerCarModel3] = 0;
								Player[playerid][Car3LinkID] = 0;
								Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;
						        format(Player[playerid][Car3Plate], 255, "0");
						        Player[playerid][v3NOS] = 0;
						        Player[playerid][v3NOSFUEL] = 0;
						        Player[playerid][v3TURBO] = 0;
						        Player[playerid][v3ENGINE] = 0;
						        FactionVehiclesSpawned[fid]++;
						        SaveFaction(fid);

								SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
							}
						}
						case 4:
						{
						    new fid = Player[playerid][FactionID];
	     					if(fGivingCar[playerid] == 1)
	     					{
				    			Faction[fid][fVehicle5] = Player[playerid][PlayerCarModel];
								Faction[fid][fLinkID5] = Player[playerid][CarLinkID];
								GetVehiclePos(Faction[fid][fLinkID5], Faction[fid][fVehicle5X], Faction[fid][fVehicle5Y], Faction[fid][fVehicle5Z]);
								GetVehicleZAngle(Faction[fid][fLinkID5], Faction[fid][fVehicle2ZAngle]);
								Faction[fid][fCar5Col1] = Player[playerid][CarCol1];
								Faction[fid][fCar5Col2] = Player[playerid][CarCol2];

								Player[playerid][PlayerCarModel] = 0;
								Player[playerid][CarLinkID] = 0;

								Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car1Plate], 255, "0");
								Player[playerid][v1NOS] = 0;
		      					Player[playerid][v1NOSFUEL] = 0;
		      					Player[playerid][V1TURBO] = 0;
		      					Player[playerid][v1ENGINE] = 0;
						      	FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							if(fGivingCar[playerid] == 2)
							{
								Faction[fid][fVehicle5] = Player[playerid][PlayerCarModel2];
								Faction[fid][fLinkID5] = Player[playerid][Car2LinkID];
								GetVehiclePos(Faction[fid][fLinkID5], Faction[fid][fVehicle5X], Faction[fid][fVehicle5Y], Faction[fid][fVehicle5Z]);
								GetVehicleZAngle(Faction[fid][fLinkID5], Faction[fid][fVehicle5ZAngle]);
								Faction[fid][fCar5Col1] = Player[playerid][Car2Col1];
								Faction[fid][fCar5Col2] = Player[playerid][Car2Col2];

								Player[playerid][PlayerCarModel2] = 0;
								Player[playerid][Car2LinkID] = 0;

								Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;
		      					format(Player[playerid][Car2Plate], 255, "0");
		      					Player[playerid][v2NOS] = 0;
					            Player[playerid][v2NOSFUEL] = 0;
					            Player[playerid][v2TURBO] = 0;
					            Player[playerid][v2ENGINE] = 0;
					            FactionVehiclesSpawned[fid]++;

	                            SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
								SaveFaction(fid);
							}
							else if(fGivingCar[playerid] == 3)
							{
	      						Faction[fid][fVehicle5] = Player[playerid][PlayerCarModel3];
								Faction[fid][fLinkID5] = Player[playerid][Car3LinkID];
								GetVehiclePos(Faction[fid][fLinkID5], Faction[fid][fVehicle5X], Faction[fid][fVehicle5Y], Faction[fid][fVehicle5Z]);
								GetVehicleZAngle(Faction[fid][fLinkID5], Faction[fid][fVehicle5ZAngle]);
								Faction[fid][fCar5Col1] = Player[playerid][Car3Col1];
								Faction[fid][fCar5Col2] = Player[playerid][Car3Col2];

								Player[playerid][PlayerCarModel3] = 0;
								Player[playerid][Car3LinkID] = 0;
								Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;
						        format(Player[playerid][Car3Plate], 255, "0");
						        Player[playerid][v3NOS] = 0;
						        Player[playerid][v3NOSFUEL] = 0;
						        Player[playerid][v3TURBO] = 0;
						        Player[playerid][v3ENGINE] = 0;
						        FactionVehiclesSpawned[fid]++;
						        SaveFaction(fid);

								SendClientMessage(playerid, WHITE, "You have succesfully given your personal vehicle to your faction.");
							}
						}
					}
			    }
			    case 9206:
			    {
			        new fid = Player[playerid][FactionID];
			        new slot1[128], slot2[128], slot3[128], slot4[128], slot5[128], dialog[512];
			        if(Faction[fid][fLinkID1] != 0)
			        {
			            format(slot1, sizeof(slot1), "Slot 1 (taken)");
			        }
			        else
			        {
			            format(slot1, sizeof(slot1), "Slot 1 (empty)");
			        }
			        if(Faction[fid][fLinkID2] != 0)
			        {
			            format(slot2, sizeof(slot2), "Slot 2 (taken)");
			        }
			        else
			        {
			            format(slot2, sizeof(slot2), "Slot 2 (empty)");
			        }
			        if(Faction[fid][fLinkID3] != 0)
			        {
			            format(slot3, sizeof(slot3), "Slot 3 (taken)");
			        }
			        else
			        {
			            format(slot3, sizeof(slot3), "Slot 3 (empty)");
			        }
			        if(Faction[fid][fLinkID4] != 0)
			        {
			            format(slot4, sizeof(slot4), "Slot 4 (taken)");
			        }
			        else
			        {
			            format(slot4, sizeof(slot4), "Slot 4 (empty)");
			        }
			        if(Faction[fid][fLinkID5] != 0)
			        {
			            format(slot5, sizeof(slot5), "Slot 5 (taken)");
			        }
			        else
			        {
			            format(slot5, sizeof(slot5), "Slot 5 (empty)");
			        }
					format(dialog, sizeof(dialog), "%s\n%s\n%s\n%s\n%s", slot1, slot2, slot3, slot4, slot5);
			        switch(listitem)
			        {
				        case 0:
				        {
				            fGivingCar[playerid] = 1;
							ShowPlayerDialog(playerid, 9207, DIALOG_STYLE_LIST, "Into Slot", dialog, "Choose", "Cancel");
						}
				        case 1:
				        {
		                    fGivingCar[playerid] = 2;
		                    ShowPlayerDialog(playerid, 9207, DIALOG_STYLE_LIST, "Into Slot", dialog, "Choose", "Cancel");
						}
						case 2:
						{
						    fGivingCar[playerid] = 3;
						    ShowPlayerDialog(playerid, 9207, DIALOG_STYLE_LIST, "Into Slot", dialog, "Choose", "Cancel");
						}
					}
			    }
			    case 9205:
			    {
			        switch(listitem)
			        {
				        case 0:
				        {
				            DestroyVehicle(Faction[Player[playerid][FactionID]][fLinkID1]);
							new fid = Player[playerid][FactionID];

							Faction[fid][fVehicle1] = 0;
							Faction[fid][fVehicle1X] = 0;
							Faction[fid][fVehicle1Y] = 0;
							Faction[fid][fVehicle1Z] = 0;
							Faction[fid][fVehicle1ZAngle] = 0;
							Faction[fid][fLinkID1] = 0;
							Faction[fid][fCarCol1] = 0;
							Faction[fid][fCarCol2] = 0;
							FactionVehiclesSpawned[fid]--;
							SaveFaction(fid);

							SendClientMessage(playerid, WHITE, "You have succesfully disbandoned your faction's first vehicle.");
						}
						case 1:
						{
						    DestroyVehicle(Faction[Player[playerid][FactionID]][fLinkID2]);
							new fid = Player[playerid][FactionID];

							Faction[fid][fVehicle2] = 0;
							Faction[fid][fVehicle2X] = 0;
							Faction[fid][fVehicle2Y] = 0;
							Faction[fid][fVehicle2Z] = 0;
							Faction[fid][fVehicle2ZAngle] = 0;
							Faction[fid][fLinkID2] = 0;
							Faction[fid][fCar2Col1] = 0;
							Faction[fid][fCar2Col2] = 0;
							FactionVehiclesSpawned[fid]--;
							SaveFaction(fid);

							SendClientMessage(playerid, WHITE, "You have succesfully disbandoned your faction's second vehicle.");
						}
						case 2:
						{
						    DestroyVehicle(Faction[Player[playerid][FactionID]][fLinkID3]);
							new fid = Player[playerid][FactionID];

							Faction[fid][fVehicle3] = 0;
							Faction[fid][fVehicle3X] = 0;
							Faction[fid][fVehicle3Y] = 0;
							Faction[fid][fVehicle3Z] = 0;
							Faction[fid][fVehicle3ZAngle] = 0;
							Faction[fid][fLinkID3] = 0;
							Faction[fid][fCar3Col1] = 0;
							Faction[fid][fCar3Col2] = 0;
							FactionVehiclesSpawned[fid]--;
							SaveFaction(fid);

							SendClientMessage(playerid, WHITE, "You have succesfully disbandoned your faction's third vehicle.");
						}
						case 3:
						{
						    DestroyVehicle(Faction[Player[playerid][FactionID]][fLinkID4]);
							new fid = Player[playerid][FactionID];

							Faction[fid][fVehicle4] = 0;
							Faction[fid][fVehicle4X] = 0;
							Faction[fid][fVehicle4Y] = 0;
							Faction[fid][fVehicle4Z] = 0;
							Faction[fid][fVehicle4ZAngle] = 0;
							Faction[fid][fLinkID4] = 0;
							Faction[fid][fCar4Col1] = 0;
							Faction[fid][fCar4Col2] = 0;
							FactionVehiclesSpawned[fid]--;
							SaveFaction(fid);

							SendClientMessage(playerid, WHITE, "You have succesfully disbandoned your faction's fourth vehicle.");
						}
						case 4:
						{
						    DestroyVehicle(Faction[Player[playerid][FactionID]][fLinkID5]);
							new fid = Player[playerid][FactionID];

							Faction[fid][fVehicle5] = 0;
							Faction[fid][fVehicle5X] = 0;
							Faction[fid][fVehicle5Y] = 0;
							Faction[fid][fVehicle5Z] = 0;
							Faction[fid][fVehicle5ZAngle] = 0;
							Faction[fid][fLinkID5] = 0;
							Faction[fid][fCar5Col1] = 0;
							Faction[fid][fCar5Col2] = 0;
							FactionVehiclesSpawned[fid]--;
							SaveFaction(fid);

							SendClientMessage(playerid, WHITE, "You have succesfully disbandoned your faction's first vehicle.");
						}
					}
			    }
			    case 9204:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                ShowPlayerDialog(playerid, 9205, DIALOG_STYLE_LIST, "Disband Vehicles", "Vehicle 1\nVehicle 2\nVehicle 3\nVehicle 4\nVehicle 5", "Choose", "Close");
			            }
			            case 1:
						{
						    ShowPlayerDialog(playerid, 9206, DIALOG_STYLE_LIST, "Add one of your car(s)", "Vehicle 1\nVehicle 2\nVehicle 3", "Choose", "Cancel");
						}
			        }
			    }
			    case 9203:
			    {
			        switch(listitem)
			        {
						case 0:
						{
							if(Faction[Player[playerid][FactionID]][fBank] >= 10000)
							{
							    new fid = Player[playerid][FactionID];
							    Faction[fid][fBank] -= 10000;
							    Faction[fid][fMemberLock] += 5;
							    SaveFaction(fid);

							    SendClientMessage(playerid, WHITE, "You've succesfully changed the maximum members");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You need to have $10,000 in your faction bank");
							}
						}
						case 1:
						{
						    if(Faction[Player[playerid][FactionID]][fVehicleLock] <= 5)
						    {
							    if(Faction[Player[playerid][FactionID]][fBank] >= 5000)
							    {
							        new fid = Player[playerid][FactionID];
							        Faction[fid][fBank] -= 5000;
							        Faction[fid][fVehicleLock] += 1;
							        SaveFaction(fid);

							        SendClientMessage(playerid, WHITE, "You've succesfully added one vehicle slot.");
							    }
							    else
								{
								    SendClientMessage(playerid, WHITE, "You need to have $5,000 in your faction bank");
								}
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can have a maximum of 5 vehicles");
							}
						}
					}
			    }
			    case 9202:
			    {
			        new id = strval(inputtext);
			        new string[128];
			        FactionInvite[id] = Faction[Player[playerid][FactionID]][fID];
			        format(string, sizeof(string), "You have been invited into the faction %s /facceptinvite to accept.", Faction[Player[playerid][FactionID]][fName]);
					SendClientMessage(id, WHITE, string);
			    }

			    case 11001:
			    {
					format(Faction[Player[playerid][FactionID]][fRank1], 255, "%s", inputtext);
					ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
			    }

			    case 11002:
			    {
					format(Faction[Player[playerid][FactionID]][fRank2], 255, "%s", inputtext);
					ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
			    }

			    case 11003:
			    {
					format(Faction[Player[playerid][FactionID]][fRank3], 255, "%s", inputtext);
					ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
			    }

			    case 11004:
			    {
					format(Faction[Player[playerid][FactionID]][fRank4], 255, "%s", inputtext);
					ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
			    }

			    case 11005:
			    {
					format(Faction[Player[playerid][FactionID]][fRank5], 255, "%s", inputtext);
					ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
			    }

			    case 9126:
			    {
			        switch(listitem)
			        {
						case 0:
						{
						    ShowPlayerDialog(playerid, 9127, DIALOG_STYLE_INPUT, "Faction Name", "Type a new faction name in here", "Choose", "Cancel");
						}
						case 1:
						{
						    ShowPlayerDialog(playerid, 11001, DIALOG_STYLE_INPUT, "Rank 1", "Type a new rank 1 name in here", "Choose", "Cancel");
						}
						case 2:
						{
							ShowPlayerDialog(playerid, 11002, DIALOG_STYLE_INPUT, "Rank 2", "Type a new rank 2 name in here", "Choose", "Cancel");
						}
						case 3:
						{
							ShowPlayerDialog(playerid, 11003, DIALOG_STYLE_INPUT, "Rank 3", "Type a new rank 3 name in here", "Choose", "Cancel");
						}
						case 4:
						{
							ShowPlayerDialog(playerid, 11004, DIALOG_STYLE_INPUT, "Rank 4", "Type a new rank 4 name in here", "Choose", "Cancel");
						}
						case 5:
						{
							ShowPlayerDialog(playerid, 11005, DIALOG_STYLE_INPUT, "Rank 5", "Type a new rank 5 name in here", "Choose", "Cancel");
						}
			        }
			    }

			    case 9127:
			    {
					format(Faction[Player[playerid][FactionID]][fName], 255, "%s", inputtext);
					ShowPlayerDialog(playerid, 9126, DIALOG_STYLE_LIST, "Change Names", "Faction Name\nRank 1\nRank 2\nRank 3\nRank 4\nRank 5", "Choose", "Close");
			    }
			    case 9124:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
							Faction[Player[playerid][FactionID]][fMembers]--;
			                Player[playerid][FactionID] = 0;
			                Player[playerid][FactionRank] = 0;
							SendClientMessage(playerid, WHITE, "You have succesfully left the faction.");
			            }
			            case 1:
			            {
			                new string[1024];
			                new fid = Player[playerid][FactionID];
			                format(string, sizeof(string), "Faction Name: %s\nFaction Bank: $%s\nFaction Members: %d/%d\nVehicles: %d/%d\nVehicle 1: %s (%d)\nVehicle 2: %s (%d)\nVehicle 3: %s (%d)\nVehicle 4: %s (%d)\nVehicle 5: %s (%d)", Faction[Player[playerid][FactionID]][fName], IntToFormattedStr(Faction[Player[playerid][FactionID]][fBank]), Faction[Player[playerid][FactionID]][fMembers], Faction[Player[playerid][FactionID]][fMemberLock],
							FactionVehiclesSpawned[fid], Faction[Player[playerid][FactionID]][fVehicleLock], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID1])), Faction[fid][fLinkID1], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID2])), Faction[fid][fLinkID2], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID3])), Faction[fid][fLinkID3], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID4])), Faction[fid][fLinkID4], GetVehicleName(GetVehicleModel(Faction[fid][fLinkID5])), Faction[fid][fLinkID5]);
			                ShowPlayerDialog(playerid, 9201, DIALOG_STYLE_MSGBOX, "Faction Information", string, "Exit", "");
			            }
			        }
			    }

			    case 12000:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                ShowPlayerDialog(playerid, 12001, DIALOG_STYLE_LIST, "Clothes", "Paramedic\nFemale Paramedic\nAssistant Chief\nHospital Chief", "Choose", "Close");
			            }
			        }
			    }

			    case 12001:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
							Player[playerid][LastSkin] = 274;
							SetPlayerSkin(playerid, 274);
			            }
			            case 1:
			            {
	                        Player[playerid][LastSkin] = 308;
							SetPlayerSkin(playerid, 308);
			            }
			            case 2:
						{
						    if(Player[playerid][GroupRank] >= 9)
						    {
	         					Player[playerid][LastSkin] = 275;
								SetPlayerSkin(playerid, 275);
						    }
						}
						case 3:
						{
						    if(Player[playerid][GroupRank] == 10)
						    {
	         					Player[playerid][LastSkin] = 276;
								SetPlayerSkin(playerid, 276);
						    }
						}
			        }
			    }

			    case 7002:
			    {
					switch(RegisteringVeh[playerid])
					{
					    case 1:
					    {
					        new pcar = Player[playerid][CarLinkID];
					        RegisteringVeh[playerid] = 0;
					        Player[playerid][Money] -= 750;
							format(Player[playerid][Car1Plate], 255, "%s", inputtext);
							GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
							SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
							SetVehicleToRespawn(pcar);
							SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

							SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
					    }
					    case 2:
					    {
	                        new pcar = Player[playerid][Car2LinkID];
					        RegisteringVeh[playerid] = 0;
					        Player[playerid][Money] -= 750;
							format(Player[playerid][Car2Plate], 255, "%s", inputtext);
							GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
							SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
							SetVehicleToRespawn(pcar);
							SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

							SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
						}
						case 3:
						{
	                        new pcar = Player[playerid][Car3LinkID];
					        RegisteringVeh[playerid] = 0;
					        Player[playerid][Money] -= 750;
							format(Player[playerid][Car3Plate], 255, "%s", inputtext);
							GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
							SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
							SetVehicleToRespawn(pcar);
							SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

							SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
						}
					}
			    }

			    case 7001:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
	                        RegisteringVeh[playerid] = 1;
							if(Player[playerid][VipRank] >= 1)
							{
								ShowPlayerDialog(playerid, 7002, DIALOG_STYLE_INPUT, "Plate selection", "Please fill in your desired plate", "Done", "Cancel");
							}
							else
							{
								new rand = random(5);
								switch(rand)
								{
									case 0:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "DKA - %d", number);
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "RKL - 016");
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 1:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "OPQ - %d", number);
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "IOE - 716");
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 2:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "BVX - %d", number);
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "LLA - 088");
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 3:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "UYQ - %d", number);
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "ITR - 991");
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 4:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "QWE - %d", number);
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][CarLinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car1Plate], 255, "AGD - 714");
											GetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car1Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
								}
							}
						}
			            case 1:
			            {
	                        RegisteringVeh[playerid] = 2;
							if(Player[playerid][VipRank] >= 1)
							{
								ShowPlayerDialog(playerid, 7002, DIALOG_STYLE_INPUT, "Plate selection", "Please fill in your desired plate", "Done", "Cancel");
							}
							else
							{
								new rand = random(5);
								switch(rand)
								{
									case 0:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "DKA - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "RKL - 016");
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 1:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "OPQ - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "IOE - 716");
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 2:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "BVX - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "LLA - 088");
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 3:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "UYQ - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "ITR - 991");
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 4:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "QWE - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car2LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car2Plate], 255, "AGD - 714");
											GetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car2Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
								}
							}
			            }
			            case 2:
			            {
	                        RegisteringVeh[playerid] = 1;
							if(Player[playerid][VipRank] >= 1)
							{
								ShowPlayerDialog(playerid, 7002, DIALOG_STYLE_INPUT, "Plate selection", "Please fill in your desired plate", "Done", "Cancel");
							}
							else
							{
								new rand = random(5);
								switch(rand)
								{
									case 0:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "DKA - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "RKL - 016");
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 1:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "OPQ - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "IOE - 716");
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 2:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "BVX - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "LLA - 088");
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 3:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "UYQ - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "ITR - 991");
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
									case 4:
									{
										new number = random(999);
										if(number >= 100)
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "QWE - %d", number);
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
										else
										{
											new pcar = Player[playerid][Car3LinkID];
											RegisteringVeh[playerid] = 0;
											Player[playerid][Money] -= 750;
											format(Player[playerid][Car3Plate], 255, "AGD - 714");
											GetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
											SetVehicleNumberPlate(pcar, Player[playerid][Car3Plate]);
											SetVehicleToRespawn(pcar);
											SetVehiclePos(pcar, Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

											SendClientMessage(playerid, WHITE, "You have successfully registered your vehicle");
										}
									}
								}
							}
			            }
			        }
			    }
			    case 4504:
			    {
			        switch(listitem)
					{
					    case 0:
					    {
					        DrivingTestMistakes[playerid] += 1;
					        if(DrivingTestMistakes[playerid] >= 2)
					        {
					            new string[512];
								format(string, sizeof(string), "==========\nUnfortunately you have failed the test with %d mistakes\nYou can only have up to 1 mistake. You can retry it but it will cost you $500.\n==========", DrivingTestMistakes[playerid]);
					            ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_MSGBOX, "[RESULTS]", string, "Ok", "");
					        }
					        else
					        {
					            new string[512];
                                DrivingTest[playerid] = 1;
								format(string, sizeof(string), "==========\nFortunately you have succeeded the test with %d mistakes\nYou can only have up to 1 mistake. You can continue by going outside and start the driving test itself.\n==========", DrivingTestMistakes[playerid]);
					            ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_MSGBOX, "[RESULTS]", string, "Ok", "");
					        }
					        DrivingTestMistakes[playerid] = 0;
					    }
					    case 1:
					    {
					        if(DrivingTestMistakes[playerid] >= 2)
					        {
					            new string[512];
								format(string, sizeof(string), "==========\nUnfortunately you have failed the test with %d mistakes\nYou can only have up to 1 mistake. You can retry it but it will cost you $500.\n==========", DrivingTestMistakes[playerid]);
					            ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_MSGBOX, "[RESULTS]", string, "Ok", "");
					        }
					        else
					        {
					            new string[512];
                                DrivingTest[playerid] = 1;
								format(string, sizeof(string), "==========\nFortunately you have succeeded the test with %d mistakes\nYou can only have up to 1 mistake. You can continue by going outside and start the driving test itself.\n==========", DrivingTestMistakes[playerid]);
					            ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_MSGBOX, "[RESULTS]", string, "Ok", "");
					        }
					        DrivingTestMistakes[playerid] = 0;
					    }
					    case 2:
					    {
					        DrivingTestMistakes[playerid] += 1;
					        if(DrivingTestMistakes[playerid] >= 2)
					        {
					            new string[512];
								format(string, sizeof(string), "==========\nUnfortunately you have failed the test with %d mistakes\nYou can only have up to 1 mistake. You can retry it but it will cost you $500.\n==========", DrivingTestMistakes[playerid]);
					            ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_MSGBOX, "[RESULTS]", string, "Ok", "");
					        }
					        else
					        {
					            new string[512];
                                DrivingTest[playerid] = 1;
								format(string, sizeof(string), "==========\nFortunately you have succeeded the test with %d mistakes\nYou can only have up to 1 mistake. You can continue by going outside and start the driving test itself.\n==========", DrivingTestMistakes[playerid]);
					            ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_MSGBOX, "[RESULTS]", string, "Ok", "");
					        }
					        DrivingTestMistakes[playerid] = 0;
					    }
					}
			    }
			    case 4503:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                DrivingTestMistakes[playerid] += 1;
			                ShowPlayerDialog(playerid, 4504, DIALOG_STYLE_LIST, "[5/5] Can you use high beams whenever", "Yes\nNo\nOnly off road", "Choose", "");
			            }
			            case 1:
			            {
			                ShowPlayerDialog(playerid, 4504, DIALOG_STYLE_LIST, "[5/5] Can you use high beams whenever", "Yes\nNo\nOnly off road", "Choose", "");
			            }
			            case 2:
			            {
			                DrivingTestMistakes[playerid] += 1;
			                ShowPlayerDialog(playerid, 4504, DIALOG_STYLE_LIST, "[5/5] Can you use high beams whenever", "Yes\nNo\nOnly off road", "Choose", "");
			            }
			        }
			    }
			    case 4502:
			    {
					switch(listitem)
					{
					    case 0:
					    {
					        ShowPlayerDialog(playerid, 4503, DIALOG_STYLE_LIST, "[4/5] How fast can you go on highways", "80KM/h\n120KM/h\n20KM/H", "Choose", "");
					    }
					    case 1:
						{
                            DrivingTestMistakes[playerid] += 1;
                            ShowPlayerDialog(playerid, 4503, DIALOG_STYLE_LIST, "[4/5] How fast can you go on highways", "80KM/h\n120KM/h\n20KM/H", "Choose", "");
						}
						case 2:
						{
						    DrivingTestMistakes[playerid] += 1;
						    ShowPlayerDialog(playerid, 4503, DIALOG_STYLE_LIST, "[4/5] How fast can you go on highways", "80KM/h\n120KM/h\n20KM/H", "Choose", "");
						}
						case 3:
						{
						    DrivingTestMistakes[playerid] += 1;
						    ShowPlayerDialog(playerid, 4503, DIALOG_STYLE_LIST, "[4/5] How fast can you go on highways", "80KM/h\n120KM/h\n20KM/H", "Choose", "");
						}
					}
			    }
			    case 4501:
			    {
			        switch(listitem)
			        {
				        case 0:
				        {
				            DrivingTestMistakes[playerid] += 1;
				            ShowPlayerDialog(playerid, 4502, DIALOG_STYLE_LIST, "[3/5] How fast can you drive in cities", "50KM/H\n30KM/H\n80KM/H\nNo speedlimit", "Choose", "");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 4502, DIALOG_STYLE_LIST, "[3/5] How fast can you drive in cities", "50KM/H\n30KM/H\n80KM/H\nNo speedlimit", "Choose", "");
				        }
					}
				}
				case 4500:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
                            DrivingTestMistakes[playerid] += 1;
                            ShowPlayerDialog(playerid, 4501, DIALOG_STYLE_LIST, "[2/5] Can you park at a yellow line", "Yes\nNo", "Choose", "");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 4501, DIALOG_STYLE_LIST, "[2/5] Can you park at a yellow line", "Yes\nNo", "Choose", "");
				        }
				        case 2:
						{
						    DrivingTestMistakes[playerid] += 1;
						    ShowPlayerDialog(playerid, 4501, DIALOG_STYLE_LIST, "[2/5] Can you park at a yellow line", "Yes\nNo", "Choose", "");
						}
				    }
				}
				case 6666:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
									if(Player[playerid][Guarding] == -1)
									{
										Player[playerid][Guarding] = 1;
									}
									Player[playerid][Guarding]++;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You have purchased some car parts. Use /fixcar as a mechanic.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
				        }
				        case 1:
				    	{
				        	if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
						            Player[playerid][HasSprayCans]++;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You have purchased a spray can.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
						}
				    }
				}
				case 3003:
				{
				    switch(listitem)
				    {
					    case 0:
					    {
					        ChosenObject[playerid] = 1702;
					        ChosenObjectPrice[playerid] = 1500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
						}
					    case 1:
					    {
                            ChosenObject[playerid] = 1703;
					        ChosenObjectPrice[playerid] = 1500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
					    }
					    case 2:
					    {
                            ChosenObject[playerid] = 1710;
					        ChosenObjectPrice[playerid] = 1000;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
					    }
					    case 3:
					    {
                            ChosenObject[playerid] = 1712;
					        ChosenObjectPrice[playerid] = 800;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
					    }
					    case 4:
					    {
                            ChosenObject[playerid] = 11717;
					        ChosenObjectPrice[playerid] = 950;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
					    }
					}
				}
				case 3004:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 1705;
					        ChosenObjectPrice[playerid] = 300;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 1704;
					        ChosenObjectPrice[playerid] = 300;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 2:
				        {
				            ChosenObject[playerid] = 2636;
					        ChosenObjectPrice[playerid] = 200;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 3005:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
                            ChosenObject[playerid] = 2637;
					        ChosenObjectPrice[playerid] = 350;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 1516;
					        ChosenObjectPrice[playerid] = 100;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 3006:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2318;
					        ChosenObjectPrice[playerid] = 500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2316;
					        ChosenObjectPrice[playerid] = 500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 2:
				        {
				            ChosenObject[playerid] = 2315;
					        ChosenObjectPrice[playerid] = 100;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 3002:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 3003, DIALOG_STYLE_LIST, "Couches", "Couch 1 ($1,500)\nCouch 2 ($1,500)\nCouch 3 ($1,000)\nCouch 4 ($800)\nCouch 5 ($950)", "Choose", "Exit");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 3004, DIALOG_STYLE_LIST, "Chairs", "Chair 1 ($300)\nChair 2 ($300)\nChair 3 ($200)", "Choose", "Exit");
				        }
				        case 2:
				        {
				            ShowPlayerDialog(playerid, 3005, DIALOG_STYLE_LIST, "Tables", "Table 1 ($350)\nTable 2 ($100)", "Choose", "Exit");
				        }
				        case 3:
				        {
				            ShowPlayerDialog(playerid, 3006, DIALOG_STYLE_LIST, "TVs", "TV 1 ($500)\nTV 2 ($500)\nTV Table ($100)", "Choose", "Exit");
				        }
				    }
				}
				case 3009:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
							ChosenObject[playerid] = 1491;
					        ChosenObjectPrice[playerid] = 150;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 1523;
					        ChosenObjectPrice[playerid] = 200;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30011:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 1798;
					        ChosenObjectPrice[playerid] = 1000;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 1812;
					        ChosenObjectPrice[playerid] = 100;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30012:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2566;
					        ChosenObjectPrice[playerid] = 2500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2298;
					        ChosenObjectPrice[playerid] = 1500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30013:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 14556;
					        ChosenObjectPrice[playerid] = 800;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2091;
					        ChosenObjectPrice[playerid] = 1200;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30014:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 1828;
					        ChosenObjectPrice[playerid] = 50;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2817;
					        ChosenObjectPrice[playerid] = 50;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 2:
				        {
				            ChosenObject[playerid] = 2818;
					        ChosenObjectPrice[playerid] = 50;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30010:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 30011, DIALOG_STYLE_LIST, "Beds", "Bed 1 ($1000)\nBed 2 ($100)", "Choose", "Exit");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 30012, DIALOG_STYLE_LIST, "Bed Sets", "Bed Set 1 ($2500)\nBed Set 2 ($1500)", "Choose", "Exit");
				        }
				        case 2:
				        {
				            ShowPlayerDialog(playerid, 30013, DIALOG_STYLE_LIST, "Wardrobe", "Wardrobe 1 ($800)\nWardrobe 2 ($1200)", "Choose", "Exit");
				        }
				        case 3:
				        {
				            ShowPlayerDialog(playerid, 30014, DIALOG_STYLE_LIST, "Carpets", "Carpet 1 ($50)\nCarpet 2 ($50)\nCarpet 3 ($50)", "Choose", "Exit");
				        }
				    }
				}
				case 30020:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 30021, DIALOG_STYLE_LIST, "Fridges", "Fridge 1 ($1200)\nFridge 2 ($750)", "Choose", "Exit");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 30022, DIALOG_STYLE_LIST, "Kitchen Pieces", "Piece 1 ($150)\nPiece 2 ($50)\nCorner 1 ($150)\nCorner 2 ($50)", "Choose", "Exit");
				        }
				        case 2:
				        {
				            ShowPlayerDialog(playerid, 30023, DIALOG_STYLE_LIST, "Sinks", "Sink 1 ($350)\nSink 2 ($150)", "Choose", "Exit");
				        }
				    }
				}
				case 30023:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2132;
					        ChosenObjectPrice[playerid] = 350;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2336;
					        ChosenObjectPrice[playerid] = 150;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30022:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2341;
					        ChosenObjectPrice[playerid] = 150;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2338;
					        ChosenObjectPrice[playerid] = 50;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 2:
				        {
				            ChosenObject[playerid] = 2134;
					        ChosenObjectPrice[playerid] = 150;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 3:
				        {
				            ChosenObject[playerid] = 2334;
					        ChosenObjectPrice[playerid] = 50;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30021:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2131;
					        ChosenObjectPrice[playerid] = 1200;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2147;
					        ChosenObjectPrice[playerid] = 750;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30030:
				{
				    switch(listitem)
				    {
						case 0:
						{
						    ShowPlayerDialog(playerid, 30031, DIALOG_STYLE_LIST, "Baths", "Bath 1 ($500)\nBath 2($500)", "Choose", "Exit");
						}
						case 1:
						{
						    ShowPlayerDialog(playerid, 30032, DIALOG_STYLE_LIST, "Sinks", "Sink 1 ($100)\nSink 2($100)", "Choose", "Exit");
						}
				    }
				}
				case 30032:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2518;
					        ChosenObjectPrice[playerid] = 100;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2523;
					        ChosenObjectPrice[playerid] = 100;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30031:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ChosenObject[playerid] = 2526;
					        ChosenObjectPrice[playerid] = 500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				        case 1:
				        {
				            ChosenObject[playerid] = 2519;
					        ChosenObjectPrice[playerid] = 500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
				        }
				    }
				}
				case 30040:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        ChosenObject[playerid] = 3383;
					        ChosenObjectPrice[playerid] = 5000;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+2.0;
							    if(Furniture[i][frActive] == 0)
							    {
							        if(ActiveCocaineTables[Player[playerid][House]] < 5)
							        {
										Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
										EditDynamicObject(playerid, Furniture[i][Object]);
										FurnitureEditing[playerid] = 1;
										Furniture[i][frActive] = 1;
										ChosenObjectFRID[playerid] = i;
									}
									else
									{
									    SendClientMessage(playerid, WHITE, "You can have a maximum of 5 cocaine tables.");
									}
									break;
								}
							}
					    }
					    case 1:
					    {
					        ChosenObject[playerid] = 2370;
					        ChosenObjectPrice[playerid] = 1500;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
									EditDynamicObject(playerid, Furniture[i][Object]);
									FurnitureEditing[playerid] = 1;
									Furniture[i][frActive] = 1;
									ChosenObjectFRID[playerid] = i;
									break;
								}
							}
					    }
						case 2:
					    {
					        ChosenObject[playerid] = 637;
					        ChosenObjectPrice[playerid] = 2000;
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
								new Float: x, Float: y, Float: z;
								GetPlayerPos(playerid, x, y, z);
								x = x+1.0;
							    if(Furniture[i][frActive] == 0)
							    {
									if(ActivePlanters[Player[playerid][House]] < 10)
							        {
										Furniture[i][Object] = CreateDynamicObject(ChosenObject[playerid], x, y, z,   0.00, 0.00, 0.00, GetPlayerVirtualWorld(playerid), -1, -1, 100.0);
										EditDynamicObject(playerid, Furniture[i][Object]);
										FurnitureEditing[playerid] = 1;
										Furniture[i][frActive] = 1;
										ChosenObjectFRID[playerid] = i;
										break;
									}
									else
									{
										SendClientMessage(playerid, WHITE, "You can have a maximum of 10 planters.");
									}
								}
							}
					    }
					}
				}
				case 3001:
				{
				    switch(listitem)
				    {
						case 0:
						{
						    ShowPlayerDialog(playerid, 3002, DIALOG_STYLE_LIST, "Living Room", "Couches\nChairs\nTables\nTVs", "Choose", "Exit");
						}
						case 1:
						{
						    ShowPlayerDialog(playerid, 3009, DIALOG_STYLE_LIST, "Doors", "Door 1 ($150)\nKitchen Door ($200)", "Choose", "Exit");
						}
						case 2:
						{
						    ShowPlayerDialog(playerid, 30010, DIALOG_STYLE_LIST, "Bedroom", "Beds\nBed Sets\nWardrobe\nCarpets", "Choose", "Exit");
						}
						case 3:
						{
						    ShowPlayerDialog(playerid, 30020, DIALOG_STYLE_LIST, "Kitchen", "Fridges\nKitchen Pieces\nSinks", "Choose", "Exit");
						}
						case 4:
						{
						    ShowPlayerDialog(playerid, 30030, DIALOG_STYLE_LIST, "Bathroom", "Baths\nSinks", "Choose", "Exit");
						}
						case 5:
						{
						    ShowPlayerDialog(playerid, 30040, DIALOG_STYLE_LIST, "Drug / Weapon related", "Drug Creation Table ($5,000)\nWeapon Creation Table ($2,500)\nPlanter ($2,000)", "Choose", "Exit");
						}
				    }
				}
				case 3000:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
							for(new i = 1; i < MAX_FURNITURE; i++)
							{
							    if(GetPlayerVirtualWorld(playerid) == Furniture[i][frVW])
							    {
							        if(IsPlayerInRangeOfPoint(playerid, 3.0, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]))
							        {
							            EditDynamicObject(playerid, Furniture[i][Object]);
							            ChosenOwnedObject[playerid] = 1;
							            ChosenObjectFRID[playerid] = i;
										Delete3DTextLabel(Furniture[i][CocaineText]);
										break;
							        }
							    }
							}
						}
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 3001, DIALOG_STYLE_LIST, "Buy Furniture", "Living Room\nDoors\nBedroom\nKitchen\nBathroom\nDrug Lab, Workbench and Planter", "Choose", "Exit");
				        }
				        case 2:
				        {
				            for(new i = 1; i < MAX_FURNITURE; i++)
							{
							    if(GetPlayerVirtualWorld(playerid) == Furniture[i][frVW])
							    {
							        if(IsPlayerInRangeOfPoint(playerid, 3.0, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ]))
							        {
							            DestroyDynamicObject(Furniture[i][Object]);
							            Furniture[i][frActive] = 0;
										Furniture[i][CocaineGrowth] = 0;
										Furniture[i][GrowingCocaineAmount] = 0;
										Delete3DTextLabel(Furniture[i][CocaineText]);
							            SaveFurniture(i);
										break;
							        }
							    }
							}
				        }
				        case 3:
				        {
				            ShowPlayerDialog(playerid, 7261, DIALOG_STYLE_INPUT, "Object Editor", "Please enter the ID you want to edit", "Choose", "Exit");
				        }
				        case 4:
				        {
				            for(new i = 1; i < MAX_FURNITURE; i++)
				            {
				                if(Furniture[i][frActive] == 1)
				                {
				                    if(Furniture[i][frVW] == GetPlayerVirtualWorld(playerid))
				                    {
				                        new string[128];
				                        format(string, sizeof(string), "[ID: %d]", i);
				                        PlayerObjID[playerid][i] = Create3DTextLabel(string, GREY, Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ], 100.0, Furniture[i][frVW], 0);
				                    }
				                }
				            }
				        }
				        case 5:
				        {
				            for(new i = 1; i < MAX_FURNITURE; i++)
				            {
				                Delete3DTextLabel(PlayerObjID[playerid][i]);
				            }
				        }
				        case 6:
				        {
                            ShowPlayerDialog(playerid, 7262, DIALOG_STYLE_INPUT, "Object Deleter", "Please enter the ID you want to delete", "Choose", "Exit");
				        }
				    }
				}
				case 7262:
				{
				    new obj = strval(inputtext);
					if(Furniture[obj][frActive] == 1)
					{
					    if(Furniture[obj][frVW] == GetPlayerVirtualWorld(playerid))
					    {
							DestroyDynamicObject(Furniture[obj][Object]);
					        Furniture[obj][frActive] = 0;
							Delete3DTextLabel(Furniture[obj][CocaineText]);
					    }
					}
				}
				case 7261:
				{
					new obj = strval(inputtext);
					if(Furniture[obj][frActive] == 1)
					{
					    if(Furniture[obj][frVW] == GetPlayerVirtualWorld(playerid))
					    {
					        EditDynamicObject(playerid, Furniture[obj][Object]);
				            ChosenOwnedObject[playerid] = 1;
				            ChosenObjectFRID[playerid] = obj;
							Delete3DTextLabel(Furniture[obj][CocaineText]);
					    }
					}
				}
				case 6513:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(hRadioStatus[Player[playerid][House]] == 0)
				            {
	                            hRadioStatus[Player[playerid][House]] = 1;
								new string[128];
								format(string, sizeof(string), "* %s turns on the house radio.", GetName(playerid));
								NearByMessage(playerid, PURPLE, string);
							}
							else
							{
							    hRadioStatus[Player[playerid][House]] = 0;
							    hRadioStation[Player[playerid][House]] = 0;
								new string[128];
								format(string, sizeof(string), "* %s turns off the car radio.", GetName(playerid));
								NearByMessage(playerid, PURPLE, string);
							}
				        }
				        case 1:
				        {
				            hRadioStation[Player[playerid][House]] = 1;
				            for(new i = 0; i < MAX_PLAYERS; i++)
				            {
				                if(Player[i][InHouse] == Player[playerid][House])
				                {
				                    PlayAudioStreamForPlayer(playerid, "http://housenationuk.com/listen.pls");
				                }
				            }
				        }
				        case 2:
				        {
				            hRadioStation[Player[playerid][House]] = 2;
				            for(new i = 0; i < MAX_PLAYERS; i++)
				            {
				                if(Player[i][InHouse] == Player[playerid][House])
				                {
				                   	PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-uktop40&file=181-uktop40.pls");
				                }
				            }
				        }
				        case 3:
				        {
				            hRadioStation[Player[playerid][House]] = 3;
				            for(new i = 0; i < MAX_PLAYERS; i++)
				            {
				                if(Player[i][InHouse] == Player[playerid][House])
				                {
				                   	PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-eagle&file=181-eagle.pls");
				                }
				            }
				        }
				        case 4:
				        {
				            hRadioStation[Player[playerid][House]] = 4;
				            for(new i = 0; i < MAX_PLAYERS; i++)
				            {
				                if(Player[i][InHouse] == Player[playerid][House])
				                {
	            					PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-reggae&file=181-reggae.pls");
				                }
				            }
				        }
				        case 5:
				        {
				            hRadioStation[Player[playerid][House]] = 5;
				            for(new i = 0; i < MAX_PLAYERS; i++)
				            {
				                if(Player[i][InHouse] == Player[playerid][House])
				                {
	            					PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls");
				                }
				            }
				        }
				        case 6:
				        {
				            hRadioStation[Player[playerid][House]] = 6;
				            for(new i = 0; i < MAX_PLAYERS; i++)
				            {
				                if(Player[i][InHouse] == Player[playerid][House])
				                {
	            					PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-comedy&file=181-comedy.pls");
				                }
				            }
				        }
				    }
				}
				case 6512:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(RadioStatus[GetPlayerVehicleID(playerid)] == 0)
				            {
	                            RadioStatus[GetPlayerVehicleID(playerid)] = 1;
								new string[128];
								format(string, sizeof(string), "* %s turns on the car radio.", GetName(playerid));
								NearByMessage(playerid, PURPLE, string);
							}
							else
							{
							    RadioStatus[GetPlayerVehicleID(playerid)] = 0;
							    RadioStation[GetPlayerVehicleID(playerid)] = 0;
							    StopAudioStreamForPlayer(playerid);
							    for(new i = 0; i < MAX_PLAYERS; i++)
							    {
							        if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
							        {
							            StopAudioStreamForPlayer(playerid);
							        }
							    }
								new string[128];
								format(string, sizeof(string), "* %s turns off the car radio.", GetName(playerid));
								NearByMessage(playerid, PURPLE, string);
							}
				        }
				        case 1:
				        {
				            RadioStation[GetPlayerVehicleID(playerid)] = 1;
				            PlayAudioStreamForPlayer(playerid, "http://housenationuk.com/listen.pls");
				        }
				        case 2:
				        {
				            RadioStation[GetPlayerVehicleID(playerid)] = 2;
				            PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-uktop40&file=181-uktop40.pls");
				        }
				        case 3:
				        {
				            RadioStation[GetPlayerVehicleID(playerid)] = 3;
				            PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-eagle&file=181-eagle.pls");
				        }
				        case 4:
				        {
				            RadioStation[GetPlayerVehicleID(playerid)] = 4;
				            PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-reggae&file=181-reggae.pls");
				        }
				        case 5:
				        {
				            RadioStation[GetPlayerVehicleID(playerid)] = 5;
				            PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls");
				        }
				        case 6:
				        {
				            RadioStation[GetPlayerVehicleID(playerid)] = 6;
				            PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-comedy&file=181-comedy.pls");
				        }
				        case 7:
				        {
				            new station[255];
				            format(station, sizeof(station), "%s", Player[playerid][SavedMP3Link]);
				            RadioStation[GetPlayerVehicleID(playerid)] = 7;
				            PlayAudioStreamForPlayer(playerid, station);
				        }
				        case 8:
				        {
				            ShowPlayerDialog(playerid, 6514, DIALOG_STYLE_INPUT, "MP3 Links", "Please enter a valid .mp3 / .pls link", "Ok", "Exit");
				        }
				    }
				}
				case 6514:
				{
				    format(Player[playerid][SavedMP3Link], 255, "%s", inputtext);
				    SendClientMessage(playerid, WHITE, "Custom radio link has been set.");
				}
				case 1600:
				{
				    switch(listitem)
				    {
						case 0:
						{
							new pwep = GetPlayerWeapon(playerid);
							if(Vehicles[LastEnteredCar[playerid]][CarTrunk1] == 0)
							{
								new string[255];
							    format(string, sizeof(string), "* %s has stored a weapon in the vehicle.", GetName(playerid));
							    NearByMessage(playerid, PURPLE, string);
							    Vehicles[LastEnteredCar[playerid]][CarTrunk1] = pwep;
								
								if(Player[playerid][WepSlot1] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot1] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot2] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot2] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot3] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot3] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot4] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot4] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot5] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot5] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot6] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot6] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot7] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot7] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot8] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot8] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot9] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot9] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot10] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot10] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot11] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot11] = 0;
									GivePlayerSavedWeapons(playerid);
								}
							}
							else
							{
								new string[255], wepn[128];
								GetWeaponName(Vehicles[LastEnteredCar[playerid]][CarTrunk1], wepn, sizeof(wepn));
							    format(string, sizeof(string), "* %s has taken a %s from the vehicle.", GetName(playerid), wepn);
							    NearByMessage(playerid, PURPLE, string);
								GivePlayerWeaponEx(playerid, Vehicles[LastEnteredCar[playerid]][CarTrunk1]);
								Vehicles[LastEnteredCar[playerid]][CarTrunk1] = 0;
							}
							SaveExistingVehicle(LastEnteredCar[playerid]);
						}
						case 1:
						{
							new pwep = GetPlayerWeapon(playerid);
							if(Vehicles[LastEnteredCar[playerid]][CarTrunk2] == 0)
							{
								new string[255];
							    format(string, sizeof(string), "* %s has stored a weapon in the vehicle.", GetName(playerid));
							    NearByMessage(playerid, PURPLE, string);
							    Vehicles[LastEnteredCar[playerid]][CarTrunk2] = pwep;
								
								if(Player[playerid][WepSlot1] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot1] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot2] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot2] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot3] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot3] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot4] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot4] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot5] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot5] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot6] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot6] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot7] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot7] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot8] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot8] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot9] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot9] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot10] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot10] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot11] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot11] = 0;
									GivePlayerSavedWeapons(playerid);
								}
							}
							else
							{
								new string[255], wepn[128];
								GetWeaponName(Vehicles[LastEnteredCar[playerid]][CarTrunk2], wepn, sizeof(wepn));
							    format(string, sizeof(string), "* %s has taken a %s from the vehicle.", GetName(playerid), wepn);
							    NearByMessage(playerid, PURPLE, string);
								GivePlayerWeaponEx(playerid, Vehicles[LastEnteredCar[playerid]][CarTrunk2]);
								Vehicles[LastEnteredCar[playerid]][CarTrunk2] = 0;
							}
							SaveExistingVehicle(LastEnteredCar[playerid]);
						}
						case 2:
						{
							new pwep = GetPlayerWeapon(playerid);
							if(Vehicles[LastEnteredCar[playerid]][CarTrunk3] == 0)
							{
								new string[255];
							    format(string, sizeof(string), "* %s has stored a weapon in the vehicle.", GetName(playerid));
							    NearByMessage(playerid, PURPLE, string);
							    Vehicles[LastEnteredCar[playerid]][CarTrunk3] = pwep;
								
								if(Player[playerid][WepSlot1] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot1] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot2] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot2] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot3] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot3] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot4] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot4] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot5] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot5] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot6] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot6] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot7] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot7] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot8] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot8] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot9] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot9] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot10] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot10] = 0;
									GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot11] == pwep)
								{
									ResetPlayerWeapons(playerid);
									SetPlayerArmedWeapon(playerid, 0);
									Player[playerid][WepSlot11] = 0;
									GivePlayerSavedWeapons(playerid);
								}
							}
							else
							{
								new string[255], wepn[128];
								GetWeaponName(Vehicles[LastEnteredCar[playerid]][CarTrunk3], wepn, sizeof(wepn));
							    format(string, sizeof(string), "* %s has taken a %s from the vehicle.", GetName(playerid), wepn);
							    NearByMessage(playerid, PURPLE, string);
								GivePlayerWeaponEx(playerid, Vehicles[LastEnteredCar[playerid]][CarTrunk3]);
								Vehicles[LastEnteredCar[playerid]][CarTrunk3] = 0;
							}
							SaveExistingVehicle(LastEnteredCar[playerid]);
						}
						case 3:
						{
							if(Vehicles[LastEnteredCar[playerid]][CarMaterials] == LastEnteredCarCapacity[playerid])
							{
								ShowPlayerDialog(playerid, 1601, DIALOG_STYLE_LIST, "Trunk", "Withdraw", "Choose", "Cancel");
							}
							else
							{
								ShowPlayerDialog(playerid, 1601, DIALOG_STYLE_LIST, "Trunk", "Withdraw\nDeposit", "Choose", "Cancel");
							}
						}
						case 4:
						{
							if(Vehicles[LastEnteredCar[playerid]][CarPot] == LastEnteredCarCapacity[playerid])
							{
								ShowPlayerDialog(playerid, 1602, DIALOG_STYLE_LIST, "Trunk", "Withdraw", "Choose", "Cancel");
							}
							else
							{
								ShowPlayerDialog(playerid, 1602, DIALOG_STYLE_LIST, "Trunk", "Withdraw\nDeposit", "Choose", "Cancel");
							}
						}
						case 5:
						{
							if(Vehicles[LastEnteredCar[playerid]][CarCocaine] == LastEnteredCarCapacity[playerid])
							{
								ShowPlayerDialog(playerid, 1603, DIALOG_STYLE_LIST, "Trunk", "Withdraw", "Choose", "Cancel");
							}
							else
							{
								ShowPlayerDialog(playerid, 1603, DIALOG_STYLE_LIST, "Trunk", "Withdraw\nDeposit", "Choose", "Cancel");
							}
						}
				    }
				}
				
				case 1603:
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, 1613, DIALOG_STYLE_INPUT, "Trunk", "Withdraw your cocaine.", "Confirm", "Cancel");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, 1623, DIALOG_STYLE_INPUT, "Trunk", "Deposit your cocaine.", "Confirm", "Cancel");
						}
					}
				}
				case 1613:
				{
					new amount = strval(inputtext);
					if(Vehicles[LastEnteredCar[playerid]][CarCocaine] >= amount && amount >= 0)
					{
						Vehicles[LastEnteredCar[playerid]][CarCocaine] -= amount;
						Player[playerid][Cocaine] += amount;
						new string[128];
						format(string, sizeof(string), "* %s has taken %dG of cocaine from the vehicle's trunk.", GetName(playerid), amount);
						NearByMessage(playerid, PURPLE, string);
						SaveExistingVehicle(LastEnteredCar[playerid]);
					}
					else
					{
						ShowPlayerDialog(playerid, 1613, DIALOG_STYLE_INPUT, "Trunk", "Withdraw your cocaine. You have entered an invalid amount.", "Confirm", "Cancel");
					}
				}
				case 1623:
				{
					new amount = strval(inputtext);
					new total = Vehicles[LastEnteredCar[playerid]][CarCocaine]+amount;
					if(total > LastEnteredCarCapacity[playerid])
					{
						new string[128];
						format(string, sizeof(string), "You can't store than %dG of cocaine in this vehicle.", LastEnteredCarCapacity[playerid]);
						SendClientMessage(playerid, WHITE, string);
					}
					else if(Player[playerid][Cocaine] >= amount && amount >= 0)
					{
						Vehicles[LastEnteredCar[playerid]][CarCocaine] += amount;
						Player[playerid][Cocaine] -= amount;
						new string[128];
						format(string, sizeof(string), "* %s has put %dG of cocaine in the vehicle's trunk.", GetName(playerid), amount);
						NearByMessage(playerid, PURPLE, string);
						SaveExistingVehicle(LastEnteredCar[playerid]);
					}
					else
					{
						ShowPlayerDialog(playerid, 1623, DIALOG_STYLE_INPUT, "Trunk", "Deposit your pot. You have entered an invalid amount.", "Confirm", "Cancel");
					}
				}
				
				case 1602:
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, 1612, DIALOG_STYLE_INPUT, "Trunk", "Withdraw your pot.", "Confirm", "Cancel");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, 1622, DIALOG_STYLE_INPUT, "Trunk", "Deposit your pot.", "Confirm", "Cancel");
						}
					}
				}
				case 1612:
				{
					new amount = strval(inputtext);
					if(Vehicles[LastEnteredCar[playerid]][CarPot] >= amount && amount >= 0)
					{
						Vehicles[LastEnteredCar[playerid]][CarPot] -= amount;
						Player[playerid][Pot] += amount;
						new string[128];
						format(string, sizeof(string), "* %s has taken %dG of pot from the vehicle's trunk.", GetName(playerid), amount);
						NearByMessage(playerid, PURPLE, string);
						SaveExistingVehicle(LastEnteredCar[playerid]);
					}
					else
					{
						ShowPlayerDialog(playerid, 1612, DIALOG_STYLE_INPUT, "Trunk", "Withdraw your pot. You have entered an invalid amount.", "Confirm", "Cancel");
					}
				}
				case 1622:
				{
					new amount = strval(inputtext);
					new total = Vehicles[LastEnteredCar[playerid]][CarPot]+amount;
					if(total > LastEnteredCarCapacity[playerid])
					{
						new string[128];
						format(string, sizeof(string), "You can't store than %dG of pot in this vehicle.", LastEnteredCarCapacity[playerid]);
						SendClientMessage(playerid, WHITE, string);
					}
					else if(Player[playerid][Pot] >= amount && amount >= 0)
					{
						Vehicles[LastEnteredCar[playerid]][CarPot] += amount;
						Player[playerid][Pot] -= amount;
						new string[128];
						format(string, sizeof(string), "* %s has put %dG of pot in the vehicle's trunk.", GetName(playerid), amount);
						NearByMessage(playerid, PURPLE, string);
						SaveExistingVehicle(LastEnteredCar[playerid]);
					}
					else
					{
						ShowPlayerDialog(playerid, 1622, DIALOG_STYLE_INPUT, "Trunk", "Deposit your pot. You have entered an invalid amount.", "Confirm", "Cancel");
					}
				}
				case 1601:
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, 1611, DIALOG_STYLE_INPUT, "Trunk", "Withdraw your materials.", "Confirm", "Cancel");
						}
						case 1:
						{
							ShowPlayerDialog(playerid, 1621, DIALOG_STYLE_INPUT, "Trunk", "Deposit your materials.", "Confirm", "Cancel");
						}
					}
				}
				case 1611:
				{
					new amount = strval(inputtext);
					if(Vehicles[LastEnteredCar[playerid]][CarMaterials] >= amount && amount >= 0)
					{
						Vehicles[LastEnteredCar[playerid]][CarMaterials] -= amount;
						Player[playerid][Materials] += amount;
						new string[128];
						format(string, sizeof(string), "* %s has taken %d materials from the vehicle's trunk.", GetName(playerid), amount);
						NearByMessage(playerid, PURPLE, string);
						SaveExistingVehicle(LastEnteredCar[playerid]);
					}
					else
					{
						ShowPlayerDialog(playerid, 1611, DIALOG_STYLE_INPUT, "Trunk", "Withdraw your materials. You have entered an invalid amount.", "Confirm", "Cancel");
					}
				}
				case 1621:
				{
					new amount = strval(inputtext);
					new total = Vehicles[LastEnteredCar[playerid]][CarMaterials]+amount;
					if(total > LastEnteredCarCapacity[playerid])
					{
						new string[128];
						format(string, sizeof(string), "You can't store than %d materials in this vehicle.", LastEnteredCarCapacity[playerid]);
						SendClientMessage(playerid, WHITE, string);
					}
					else if(Player[playerid][Materials] >= amount && amount >= 0)
					{
						Vehicles[LastEnteredCar[playerid]][CarMaterials] += amount;
						Player[playerid][Materials] -= amount;
						new string[128];
						format(string, sizeof(string), "* %s has put %d materials in the vehicle's trunk.", GetName(playerid), amount);
						NearByMessage(playerid, PURPLE, string);
						SaveExistingVehicle(LastEnteredCar[playerid]);
					}
					else
					{
						ShowPlayerDialog(playerid, 1621, DIALOG_STYLE_INPUT, "Trunk", "Deposit your materials. You have entered an invalid amount.", "Confirm", "Cancel");
					}
				}
			    case 4123:
	      		{
	      			switch(listitem)
	      			{
	      				case 0:
					 	{
					  		ShowPlayerDialog(playerid, 4124, DIALOG_STYLE_LIST, "Montgomery", "Restaurant\nWell Stacked Pizza\nGas Station", "Choose", "Cancel");
					    }
						case 1:
						{
						    ShowPlayerDialog(playerid, 4128, DIALOG_STYLE_LIST, "Dillimore", "Red County Sheriff's Department\n24/7\nPay 'n Spray\nDealership\nGas Station", "Choose", "Cancel");
						}
						case 2:
						{
						    ShowPlayerDialog(playerid, 4126, DIALOG_STYLE_LIST, "Palomino Creek", "Bank\nWell Stacked Pizza\nRestaurant", "Choose", "Cancel");
						}
						case 3:
						{
						    ShowPlayerDialog(playerid, 4127, DIALOG_STYLE_LIST, "Blueberry", "Restaurant\nAd Agency\nPharmacy\nDMV", "Choose", "Close");
						}
		    			case 4:
					    {
							ShowPlayerDialog(playerid, 4125, DIALOG_STYLE_LIST, "Job Locations", "Deliverer\nDeliver Job (/getsupplies)\nArms Dealer\nArms Dealer (/getmats)\nMechanic\nLawyer\nTrucker Job\nPizza job\nTaxi Driver\nStreet Sweeper", "Choose", "Cancel");
						}
					}
	    		}

	    		case 4128:
	    		{
	    		    switch(listitem)
	    		    {
						case 0:
						{
						    SetPlayerCheckpoint(playerid, 655.9292,-564.8282,16.3359, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the RCSD has been set!");
						}
						case 1:
						{
						    SetPlayerCheckpoint(playerid, 668.8310,-572.8127,16.3359, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the 24/7 has been set!");
						}
						case 2:
						{
						    SetPlayerCheckpoint(playerid, 719.7559,-457.5774,16.3359, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Pay 'n Spray has been set!");
						}
						case 3:
						{
						    SetPlayerCheckpoint(playerid, 613.0634,-495.7719,16.3337, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Gas Station has been set!");
						}
						case 4:
						{
						    SetPlayerCheckpoint(playerid, Businesses[4][bExteriorX], Businesses[4][bExteriorY], Businesses[4][bExteriorZ], 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Dealership has been set!");
						}
	    		    }
	    		}

	    		case 4127:
	    		{
	    		    switch(listitem)
	    		    {
						case 0:
						{
						    SetPlayerCheckpoint(playerid, 292.8014, -195.2740, 1.5781, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the restaurant has been set!");
						}
						case 1:
						{
						    SetPlayerCheckpoint(playerid, 207.5554, -62.1024, 1.8586, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Ad Agency has been set!");
						}
						case 2:
						{
						    SetPlayerCheckpoint(playerid, 150.6628, -177.4637, 1.5781, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Pharmacy has been set!");
						}
						case 3:
						{
						    SetPlayerCheckpoint(playerid, 161.9589,-25.8180,1.5781, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the DMV has been set!");
						}
	    		    }
	    		}
	    		case 4126:
	    		{
	    		    switch(listitem)
	    		    {
						case 0:
						{
						    SetPlayerCheckpoint(playerid, 2303.8232, -15.9674, 26.4844, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the bank has been set!");
						}
						case 1:
						{
						    SetPlayerCheckpoint(playerid, 2331.8101, 75.1519, 26.6210, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Well Stacked Pizza has been set!");
						}
						case 2:
						{
						    SetPlayerCheckpoint(playerid, 2331.8101, 75.1519, 26.6210, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the restaurant has been set!");
						}
	    		    }
	    		}
				case 4124:
				{
	   				switch(listitem)
	   				{
	       				case 0:
	       				{
	           				SetPlayerCheckpoint(playerid, 1295.0377, 235.5240, 19.5547, 5.0);
	               			Player[playerid][Checkpoint] = 1;
	                  		Player[playerid][Map] = 1;
	                    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the restaurant has been set!");
	        			}
	           			case 1:
	              		{
	                		SetPlayerCheckpoint(playerid, 1367.5364, 248.0283, 19.5669, 5.0);
	                  		Player[playerid][Checkpoint] = 1;
	                    	Player[playerid][Map] = 1;
	                     	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Well Stacked Pizza has been set!");
	                   	}
	                    case 2:
	                   	{
	                    	SetPlayerCheckpoint(playerid, 1381.4822, 459.6639, 20.3452, 5.0);
	                     	Player[playerid][Checkpoint] = 1;
	                      	Player[playerid][Map] = 1;
	                       	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Gas Station has been set!");
	                   	}
	                }
	           }
	                        case 4125:
							{
								switch(listitem)
							 	{
							 		case 0:
							 		{
							 			SetPlayerCheckpoint(playerid, Jobs[5][JobJoinPosX], Jobs[5][JobJoinPosY], Jobs[5][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
										Player[playerid][Map] = 1;
							  			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Deliver Job has been set!");
							   		}
							     	case 1:
							     	{
							  			SetPlayerCheckpoint(playerid, Jobs[5][JobMiscLocationOneX], Jobs[5][JobMiscLocationOneY], Jobs[5][JobMiscLocationOneZ], 5.0);
										Player[playerid][Checkpoint] = 1;
										Player[playerid][Map] = 1;
							   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Deliver Job(/getsupplies) has been set!");
							   		}
							   		case 2:
							   		{
							   			SetPlayerCheckpoint(playerid, Jobs[1][JobJoinPosX], Jobs[1][JobJoinPosY], Jobs[1][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							 			Player[playerid][Map] = 1;
							   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Arms Dealer Job has been set!");
							   		}
									case 3:
									{
							   			SetPlayerCheckpoint(playerid, Jobs[1][JobMiscLocationOneX], Jobs[1][JobMiscLocationOneY], Jobs[1][JobMiscLocationOneZ], 5.0);
							   			Player[playerid][Checkpoint] = 1;
										Player[playerid][Map] = 1;
							   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Arms Dealer (/getmats) has been set!");
									}
									case 4:
							     	{
							     		SetPlayerCheckpoint(playerid, Jobs[2][JobJoinPosX], Jobs[2][JobJoinPosY], Jobs[2][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							   			Player[playerid][Map] = 1;
								    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Mechanic Job has been set!");
							     	}
							     	/*case 5:
							     	{
							     		SetPlayerCheckpoint(playerid, Jobs[4][JobJoinPosX], Jobs[4][JobJoinPosY], Jobs[4][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							   			Player[playerid][Map] = 1;
								    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Private Investigator Job has been set!");
							     	}*/
							     	case 5:
							     	{
							     		SetPlayerCheckpoint(playerid, Jobs[7][JobJoinPosX], Jobs[7][JobJoinPosY], Jobs[7][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							   			Player[playerid][Map] = 1;
								    	SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Lawyer Job has been set!");
							     	}
									case 6:
							   		{
							  			SetPlayerCheckpoint(playerid, Jobs[3][JobJoinPosX], Jobs[3][JobJoinPosY], Jobs[3][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							 			Player[playerid][Map] = 1;
							   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Trucker Job has been set!");
							   		}
							   		case 7:
							   		{
							   		    SetPlayerCheckpoint(playerid, Jobs[10][JobJoinPosX], Jobs[10][JobJoinPosY], Jobs[10][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							 			Player[playerid][Map] = 1;
							   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Pizza Job has been set!");
							   		}
							   		case 8:
							   		{
							   		    SetPlayerCheckpoint(playerid, Jobs[6][JobJoinPosX], Jobs[6][JobJoinPosY], Jobs[6][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
							 			Player[playerid][Map] = 1;
							   			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Taxi Driver Job has been set!");
							   		}
							   		case 9:
							 		{
							 			SetPlayerCheckpoint(playerid, Jobs[8][JobJoinPosX], Jobs[8][JobJoinPosY], Jobs[8][JobJoinPosZ], 5.0);
										Player[playerid][Checkpoint] = 1;
										Player[playerid][Map] = 1;
							  			SendClientMessage(playerid, WHITE, "A checkpoint showing the location of the Street Sweeper has been set!");
							   		}
	                            }

							}

			    case 310:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
					        if(Player[playerid][Money] >= 15000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 586;
					            Player[playerid][CarPriceBeingCarried] = 15000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 1:
			            {
					        if(Player[playerid][Money] >= 20000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 521;
					            Player[playerid][CarPriceBeingCarried] = 20000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 2:
			            {
					        if(Player[playerid][Money] >= 20000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 461;
					            Player[playerid][CarPriceBeingCarried] = 20000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 3:
			            {
					        if(Player[playerid][Money] >= 21000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 463;
					            Player[playerid][CarPriceBeingCarried] = 21000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
						case 4:
						{
							if(Player[playerid][Money] >= 8000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 468;
					            Player[playerid][CarPriceBeingCarried] = 8000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			        }
			    }
			    case 353:
			    {
			        switch(listitem)
			        {
			            case 0:
						{
					        if(Player[playerid][Money] >= 200000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 415;
					            Player[playerid][CarPriceBeingCarried] = 200000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			            case 1:
						{
					        if(Player[playerid][Money] >= 875000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 541;
					            Player[playerid][CarPriceBeingCarried] = 875000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			            case 2:
						{
					        if(Player[playerid][Money] >= 1500000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 411;
					            Player[playerid][CarPriceBeingCarried] = 1500000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 3:
						{
							if(Player[playerid][Money] >= 150000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 522;
					            Player[playerid][CarPriceBeingCarried] = 150000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 4:
						{
							if(Player[playerid][Money] >= 400000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 451;
					            Player[playerid][CarPriceBeingCarried] = 400000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 5:
						{
							if(Player[playerid][Money] >= 2000000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 487;
					            Player[playerid][CarPriceBeingCarried] = 2000000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			        }
			    }
				case 1354:
				{
					switch(listitem)
					{
						case 0:
						{
							if(Player[playerid][Money] >= 15000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 420;
					            Player[playerid][CarPriceBeingCarried] = 15000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 1:
						{
							if(Player[playerid][Money] >= 12500)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 438;
					            Player[playerid][CarPriceBeingCarried] = 12500;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
						case 2:
						{
							if(Player[playerid][Money] >= 35000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 588;
					            Player[playerid][CarPriceBeingCarried] = 35000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
					}
				}
			    case 352:
			    {
			        switch(listitem)
			        {
			            case 0:
						{
					        if(Player[playerid][Money] >= 35000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 561;
					            Player[playerid][CarPriceBeingCarried] = 35000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			            case 1:
						{
					        if(Player[playerid][Money] >= 45000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 565;
					            Player[playerid][CarPriceBeingCarried] = 45000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			            case 2:
						{
					        if(Player[playerid][Money] >= 75000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 562;
					            Player[playerid][CarPriceBeingCarried] = 75000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
						}
			        }
			    }
			    case 347:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
					        if(Player[playerid][Money] >= 8000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 496;
					            Player[playerid][CarPriceBeingCarried] = 8000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 1:
			            {
					        if(Player[playerid][Money] >= 4300)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 542;
					            Player[playerid][CarPriceBeingCarried] = 4300;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 2:
			            {
					        if(Player[playerid][Money] >= 5700)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 439;
					            Player[playerid][CarPriceBeingCarried] = 5700;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 3:
			            {
					        if(Player[playerid][Money] >= 3800)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 549;
					            Player[playerid][CarPriceBeingCarried] = 3800;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 4:
			            {
				        	PurchaseCar(playerid, BonusCar, 0, 1);
			            }
			        }
			    }
			    case 348:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
					        if(Player[playerid][Money] >= 22000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 536;
					            Player[playerid][CarPriceBeingCarried] = 22000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 1:
			            {
					        if(Player[playerid][Money] >= 28000)
					        {
					            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					            Player[playerid][CarBeingCarried] = 534;
					            Player[playerid][CarPriceBeingCarried] = 28000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 2:
			            {
					        if(Player[playerid][Money] >= 30000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 567;
					        	Player[playerid][CarPriceBeingCarried] = 30000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 3:
			            {
					        if(Player[playerid][Money] >= 32000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 535;
					        	Player[playerid][CarPriceBeingCarried] = 32000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 4:
			            {
					        if(Player[playerid][Money] >= 24500)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 576;
					        	Player[playerid][CarPriceBeingCarried] = 24500;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			        }
			    }
			    case 349:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
					        if(Player[playerid][Money] >= 34000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 507;
					        	Player[playerid][CarPriceBeingCarried] = 34000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 1:
			            {
					        if(Player[playerid][Money] >= 30000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 426;
					        	Player[playerid][CarPriceBeingCarried] = 30000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 2:
			            {
					        if(Player[playerid][Money] >= 45000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 405;
					        	Player[playerid][CarPriceBeingCarried] = 45000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 3:
			            {
					        if(Player[playerid][Money] >= 55000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 409;
					        	Player[playerid][CarPriceBeingCarried] = 55000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 4:
			            {
					        if(Player[playerid][Money] >= 33000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 550;
					        	Player[playerid][CarPriceBeingCarried] = 33000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 5:
			            {
					        if(Player[playerid][Money] >= 38000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 421;
					        	Player[playerid][CarPriceBeingCarried] = 38000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			    	}
			    }
			    case 350:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
					        if(Player[playerid][Money] >= 48000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 579;
					        	Player[playerid][CarPriceBeingCarried] = 48000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 1:
			            {
					        if(Player[playerid][Money] >= 37000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 400;
					        	Player[playerid][CarPriceBeingCarried] = 37000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 2:
			            {
					        if(Player[playerid][Money] >= 35000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 500;
					        	Player[playerid][CarPriceBeingCarried] = 35000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 3:
			            {
					        if(Player[playerid][Money] >= 43000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 489;
					        	Player[playerid][CarPriceBeingCarried] = 43000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 4:
			            {
					        if(Player[playerid][Money] >= 60000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 495;
					        	Player[playerid][CarPriceBeingCarried] = 60000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 5:
			            {
					        if(Player[playerid][Money] >= 10000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 554;
					        	Player[playerid][CarPriceBeingCarried] = 10000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			        }
			    }
			    case 351:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
					        if(Player[playerid][Money] >= 375000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 429;
					        	Player[playerid][CarPriceBeingCarried] = 375000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 1:
			            {
					        if(Player[playerid][Money] >= 95000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 402;
					        	Player[playerid][CarPriceBeingCarried] = 95000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 2:
			            {
					        if(Player[playerid][Money] >= 120000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 480;
					        	Player[playerid][CarPriceBeingCarried] = 120000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 3:
			            {
					        if(Player[playerid][Money] >= 75000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 603;
					        	Player[playerid][CarPriceBeingCarried] = 75000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			            case 4:
			            {
					        if(Player[playerid][Money] >= 450000)
					        {
					        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        	Player[playerid][CarBeingCarried] = 560;
					        	Player[playerid][CarPriceBeingCarried] = 450000;
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You don't have enough.");
					        }
			            }
			        }
			    }
			    case 81:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased a bottle of Sprunk.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			                        Player[playerid][HadSprunk] = 1;
			                        TextDrawShowForPlayer(playerid, SprunkTextDraw);
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 1:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased a Vegetarian Surprise.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
									Player[playerid][PlayerHunger] += 10;
			                        if(Player[playerid][PlayerHunger] > 100)
			                        {
			                            Player[playerid][PlayerHunger] = 100;
			                        }

									new Float: Health, HealthI;

									GetPlayerHealth(playerid, Health);
			                        HealthI = floatround(Health, floatround_ceil);

			                        if(HealthI < 85)
			                        {
			                            SetPlayerHealth(playerid, HealthI+15);
			                        }

				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 2:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased a Meat Feast Pizza.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			                        Player[playerid][PlayerHunger] += 25;
			                        if(Player[playerid][PlayerHunger] > 100)
			                        {
										Player[playerid][PlayerHunger] = 100;
			                        }

									new Float: Health, HealthI;

									GetPlayerHealth(playerid, Health);
			                        HealthI = floatround(Health, floatround_ceil);

			                        if(HealthI < 75)
			                        {
			                            SetPlayerHealth(playerid, HealthI+25);
			                        }

				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 3:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased a Cheeseburger.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			                        Player[playerid][PlayerHunger] += 20;
			                        if(Player[playerid][PlayerHunger] > 100)
			                        {
										Player[playerid][PlayerHunger] = 100;
			                        }

									new Float: Health, HealthI;

									GetPlayerHealth(playerid, Health);
			                        HealthI = floatround(Health, floatround_ceil);

			                        if(HealthI < 75)
			                        {
			                            SetPlayerHealth(playerid, HealthI+25);
			                        }

				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 4:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased Steak with fries.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			                        Player[playerid][PlayerHunger] += 35;
			                        if(Player[playerid][PlayerHunger] > 100)
			                        {
										Player[playerid][PlayerHunger] = 100;
			                        }

									new Float: Health, HealthI;

									GetPlayerHealth(playerid, Health);
			                        HealthI = floatround(Health, floatround_ceil);

			                        if(HealthI < 75)
			                        {
			                            SetPlayerHealth(playerid, HealthI+25);
			                        }

				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 5:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased Bacon and eggs.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			                        Player[playerid][PlayerHunger] += 40;
			                        if(Player[playerid][PlayerHunger] > 100)
			                        {
										Player[playerid][PlayerHunger] = 100;
			                        }

									new Float: Health, HealthI;

									GetPlayerHealth(playerid, Health);
			                        HealthI = floatround(Health, floatround_ceil);

			                        if(HealthI < 75)
			                        {
			                            SetPlayerHealth(playerid, HealthI+25);
			                        }

				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 6:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice7])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased some Fried chicken with rice.");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			                        Player[playerid][PlayerHunger] += 40;
			                        if(Player[playerid][PlayerHunger] > 100)
			                        {
										Player[playerid][PlayerHunger] = 100;
			                        }

									new Float: Health, HealthI;

									GetPlayerHealth(playerid, Health);
			                        HealthI = floatround(Health, floatround_ceil);

			                        if(HealthI < 75)
			                        {
			                            SetPlayerHealth(playerid, HealthI+25);
			                        }

				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			        }
			    }
			    case 4541:
			    {
			        if(strlen(inputtext) >= 1 && strlen(inputtext) < 70)
			        {
			            format(QuizQuestion, 128, "%s", inputtext);
			            SendClientMessage(playerid, WHITE, "You have set the question.");
				        ShowPlayerDialog(playerid, 4542, DIALOG_STYLE_INPUT, "Quiz Answer", "Set a VERY specific answer.", "Done", "Cancel");
				    }
			    }
			    case 4542:
			    {
			        if(strlen(inputtext) >= 1 && strlen(inputtext) < 70)
			        {
			            new string[128];
			            format(QuizAnswer, 255, "%s", inputtext);
			            SendClientMessage(playerid, WHITE, "You have set the answer.");
						ActiveQuiz = 1;
						format(string, sizeof(string), "QUIZ ROUND: %s", QuizQuestion);
						QuizText(string);
						QuizText("Type /answerq along with your answer to answer the question!");
				    }
			    }
			    case 8561:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
			                {
			                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 50)
			                    {
			                        SendClientMessage(playerid, WHITE, "You have purchased 50 pot seeds. (( You can plant them with /plantpot ))");
			                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
			                        Player[playerid][PotSeeds] += 50;
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
				                }
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
			                }
			            }
			            case 1:
			            {
			                if(Player[playerid][Cocaine] != 0)
			                {
			                    new newprice = 35 * Player[playerid][Cocaine];
							    new string[255];

							    format(string, sizeof(string), "You have sold all your cocaine for $%d", newprice);
								SendClientMessage(playerid, WHITE, string);
								Player[playerid][Cocaine] = 0;
								Player[playerid][Money] += newprice;
			                }
			            }
			            case 2:
			            {
							if(Player[playerid][Pot] != 0)
							{
							    new newprice = WeedPrice * Player[playerid][Pot];
							    new string[255];

							    format(string, sizeof(string), "You have sold all your pot for $%d", newprice);
								SendClientMessage(playerid, WHITE, string);
								Player[playerid][Pot] = 0;
								Player[playerid][Money] += newprice;
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You don't have any pot to sell!");
							}
						}
			        }
			    }
			    case 3666:
			    {
			        new string[128];

			        if(strlen(inputtext) >= 1)
			        {
				    	format(Player[playerid][Password], 255, "%s", inputtext);
				    	format(string, sizeof(string), "Password changed to '%s'.", inputtext);
				    	SendClientMessage(playerid, WHITE, string);
			    	}
			    }
			    case 17261:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                Player[playerid][SupplyT] = 1;
			                SendClientMessage(playerid, WHITE, "You have collected grocery supplies. Deliver these to a General Store.");
			                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
			            }
			            case 1:
			            {
			                Player[playerid][SupplyT] = 2;
			                SendClientMessage(playerid, WHITE, "You have collected clothes supplies. Deliver these to a Clothes Shop.");
			                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
			            }
			            case 2:
			            {
			                Player[playerid][SupplyT] = 3;
			                SendClientMessage(playerid, WHITE, "You have collected alcohol supplies. Deliver these to a Bar / Club.");
			                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
			            }
			            case 3:
			            {
			                Player[playerid][SupplyT] = 5;
			                SendClientMessage(playerid, WHITE, "You have collected adult toy supplies. Deliver these to an Adult Shop.");
			                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
			            }
			            case 4:
			            {
			                Player[playerid][SupplyT] = 12;
			                SendClientMessage(playerid, WHITE, "You have collected food supplies. Deliver these to an Restraunt.");
			                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
			            }
			            case 5:
			            {
			                Player[playerid][SupplyT] = 14;
			                SendClientMessage(playerid, WHITE, "You have collected hardware supplies. Deliver these to an Restraunt.");
			                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
			            }
			        }
			    }
			    case 57361:
			    {
			        if(strlen(inputtext) < 1 && strlen(inputtext) >= MAX_PLAYER_NAME)
			        {
			            SendClientMessage(playerid, WHITE, "Names must be above 1 to 23.");
			            ShowPlayerDialog(playerid, 57361, DIALOG_STYLE_INPUT, "Administrators' Name", "Please set your administrators' name!", "Set Name", "Cancel");
			        }
			        else
			        {
			            new string[50];
			            format(Player[playerid][AdminName], 255, "%s", inputtext);
			            format(string, sizeof(string), "You have set your name to %s.", inputtext);
			            SendClientMessage(playerid, WHITE, string);
			        }
			    }
			    case 9843:
			    {
			        if(strlen(inputtext) == 6)
			        {
			            if(IsNumeric(inputtext))
			            {
				            new pin = strval(inputtext), string[128];
				            format(string, sizeof(string), "You have set your admin PIN to %d.", pin);
				            SendClientMessage(playerid, WHITE, string);

				            Player[playerid][AdminPIN] = pin;
				            Player[playerid][PINAuth] = 1;

				            if(strlen(Player[playerid][AdminName]) == 0 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
				            {
				                ShowPlayerDialog(playerid, 57361, DIALOG_STYLE_INPUT, "Administrators' Name", "Please set your administrators' name!", "Set Name", "Cancel");
				            }

			            }
			            else
			            {
				        	ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
			                SendClientMessage(playerid, WHITE, "PINs have to be numeric.");
			            }
			        }
			        else
			        {
				        ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
			            SendClientMessage(playerid, WHITE, "Invalid PIN. It has to be 6 digits long.");
			        }
			    }
			    case 9842:
				{
				    if(strlen(inputtext) == 6)
				    {
					    if(IsNumeric(inputtext))
					    {
	 						new pin = strval(inputtext);
					        if(pin == Player[playerid][AdminPIN])
					        {
					            new string[128];
					            SendClientMessage(playerid, WHITE, "You have successfully authenticated with your admin PIN!");
					            Player[playerid][PINAuth] = 1;
					            format(string, sizeof(string), "%s has authenticated (authenticating using their PIN).", GetName(playerid));
					            SendToAdmins(ADMINORANGE, string, 0);
					        }
					        else
					        {
				        		ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
						        new Sum, string[128];
						        Sum = 3-Player[playerid][LoginAttempts];
						        SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again or use the forums.");
						        Player[playerid][LoginAttempts]++;
								format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
								SendClientMessage(playerid, WHITE, string);
								ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");

								if(Player[playerid][LoginAttempts] == 3)
								{
								    new hour, minute, second, day, year, month;
								    gettime(hour, minute, second);
								    getdate(year, month, day);
								    #pragma unused second
								    new IP[21];
								    GetPlayerIp(playerid, IP, sizeof(IP));
									format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PIN ATTEMPTS | System", day, month, year, hour, minute, IP, GetName(playerid));
									BanLog(string);
								    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
								    Ban(playerid);
								}

							}
					    }
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
						new Sum, string[128];
						Sum = 3-Player[playerid][LoginAttempts];
						SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again or use the forums.");
						Player[playerid][LoginAttempts]++;
						format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
						SendClientMessage(playerid, WHITE, string);
						ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");

						if(Player[playerid][LoginAttempts] == 3)
						{
						    new hour, minute, second, day, year, month;
						    gettime(hour, minute, second);
						    getdate(year, month, day);
						    #pragma unused second
						    new IP[21];
						    GetPlayerIp(playerid, IP, sizeof(IP));
							format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PIN ATTEMPTS | System", day, month, year, hour, minute, IP, GetName(playerid));
							BanLog(string);
						    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
						    Ban(playerid);
						}
				    }
			    }
			    case 2489:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][HasMapApp] >= 1)
			                {
			  			        ShowPlayerDialog(playerid, 6125, DIALOG_STYLE_LIST, "Select a Location", "Bank\nMechanic Job\nGuard Job\nDetective Job\nRCSD HQ\nVehicle Dealership\nLawyer Job\nCollege\nDelivery Job\n", "Select", "Cancel");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
			                    ShowPlayerDialog(playerid, 6441, DIALOG_STYLE_LIST, "Application Purchase", "Yes, please.\nNo, thanks.", "Proceed", "Cancel");
			                }
			            }
			            case 1:
			            {
			                if(Player[playerid][HasAdApp] >= 1)
			                {
			  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
			  			        SendClientMessage(playerid, WHITE, "Advertisement");
			  			        SendClientMessage(playerid, GREY, "To place a public advertisement, you can use this method via your WAP connection, please note that placing an ad");
			  			        SendClientMessage(playerid, GREY, "Will cost you $501, out of your phone credit. This is an expensive service.");
			  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
			  			        ShowPlayerDialog(playerid, 4515, DIALOG_STYLE_INPUT, "Advertisement", "Please enter your advertisement dialog.", "Submit", "Cancel");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
			                    ShowPlayerDialog(playerid, 6442, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
			                }
			            }
			            case 2:
			            {
			                if(Player[playerid][HasPagesApp] >= 1)
			                {
			                    ShowPlayerDialog(playerid, 6443, DIALOG_STYLE_LIST, "Directory Application", "White Pages (people directory)\nYellow Pages (business directory)\n", "Proceed", "Cancel");
			                }
							else
							{
			                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
			                    ShowPlayerDialog(playerid, 9342, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
							}
			            }
			            case 3:
			            {
			                if(Player[playerid][HasRadioApp] >= 1)
			                {
					  			if(Player[playerid][PortableRadio] == 0)
					  			{
							  		SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
							  		SendClientMessage(playerid, WHITE, "Portable Radio - You have switched your radio ON!");
							  		SendClientMessage(playerid, GREY, "With your phone, you recieve an in-built radio. Due to the WAP connection, the phone is able to connect to the radio.");
							  		SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						  			Player[playerid][PortableRadio] = 1;
					  			}
					  			else
					  			{
					  			    SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						  			SendClientMessage(playerid, WHITE, "Portable Radio - You have switched your radio OFF!");
						  			SendClientMessage(playerid, GREY, "With your phone, you recieve an in-built radio. Due to the WAP connection, the phone is able to connect to the radio.");
						  			SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
					  				Player[playerid][PortableRadio] = 0;
					  			}
			                }
							else
							{
			                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
			                    ShowPlayerDialog(playerid, 3252, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
							}
			            }
			        }
			    }
			    case 3252:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][BankMoney] >= 10)
			                {
			                    Player[playerid][HasRadioApp]++;
			                    Player[playerid][Money] -= 10;
			                    SendClientMessage(playerid, WHITE, "You have now purchased the Radio Application.");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "You do not have $10 in the bank to purchase this application.");
			                }
			            }
			            case 1:
						{
						    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
						}
			        }
			    }
			    case 9342:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][BankMoney] >= 10)
			                {
			                    Player[playerid][HasPagesApp]++;
			                    Player[playerid][BankMoney] -= 10;
			                    SendClientMessage(playerid, WHITE, "You have now purchased the Directory Application.");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "You do not have $10 in the bank to purchase this application.");
			                }
			            }
			            case 1:
						{
						    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
						}
			        }
			    }
				case 6443:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
		  			        ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "White Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
				        }
				        case 1:
				        {
		  			        ShowPlayerDialog(playerid, 4517, DIALOG_STYLE_LIST, "Yellow Pages - Type of Business?", "General Store\nClothing\nClubs\nAdvertisement\nAdult Shop\nVehicle Dealerships\nColleges\nCharities\nChurches\nGyms\nChemists\n", "Select", "Cancel");
				        }
				    }
				}
			    case 6442:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][BankMoney] >= 10)
			                {
			                    Player[playerid][HasAdApp]++;
			                    Player[playerid][BankMoney] -= 10;
			                    SendClientMessage(playerid, WHITE, "You have now purchased the Advertisement Application.");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "You do not have $10 in the bank to purchase this application.");
			                }
			            }
			            case 1:
						{
						    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
						}
			        }
			    }
			    case 6441:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][BankMoney] >= 10)
			                {
			                    Player[playerid][HasMapApp]++;
			                    Player[playerid][BankMoney] -= 10;
			                    SendClientMessage(playerid, WHITE, "You have now purchased the Map Application.");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "You do not have $10 in the bank to purchase this application.");
			                }
			            }
			            case 1:
						{
						    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
						}
			        }
			    }
			    case 4512:
			    {
	  				switch(listitem)
	  				{
		  			    case 0:
		  			    {
	                        ShowPlayerDialog(playerid, 2489, DIALOG_STYLE_LIST, "Applications Menu", "Map\nAdvertisements\nDirectory (white/yellow pages)\nRadio\n", "Select", "Cancel");
		  			    }
		  			    case 1:
		  			    {
		  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		  			        SendClientMessage(playerid, GREY, "The software fault with applications has been fixed!");
		  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		  			    }
						case 2:
						{
							ShowPlayerDialog(playerid,578986,DIALOG_STYLE_LIST ,"Contacts List","List Contacts\nAdd Contact\nRemove Contact","Okay","Cancel");
						}
	  			    }
		        }
				case 578986:
				{
					switch(listitem)
					{
						case 0:
						{
							SendClientMessage(playerid, -1, "((Feature coming soon!))");
						}
						case 1:
						{
							SendClientMessage(playerid, -1, "((Feature coming soon!))");
						}
						case 2:
						{
							SendClientMessage(playerid, -1, "((Feature coming soon!))");
						}
					}
				}
		        case 4515:
		        {
		            if(strlen(inputtext) < 1)
		            {
		                SendClientMessage(playerid, WHITE, "You haven't entered anything. Your WAP connection has closed.");
		            }
		            else
		            {
		                if(Player[playerid][BankMoney] >= 250)
		                {
				            if(AdCanBePlaced == 50)
				            {
				                new string[128];
						        format(string, sizeof(string), "Advertisement: %s", inputtext);
								SendClientMessageToAll(GREEN, string);
								format(string, sizeof(string), "Advertisement placed by %s - Phone Number: %d, from the WAPads service.", GetName(playerid), Player[playerid][PhoneN]);
								SendToAdmins(GREY, string, 0);
								SendToPD(GREY, string, 0);
								Player[playerid][BankMoney] -= 250;
								Businesses[44][bVault] += 250;
								AdCanBePlaced = 1;
								SendClientMessage(playerid, WHITE, "You have placed an advertisement and been charged $250.");

								Player[playerid][AdsPlaced]++;

								switch(Player[playerid][AdsPlaced])
								{
								    case 100:
								    {
									    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
									    SendClientMessage(playerid, GREY, "You have placed 100 advertisements.");
	                                    Player[playerid][AchievementRank]++;
									}
								    case 200:
								    {
									    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
									    SendClientMessage(playerid, GREY, "You have placed 200 advertisements.");
									    Player[playerid][AchievementRank]++;
								    }
								}
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You're unable to place an advertisement right now, please wait 50 seconds!");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You don't have enough phone credit.");
						}
		            }
		        }
		        case 4516:
		        {
			    	new id;
			        if(sscanf(inputtext, "u", id))
			        {
			            ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "Yellow Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
						SendClientMessage(playerid, WHITE, "Nobody with that name was found. Please try again.");
					}
					else
					{
					    if(IsPlayerConnectedEx(id))
					    {
					        new string[128];
							SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
							SendClientMessage(playerid, WHITE, "Result(s) found!");

							if(Player[id][Gender] == 1)
							{
								format(string, sizeof(string), "Name: %s | Age: %d | Gender: Male", GetName(id), Player[id][Age]);
							}
							else
							{
							    format(string, sizeof(string), "Name: %s | Age: %d | Gender: Female", GetName(id), Player[id][Age]);
							}

	                        SendClientMessage(playerid, GREY, string);
							SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
					    }
					    else
					    {
				            ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "Yellow Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
							SendClientMessage(playerid, WHITE, "Nobody with that name was found. Please try again (( Not logged in )) .");
					    }
					}
		        }
		        case 4517:
		        {
		            new string[128];
		            SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		            switch(listitem)
		            {
		                case 0:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 1)
		                        {
		                            format(string, sizeof(string), "General Store (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 1:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 2)
		                        {
		                            format(string, sizeof(string), "Clothing (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 2:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 3)
		                        {
		                            format(string, sizeof(string), "Clubs (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 3:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 4)
		                        {
		                            format(string, sizeof(string), "Advertisement (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 4:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 5)
		                        {
		                            format(string, sizeof(string), "Adult (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 5:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 6)
		                        {
		                            format(string, sizeof(string), "Vehicle Dealership (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 6:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 7)
		                        {
		                            format(string, sizeof(string), "College (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 7:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 8)
		                        {
		                            format(string, sizeof(string), "Charity (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 8:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 9)
		                        {
		                            format(string, sizeof(string), "Church (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 9:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 10)
		                        {
		                            format(string, sizeof(string), "Gym (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		                case 10:
		                {
		                    for(new i = 1; i < MAX_BUSINESSES; i++)
		                    {
		                        if(Businesses[i][bType] == 11)
		                        {
		                            format(string, sizeof(string), "Chemists (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
		                            SendClientMessage(playerid, WHITE, string);
		                        }
		                    }
		                }
		            }
		            SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		        }
				case 4592:
			    {
			        switch(listitem)
			        {
				        case 0:
				        {
				            if(Player[playerid][FightBox] == 1)
				            {
				                SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
				            }
				        }
				        case 1:
				        {
				            if(Player[playerid][FightKungfu] == 1)
				            {
				                SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
				            }
				        }
				        case 2:
				        {
				            if(Player[playerid][FightKneehead] == 1)
				            {
				                SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
				            }
				        }
				        case 3:
				        {
				            if(Player[playerid][FightGrabkick] == 1)
				            {
				                SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
				            }
				        }
				        case 4:
				        {
				            if(Player[playerid][FightElbow] == 1)
				            {
				                SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
				            }
				        }
				        case 5:
				        {
			                SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
				        }
				    }
				}
			    case 4591:
			    {
			        switch(listitem)
			        {
				        case 0:
				        {
				            if(Player[playerid][FightBox] == 0)
				            {
					            if(Player[playerid][Money] >= 500)
					            {
					                Player[playerid][Money] -= 500;
					                Player[playerid][FightBox] = 1;
					                Businesses[Player[playerid][InBusiness]][bVault] += 500;
					                SendClientMessage(playerid, WHITE, "You have purchased the Boxing Fighting Style (type /usefightstyle).");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "You do not have enough money.");
					            }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You already have this style.");
				            }
		          		}
				        case 1:
				        {
				            if(Player[playerid][FightKungfu] == 0)
				            {
					            if(Player[playerid][Money] >= 600)
					            {
					                Player[playerid][Money] -= 600;
					                Player[playerid][FightKungfu] = 1;
					                Businesses[Player[playerid][InBusiness]][bVault] += 600;
					                SendClientMessage(playerid, WHITE, "You have purchased the Kungfu Fighting Style (type /usefightstyle).");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "You do not have enough money.");
					            }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You already have this style.");
				            }
						}
				        case 2:
				        {
				            if(Player[playerid][FightKneehead] == 0)
				            {
					            if(Player[playerid][Money] >= 700)
					            {
					                Player[playerid][Money] -= 700;
					                Player[playerid][FightKneehead] = 1;
					                Businesses[Player[playerid][InBusiness]][bVault] +=700;
					                SendClientMessage(playerid, WHITE, "You have purchased the Kneehead Fighting Style (type /usefightstyle).");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "You do not have enough money.");
					            }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You already have this style.");
				            }
				        }
				        case 3:
				        {
				            if(Player[playerid][FightGrabkick] == 0)
				            {
					            if(Player[playerid][Money] >= 800)
					            {
					                Player[playerid][Money] -= 800;
					                Player[playerid][FightGrabkick] = 1;
					                Businesses[Player[playerid][InBusiness]][bVault] += 800;
					                SendClientMessage(playerid, WHITE, "You have purchased the Grabkick Fighting Style (type /usefightstyle).");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "You do not have enough money.");
					            }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You already have this style.");
				            }
				        }
				        case 4:
				        {
				            if(Player[playerid][FightElbow] == 0)
				            {
					            if(Player[playerid][Money] >= 900)
					            {
					                Player[playerid][Money] -= 900;
					                Player[playerid][FightElbow] = 1;
					                Businesses[Player[playerid][InBusiness]][bVault] += 900;
					                SendClientMessage(playerid, WHITE, "You have purchased the Elbow Fighting Style (type /usefightstyle).");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "You do not have enough money.");
					            }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You already have this style.");
				            }
				        }
				    }
			    }
			    case 1230:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
			                {
			                    if(Player[playerid][CollegeMedia] == 0)
			                    {
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
				                    Player[playerid][CollegeMedia] = 1;
				                    SendClientMessage(playerid, WHITE, "You are now qualified in Media Studies.");
			                	}
			                	else
			                	{
			                	    SendClientMessage(playerid, WHITE, "You already have a degree in Media Studies.");
			                	}
			                }
			            }
			            case 1:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
			                {
			                    if(Player[playerid][CollegeLaw] == 0)
			                    {
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
				                    Player[playerid][CollegeLaw] = 1;
				                    SendClientMessage(playerid, WHITE, "You are now qualified in Civil Law Studies.");
			                	}
			                	else
			                	{
			                	    SendClientMessage(playerid, WHITE, "You already have a degree in Civil Law Studies.");
			                	}
			                }
			            }
			            case 2:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
			                {
			                    if(Player[playerid][CollegeEng] == 0)
			                    {
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
				                    Player[playerid][CollegeEng] = 1;
				                    SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate English.");
			                	}
			                	else
			                	{
			                	    SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate English.");
			                	}
			                }
			            }
			            case 3:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
			                {
			                    if(Player[playerid][CollegeMath] == 0)
			                    {
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
				                    Player[playerid][CollegeMath] = 1;
				                    SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate Mathematics.");
			                	}
			                	else
			                	{
			                	    SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate Mathematics.");
			                	}
			                }
			            }
			            case 4:
			            {
			                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
			                {
			                    if(Player[playerid][CollegeChem] == 0)
			                    {
				                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
				                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
				                    Player[playerid][CollegeChem] = 1;
				                    SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate Chemistry.");
			                	}
			                	else
			                	{
			                	    SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate Chemistry.");
			                	}
			                }
			            }
			        }
			    }
			    case 4622:
			    {
			        new amount = strval(inputtext);
			        if(Player[playerid][Pot] >= amount)
			        {
			            new string[128];
			            format(string, sizeof(string), "* %s has dropped some of their Pot.", GetName(playerid));
			        	NearByMessage(playerid, RPCOLOUR, string);
       					CreateDrop(playerid, 0, amount);
						Player[playerid][Pot] -= amount;
       					SendClientMessage(playerid, WHITE, "You have some of your Pot.");
			        }
					else
					{
					    SendClientMessage(playerid, WHITE, "You don't have that much pot!");
					}
			    }
			    case 4623:
			    {
			        new amount = strval(inputtext);
			        if(Player[playerid][Cocaine] >= amount)
			        {
			            new string[128];
			            format(string, sizeof(string), "* %s has dropped some of their Cocaine.", GetName(playerid));
			        	NearByMessage(playerid, RPCOLOUR, string);
       					CreateDrop(playerid, 1, amount);
						Player[playerid][Cocaine] -= amount;
       					SendClientMessage(playerid, WHITE, "You have some of your Cocaine.");
			        }
					else
					{
					    SendClientMessage(playerid, WHITE, "You don't have that much pot!");
					}
			    }
			    case 4624:
			    {
			        new amount = strval(inputtext);
			        if(Player[playerid][Materials] >= amount)
			        {
			            new string[128];
			            format(string, sizeof(string), "* %s has dropped some of their Materials.", GetName(playerid));
			        	NearByMessage(playerid, RPCOLOUR, string);
       					CreateDrop(playerid, 2, amount);
						Player[playerid][Materials] -= amount;
       					SendClientMessage(playerid, WHITE, "You have some of your Materials.");
			        }
					else
					{
					    SendClientMessage(playerid, WHITE, "You don't have that much pot!");
					}
			    }
			    case 4621:
			    {
			        new string[128];

			        switch(listitem)
			        {
			            case 0:
			            {
					        ShowPlayerDialog(playerid, 4622, DIALOG_STYLE_INPUT, "Drop Menu", "Please enter the amount you'd like to drop", "Choose", "Exit");
			            }
			            case 1:
			            {
					        ShowPlayerDialog(playerid, 4623, DIALOG_STYLE_INPUT, "Drop Menu", "Please enter the amount you'd like to drop", "Choose", "Exit");
			            }
			            case 2:
			            {
							ShowPlayerDialog(playerid, 4624, DIALOG_STYLE_INPUT, "Drop Menu", "Please enter the amount you'd like to drop", "Choose", "Exit");
			            }
			            case 3:
			            {
							if(Player[playerid][Group] != 1)
							{
				            	new pWeapon = GetPlayerWeapon(playerid);
								CreateDrop(playerid, 3, GetPlayerWeapon(playerid));
						        format(string, sizeof(string), "* %s has dropped their weapon.", GetName(playerid));
						        NearByMessage(playerid, RPCOLOUR, string);
						        SendClientMessage(playerid, WHITE, "You have dropped your weapon.");
								if(Player[playerid][WepSlot1] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot1] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot2] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot2] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot3] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot3] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot4] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot4] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot5] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot5] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot6] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot6] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot7] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot7] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot8] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot8] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot9] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot9] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot10] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot10] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
								else if(Player[playerid][WepSlot11] == pWeapon)
								{
								    ResetPlayerWeapons(playerid);
								    SetPlayerArmedWeapon(playerid, 0);
								    Player[playerid][WepSlot11] = 0;
								    GivePlayerSavedWeapons(playerid);
								}
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You have dropped your weapons.");
								ResetPlayerWeapons(playerid);
							}
			            }
			            case 4:
			            {
			                CreateDrop(playerid, 4, Player[playerid][PhoneN]);
			                Player[playerid][PhoneN] = -1;
					        format(string, sizeof(string), "* %s has dropped their Phone.", GetName(playerid));
					        NearByMessage(playerid, RPCOLOUR, string);
					        SendClientMessage(playerid, WHITE, "You have dropped your Phone.");
			            }
			            case 5:
			            {
			                // drop
			                Player[playerid][WalkieTalkie] = 0;
					        format(string, sizeof(string), "* %s has dropped their Walkie Talkie.", GetName(playerid));
					        NearByMessage(playerid, RPCOLOUR, string);
					        SendClientMessage(playerid, WHITE, "You have dropped your Walkie Talkie.");
			            }
			            case 6:
			            {
			                // drop
			                Player[playerid][PotSeeds] = 0;
					        format(string, sizeof(string), "* %s has dropped their Pot Seeds.", GetName(playerid));
					        NearByMessage(playerid, RPCOLOUR, string);
					        SendClientMessage(playerid, WHITE, "You have dropped your Pot Seeds.");
			            }
			            case 7:
			            {
			                ShowPlayerDialog(playerid, 3901, DIALOG_STYLE_INPUT, "Amount", "Please enter the amount of money you would like to drop.", "Done", "Cancel");
			            }
			        }
			    }
			    case 3901:
			    {
					new string[256];
					new amount = strval(inputtext);
					if(Player[playerid][Money] >= amount)
					{
						if(amount >= 10000)
						{
						    format(string, sizeof(string), "* %s lowers, placing the cash into a bag and then lowering the bag onto the ground.", GetName(playerid));
						}
						else if(amount < 10000)
						{
						    format(string, sizeof(string), "* %s puts the money into a stack and places it onto the ground.", GetName(playerid));
						}
						CreateDrop(playerid, 7, Player[playerid][Money]);
						Player[playerid][Money] -= amount;
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You do not have that amount of money.");
					}

			    }
			    case 3895:
			    {
					if(Player[playerid][Authenticated] == 0)
				    {
				        new string[128];
				        format(string, sizeof(string), "Accounts/%s.ini", GetName(playerid));
				        if(!fexist(string))
				        {
				            if(strlen(inputtext) >= 1)
				            {
					    		RegisterPlayer(playerid, inputtext);
					    		Player[playerid][Authenticated] = 1;
				                Player[playerid][Tutorial] = 1;
								PutPlayerInTutorial(playerid, 0);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "Must be longer than 1 char.");
							}
				    	}
				    	else
				    	{
				    	    SendClientMessage(playerid, WHITE, "Your account already exists.");
				    	}
					}
					else
					{
					    SendClientMessage(playerid, GREY, "You must logout to create a new account.");
					}
			    }
			    case 3894:
			    {
					if(strlen(inputtext) > 128 || strlen(inputtext) < 1)
				    {
				        new Sum, string[128];
				        Sum = 3-Player[playerid][LoginAttempts];
				        SendClientMessage(playerid, ADMINORANGE, "The password you have entered does not match your account. Please try again or use the forums.");
				        Player[playerid][LoginAttempts]++;
						format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
						SendClientMessage(playerid, WHITE, string);
						ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to Evolved Gaming  Roleplay\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");
				    }
				    else
				    {
						if(Player[playerid][Authenticated] == 0)
						{
							OnPlayerLoginAttempt(playerid, inputtext);
						}
						else
						{
						    SendClientMessage(playerid, GREY, "You're already authenticated.");
						}
			        }
	            }
			    case 1529:
			    {
			        switch(listitem)
			        {
			            case 0: ShowPlayerDialog(playerid, 1535, DIALOG_STYLE_LIST, "Popular Locations", "RCSD\nGrotti\nMulholland Intersection\nGrove Street\nVinewood\nLos Santos Airport\nVerdant Bluffs\nMarket\nWheel Arch\nBlueberry\nLoco Low Co.", "Select", "Cancel");
			            case 1: ShowPlayerDialog(playerid, 1534, DIALOG_STYLE_LIST, "Event Locations", "RC Battlefield\nArea 69\nWarehouse 1\nWarehouse 2\nMeat Factory\nSherman Dam\n", "Select", "Cancel");
			        }
				}
				case 3928:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
			            	SetPlayerInterior(playerid, 0);
				            Player[playerid][InGroupHQ] = 0;
				            SetPlayerPos(playerid, 621.2130, -569.1777, 26.1432);
				            SetPlayerVirtualWorld(playerid, 0);
				        }
				        case 1:
				        {
				            Player[playerid][InGroupHQ] = 1;
				            SetPlayerInterior(playerid, 10);
				            SetPlayerVirtualWorld(playerid, 45001);
				            SetPlayerPos(playerid, 265.90891, 114.87791, 1003.61450);
				        }
				        case 2:
				        {
				            Player[playerid][InGroupHQ] = 0;
				            SetPlayerInterior(playerid, 0);
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerPos(playerid, 1568.68970, -1691.43201, 4.87843);
				        }
				    }
				}
				case 9864:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(Player[playerid][MedicDuty] == 1)
				            {
				                Player[playerid][MedicDuty] = 0;
								SendClientMessage(playerid, WHITE, "You are no longer on duty. You won't recieve calls.");
				            }
				            else
				            {
				                Player[playerid][MedicDuty] = 1;
								SendClientMessage(playerid, WHITE, "You are now on duty. You will recieve calls.");
				            }
						}
						case 1:
						{
						    ShowPlayerDialog(playerid, 9865, DIALOG_STYLE_LIST, "LSFMD Menu", "Paramedics\nFiremen", "Select", "Cancel");
						}
						case 2:
						{
						    ShowPlayerDialog(playerid, 9868, DIALOG_STYLE_LIST, "LSFMD Menu", "Fire Extinguisher ($30 - Government Fund)\nChainsaw ($100 - Government Fund)\n", "Select", "Cancel");
						}
				    }
				}
				case 9865:
				{
				    switch(listitem)
				    {
				        case 0: ShowPlayerDialog(playerid, 9866, DIALOG_STYLE_LIST, "LSFMD Menu", "Black Paramedic (with white shirt)\nHispanic Paramedic (with blue shirt)\nWhite Paramedic (with green shirt)", "Select", "Cancel");
				        case 1: ShowPlayerDialog(playerid, 9867, DIALOG_STYLE_LIST, "LSFMD Menu", "White Fireman (with yellow suite)\nBlack Fireman (with green suite)\nWhite Fireman (with black suite)", "Select", "Cancel");
					}
				}
				case 9866:
				{
				    switch(listitem)
				    {
				        case 0: SetPlayerSkin(playerid, 274);
				        case 1: SetPlayerSkin(playerid, 275);
				        case 2: SetPlayerSkin(playerid, 276);
				    }
				}
				case 9867:
				{
				    switch(listitem)
				    {
				        case 0: SetPlayerSkin(playerid, 277);
				        case 1: SetPlayerSkin(playerid, 278);
				        case 2: SetPlayerSkin(playerid, 279);
				    }
				}
				case 9868:
				{
				    switch(listitem)
				    {
				        case 0:
						{
						    if(Groups[3][SafeMoney] >= 30)
						    {
								GivePlayerWeaponEx(playerid, 42);
								Groups[3][SafeMoney] -= 30;
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "There are insufficient funds available, in the government vault.");
							}
						}
				        case 1:
						{
						    if(Groups[3][SafeMoney] >= 100)
						    {
								GivePlayerWeaponEx(playerid, 9);
								Groups[3][SafeMoney] -= 100;
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "There are insufficient funds available, in the government vault.");
							}
						}
				    }
				}
				/*case 6125:
				{
				    if(Player[playerid][Checkpoint] == 0)
				    {
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetPlayerCheckpoint(playerid, BankExtX, BankExtY, BankExtZ, 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, "You have requested the location for the Bank, a marker has been set!");
					        }
					        case 1:
					        {
					            SetPlayerCheckpoint(playerid, Jobs[2][JobJoinPosX], Jobs[2][JobJoinPosY], Jobs[2][JobJoinPosZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, "You have requested the location for the Mechanic Job, a marker has been set!");
					        }
					        case 2:
					        {
					            SetPlayerCheckpoint(playerid, Jobs[3][JobJoinPosX], Jobs[3][JobJoinPosY], Jobs[3][JobJoinPosZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, "You have requested the location for the Guard Job, a marker has been set!");
					        }
					        case 3:
					        {
					            SetPlayerCheckpoint(playerid, Jobs[4][JobJoinPosX], Jobs[4][JobJoinPosY], Jobs[4][JobJoinPosZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, "You have requested the location for the Detective Job, a marker has been set!");
					        }
					        case 4:
					        {
					            SetPlayerCheckpoint(playerid, Groups[1][HQExteriorX], Groups[1][HQExteriorY], Groups[1][HQExteriorZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, "You have requested the location for the RCPD HQ, a marker has been set!");
					        }
					        case 5:
					        {

					            new string[128];
					            format(string, sizeof(string), "You have requested the location for the %s, a marker has been set!", Businesses[14][bName]);
					            SetPlayerCheckpoint(playerid, Businesses[14][bExteriorX], Businesses[14][bExteriorY], Businesses[14][bExteriorZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, string);
					        }
					        case 6:
					        {
					            new string[128];
					            format(string, sizeof(string), "You have requested the location for the %s Job, a marker has been set!", Jobs[7][JobName]);
					            SetPlayerCheckpoint(playerid, Jobs[7][JobJoinPosX], Jobs[7][JobJoinPosY], Jobs[7][JobJoinPosZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, string);
					        }
					        case 7:
					        {
					            new string[128];
					            format(string, sizeof(string), "You have requested the location for the %s, a marker has been set!", Businesses[24][bName]);
					            SetPlayerCheckpoint(playerid, Businesses[24][bExteriorX], Businesses[24][bExteriorY], Businesses[24][bExteriorZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, string);
					        }
					        case 8:
					        {
					            SetPlayerCheckpoint(playerid, Jobs[5][JobJoinPosX], Jobs[5][JobJoinPosY], Jobs[5][JobJoinPosZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, "You have requested the location for the Delivery Job, a marker has been set!");
					        }
					        case 9:
					        {
					            new string[128];
					            format(string, sizeof(string), "You have requested the location for the %s, a marker has been set!", Businesses[69][bName]);
					            SetPlayerCheckpoint(playerid, Businesses[69][bExteriorX], Businesses[69][bExteriorY], Businesses[69][bExteriorZ], 10.0);
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Map] = 1;
					            SendClientMessage(playerid, WHITE, string);
					        }
					    }
				    }
				}*/
				case 1535:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1554.56946,-1675.72876,15.97290);
				        }
				        case 1:
				        {
	               			SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 550.47961,-1272.06335,17.19730);
				        }
				        case 2:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1681.45630,-949.16937,62.37400);
				        }
						case 3:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 2498.76221,-1683.13440,13.83530);
				        }
						case 4:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1360.13391,-737.57819,103.25170);
				        }
						case 5:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1482.93054,-2460.37207,14.00020);
				        }
						case 6:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1141.51538,-2037.75159,68.47650);
				        }
						case 7:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1270.57153,-1329.31433,12.80670);
				        }
						case 8:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, -2709.0222,213.2845,4.1441);
				        }
						case 9:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 177.8947,-147.8712,1.1337);
				        }
						case 10:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 2651.6111,-2003.6633,13.3828);
				        }
				    }
				}
				case 1534:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 10);
				            SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
				        }
				        case 1:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 223.431976, 1872.400268, 13.734375);
				        }
				        case 2:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 1);
				            SetPlayerPos(playerid, 1412.639892, -1.787510, 1000.924377);
				        }
				        case 3:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 18);
				            SetPlayerPos(playerid, 1302.519897, -1.787510, 1001.028259);
				        }
				        case 4:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 1);
				            SetPlayerPos(playerid, 963.418762, 2108.292480, 1011.030273);
				        }
				        case 5:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 17);
				            SetPlayerPos(playerid, -959.564392, 1848.576782, 9.000000);
				        }
				    }
				}
				case 1533:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, BankExtX, BankExtY, BankExtZ);
				        }
				        case 1:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 2222.6714, -1724.8436, 13.5625);
				        }
				        case 2:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
				        }
				        case 3:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, HospitalInt2);
				            SetPlayerPos(playerid, HospitalSpawnX2, HospitalSpawnY2, HospitalSpawnZ2);
				        }
				        case 4:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
				        }
				    }
				}
				case 1532:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1550.2311, -1675.4509, 15.3155);
				        }
				        case 1:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, -1641.9742, 431.1623, 7.1102);
				        }
				        case 2:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 0);
				            SetPlayerPos(playerid, 1699.2, 1435.1, 10.7);
				        }
				    }
				}
				case 1531:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 4);
				            SetPlayerPos(playerid, -1444.645507, -664.526000, 1053.572998);
				        }
				        case 1:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 1);
				            SetPlayerPos(playerid, -1401.829956, 107.051300, 1032.273437);
				        }
				        case 2:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 15);
				            SetPlayerPos(playerid, -1398.103515, 937.631164, 1036.479125);
				        }
				        case 3:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 7);
				            SetPlayerPos(playerid, -1398.065307, -217.028900, 1051.115844);
				        }
				        case 4:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 14);
				            SetPlayerPos(playerid, -1465.268676, 1557.868286, 1052.531250);
				        }
				    }
				}
				case 1530:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 5);
				            SetPlayerPos(playerid, 1267.663208, -781.323242, 1091.906250);
				        }
				        case 1:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 3);
				            SetPlayerPos(playerid, 2496.049804, -1695.238159, 1014.742187);
				        }
				        case 2:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 2);
				            SetPlayerPos(playerid, 2454.717041, -1700.871582, 1013.515197);
				        }
				        case 3:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 3);
				            SetPlayerPos(playerid, 964.106994, -53.205497, 1001.124572);
				        }
				        case 4:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 8);
				            SetPlayerPos(playerid, 2807.619873, -1171.899902, 1025.570312);
				        }
				        case 5:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 5);
				            SetPlayerPos(playerid, 318.564971, 1118.209960, 1083.882812);
				        }
				        case 6:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 1);
				            SetPlayerPos(playerid, 244.411987, 305.032989, 999.148437);
				        }
				        case 7:
				        {
				            SetPlayerVirtualWorld(playerid, 0);
				            SetPlayerInterior(playerid, 2);
				            SetPlayerPos(playerid, 271.884979, 306.631988, 999.148437);
				        }
				    }
				}

				case 5674:
				{
					switch(listitem)
					{
						case 0:
						{
							ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        Player[playerid][CarBeingCarried] = 473;
					        Player[playerid][CarPriceBeingCarried] = 13500;
						}
						case 1:
						{
							ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        Player[playerid][CarBeingCarried] = 453;
					        Player[playerid][CarPriceBeingCarried] = 90000;
							SendClientMessage(playerid, WHITE, "You have bought a Reefer!");
						}
						case 3:
						{
							ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        Player[playerid][CarBeingCarried] = 454;
					        Player[playerid][CarPriceBeingCarried] = 175000;
							SendClientMessage(playerid, WHITE, "You have bought a Tropic!");
						}
						case 2:
						{
							ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
					        Player[playerid][CarBeingCarried] = 452;
					        Player[playerid][CarPriceBeingCarried] = 235000;
							SendClientMessage(playerid, WHITE, "You have bought a Speeder!");
						}
					}
				}

				case 6785:
				{
					switch(listitem)
					{
						case 0:
						{
							PlayAudioStreamForPlayer(playerid, "http://www.181.fm/stream/pls/181-eagle.pls");
							SendClientMessage(playerid, WHITE, "Use /stopradio to turn the radio off!");
						}
						case 1:
						{
							PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1502373");
							SendClientMessage(playerid, WHITE, "Use /stopradio to turn the radio off!");
						}
						case 2:
						{
							PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=727867");
							SendClientMessage(playerid, WHITE, "Use /stopradio to turn the radio off!");
						}
						case 3:
						{
							PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=150292");
							SendClientMessage(playerid, WHITE, "Use /stopradio to turn the radio off!");
						}


					}
				}

			    case 3260:
			    {
			        switch(listitem)
			        {
			            case 0:
						{
						    if(Player[playerid][Tester] >= 1)
						    {
								ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nOwned Vehicles\nJobs\nGroups\nPhone\nWalkie Talkie\nVIP\nBETA\n", "Select", "Cancel");
				            }
				            else
				            {
				                ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nOwned Vehicles\nJobs\nGroups\nPhone\nWalkie Talkie\nVIP\n", "Select", "Cancel");
				            }
			            }
						case 1:
			            {
			                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
							SendClientMessage(playerid, WHITE, "Administrators");
							SendClientMessage(playerid, GREY, "Evolved Gaming Roleplay is managed by a team, consisting of around 13 / 14 people who do a fairly great job of managing the server.");
							SendClientMessage(playerid, GREY, "At the moment, we're not currently looking for any more administrators. So don't pester us about becoming one.");
			                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
			            }
			            case 2:
			            {
			                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
							SendClientMessage(playerid, WHITE, "Our rules change on a regular basis, we suggest you visit our forum to check them (www.evolvedgaming.org).");
			                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
			            }
			            case 4:
			            {
				            SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
							SendClientMessage(playerid, WHITE, "Commands allocated for this business.");

			                switch(Businesses[Player[playerid][InBusiness]][bType])
			                {
			                    case 1: SendClientMessage(playerid, WHITE, "/buy");
			                    case 2: SendClientMessage(playerid, WHITE, "/buyclothes, /buytoys");
			                    case 3: SendClientMessage(playerid, WHITE, "/buydrink");
			                    case 4: SendClientMessage(playerid, WHITE, "/(ad)vertisement");
			                    case 5: SendClientMessage(playerid, WHITE, "/buy");
			                    case 6: SendClientMessage(playerid, WHITE, "/buyvehicle");
			                    case 7: SendClientMessage(playerid, WHITE, "/takecourse");
			                    case 8: SendClientMessage(playerid, WHITE, "/donate");
			                    case 9: SendClientMessage(playerid, WHITE, "/propose");
			                    case 10: SendClientMessage(playerid, WHITE, "/buyfightstyle");
			                    case 11: SendClientMessage(playerid, WHITE, "/buy");
			                    case 12: SendClientMessage(playerid, WHITE, "/buy");
								case 13: SendClientMessage(playerid, WHITE, "/taketest regular");
								case 14: SendClientMessage(playerid, WHITE, "/buy");
			                }

			                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
			            }
			        }
			    }
		    case 6676:
			    {
			        if(strlen(inputtext) >= 1 && strlen(inputtext) < 60)
			        {
			            new string[100];
			            format(Player[playerid][ReportText], 128, inputtext);
			            format(string, sizeof(string), "%s (ID: %d) has reported %s (ID: %d): %s", GetName(playerid), playerid, GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
						SendToAdmins(ADMINORANGE, string, 1);
						format(string, sizeof(string), "You have reported %s (ID: %d): %s", GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
						SendClientMessage(playerid, WHITE, string);

						Player[playerid][ActiveReport] = 1;
						format(Player[playerid][ReportText], 128, "PLAYER REPORT: %s reported %s, for %s.", GetName(playerid), GetName(Player[playerid][ReportingPlayer]), inputtext);
					}
			        else
			        {
			            ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
			            SendClientMessage(playerid, WHITE, "Strings over 60 are ignored.");
			        }
			    }
			    case 7766:
			    {
			        if(strlen(inputtext) > MAX_PLAYER_NAME || strlen(inputtext) < 1)
			        {
			            SendClientMessage(playerid, WHITE, "That string is longer than the SA-MP name limit or is below the allocated string limit of 1.");
			        }
			        else
			        {
			            new id;
			            if(sscanf(inputtext, "u", id))
			            {
			            	ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
			            	SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
					    }
					    else
					    {
			            	if(!IsPlayerConnectedEx(id))
			            	{
			            	    ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
			            	    SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
			            	}
							else
							{
							    if(IsPlayerConnectedEx(id))
							    {
							        Player[playerid][ReportingPlayer] = id;
							        ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
							    }
						    }
					    }
				    }
			    }
			    case 9331:
			    {
			        new string[128];
			        if(strlen(inputtext) >= MAX_PLAYER_NAME || strlen(inputtext) < 1)
			        {
			            SendClientMessage(playerid, WHITE, "That's over the name limit!");
			        }
			        else
			        {
			            format(string, sizeof(string), "Accounts/%s.ini", inputtext);
			            if(fexist(string))
			            {
			                SendClientMessage(playerid, WHITE, "That account already exists.");
			                ShowPlayerDialog(playerid, 9331, DIALOG_STYLE_INPUT, "Namechange", "Enter your new desired name.", "Report", "Cancel");
			            }
			            else
			            {
		                	format(string, sizeof(string), "%s [ID: %d] is requesting a name-change to %s!", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "NAMECHANGE: %s", inputtext);
						}
			        }
		        }
			    case 6347:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                new Count;
	                        for(new i = 0; i < MAX_PLAYERS; i++)
	                        {
	                            if(IsPlayerConnectedEx(i))
	                            {
	                                if(Player[i][AdminLevel] >= 4 && Player[i][AdminDuty] >= 1)
	                                {
	                                    Count++;
	                                }
	                            }
	                        }

	                        if(Count >= 1)
	                        {
	                            SendClientMessage(playerid, WHITE, "Name Changes are free again, but only use this if you have a geniune request, and nothing stupid.");
	                            ShowPlayerDialog(playerid, 9331, DIALOG_STYLE_INPUT, "Name Change", "Enter your new desired name. Name Changes are free.", "Report", "Cancel");
	                        }
	                        else
	                        {
	                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to change names.");
	                        }
			            }
			            case 1:
			            {
							SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
							SendClientMessage(playerid, WHITE, "Skin Shops (Binco, Prolaps, etc)");
							SendClientMessage(playerid, GREY, "There are various clothing shops. You can obtain new clothes from these shops, there are several around Los Santos.");
							SendClientMessage(playerid, GREY, "Once you have found a Skin Shop, type /buyclothes to buy clothes or /buytoys to buy a toy.");
							SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
						}
						case 2:
						{
			                new Count;
	                        for(new i = 0; i < MAX_PLAYERS; i++)
	                        {
	                            if(IsPlayerConnectedEx(i))
	                            {
	                                if(Player[i][AdminLevel] >= 3 && Player[i][AdminDuty] >= 1)
	                                {
	                                    Count++;
	                                }
	                            }
	                        }

	                        if(Count >= 1)
	                        {
	                            ShowPlayerDialog(playerid, 8135, DIALOG_STYLE_LIST, "Select The Weapon", "Desert Eagle\nShotgun\nCombat Shotgun\nM4\nAK47\nMP5\nSniper Rifle", "Select", "Cancel");
	                        }
	                        else
	                        {
	                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to spawn weapons");
	                        }
						}
						case 3:
						{
			                new Count, string[128];
	                        for(new i = 0; i < MAX_PLAYERS; i++)
	                        {
	                            if(IsPlayerConnectedEx(i))
	                            {
	                                if(Player[i][AdminLevel] >= 3 && Player[i][AdminDuty] >= 1)
	                                {
	                                    Count++;
	                                }
	                            }
	                        }

	                        if(Count >= 1)
	                        {
	                            format(string, sizeof(string), "%s is requesting an armour refund.", GetName(playerid));
	                            SendToAdmins(ADMINORANGE, string, 1);
	                            SendClientMessage(playerid, WHITE, "You have requested an armour refund, please note we only refund, not give.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "Armour Refund");
							}
	                        else
	                        {
	                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to spawn armour.");
	                        }
						}
			        }
			    }
			    case 99:
			    {
			        new string[128];
			        if(strlen(inputtext) >= 1 && strlen(inputtext) < 128)
			        {
				        switch(Player[playerid][WeaponRefund])
				        {
				            case 24:
				            {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (24 - Desert Eagle): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
			                }
				            case 25:
				            {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (25 - Shotgun): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
							}
			                case 27:
			                {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (27 - Combat Shotgun): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
							}
			                case 29:
			                {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (29 - MP5): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
							}
			                case 30:
			                {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (30 - AK47): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
							}
			                case 31:
			                {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (31 - M4): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
							}
			                case 34:
			                {
				        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (34 - Sniper Rifle): %s", GetName(playerid), playerid, inputtext);
			                    SendToAdmins(ADMINORANGE, string, 1);
			                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

								Player[playerid][ActiveReport] = 1;
								format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
							}
				        }
			        }
			        else
			        {
			            GetWeaponName(Player[playerid][WeaponRefund], string, sizeof(string));
			            format(string, sizeof(string), "Please tell us why you're requesting a %s.", string);
			            ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", string, "Request", "Cancel");
			        }
			    }
			    case 8135:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Desert Eagle.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 24;
			            }
			            case 1:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Shotgun.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 25;
			            }
			            case 2:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Combat Shotgun.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 27;
						}
			            case 3:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting an M4.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 31;
			            }
			            case 4:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting an AK-47.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 30;
			            }
			            case 5:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting an MP5.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 29;
			            }
			            case 6:
			            {
			                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Sniper Rifle.", "Request", "Cancel");
	                        Player[playerid][WeaponRefund] = 34;
			            }
			        }
			    }
			    case 6897:
			    {
				    switch(listitem)
				    {
				        case 0:
				        {
				            SendClientMessage(playerid, RED, "Please remember that we're experiencing a high volume of reports. Please only report, if this is a hacker.");
				            ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
				        }
				        case 1:
				        {
				            SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
				            SendClientMessage(playerid, WHITE, "You are requesting to speak to an administrator.");
				            SendClientMessage(playerid, ADMINORANGE, "We're experiencing an extremely high volume of reports. Please continue with your message if it's urgent.");
							SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
							ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Please read above before submitting any messages and please keep your messages below 50 characters.", "Report", "Cancel");
						}
					}
			    }
				case 6677:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
				        }
				        case 1:
				        {
				            ShowPlayerDialog(playerid, 6347, DIALOG_STYLE_LIST, "Requests", "Name Change\nSkin Change\nWeapon Refund\nArmour Refund", "Select", "Cancel");
				        }
						case 2:
						{
						    ShowPlayerDialog(playerid, 6391, DIALOG_STYLE_LIST, "House / Business Related", "House Exterior / Interior Change\nBusiness Exterior / Interior Change\nOther\n", "Select", "Cancel");
						}
				        case 3:
				        {
				            SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
				            SendClientMessage(playerid, WHITE, "You are requesting to speak to an administrator.");
				            SendClientMessage(playerid, ADMINORANGE, "Please ONLY use this feature, if what you're speaking about is important. Do NOT use this to chat or you risk being fined.");
	                        SendClientMessage(playerid, WHITE, "If you are requesting something, please check each other report section BEFORE using this tool.");
							SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
							ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Please read above before submitting any messages and please keep your messages below 50 characters.", "Report", "Cancel");
						}
				    }
				}
				case 6391:
				{
				    new string[128];
				    switch(listitem)
				    {
				        case 0:
				        {
				            if(Player[playerid][House] >= 1)
				            {
				                new Count;
		                        for(new i = 0; i < MAX_PLAYERS; i++)
		                        {
		                            if(IsPlayerConnectedEx(i))
		                            {
		                                if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
		                                {
		                                    Count++;
		                                }
		                            }
		                        }

		                        if(Count >= 1)
		                        {
						            format(string, sizeof(string), "%s [ID: %d] is requesting an house interior / exterior change.", GetName(playerid), playerid);
						            SendToAdmins(ADMINORANGE, string, 1);
						            SendClientMessage(playerid, WHITE, "You have request a house interior / exterior change.");
							        Player[playerid][ActiveReport] = 1;
							        format(Player[playerid][ReportText], 128, "HOUSE INTERIOR/EXTERIOR CHANGE");
								}
		                        else
		                        {
		                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter houses.");
		                        }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You don't own a house to request an interior / exterior change.");
				            }
				        }
				        case 1:
				        {
				            if(Player[playerid][Business] >= 1)
				            {
				                new Count;
		                        for(new i = 0; i < MAX_PLAYERS; i++)
		                        {
		                            if(IsPlayerConnectedEx(i))
		                            {
		                                if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
		                                {
		                                    Count++;
		                                }
		                            }
		                        }

		                        if(Count >= 1)
		                        {
						            format(string, sizeof(string), "%s [ID: %d] is requesting an business interior / exterior change.", GetName(playerid), playerid);
						            SendToAdmins(ADMINORANGE, string, 1);
						            SendClientMessage(playerid, WHITE, "You have request a business interior / exterior change.");
							        Player[playerid][ActiveReport] = 1;
							        format(Player[playerid][ReportText], 128, "BUSINESS INTERIOR/EXTERIOR CHANGE");
		                        }
		                        else
		                        {
		                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter businesses.");
		                        }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You don't own a business to request an interior / exterior change.");
				            }
				        }
				        case 2:
				        {
				            if(Player[playerid][Business] >= 1 || Player[playerid][House] >= 1)
				            {
				                new Count;
		                        for(new i = 0; i < MAX_PLAYERS; i++)
		                        {
		                            if(IsPlayerConnectedEx(i))
		                            {
		                                if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
		                                {
		                                    Count++;
		                                }
		                            }
		                        }

		                        if(Count >= 1)
		                        {
									ShowPlayerDialog(playerid, 9721, DIALOG_STYLE_INPUT, "Other", "Please enter what it is you wish changed/executed.", "Report", "Cancel");
		                        }
		                        else
		                        {
		                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter businesses/houses.");
		                        }
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You don't own a house or a business to request an interior / exterior change.");
				            }
				        }
				    }
				}
				case 9721:
				{
				    new string[128];
				    if(strlen(inputtext) >= 1 && strlen(inputtext) < 80)
				    {
						format(string, sizeof(string), "%s [ID: %d] is requesting a house/business change: %s", GetName(playerid), playerid, inputtext);
					    SendToAdmins(ADMINORANGE, string, 1);
						format(string, sizeof(string), "You have sent: %s", inputtext);
					    SendClientMessage(playerid, WHITE, string);
				        Player[playerid][ActiveReport] = 1;
				        format(Player[playerid][ReportText], 128, "House/Business: %s", inputtext);
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, 9721, DIALOG_STYLE_INPUT, "Other", "Please enter what it is you wish changed/executed.", "Report", "Cancel");
				        SendClientMessage(playerid, WHITE, "Over 80 characters, or not even one.");
				    }
				}
				case 9722:
				{
				    new string[128];
				    if(strlen(inputtext) >= 1 && strlen(inputtext) < 80)
				    {
				        Player[playerid][ActiveReport] = 1;
				        format(Player[playerid][ReportText], 128, "SPEAK REQUEST: %s", inputtext);
						format(string, sizeof(string), "%s [ID: %d] is requesting to speak to an Admin: %s", GetName(playerid), playerid, inputtext);
					    SendToAdmins(ADMINORANGE, string, 1);

					    SendClientMessage(playerid, WHITE, "You have requested to speak to an Administrator.");
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Enter what you would like to speak about. Remember, this is for administrative help. Keep your messages below 80 characters.", "Report", "Cancel");
				        SendClientMessage(playerid, WHITE, "Over 80 characters, or not even one.");
				    }
				}
			    case 631:
			    {
			        switch(listitem)
					{
					    case 0:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
						            Player[playerid][Rope]++;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 1:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
						            Player[playerid][Rags]++;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 2:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            new string[128];
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
							        Player[playerid][PhoneN] = 20000+random(6999);
							        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							        Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
							        format(string, sizeof(string), "You have purchased a cellphone. Your number is %d.", Player[playerid][PhoneN]);
							        SendClientMessage(playerid, WHITE, string);
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 3:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
						            Player[playerid][PhoneBook]++;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
						            SendClientMessage(playerid, WHITE, "You have purchased a phonebook, use /getnumber to use it!");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 4:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
						            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
						            Player[playerid][HadSprunk] = 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
	                                TextDrawShowForPlayer(playerid, SprunkTextDraw);
	                            }
								else
								{
									SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
							}
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 5:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
					                SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 6:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice7])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Player[playerid][HasSprayCans]++;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
						            SendClientMessage(playerid, WHITE, "These are only for owned vehicles, use the command /colorcar.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 7:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice8])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
						            Player[playerid][WalkieTalkie]++;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];
						            SendClientMessage(playerid, WHITE, "You have purchased a Walkie Talkie. Use /wt [message], but set your frequency by using /setfrequency [id].");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 8:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice9])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice9];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Player[playerid][HasRadio]++;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice9];
						            SendClientMessage(playerid, WHITE, "You have purchased a radio. Use /toggleradio in a vehicle to listen to it.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 9:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice10])
					        {
								if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice10];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Player[playerid][GasCan]++;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice10];
						            SendClientMessage(playerid, WHITE, "You have purchased a Gas Can. Use /refillgascan at a gas station and /refill in a vehicle to refuel it.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 10:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice11])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice11];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Player[playerid][NosBottle]++;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice11];
						            SendClientMessage(playerid, WHITE, "You have purchased a Nitrous Bottle. Use /installnos in a vehicle to use it.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 11:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice12])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 5)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice12];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
						            Player[playerid][EngineUpgrade]++;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice12];
						            SendClientMessage(playerid, WHITE, "You have purchased an Engine Upgrade. Use /installupgrade in a vehicle to use it.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 12:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice13])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 5)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice13];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
						            Player[playerid][Turbo]++;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice12];
						            SendClientMessage(playerid, WHITE, "You have purchased an Turbo. Use /installturbo in a vehicle to use it.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					}
			    }
			    case 257:
			    {
			        new string[128];
	    		    switch(listitem)
					{
					    case 0:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
						            Player[playerid][Rope]++;
						            SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "That item is out of stock.");
						        }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 1:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You have purchased a Small White Vibrator.");
						            GivePlayerWeaponEx(playerid, 11);
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "That item is out of stock.");
					            }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 2:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
						            SendClientMessage(playerid, WHITE, "You have purchased a Silver Vibrator.");
						            GivePlayerWeaponEx(playerid, 13);
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "That item is out of stock.");
					            }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 3:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You have purchased a Large White Vibrator.");
						            GivePlayerWeaponEx(playerid, 12);
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "That item is out of stock.");
					            }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 4:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
						            SendClientMessage(playerid, WHITE, "You have purchased some Priest Clothing.");
									format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetName(playerid));
		                            NearByMessage(playerid, RPCOLOUR, string);
									SetPlayerSkin(playerid, 68);
								}
								else
								{
								    SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 5:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
						            SendClientMessage(playerid, WHITE, "You have purchased a Naughty Police Girl Costume.");
									format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetName(playerid));
									NearByMessage(playerid, RPCOLOUR, string);
									SetPlayerSkin(playerid, 246);
								}
								else
								{
								    SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					    case 6:
					    {
					        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice7])
					        {
					            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					            {
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
						            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
						            SendClientMessage(playerid, WHITE, "You have purchased a Cat Woman Costume.");
									format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetName(playerid));
									NearByMessage(playerid, RPCOLOUR, string);
	        						SetPlayerSkin(playerid, 178);
								}
								else
								{
								    SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "Insufficient funds.");
					        }
					    }
					}
			    }
			    case 322:
			    {
			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");

					switch(listitem)
					{
					    case 0:
					    {
					        SendClientMessage(playerid, WHITE, "You have selected General. We have a wide array of general commands for the server, these are specificly useful for gameplay:");
					        SendClientMessage(playerid, GREY, "/changepass, /me, /do, /attempt, /playerwarns, /admins, /joinevent(jump, rally), /o(oc), /accent, /blindfold, /togwt");
				            SendClientMessage(playerid, GREY, "/buyhouse, /buybusiness, /b, /approve, /pay, /low, /dropcar, /fish, /sellfish, /give, /w(hisper), /eject, /rules, /unblindfold");
	                        SendClientMessage(playerid, GREY, "/toggleradio, /tie, /untie, /drop, /usefightstyle, /togooc, /flipcoin, /buyid, /buylic, /showid, /knock, /answerq, /pm, /togpms");
	                        SendClientMessage(playerid, GREY, "/drag, /stopdrag, /togquizes, /stats, /giveweapon, /achievements, /getid, /calculate, /togradio /rp");
						}
					    case 1:
					    {
					    	SendClientMessage(playerid, WHITE, "You have selected Animations. We have various animations available, the names of the animations describe the action.");
				            SendClientMessage(playerid, GREY, "/dance, /reload, /crossarms, /handsup, /crack, /sit, /gsit, /fallback, /rap, /pedmove, /robman");
	                        SendClientMessage(playerid, GREY, "/bomb, /vomit, /wave, /deal, /chat, /laugh, /bar, /hide, /shakehand");
					    }
					    case 2:
					    {
					        SendClientMessage(playerid, WHITE, "You have selected Bank. There are a few commands linked to the bank, they are:");
					        SendClientMessage(playerid, GREY, "/bwithdraw, /bdeposit, /loans");
					        if(Player[playerid][FactionID] != 0)
					        {
	            				SendClientMessage(playerid, GREY, "/fwithdraw, /fdeposit (only for the leader)");
					        }
					    }
					    case 3:
					    {
					    	SendClientMessage(playerid, WHITE, "You have selected Businesses. We have an array of useful commands for Businesses, so review the following:");
				            SendClientMessage(playerid, GREY, "/bsdeposit, /bswithdraw, /setprice, /supplystatus, /businessname, /bbalance, /lockbusiness");
					    }
					    case 4:
					    {
					    	SendClientMessage(playerid, WHITE, "You have selected Houses. We have an array of useful commands for Houses, so review the following:");
				            SendClientMessage(playerid, GREY, "/buyvault, /hbalance, /home, /hwithdraw, /hlistweapons, /hgetweapon, /hstoreweapon, /hdeposit, /lockhouse, /furniture, /abandonhouse");
					    }
					    case 5:
					    {
					    	SendClientMessage(playerid, WHITE, "You have selected Cars. We have an array of useful commands for Cars, so review the following:");
				            SendClientMessage(playerid, GREY, "/abandoncar, /lock, /sellcar, /unmodcar, /parkcar, /colorcar, /callcar, /buyvehicle");
					    }
					    case 6:
					    {
					    	SendClientMessage(playerid, WHITE, "You have selected Jobs. We have an array of useful commands for Jobs, so review the following:");

							if(Player[playerid][Job] >= 1)
							{
							    switch(Jobs[Player[playerid][Job]][JobType])
							    {
							        case 1:
							        {
							            SendClientMessage(playerid, GREY, "/creategun, /getmats, /quitjob");
									}
							        case 2:
							        {
							            SendClientMessage(playerid, GREY, "/fixcar, /noscar, /quitjob");
							        }
							        case 3:
							        {
							            SendClientMessage(playerid, GREY, "/startrun, /loadtruck, /unloadtruck, /finishdelivery, /endrun, /quitjob");
							        }
							        case 4:
							        {
							            SendClientMessage(playerid, GREY, "/find, /findhouse, /profile, /quitjob");
							        }
							        case 5:
							        {
							            SendClientMessage(playerid, GREY, "/getsupplies, /sellsupplies, /quitjob");
							        }
							        case 6:
							        {
							            SendClientMessage(playerid, WHITE, "/quitjob");
							        }
							        case 7:
							        {
							            SendClientMessage(playerid, WHITE, "/clear, /quitjob");
							        }
							        case 8:
							        {
							            SendClientMessage(playerid, WHITE, "");
							        }
							        case 10:
							        {
							            SendClientMessage(playerid, WHITE, "/deliverpizza, /getpizzapay, /deliverpizza");
							        }
							    }
						    }
					    }
					    case 7:
					    {
					    	SendClientMessage(playerid, WHITE, "You have selected Groups. We have an array of useful commands for Groups, so review the following:");

				            if(Player[playerid][Group] >= 1)
				            {
				                switch(Groups[Player[playerid][Group]][CommandTypes])
				                {
				                    case 0:
				                    {
				                        SendClientMessage(playerid, GREY, "/g(roup), /quitgroup");
				                    }
				                    case 1:
				                    {
				                        SendClientMessage(playerid, GREY, "/stun, /arrest, /frisk, /uncuff, /detain, /recordcrime, /gate, /r(adio), /RCSD, /m(egaphone), /recordcheck, /door");
	                                    SendClientMessage(playerid, GREY, "/cuff, /ticket, /confiscate, /listmygroup, /fingerprint, /backup, /acceptbackup, /cancelbackup, /deployspikes, /destroyspikes, /deploybarrier, /destroybarrier");
	                                    SendClientMessage(playerid, GREY, "/deploybarrier2, /destroybarrier2, /d, /dgates, /wanted, /quitgroup, /disguise");

										if(Player[playerid][GroupRank] >= 4)
				                        {
				                            SendClientMessage(playerid, GREY, "/swatinv, /gov, /clotheslocker");
				                        }
				                    }
				                    case 2:
				                    {
				                        SendClientMessage(playerid, GREY, "/(g)roup, /pda, /listmygroup, /quitgroup");
				                    }
				                    case 3:
				                    {
				                        SendClientMessage(playerid, GREY, "/(r)adio, /heal, /(d)epartments, /listmygroup, /quitgroup");
				                    }
				                    case 4:
				                    {
				                        SendClientMessage(playerid, GREY, "/cuff, /stun, /frisk, /(d)epartments, /uncuff, /gov, /RCSD, /door, /elevator, /breakin, /gate");
				                        SendClientMessage(playerid, GREY, "/(r)adio, /confiscate, /freezebank, /unfreezebank, /listmygroup, /fingerprint, /dgates, /gate, /ss, /quitgroup");
				                    }
				                    case 5:
				                    {
				                        SendClientMessage(playerid, GREY, "/(g)roup, /(r)adio(m)essage, /listmygroup, /quitgroup");
				                    }
				                    case 11:
				                    {
				                        SendClientMessage(playerid, GREY, "/(r)adio, /travelannouncement, /gate, /quitgroup");
				                    }
				                }

				                if(Player[playerid][GroupRank] >= 9)
				                {
				                    SendClientMessage(playerid, GREY, "/invite, /uninvite, /motd, /safelocation, /groupsafewithdraw, /groupsafedeposit, /groupname, /changerank");

									if(Groups[Player[playerid][Group]][CommandTypes] == 0)
				                    {
				                    	SendClientMessage(playerid, GREY, "/togglegroupchat");
				                    }
				                }

				                if(Player[playerid][GroupRank] >= 10)
				                {
				                	SendClientMessage(playerid, GREY, "/disbandgroup, /remotewiretransfer, /remoteuninvite");
				                }
				            }
				            else
				            {
				                SendClientMessage(playerid, GREY, "/approve groupinvite");
				            }
					    }
					    case 8:
					    {
					        SendClientMessage(playerid, WHITE, "You have selected Phone. The phone is an easy to use in-game device, here are the commands to use it:");
					        SendClientMessage(playerid, GREY, "/call, /getnumber, /phone, /hangup");
						}
					    case 9:
					    {
					        SendClientMessage(playerid, WHITE, "You have selected Walkie Talkie. The Walkie Talkie is an easy to use in-game device, here are the commands to use it:");
					        SendClientMessage(playerid, GREY, "/wt, /setfrequency");
						}
					    case 10:
					    {
					        if(Player[playerid][VipRank] >= 1)
					        {
						        SendClientMessage(playerid, WHITE, "You have selected VIP. The VIP commands are only for you VIPs (donators, etc)");
						        SendClientMessage(playerid, GREY, "Level 1: /(v)ip, /togvip, /buyvehicle (extra models)");
	                            if(Player[playerid][VipRank] >= 2)
	                            {
	                                SendClientMessage(playerid, GREY, "Level 2: /colorcar (free)");
	                            }
							}
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You're not a VIP.");
					        }
						}
						case 11:
						{
						    if(Player[playerid][Tester] >= 1)
						    {
						        SendClientMessage(playerid, WHITE, "You have selected BETA:");
						        SendClientMessage(playerid, GREY, "/listtesters");
					        }
						}
					}

					SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
			    }
			    case 2365:
			    {
			        switch(listitem)
					{
					    case 0:
						{
						    if(Player[playerid][Money] >= 9)
						    {
						        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
						        {
							        Businesses[Player[playerid][InBusiness]][bVault] += 9;
							        Player[playerid][Money] -= 9;
							        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							        TextDrawShowForPlayer(playerid, SprunkTextDraw);
									SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
									SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
						    	}
						    	else
						    	{
						    	    SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
					    	}
					    }
					    case 1:
						{
						    if(Player[playerid][Money] >= 5)
						    {
						        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
						        {
							        Businesses[Player[playerid][InBusiness]][bVault] += 5;
							        Player[playerid][Money] -= 5;
							        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
									SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
									SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
				    			}
						    	else
						    	{
						    	    SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
							}
					    }
					    case 2:
						{
						    if(Player[playerid][Money] >= 1)
						    {
						        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
						        {
							        Businesses[Player[playerid][InBusiness]][bVault] += 1;
							        Player[playerid][Money] -= 1;
							        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
									SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
									Player[playerid][HadSprunk] = 1;
									TextDrawShowForPlayer(playerid, SprunkTextDraw);
					    		}
						    	else
						    	{
						    	    SendClientMessage(playerid, WHITE, "That item is out of stock.");
								}
					    	}
					    }
					}
			    }
			    case 969:
			    {
			        switch(listitem)
					{
					    case 0:
					    {
					        if(Player[playerid][Materials] >= 30)
					        {
					            new WeaponID = 8, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 30;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 1:
					    {
					        if(Player[playerid][Materials] >= 30)
					        {
					            new WeaponID = 15, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 30;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 2:
					    {
					        if(Player[playerid][Materials] >= 33)
					        {
					            new WeaponID = 7, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 33;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 3:
					    {
					        if(Player[playerid][Materials] >= 35)
					        {
					            new WeaponID = 5, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 35;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 4:
					    {
					        if(Player[playerid][Materials] >= 50)
					        {
					            new WeaponID = 6, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 50;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 5:
					    {
					        if(Player[playerid][Materials] >= 250)
					        {
					            new WeaponID = 22, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 250;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 6:
					    {
					        if(Player[playerid][Materials] >= 300)
					        {
					            new WeaponID = 23, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 300;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 7:
					    {
					        if(Player[playerid][Materials] >= 550)
					        {
					            new WeaponID = 25, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 550;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 8:
					    {
					        if(Player[playerid][Materials] >= 680)
					        {
					            new WeaponID = 24, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 680;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					            SendClientMessage(playerid, LIGHTRED, "Using this weapon in a drive-by will end up in a punishment.");
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 9:
					    {
					        if(Player[playerid][Materials] >= 850)
					        {
					            new WeaponID = 29, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 850;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 10:
					    {
					        if(Player[playerid][Materials] >= 900)
					        {
					            new WeaponID = 28, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 900;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 11:
					    {
					        if(Player[playerid][Materials] >= 1500)
					        {
					            new WeaponID = 30, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 1500;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 12:
					    {
					        if(Player[playerid][Materials] >= 2000)
					        {
					            new WeaponID = 31, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 2000;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					            SendClientMessage(playerid, LIGHTRED, "Using this weapon in a drive-by will end up in a punishment.");
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 13:
					    {
					        if(Player[playerid][Materials] >= 2450)
					        {
					            new WeaponID = 34, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 2450;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					            SendClientMessage(playerid, LIGHTRED, "Using this weapon in a drive-by will end up in a punishment.");
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }

					    case 14:
					    {
					        if(Player[playerid][Materials] >= 2550)
					        {
					            new WeaponID = 27, string[128], WeaponName[128];
					            GivePlayerWeaponEx(playerid, WeaponID);
					            Player[playerid][Materials] -= 2550;
					            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
					            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
					            SendClientMessage(playerid, WHITE, string);
					            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
					            NearByMessage(playerid, RPCOLOUR, string);
					            SendClientMessage(playerid, LIGHTRED, "Using this weapon in a drive-by will end up in a punishment.");
					        }
					        else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
					    }
						case 15:
						{
							if(Player[playerid][Materials] >= 300)
							{
								if(Player[playerid][CarryingVests] < 5)
								{
									Player[playerid][CarryingVests]++;
									new string[128];
									format(string, sizeof(string), "* %s has created a bulletproof vest from their materials.", GetName(playerid));
									NearByMessage(playerid, RPCOLOUR, string);
								}
								else
								{
									SendClientMessage(playerid, WHITE, "You can only have 5 vests on you at the time.");
								}
							}
							else
					        {
					        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					        }
						}
					}
			    }
			    case 3426:
			    {
	            	if(!IsPlayerConnectedEx(GetPlayerID(inputtext)))
	            	{
	            	    ShowPlayerDialog(playerid, 3426, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the name of the person you want the hitman to hit (must be an existing contract).", "Proceed", "Cancel");
	            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
	            	}
					else
					{
					    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					    {
					        if(Player[GetPlayerID(inputtext)][ContractPrice] >= 1)
					        {
					            new string[128];
					            format(string, sizeof(string), "You have been assigned to kill %s.", GetName(GetPlayerID(inputtext)));
					            SendClientMessage(Player[playerid][AssigningHitTo], ANNOUNCEMENT, string);
					            format(string, sizeof(string), "You have successfully assigned %s to assasinate %s.", GetName(Player[playerid][AssigningHitTo]), GetName(GetPlayerID(inputtext)));
					            SendClientMessage(playerid, WHITE, string);
					            Player[Player[playerid][AssigningHitTo]][PlayerToAssasinate] = GetPlayerID(inputtext);
					            Player[GetPlayerID(inputtext)][BeingAssasinated] = Player[playerid][AssigningHitTo];

					            format(string, sizeof(string), "%s has been assigned to kill %s, by %s.", GetName(Player[playerid][AssigningHitTo]), GetName(GetPlayerID(inputtext)), GetName(playerid));
					            GroupMessage(playerid, ANNOUNCEMENT, string);
					        }
					    }
					}
			    }
			    case 3427:
			    {
	            	if(!IsPlayerConnectedEx(GetPlayerID(inputtext)))
	            	{
	            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
	            	}
					else
					{
					    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					    {
					        if(Player[GetPlayerID(inputtext)][Group] == Player[playerid][Group])
					        {
					            if(Player[playerid][BeingAssasinated] == -1)
					            {
					            	new string[128];
					            	Player[playerid][AssigningHitTo] = GetPlayerID(inputtext);
					            	format(string, sizeof(string), "You are in the process of assigning %s to assasinate a hit.", GetName(GetPlayerID(inputtext)));
					            	SendClientMessage(playerid, WHITE, string);
					            	ShowPlayerDialog(playerid, 3426, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the name of the person you want the hitman to hit (must be an existing contract).", "Proceed", "Cancel");
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "That person is already on a contract.");
					            }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That person isn't in your group.");
					        }
					    }
					}
			    }
			    case 3428:
			    {
			        switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid, 6922, DIALOG_STYLE_LIST, "Official Clothing", "Recruit 1 (M)\nRecruit 1 (F)\nDeputy Sheriff I, II - Corporal\nSergeant (M)\nSergeant (F)\nLieutenant\nCaptain\nMajor - Undersheriff - Sheriff\nDeputy Sheriff I, II, Corporal, Lieutenant, Captain, Major, Undersheriff and Sheriff (F)", "Select", "Cancel");
					    case 1: ShowPlayerDialog(playerid, 6952, DIALOG_STYLE_LIST, "Miscellaneous", "SWAT (with Vest)\nCustom", "Select", "Cancel");
					}
			    }
			    case 6922:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
							if(Player[playerid][GroupRank] == 1)
							{
						        SetPlayerSkin(playerid, 124);
						        Player[playerid][LastSkin] = 124;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 1:
			            {
							if(Player[playerid][GroupRank] == 1)
							{
					        SetPlayerSkin(playerid, 191);
					        Player[playerid][LastSkin] = 191;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 2:
			            {
							if(Player[playerid][GroupRank] >= 2)
							{
					        SetPlayerSkin(playerid, 282);
					        Player[playerid][LastSkin] = 282;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 3:
			            {
							if(Player[playerid][GroupRank] >= 5)
							{
							SetPlayerSkin(playerid, 281);
					        Player[playerid][LastSkin] = 281;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
						}
			            case 4:
			            {
							if(Player[playerid][GroupRank] >= 5)
							{
					        SetPlayerSkin(playerid, 306);
					        Player[playerid][LastSkin] = 306;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 5:
			            {
							if(Player[playerid][GroupRank] >= 6)
							{
					        SetPlayerSkin(playerid, 310);
					        Player[playerid][LastSkin] = 310;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 6:
			            {
							if(Player[playerid][GroupRank] >= 7)
							{
					        SetPlayerSkin(playerid, 283);
					        Player[playerid][LastSkin] = 283;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 7:
			            {
					        if(Player[playerid][GroupRank] >= 8)
							{
							SetPlayerSkin(playerid, 288);
					        Player[playerid][LastSkin] = 288;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			            case 8:
			            {

							if(Player[playerid][GroupRank] > 2)
							{
							SetPlayerSkin(playerid, 309);
					        Player[playerid][LastSkin] = 309;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You are not the correct rank for this uniform!");
							}
			            }
			        }
			    }
			    case 5691:
			    {
			        new skinid = strval(inputtext);
			        if(skinid < 301)
			        {
			            Player[playerid][LastSkin] = skinid;
			            SetPlayerSkin(playerid, skinid);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "INVALID ID");
			        }
			    }
			    case 6952:
			    {
			        switch(listitem)
					{
					    case 0:
					    {
							if(SWATEnabled == 1)
							{
								SetPlayerSkin(playerid, 285);
								Player[playerid][LastSkin] = 285;
								SetPlayerArmour(playerid, 100);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "SWAT Locker not open!");
							}
					    }
					    case 1:
					    {
							ShowPlayerDialog(playerid, 5691, DIALOG_STYLE_INPUT, "Skin", "Type an ID between 0 and 300", "Done", "Cancel");
					    }
					}
			    }
			    case 3430:
			    {
	            	if(! IsPlayerConnectedEx(GetPlayerID(inputtext)))
	            	{
	            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
	            	}
					else
					{
					    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					    {
					        if(Player[GetPlayerID(inputtext)][PrisonID] == 2)
					        {
					            new string[128];
					            Player[GetPlayerID(inputtext)][PrisonDuration] = 0;
					            SendClientMessage(GetPlayerID(inputtext), WHITE, "You have been released from jail.");
								format(string, sizeof(string), "You have successfully released %s.", GetName(GetPlayerID(inputtext)));
								SendClientMessage(playerid, WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That player is either not jailed, or was by an admin.");
					        }
					    }
					}
			    }
			    case 6437:
			    {
	            	if(! IsPlayerConnectedEx(GetPlayerID(inputtext)))
	            	{
	            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
	            	}
					else
					{
					    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					    {
					        new string[128];
					        ClearCriminalRecord(GetPlayerID(inputtext));
					        format(string, sizeof(string), "%s from the %s has cleared your criminal record.", GetName(playerid), Groups[Player[playerid][Group]][GroupName]);
					        SendClientMessage(GetPlayerID(inputtext), WHITE, string);
					        format(string, sizeof(string), "%s has cleared %s's criminal record.", GetName(playerid), GetName(GetPlayerID(inputtext)));
					        GroupMessage(playerid, ANNOUNCEMENT, string);
					        Player[GetPlayerID(inputtext)][CriminalOffences] = 0;
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
					    }
					}
			    }
			    case 9922:
			    {
			        switch(listitem)
			        {
			            case 0: ShowPlayerDialog(playerid, 3431, DIALOG_STYLE_LIST, "Equipment", "Nitestick\nMace\nDeagle\nMP5\nShotgun\nTake All.", "Select", "Cancel");
			            case 1:
			            {
			                if(SWATEnabled == 1)
			                {
			                    ShowPlayerDialog(playerid, 2299, DIALOG_STYLE_LIST, "SWAT Equipment", "Tear Gas\nM4A1\nCombat Shotgun\nSniper Rifle\nCamera\nTake All.", "Select", "Cancel");
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "The SWAT inventory is currently unavailable.");
			                }
			            }
			        }
			    }
			    case 2299:
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			                SendClientMessage(playerid, WHITE, "You have withdrawn Tear Gas.");
			                GivePlayerWeaponEx(playerid, 17);

			            }
			            case 1:
			            {
			                SendClientMessage(playerid, WHITE, "You have withdrawn an M4A1.");
			                GivePlayerWeaponEx(playerid, 31);
			            }
			            case 2:
			            {
			                SendClientMessage(playerid, WHITE, "You have withdrawn an Combat Shotgun.");
			                GivePlayerWeaponEx(playerid, 27);
			            }
			            case 3:
			            {
							SendClientMessage(playerid, WHITE, "You have withdrawn an Sniper Rifle.");
			                GivePlayerWeaponEx(playerid, 34);
			            }
						case 4:
						{
							SendClientMessage(playerid, WHITE, "You have withdrawn a Camera.");
							GivePlayerWeaponEx(playerid, 43);
						}
						case 5:
						{
							if(Player[playerid][GroupRank] >= 5)
							{
								SendClientMessage(playerid, WHITE, "You have taken all SWAT weapons.");
								GivePlayerWeaponEx(playerid, 17);
								GivePlayerWeaponEx(playerid, 31);
								GivePlayerWeaponEx(playerid, 27);
								GivePlayerWeaponEx(playerid, 34);
								GivePlayerWeaponEx(playerid, 43);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "Only R5+ are allowed to take all SWAT weapons at once.");
							}
						}
			        }
			    }
			    case 3431:
			    {
			        switch(listitem)
					{
			        	case 0: GivePlayerWeaponEx(playerid, 3);
			        	case 1: GivePlayerWeaponEx(playerid, 41);
			        	case 2: GivePlayerWeaponEx(playerid, 24);
			        	case 3: GivePlayerWeaponEx(playerid, 29);
			        	case 4: GivePlayerWeaponEx(playerid, 25);
						case 5: GivePlayerWeaponEx(playerid, 3),GivePlayerWeaponEx(playerid, 41),GivePlayerWeaponEx(playerid, 24),GivePlayerWeaponEx(playerid, 29),GivePlayerWeaponEx(playerid, 25);
					}
			    }
			    case 3432:
			    {
			        switch(listitem)
					{
			        	case 0:
			        	{
			            	if(Player[playerid][CopDuty] == 1)
			            	{
			                	SendClientMessage(playerid, WHITE, "You are now off police duty.");
			                	Player[playerid][CopDuty] = 0;
			                	ResetPlayerWeaponsEx(playerid);
			            	}
			            	else
			            	{
			                	SendClientMessage(playerid, WHITE, "You are now on police duty.");
			                	Player[playerid][CopDuty] = 1;
			                	SetPlayerArmour(playerid, 100);
								SetPlayerHealth(playerid, 100);
			                }
			            }

	                    case 1: ShowPlayerDialog(playerid, 9922, DIALOG_STYLE_LIST, "Equipment", "Normal Equipment\nSWAT Equipment", "Select", "Cancel");
						case 2: if(Player[playerid][GroupRank] > 4)
						{
							ShowPlayerDialog(playerid, 3430, DIALOG_STYLE_INPUT, "Release a Suspect", "Please insert the suspect's name.", "Proceed", "Cancel");
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not a high enough rank!");
						}
			            case 3: ShowPlayerDialog(playerid, 3428, DIALOG_STYLE_LIST, "Official Clothing", "Official Clothing\nMiscellaneous\n", "Select", "Cancel");
			            case 4: if(Player[playerid][GroupRank] > 4)
						{
							ShowPlayerDialog(playerid, 6437, DIALOG_STYLE_INPUT, "Clear a Suspect", "Please insert the suspect's name.", "Proceed", "Cancel");
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not a high enough rank!");
						}
						case 5:
						{
						    ShowPlayerDialog(playerid, 7192, DIALOG_STYLE_INPUT, "Change Name", "Type a new name in here", "Choose", "Exit");
						}
			        }
			    }
			    case 7192:
			    {
                    format(Player[playerid][DUName], 255, "%s", inputtext);
				    SetPlayerName(playerid, Player[playerid][DUName]);
				    SendClientMessage(playerid, WHITE, "You have succesfully changed your name");
				}
				case 57423:
			    {
			        switch(listitem)
					{
			        	case 0:
			        	{
			            	if(Player[playerid][CopDuty] == 1)
			            	{
			                	SendClientMessage(playerid, WHITE, "You are now off police duty.");
			                	Player[playerid][CopDuty] = 0;
			            	}
			            	else
			            	{
			                	SendClientMessage(playerid, WHITE, "You are now on police duty.");
			                	Player[playerid][CopDuty] = 1;
			                	SetPlayerArmour(playerid, 100);
								SetPlayerHealth(playerid, 100);
			                }
			            }

	                    case 1: ShowPlayerDialog(playerid, 9922, DIALOG_STYLE_LIST, "Equipment", "Normal Equipment\nSWAT Equipment", "Select", "Cancel");
			            case 2: ShowPlayerDialog(playerid, 3428, DIALOG_STYLE_LIST, "Official Clothing", "Official Clothing\nMiscellaneous\n", "Select", "Cancel");
			        }
			    }

				case 2351:
				{
					switch(listitem)
					{
						case 0:
						{
							new string[128], Count;
							for(new i = 0; i < MAX_PLAYERS; i++)
							{

								SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
								if(Player[i][CopDuty] == 1)
								{
									Count++;
									format(string, sizeof(string), "%s %s", Player[i][GroupRank], GetName(i));
									SendClientMessage(playerid, GREY, string);
								}
								if(Count == 0)
								{
									SendClientMessage(playerid, GREY, "There are no officers currently on duty.");
								}
								SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
							}
						}
					}
				}

			    case 3433:
			    {
	    			switch(listitem)
					{
	            		case 0:
						{
				    		new string[128], Count;

				    		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

							for(new i = 0; i < MAX_PLAYERS; i++)
							{
							    if(IsPlayerConnectedEx(i))
							    {
						    		if(Player[i][ContractPrice] >= 1 && Player[i][BeingAssasinated] == -1)
						    		{
						        	    Count++;
						        		format(string, sizeof(string), "TARGET: %s | REASON: %s | PRICE: $%s.", GetName(i), Player[i][Contract], IntToFormattedStr(Player[i][ContractPrice]));
						           		SendClientMessage(playerid, GREY, string);
						    		}
					    		}
							}

							if(Count == 0)
							{
							    SendClientMessage(playerid, GREY, "No contracts are currently available.");
							}

							SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
	            		}
	            		case 1:
						{
				    		new string[128];
				    		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
							for(new i = 0; i < MAX_PLAYERS; i++)
							{
					    		if(Player[playerid][Group] == Player[i][Group] && IsPlayerConnectedEx(i))
					    		{
					    			switch(Player[i][GroupRank])
					    			{
					    	    		case 0:
					    	    		{
					    	        		format(string, sizeof(string), "%s (0): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName0], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    	   	 		case 1:
					    	    		{
					    	        		format(string, sizeof(string), "%s (1): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName1], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    	    		case 2:
					    	    		{
					    	        		format(string, sizeof(string), "%s (2): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName2], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    	    		case 3:
					    	    		{
					    	        		format(string, sizeof(string), "%s (3): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName3], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    	    		case 4:
					    	    		{
					    	        		format(string, sizeof(string), "%s (4): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName4], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    	    		case 5:
					    	    		{
					    	        		format(string, sizeof(string), "%s (5): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName5], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    	    		case 6:
					    	    		{
					    	       			format(string, sizeof(string), "%s (6): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName6], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
					    	    		}
					    			}

					    			SendClientMessage(playerid, GREY, string);
					    		}
							}
							SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
	            		}
	            		case 2:
						{
				    		new string[128], Count;

				    		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

							for(new i = 0; i < MAX_PLAYERS; i++)
							{
							    if(IsPlayerConnectedEx(i))
							    {
						    		if(Player[i][ContractPrice] >= 250000 && Player[i][BeingAssasinated] == -1)
						    		{
						        	    Count++;
						        		format(string, sizeof(string), "TARGET: %s | REASON: %s | PRICE: $%s.", GetName(i), Player[i][Contract],  IntToFormattedStr(Player[i][ContractPrice]));
						           		SendClientMessage(playerid, GREY, string);
						    		}
					    		}
							}

							if(Count == 0)
							{
							    SendClientMessage(playerid, GREY, "No contracts are currently available.");
							}

							SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
	            		}
	            		case 3:
						{
				    		new string[128];
	                		for(new i = 0; i < MAX_PLAYERS; i++)
	                		{
	                    		if(IsPlayerConnectedEx(i) && Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][Group] != 0)
	                    		{
	                        		format(string, sizeof(string), "%s (%s)", GetName(i), Groups[Player[i][Group]][GroupName]);
	                        		SendClientMessage(playerid, WHITE, string);
	                    		}
	                		}
	            		}
	            		case 4:
						{
							ShowPlayerDialog(playerid, 3434, DIALOG_STYLE_LIST, "Hitman Weapons", "Knife\nDesert Eagle\nBody Armour\nSniper Rifle", "Select", "Cancel");
	            		}
	            		case 5:
	            		{
	            		    if(Player[playerid][GroupRank] >= 4)
	            		    {
	            		    	ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the Contractors name that you wish to assign a hit to.", "Proceed", "Cancel");
	            			}
	            			else
	            			{
	            			    SendClientMessage(playerid, WHITE, "You must be a rank 4+ to assign contracts.");
	            			}
						}
	            	}
			    }
				case 3434:
				{
			    	switch(listitem)
					{
					    case 0:
						{
						    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						    {
								GivePlayerWeaponEx(playerid, 4);
								SendClientMessage(playerid, WHITE, "You have taken a knife!");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
							}
						}
					    case 1:
						{
						    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						    {
								GivePlayerWeaponEx(playerid, 24);
								SendClientMessage(playerid, WHITE, "You have taken a deagle!");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
							}
						}
					    case 2:
						{
						    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						    {
								SetPlayerArmour(playerid, 100);
								SendClientMessage(playerid, WHITE, "You have gotten body armour.");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
							}
						}
						case 3:
						{
						    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						    {
								GivePlayerWeaponEx(playerid, 34);
								SendClientMessage(playerid, WHITE, "You have taken a sniper rifle.");
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
							}
						}
					}
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "Please enter a valid input.");
		}
	}
	return 1;
}

public OnGameModeExit()
{
    djson_GameModeExit();
    removeObj();
    removeTxt();

	if(CurGMX == 0)
	{
	    SaveGeneralData();
	}
	else
	{
		SaveHouses();
		SaveFactions();
		//SaveFurni();
		SaveGroups();
		SaveBusinesses();
		SaveJobs();
		//SaveWeedPlants();
		SaveVehicles();
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(Player[playerid][CarLinkID] == vehicleid)
	{
	    Player[playerid][CarPaintJobID] = paintjobid;
	}

	if(Player[playerid][Car2LinkID] == vehicleid)
	{
	    Player[playerid][Car2PaintJobID] = paintjobid;
	}

	if(Player[playerid][Car3LinkID] == vehicleid)
	{
	    Player[playerid][Car3PaintJobID] = paintjobid;
	}
}

public ClearCriminalRecord(playerid)
{
	format(Player[playerid][Offence1], 255, "None");
	format(Player[playerid][Offence2], 255, "None");
	format(Player[playerid][Offence3], 255, "None");
	format(Player[playerid][Offence4], 255, "None");
	format(Player[playerid][Offence5], 255, "None");
	format(Player[playerid][Offence6], 255, "None");
	SetPlayerWantedLevel(playerid, 0);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(Player[playerid][Tutorial] >= 1)
	{
	    return 0;
	}
	else if(Player[playerid][Authenticated] == 1)
	{
		SetSpawnInfo(playerid, 0, 299, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 90, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}
	else
	{
	    return 0;
	}
}

public OnPlayerRequestSpawn(playerid)
{
	if(Player[playerid][Authenticated] == 0)
	{
	    SendClientMessage(playerid, GREY, "You have to login first.");
	    Kick(playerid);
	    return 0;
	}
	else if(Player[playerid][Tutorial] >= 1)
	{
	    SendClientMessage(playerid, GREY, "You have to go through the tutorial first.");
	    return 0;
	}
	else
	{
		return 1;
	}
}

public OnPlayerConnect(playerid)
{
	//TogglePlayerClock(playerid, 1);
	new hour, minute, seconds;
	gettime(hour, minute, seconds);
	SetPlayerTime(playerid, hour, minute);
	SweepProgress[playerid] = -1;
	//SavePlayerD2[playerid] = SetTimerEx("SavePlayerD", 900000, true, "i", playerid);

	Player[playerid][OwnedPlotID] = -1;

	RemoveObjects(playerid);

	// Gas Stations
	SetPlayerMapIcon( playerid, 15, GasStation1X, GasStation1Y, GasStation1Z, 36, 0, MAPICON_LOCAL);
	SetPlayerMapIcon( playerid, 16, GasStation2X, GasStation2Y, GasStation2Z, 36, 0, MAPICON_LOCAL);
	SetPlayerMapIcon( playerid, 17, GasStation3X, GasStation3Y, GasStation3Z, 36, 0, MAPICON_LOCAL);
	SetPlayerMapIcon( playerid, 18, GasStation4X, GasStation4Y, GasStation4Z, 36, 0, MAPICON_LOCAL);
	SetPlayerMapIcon( playerid, 18, GasStation5X, GasStation5Y, GasStation5Z, 36, 0, MAPICON_LOCAL);
	SetPlayerMapIcon( playerid, 18, GasStation6X, GasStation6Y, GasStation6Z, 36, 0, MAPICON_LOCAL);

	for(new i=0; i < MAX_BUSINESSES; i++)
	{
		new mapiconid = 50+i;
		switch(Businesses[i][bType])
		{
	  		case 1:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 17, 0, MAPICON_LOCAL);
	  		}
	  		case 2:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 45, 0, MAPICON_LOCAL);
	  		}
	  		case 3:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 48, 0, MAPICON_LOCAL);
	  		}
	  		case 4:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 60, 0, MAPICON_LOCAL);
	  		}
	  		case 6:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 55, 0, MAPICON_LOCAL);
	  		}
	  		case 11:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 24, 0, MAPICON_LOCAL);
	  		}
	  		case 12:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 10, 0, MAPICON_LOCAL);
	  		}
	  		case 13:
	  		{
	  		    SetPlayerMapIcon(playerid, mapiconid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 55, 0, MAPICON_LOCAL);
	  		}
   		}
 	}

	//Bank - Creek
	SetPlayerMapIcon(playerid, 0, BankExtX, BankExtY, BankExtZ, 52, 0, MAPICON_GLOBAL);

	if(! IsPlayerNPC(playerid))
	{
		new string[128], Name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, Name, sizeof(Name));
		format(string, sizeof(string), "Accounts/%s.ini", Name);

		Reset(playerid);
		SetPlayerColor(playerid, GREY);
		TotalConnections++;
		PlayersOn++;

		if(PlayersOn > MaxVisitors)
		{
		    MaxVisitors = PlayersOn;
		    UpdateAnalysis();
		}

		// Website textdraw commented out as there's no website specified for the release. Simply uncomment the code which defines the textdraw at the top
		// and remove these 2 comments and uncomment the line below. ...Oh, and the part where the variable 'Textdraw1' is declared.
		//TextDrawShowForPlayer(playerid, Textdraw1);

		new query[200];

		format(query, sizeof(query), "SELECT * FROM `users` WHERE NormalName = '%s' LIMIT 1", GetName(playerid));
		mysql_query(mysql, query);
		mysql_store_result();
		new rows = mysql_num_rows();
		mysql_store_result();
		if(rows == 1)
		{
		    ShowPlayerDialog(playerid, 15001, DIALOG_STYLE_PASSWORD, "Login", "Welcome to Evolved Gaming  Roleplay\n\nYou have an account, please enter your password to authenticate.", "Login", "");
		}
		if(!rows)
		{
		    ShowPlayerDialog(playerid, 15000, DIALOG_STYLE_PASSWORD, "Register", "Please fill in a valid password to save your progress.", "Register", "");
		}
		mysql_free_result();
		/*if(fexist(string))
		{
			ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to Evolved Gaming  Roleplay\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");
			SendClientMessage(playerid, WHITE, "This name is registered. If you're the account owner, please login with your account credentials to proceed.");
		}
		else
		{
			new playernamesplit[3][MAX_PLAYER_NAME];
			split(Name, playernamesplit, '_');

			if (!strlen(playernamesplit[0]) || !strlen(playernamesplit[1]))
			{
			    new NameStr[MAX_PLAYER_NAME];
			    format(NameStr, sizeof(NameStr), "NONRPNAME%d", playerid);
			    SetPlayerName(playerid, NameStr);

			    printf("[system] %s has been forced to the name change menu.", Name);
			    //TogglePlayerControllable(playerid, false);
			    ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
			    SendClientMessage(playerid, WHITE, "Your name is not valid, please pick a new one. Refrain from using tags, please and include 1 underscore.");
			}
			else
			{
				ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_PASSWORD, "Registration", "Please enter your password to register your new account.", "Register", "Cancel");
				SendClientMessage(playerid, WHITE, "This username is not registered. If you register, you'll automatically be logged in!");
			}
		}*/
	}
	else
	{
	    Reset(playerid);
	    printf("[system] NPC %s has connected to the server.", GetName(playerid));
	    Player[playerid][Authenticated] = 1;
    	SpawnPlayer(playerid);
	    NPCs++;
	}
	if(Player[playerid][FactionID] == 0 && Player[playerid][FactionRank] != 0)
	{
	    Player[playerid][FactionRank] = 0;
	}
	printf("%s has connected.");
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	IsUsingMask[playerid] = 0;
	/*if(Logged[playerid] == 1)
    {
        new query[200], pname[24];
        GetPlayerName(playerid, pname, 24);
        format(query, sizeof(query), "UPDATE playerdata SET score=%d, money=%d WHERE user='%s'", score, money, pname);
        mysql_query(mysql, query);
    }SAVING*/
	KillTimer(SavePlayerD2[playerid]);
	//SetTimerEx("DisconnectSave", 1000, false, "i", playerid);
	/*DestroyVehicle(Player[playerid][CarLinkID]);
	DestroyVehicle(Player[playerid][Car2LinkID]);
	DestroyVehicle(Player[playerid][Car3LinkID]);

	new string3[255];
 	format(string3, sizeof(string3), string3, Plots[Player[playerid][OwnedPlotID]][PlotPrice], Plots[Player[playerid][OwnedPlotID]][PlotID]);
  	Update3DTextLabelText(Plots[Player[playerid][OwnedPlotID]][PlotText], GREEN, string3);
   	Player[playerid][OwnedPlotID] = -1;

   	DestroyVehicle(Player[playerid][CarLinkID]);
   	DestroyVehicle(Player[playerid][Car2LinkID]);
   	DestroyVehicle(Player[playerid][Car3LinkID]);

	for(new ob = 0; ob < MAX_SOBJECTS; ob++)
 	{
  		if(Objects[playerid][ob][LinkID] != 0)
		{
			new objID = Objects[playerid][ob][LinkID];
			DestroyObject(objID);
			printf("[system][INFO] Object ID %d has been despawned", objID);

			DestroyObject(Objects[playerid][ob][LinkID]);
			Objects[playerid][ob][LinkID] = 0;
			Objects[playerid][ob][ID] = 0;
			Objects[playerid][ob][Model] = 0;
		}
	}*/

	if(IsPlayerNPC(playerid))
	{
	    NPCs--;
	    printf("[system] NPC %s has disconnected from the server.", GetName(playerid));
	}
	else
	{
		new string[128], Name[MAX_PLAYER_NAME], car1, car2, car3;

		GetPlayerName(playerid, Name, sizeof(Name));
		SavePlayerData(playerid);
		SaveVehicleHealth(playerid);
		SaveVehicleFuel(playerid);
		
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(Vehicles[i][GameID] == Player[playerid][CarLinkID])
			{
				car1 = i;
			}
			if(Vehicles[i][GameID] == Player[playerid][Car2LinkID])
			{
				car2 = i;
			}
			if(Vehicles[i][GameID] == Player[playerid][Car3LinkID])
			{
				car3 = i;
			}
		}
		
		Player[playerid][Car1Trunk1] = Vehicles[car1][CarTrunk1];
		Player[playerid][Car1Trunk2] = Vehicles[car1][CarTrunk2];
		Player[playerid][Car1Trunk3] = Vehicles[car1][CarTrunk3];
		Player[playerid][Car2Trunk1] = Vehicles[car2][CarTrunk1];
		Player[playerid][Car2Trunk2] = Vehicles[car2][CarTrunk2];
		Player[playerid][Car2Trunk3] = Vehicles[car2][CarTrunk3];
		Player[playerid][Car3Trunk1] = Vehicles[car3][CarTrunk1];
		Player[playerid][Car3Trunk2] = Vehicles[car3][CarTrunk2];
		Player[playerid][Car3Trunk3] = Vehicles[car3][CarTrunk3];
		Player[playerid][Car1Pot] = Vehicles[car1][CarPot];
		Player[playerid][Car2Pot] = Vehicles[car2][CarPot];
		Player[playerid][Car3Pot] = Vehicles[car3][CarPot];
		Player[playerid][Car1Cocaine] = Vehicles[car1][CarCocaine];
		Player[playerid][Car2Cocaine] = Vehicles[car2][CarCocaine];
		Player[playerid][Car3Cocaine] = Vehicles[car3][CarCocaine];
		Player[playerid][Car1Materials] = Vehicles[car1][CarMaterials];
		Player[playerid][Car2Materials] = Vehicles[car2][CarMaterials];
		Player[playerid][Car3Materials] = Vehicles[car3][CarMaterials];

		Vehicles[car1][CarTrunk1] = 0;
		Vehicles[car1][CarTrunk2] = 0;
		Vehicles[car1][CarTrunk3] = 0;
		Vehicles[car1][CarPot] = 0;
		Vehicles[car1][CarCocaine] = 0;
		Vehicles[car1][CarMaterials] = 0;
		Vehicles[car2][CarPot] = 0;
		Vehicles[car2][CarCocaine] = 0;
		Vehicles[car2][CarMaterials] = 0;
		Vehicles[car3][CarPot] = 0;
		Vehicles[car3][CarCocaine] = 0;
		Vehicles[car3][CarMaterials] = 0;
		Vehicles[car2][CarTrunk1] = 0;
		Vehicles[car2][CarTrunk2] = 0;
		Vehicles[car2][CarTrunk3] = 0;
		Vehicles[car3][CarTrunk1] = 0;
		Vehicles[car3][CarTrunk2] = 0;
		Vehicles[car3][CarTrunk3] = 0;
		
		Vehicles[car1][GameID] = 0;
		Vehicles[car2][GameID] = 0;
		Vehicles[car3][GameID] = 0;

		PlayersOn--;

		if(CurGMX == 0)
		{
		    if(Spectator[playerid][SpecSpectatingPlayer] == -1)
		    {
				switch(reason)
				{
				    case 0:
					{
						format(string, sizeof(string), "%s has timed out from the server.", Name);
				    }

					case 1:
					{
						format(string, sizeof(string), "%s has left the server.", Name);
					}

				    case 2:
					{
						format(string, sizeof(string), "%s has been either kicked or banned from the server.", Name);
					}
				}

				NearByMessage(playerid, ANNOUNCEMENT, string);
			}

			if(Player[playerid][AdminDuty] == 1)
			{
				Player[playerid][AdminDuty] = 0;
				format(string, sizeof(string), "%s has been taken off admin duty (disconnect)", Name);
				SendToAdmins(ADMINORANGE, string, 0);
				SetPlayerColor(playerid, WHITE);

				if(Player[playerid][AdminLevel] >= 3)
				{
					SetPlayerHealth(playerid, 100);
				}

				if(strlen(Player[playerid][NormalName]) > 1)
				{
					SetPlayerName(playerid, Player[playerid][NormalName]);
				}

				SetPlayerSkin(playerid, Player[playerid][LastSkin]);
			}

			if(Player[playerid][Group] >= 1)
			{
				switch(reason)
				{
				    case 0:
				    {
					    format(string, sizeof(string), "%s from your group has disconnected (timeout).", Name);
					    GroupMessage(playerid, ANNOUNCEMENT, string);
				    }
				    case 1:
				    {
					    format(string, sizeof(string), "%s from your group has disconnected (quit).", Name);
					    GroupMessage(playerid, ANNOUNCEMENT, string);
				    }
				    case 2:
				    {
					    format(string, sizeof(string), "%s from your group has disconnected (banned/kicked).", Name);
					    GroupMessage(playerid, ANNOUNCEMENT, string);
				    }
			    }
			}

			if(Player[playerid][IsAtEvent] == 1)
			{
			    ResetPlayerWeapons(playerid);
			    EC--;

				switch(reason)
				{
				    case 0:
				    {
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (timeout).", Name);
						MessageToEventPlayers(YELLOW, string);
				    }
				    case 1:
				    {
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (quit).", Name);
						MessageToEventPlayers(YELLOW, string);
				    }
				    case 2:
				    {
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (banned/kicked).", Name);
						MessageToEventPlayers(YELLOW, string);
				    }
			    }
			}

			if(Player[playerid][Authenticated] == 1)
			{
			    if(Player[playerid][PlayerCarModel] >= 1)
			    {
			    	GetOwnedCarMods(playerid);
					GetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
					GetVehicleZAngle(Player[playerid][CarLinkID], Player[playerid][CarZAngle]);
					DestroyVehicle(Player[playerid][CarLinkID]);
					Player[playerid][CarLinkID] = 0;
					OwnedCarCount--;
					CarCount--;
				}

			    if(Player[playerid][PlayerCarModel2] >= 1)
			    {
					GetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
					GetVehicleZAngle(Player[playerid][Car2LinkID], Player[playerid][Car2ZAngle]);
					DestroyVehicle(Player[playerid][Car2LinkID]);
					Player[playerid][Car2LinkID] = 0;
					OwnedCarCount--;
					CarCount--;
				}

			    if(Player[playerid][PlayerCarModel3] >= 1)
			    {
					GetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
					GetVehicleZAngle(Player[playerid][Car3LinkID], Player[playerid][Car3ZAngle]);
					DestroyVehicle(Player[playerid][Car3LinkID]);
					Player[playerid][Car3LinkID] = 0;
					OwnedCarCount--;
					CarCount--;
				}

				if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tied] >= 1)
				{
				    Player[playerid][PrisonDuration] = 720;
				    Player[playerid][PrisonID] = 2;
				    format(Player[playerid][Note], 128, "You have automatically been prisoned for disconnecting whilst cuffed / tied.");
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(Player[i][PendingHandshake] == playerid)
					{
					    Player[i][PendingHandshake] = -1;
					}

				    if(Player[i][PendingCarReceival] == playerid)
				    {
				        Player[i][PendingCarReceival] = -1;
				    }
				}

				if(Player[playerid][BeingSpyedOnBy] != -1)
				{
				    format(string, sizeof(string), "The player you were spying on (%s) has disconnected", Name);
				    SendClientMessage(Player[playerid][BeingSpyedOnBy], WHITE, string);
				    Player[playerid][BeingSpyedOnBy] = -1;
				}

			    if(Player[playerid][PendingProposal] != -1)
			    {
			        format(string, sizeof(string), "%s has disconnected (the person you have a pending proposal with).", Name);
			        SendClientMessage(Player[playerid][PendingProposal], WHITE, string);
			        Player[playerid][PendingProposal] = -1;
			    }

			    if(Player[playerid][AdminDuty] >= 1)
			    {
			        SetPlayerName(playerid, Player[playerid][NormalName]);
				    format(string, sizeof(string), "%s is now off Admin Duty (disconnected).", Name);
			        SendToAdmins(ADMINORANGE, string, 1);
			    }

			    if(Player[playerid][IsAtEvent] >= 1)
			    {
					Player[playerid][LastX] = SpawnX;
					Player[playerid][LastY] = SpawnY;
					Player[playerid][LastZ] = SpawnZ;
					Player[playerid][LastWorld] = 0;
					Player[playerid][LastInterior] = 0;
					SavePlayerData(playerid);
					printf("[system] %s has disconnected during an event, so they've been warped to the newbie spawn.", Name);
			    }
			    else
			    {
					GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
					Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
				}
			}

		}
	}
	return 1;
}

public MessageToEventPlayers(colour, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnectedEx(i) && Player[i][IsAtEvent] >= 1)
	    {
	        SendClientMessage(i, colour, string);
	    }
	}
	return 1;
}

public PickupMessages()
{
	new string[128], Float: playX, Float: playY, Float: playZ;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerInRangeOfPoint(i, 9, playX, playY, playZ))
	    {
		    if(IsPlayerConnectedEx(i) && IsPlayerSpawned(i))
		    {
		        if(IsPlayerInRangeOfPoint(i, 5, ArrestPosX, ArrestPosY, ArrestPosZ))
		        {
		        	GameTextForPlayer(i, "~r~Arrest ~w~Location", 3500, 3);
				}

				if(IsPlayerInRangeOfPoint(i, 5, BoatShopX, BoatShopY, BoatShopZ))
				{
				    GameTextForPlayer(i, "~r~Boat Shop~n~~w~/buyboat", 3500, 3);
				}
				
				if(IsPlayerInRangeOfPoint(i, 5, SellFishX, SellFishY, SellFishZ))
				{
				    GameTextForPlayer(i, "~r~Sell Fish Location~n~~w~/sellfish", 3500, 3);
				}

				for(new h = 0; h < sizeof(Businesses); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Businesses[h][bExteriorX], Businesses[h][bExteriorY], Businesses[h][bExteriorZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == 0)
				        {
				        	if(strcmp(Businesses[h][bOwner], "Nobody", true) == 0)
				        	{
				        	    if(Businesses[h][bPrice] == -1)
				        	    {
									format(string, sizeof(string), "~w~ Business ~y~ %d (%s) ~n~ ~w~Unavailable.", h, Businesses[h][bName]);
									GameTextForPlayer(i, string, 3500, 3);
				        	    }
				        	    else
				        	    {
									format(string, sizeof(string), "~w~ Business ~y~ %d (%s) ~n~ ~w~Available to buy for %d (/buybusiness).", h, Businesses[h][bName], Businesses[h][bPrice]);
									GameTextForPlayer(i, string, 3500, 3);
								}
							}
							else
							{
								format(string, sizeof(string), "~w~ Business ~y~ %d (%s) ~n~ ~w~ ~r~ ~k~~PED_DUCK~ ~w~ to enter", h, Businesses[h][bName]);
								GameTextForPlayer(i, string, 3500, 3);
							}
						}
				    }
				}
				for(new h = 0; h < sizeof(Houses); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == 0)
				        {
				        	if(strcmp(Houses[h][hOwner], "Nobody", true) == 0)
				        	{
				        	    if(Houses[h][HousePrice] == -1)
				        	    {
									format(string, sizeof(string), "~w~ House ~y~ %d ~n~ ~w~ Unavailable.", h, Houses[h][HousePrice]);
									GameTextForPlayer(i, string, 3500, 3);
								}
								else
								{
									if(Player[i][VipRank] < 3)
									{
									    format(string, sizeof(string), "~w~ House ~y~ %d ~n~ Available to buy for %d (/buyhouse)", h, Houses[h][HousePrice]);
										GameTextForPlayer(i, string, 3500, 3);
									}
									else
									{
									    format(string, sizeof(string), "~w~ House ~y~ %d ~n~ Available to buy for %d (/buyhouse) ~n~ ]25 percent off due to VIP", h, Houses[h][HousePrice]);
										GameTextForPlayer(i, string, 3500, 3);
									}
								}
							}
							else
							{
								format(string, sizeof(string), "~w~ House ~y~ %d ~n~ ~w~ ~r~ ~k~~PED_DUCK~ ~w~ to enter", h);
								GameTextForPlayer(i, string, 3500, 3);
							}
						}
				    }
				}
				for(new h = 0; h < sizeof(Jobs); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Jobs[h][JobJoinPosX], Jobs[h][JobJoinPosY], Jobs[h][JobJoinPosZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Jobs[h][JobJoinPosWorld] && GetPlayerInterior(i) == Jobs[h][JobJoinPosInterior])
				        {
							format(string, sizeof(string), "~w~Job ~y~%s ~w~ ~n~ /joinjob", Jobs[h][JobName]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				    if(IsPlayerInRangeOfPoint(i, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Jobs[h][JobMiscLocationOneWorld] && GetPlayerInterior(i) == Jobs[h][JobMiscLocationOneInterior])
				        {
							format(string, sizeof(string), "~w~ %s", Jobs[h][JobMiscLocationOneMessage]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				    if(IsPlayerInRangeOfPoint(i, 5, Jobs[h][JobMiscLocationTwoX], Jobs[h][JobMiscLocationTwoY], Jobs[h][JobMiscLocationTwoZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Jobs[h][JobMiscLocationTwoWorld] && GetPlayerInterior(i) == Jobs[h][JobMiscLocationTwoInterior])
				        {
							format(string, sizeof(string), "~w~ %s", Jobs[h][JobMiscLocationTwoMessage]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				}

				for(new h = 0; h < sizeof(Groups); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Groups[h][HQExteriorX], Groups[h][HQExteriorY], Groups[h][HQExteriorZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == 0)
				        {
							format(string, sizeof(string), "~w~Group ~y~%s's ~w~ HQ. ~n~~n~ ~r~ ~k~~PED_DUCK~ ~w~ to enter", Groups[h][GroupName]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				    if(IsPlayerInRangeOfPoint(i, 5, Groups[h][SafeX], Groups[h][SafeY], Groups[h][SafeZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Groups[h][SafeWorld])
				        {
							format(string, sizeof(string), "~w~Group ~y~%s's ~w~ Safe.", Groups[h][GroupName]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}

				}
		    }
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	SetTimerEx("VehIDCheck", 1000, true, "i", playerid);
	LoadVehicleFuel(playerid);

	new vID1 = Player[playerid][CarLinkID];
	new vID2 = Player[playerid][Car2LinkID];
	new vID3 = Player[playerid][Car3LinkID];

	if(vID1 > 0)
	{
	    SetVehicleHealth(vID1, Player[playerid][CarHealth]);
	}
	if(vID2 > 0)
	{
	    SetVehicleHealth(vID2, Player[playerid][Car2Health]);
	}
	if(vID3 > 0)
	{
	    SetVehicleHealth(vID3, Player[playerid][Car3Health]);
	}

	if(NewlyRegistered[playerid] == 1)
	{
	    SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
	}
	else if(NewlyRegistered[playerid] == 2)
	{
	    SetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
	}

	SetTimer("HungerCheck", 30000, true);

    Hunger[playerid] = CreateProgressBar(549.00, 20.00, 60.0, 4.50, -16776961, 100.0);

	if(Player[playerid][PlayerHunger] < 0)
	{
	    SetPlayerHealth(playerid, 0);
	}
    if(Player[playerid][AdminDuty] == 0)
	{
		SetPlayerColor(playerid, WHITE);
	}
    if(Player[playerid][PreLoadedAnims] == 0)
    {
	    PreloadAnimLib(playerid,"BOMBER");
	   	PreloadAnimLib(playerid,"RAPPING");
	    PreloadAnimLib(playerid,"SHOP");
	   	PreloadAnimLib(playerid,"BEACH");
	   	PreloadAnimLib(playerid,"SMOKING");
	    PreloadAnimLib(playerid,"FOOD");
	    PreloadAnimLib(playerid,"ON_LOOKERS");
	    PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"PED");
		Player[playerid][PreLoadedAnims] = 1;
	}

    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

	if(Player[playerid][Authenticated] == 1)
	{
    	if(Player[playerid][PrisonDuration] >= 1)
    	{
		    Player[playerid][InGroupHQ] = 0;
		    Player[playerid][InBusiness] = 0;
		    Player[playerid][InHouse] = 0;

    	    if(Player[playerid][PrisonID] == 1)
    	    {
    	        SetPlayerInterior(playerid, Prison1Int);
    	        SetPlayerPos(playerid, Prison1X, Prison1Y, Prison1Z);
    	        SetPlayerVirtualWorld(playerid, Prison1World);
    	    }
    	    else if(Player[playerid][PrisonID] == 2)
    	    {
    	        SetPlayerInterior(playerid, Prison2Int);
    	        SetPlayerPos(playerid, Prison2X, Prison2Y, Prison2Z);
    	        SetPlayerVirtualWorld(playerid, Prison2World);
    	    }
    	}
    	else
    	{
			GivePlayerSavedWeapons(playerid);
			SetPlayerWeather(playerid, GlobalWeather);

			if(Player[playerid][AdminDuty] == 1)
			{
			    SetPlayerHealth(playerid, 60000);
			}

			if(Player[playerid][IsAtEvent] >= 1)
			{
			    new string[128];
			    ResetPlayerWeapons(playerid);
			    GivePlayerSavedWeapons(playerid);
				new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
  				SetPlayerHealth(playerid, MathsFlaw);
				MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
				SetPlayerArmour(playerid, MathsFlaw);
			    SendClientMessage(playerid, WHITE, "Thanks for playing in one of our events. You have been fully refunded.");
			    SetPlayerPos(playerid, eventX[playerid], eventY[playerid], eventZ[playerid]);
			    Player[playerid][Hospitalized] = 0;

			    if(Player[playerid][LastKiller] == INVALID_PLAYER_ID)
			    {
			    	format(string, sizeof(string), "%s is no longer in the event, reason: Death.", GetName(playerid));
				    MessageToEventPlayers(YELLOW, string);
			    }
			    else
			    {
				    format(string, sizeof(string), "%s is no longer in the event, reason: Death (killed by %s).", GetName(playerid), GetName(Player[playerid][LastKiller]));
				    MessageToEventPlayers(YELLOW, string);
			    }
			}

			if(Player[playerid][Hospitalized] >= 1 && Player[playerid][PrisonDuration] < 1)
			{
			    if(Player[playerid][AdminDuty] == 1)
			    {
			        Player[playerid][Hospitalized] = 0;
				    SetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
				    SendClientMessage(playerid, WHITE, "As you're on admin duty, you will not be hospitalized.");
			    }
			    else
			    {
			        if(Player[playerid][PrisonDuration] < 1)
			        {
			            Player[playerid][LastWorld] = 0;
			            Player[playerid][LastInterior] = 0;
			            Player[playerid][PlayerHunger] = 100;
					    ResetPlayerWeaponsEx(playerid);
					    SetPlayerHealth(playerid, 100);
					    SetPlayerInterior(playerid, 0);
					    SetPlayerVirtualWorld(playerid, 0);
					    SetPlayerDrunkLevel(playerid, 50000);
				    	Player[playerid][HospitalTime] = 1;
					    SetPlayerColor(playerid, GREY);
					    SetPlayerVirtualWorld(playerid, playerid+59);
						TogglePlayerControllable(playerid, false);
						SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
				   		SetPlayerCameraPos(playerid, -833.5241, -1358.8575, 86.9054);
						SetPlayerCameraLookAt(playerid, -830.8118, -1360.3612, 87.0289);
						SendClientMessage(playerid, ANNOUNCEMENT, "You have blacked out. You're currently undergoing hospital treatment.");
						SendClientMessage(playerid, WHITE, "You will be released when you have recovered.");
					}
				}
			}
			else if(Player[playerid][Hospitalized] == -1)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
				SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
				SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
				SetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			    TogglePlayerControllable(playerid, true);
			    Player[playerid][Hospitalized] = 0;
			    Player[Player[playerid][LastKiller]][IsHacker] = 0;
			}
			else
			{
			    if(Player[playerid][IsAtEvent] >= 1)
			    {
			    	Player[playerid][IsAtEvent] = 0;
				    TogglePlayerControllable(playerid, true);
				    SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 0);
			    }
			    else
			    {
				    TogglePlayerControllable(playerid, true);
			    	SetPlayerInterior(playerid, Player[playerid][LastInterior]);
			    	SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);

				    if(GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 || GetPlayerVirtualWorld(playerid) >= 55000 && GetPlayerVirtualWorld(playerid) < 65000 || GetPlayerVirtualWorld(playerid) >= 65000 && GetPlayerVirtualWorld(playerid) < 75000)
				    {
				        TextDrawShowForPlayer(playerid, ExitTextdraw);
			    	}
		    	}
			}
		}
	}

 	Player[playerid][ResetTimer] = 1;
	return 1;
}

public GivePlayerSavedWeapons(playerid)
{
	if(Player[playerid][WepSlot3] == 26)
	{
	    Player[playerid][WepSlot6] = 0;
	    ResetPlayerWeapons(playerid);
	}

	GivePlayerWeapon(playerid, Player[playerid][WepSlot0], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot1], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot2], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot3], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot4], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot5], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot6], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot7], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot8], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot9], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot10], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot11], 99999);
    return 1;
}

public ResetPlayerWeaponsEx(playerid)
{
    ResetPlayerWeapons(playerid);
    Player[playerid][WepSlot0] = 0;
	Player[playerid][WepSlot1] = 0;
	Player[playerid][WepSlot2] = 0;
	Player[playerid][WepSlot3] = 0;
	Player[playerid][WepSlot4] = 0;
	Player[playerid][WepSlot5] = 0;
	Player[playerid][WepSlot6] = 0;
	Player[playerid][WepSlot7] = 0;
	Player[playerid][WepSlot8] = 0;
	Player[playerid][WepSlot9] = 0;
	Player[playerid][WepSlot10] = 0;
	Player[playerid][WepSlot11] = 0;
	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li, len, aNum;
	while(i <= strlen(strsrc))
	{
		if(strsrc[i] == delimiter || i == strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	DestroyProgressBar(Hunger[playerid]);
	SavePlayerData(playerid);
	SaveVehicleHealth(playerid);
	SaveVehicleFuel(playerid);

	new string[128];

	if(Player[playerid][AdminDuty] != 1)
	{
		Player[playerid][Hospitalized] = 1;
	}

	if(Player[playerid][IsInAnimation] >= 1)
	{
	    Player[playerid][IsInAnimation] = 0;
	    TextDrawHideForPlayer(playerid, AnimationTextDraw);
	}

	Player[playerid][LastKiller] = killerid;

	if(Player[killerid][AdminLevel] < 1)
	{
        if(GetDistanceBetweenPlayers(killerid, playerid) > 25 && reason > 1 && reason < 100 && IsPlayerConnectedEx(killerid) && killerid != playerid)
        {
            new weapon[128];
            GetWeaponName(reason, weapon, sizeof(weapon));
            format(string, sizeof(string), "WARNING: %s has killed %s; from a long distance, using a %s.", GetName(killerid), GetName(playerid), weapon);
	    	SendToAdmins(ADMINORANGE, string, 1);
	    	print(string);
        }
	    if(reason == 49)
	    {
	    	format(string, sizeof(string), "WARNING: %s has car-rammed %s to death.", GetName(killerid), GetName(playerid));
	    	SendToAdmins(ADMINORANGE, string, 1);
	    	print(string);
	    }
	    if(reason == 50)
	    {
	        if(IsAHelicopter(GetPlayerVehicleID(killerid)))
	        {
	    		format(string, sizeof(string), "WARNING: %s has heli-killed %s.", GetName(killerid), GetName(playerid));
	    		SendToAdmins(ADMINORANGE, string, 1);
	    		print(string);
	    	}
	    	else
	    	{
	    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
	    	    {
	    			format(string, sizeof(string), "WARNING: %s has car-parked %s.", GetName(killerid), GetName(playerid));
	    			SendToAdmins(ADMINORANGE, string, 1);
	    			print(string);
	    		}
	    		else
	    		{
	    			format(string, sizeof(string), "WARNING: %s has drivershot %s.", GetName(killerid), GetName(playerid));
	    			SendToAdmins(ADMINORANGE, string, 1);
	    			print(string);
	    		}
	    	}
	    }
	}

	Player[playerid][ResetTimer] = 1;

	if(Player[playerid][BeingAssasinated] == killerid)
	{
	    format(string, sizeof(string), "%s has successfully assasinated contract %s (for $%d).", GetName(killerid), GetName(playerid), Player[playerid][ContractPrice]);
		GroupMessage(killerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "[HITMAN] %s has earned $%d from killing contract %s.", GetName(killerid), Player[playerid][ContractPrice], GetName(playerid));
		MoneyLog(string);
		Player[killerid][SuccessfulHits]++;
		Player[killerid][Money] += Player[playerid][ContractPrice]/2;
	    Groups[Player[killerid][Group]][SafeMoney] += Player[playerid][ContractPrice]/2;
	    format(Player[playerid][Contract], 255, "None");
	    Player[playerid][Money] -= Player[playerid][ContractPrice]/2;
	    Player[playerid][BeingAssasinated] = -1;
	    Player[killerid][PlayerToAssasinate] = -1;
	    format(string, sizeof(string), "You have been attacked by a Hitman. The Hitman also took $%d.", Player[playerid][ContractPrice]/2);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		Player[playerid][ContractPrice] = 0;
	}
	else if(Player[killerid][BeingAssasinated] == playerid)
	{
	    format(string, sizeof(string), "You have been attacked by a Hitman and killed them. You were chased because: %s. You earned $%d.", Player[playerid][Contract], Player[playerid][ContractPrice]/2);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "[HITMAN] %s has earned $%d for killing the hitman (%s).", GetName(killerid), Player[playerid][ContractPrice], GetName(playerid));
		MoneyLog(string);
		Player[playerid][FailedHits]++;
	    format(string, sizeof(string), "%s has failed to assasinate contract %s (for $%d).", GetName(playerid), GetName(killerid), Player[playerid][ContractPrice]);
		GroupMessage(playerid, ANNOUNCEMENT, string);
		Player[killerid][Money] += Player[killerid][ContractPrice]/2;
	    Groups[Player[playerid][Group]][SafeMoney] += Player[killerid][ContractPrice]/2;
	    format(Player[killerid][Contract], 255, "None");
	    Player[playerid][Money] -= Player[killerid][ContractPrice];
	    Player[killerid][BeingAssasinated] = -1;
	    Player[playerid][PlayerToAssasinate] = -1;
	    format(string, sizeof(string), "You have failed to assasinate %s, therefore you have lost $%d.", GetName(killerid), Player[playerid][ContractPrice]);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		Player[killerid][ContractPrice] = 0;
	}

	if(Player[playerid][IsAtEvent] >= 1)
	{
	    EC--;
    	if(EC == 1)
    	{
    	    format(string, sizeof(string), "Congratulations to %s - they've won the event!", GetName(killerid));
    	    ResetPlayerWeapons(killerid);
    	    SendClientMessageToAll(LIGHTRED, string);
    	    ResetPlayerWeapons(playerid);
    	    CurrentEvent = 0;
			new MathsFlaw = floatround(Player[killerid][LastHealth], floatround_ceil);
  			SetPlayerHealth(killerid, MathsFlaw);
			MathsFlaw = floatround(Player[killerid][LastArmour], floatround_ceil);
			SetPlayerArmour(killerid, MathsFlaw);
			Player[killerid][Hospitalized] = 0;
			Player[killerid][IsAtEvent] = 0;
			TogglePlayerControllable(killerid, true);
			Player[killerid][ResetTimer] = 1;
			ResetPlayerWeapons(killerid);
			GivePlayerSavedWeapons(killerid);
    	    EC = 0;
    	    SetPlayerPos(killerid, eventX[killerid], eventY[killerid], eventZ[killerid]);
    	    SetPlayerInterior(killerid, SpawnInt);
    	    SetPlayerVirtualWorld(killerid, SpawnWorld);
    	    SendClientMessage(killerid, WHITE, "Thanks for playing fair! Congratulations on winning the event.");

    	    if(Anticheat == -1)
    	    {
    	        Anticheat = 1;
    	    }
    	}
	}
	else
	{
	    if(Anticheat == 1 && CurrentEvent == 0)
	    {
	        if(Player[killerid][IsAtEvent] >= 1)
	        {
	            Player[killerid][IsAtEvent] = 0;
	            ResetPlayerWeapons(killerid);
	            GivePlayerSavedWeapons(killerid);
	            Player[playerid][LastWorld] = 0;
	            Player[playerid][LastInterior] = 0;
	        }
	        else
	        {
		        if(IsPlayerSpawned(killerid))
		        {
		            switch(GetPlayerWeapon(killerid))
		            {
					    case 0, 1:
					    {
					        if(Player[killerid][WepSlot0] != 1 && GetPlayerWeapon(killerid) == 1)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 2, 3, 4, 5, 6, 7, 8, 9:
					    {
					        if(Player[killerid][WepSlot1] != 2 && GetPlayerWeapon(killerid) == 2)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 3 && GetPlayerWeapon(killerid) == 2)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 4 && GetPlayerWeapon(killerid) == 4)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 5 && GetPlayerWeapon(killerid) == 5)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 6 && GetPlayerWeapon(killerid) == 6)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 7 && GetPlayerWeapon(killerid) == 7)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 8 && GetPlayerWeapon(killerid) == 8)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 9 && GetPlayerWeapon(killerid) == 9)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 22, 23, 24:
					    {
					        if(Player[killerid][WepSlot2] != 22 && GetPlayerWeapon(killerid) == 22)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot2] != 23 && GetPlayerWeapon(killerid) == 23)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot2] != 24 && GetPlayerWeapon(killerid) == 24)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 25, 26, 27:
					    {
					        if(Player[killerid][WepSlot3] != 26 && GetPlayerWeapon(killerid) == 26)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot3] != 27 && GetPlayerWeapon(killerid) == 27)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 28, 29, 32:
					    {
					        if(Player[killerid][WepSlot4] != 28 && GetPlayerWeapon(killerid) == 28)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot4] != 29 && GetPlayerWeapon(killerid) == 29)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot4] != 32 && GetPlayerWeapon(killerid) == 32)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 30, 31:
					    {
					        if(Player[killerid][WepSlot5] != 30 && GetPlayerWeapon(killerid) == 30)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot5] != 31 && GetPlayerWeapon(killerid) == 31)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 33, 34:
					    {
					        if(Player[killerid][WepSlot6] != 34 && GetPlayerWeapon(killerid) == 34)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot6] != 33 && GetPlayerWeapon(killerid) == 33)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 35, 36, 37, 38:
					    {
					        if(Player[killerid][WepSlot7] != 35 && GetPlayerWeapon(killerid) == 35)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot7] != 36 && GetPlayerWeapon(killerid) == 36)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot7] != 37 && GetPlayerWeapon(killerid) == 37)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot7] != 38 && GetPlayerWeapon(killerid) == 38)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 16, 17, 18, 39:
					    {
					        if(Player[killerid][WepSlot8] != 16 && GetPlayerWeapon(killerid) == 16)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot8] != 17 && GetPlayerWeapon(killerid) == 17)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot8] != 18 && GetPlayerWeapon(killerid) == 18)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot8] != 39 && GetPlayerWeapon(killerid) == 39)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 41, 42, 43:
					    {
					        if(Player[killerid][WepSlot9] != 41 && GetPlayerWeapon(killerid) == 41)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot9] != 42 && GetPlayerWeapon(killerid) == 42)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot9] != 43 && GetPlayerWeapon(killerid) == 43)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 10, 11, 12, 13, 14, 15:
					    {
					        if(Player[killerid][WepSlot10] != 10 && GetPlayerWeapon(killerid) == 10)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot10] != 11 && GetPlayerWeapon(killerid) == 11)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot10] != 12 && GetPlayerWeapon(killerid) == 13)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
	     				    else if(Player[killerid][WepSlot10] != 13 && GetPlayerWeapon(killerid) == 13)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
	 				        else if(Player[killerid][WepSlot10] != 14 && GetPlayerWeapon(killerid) == 14)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot10] != 15 && GetPlayerWeapon(killerid) == 15)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 44, 45, 46:
					    {
					        if(Player[killerid][WepSlot11] != 44 && GetPlayerWeapon(killerid) == 44)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot11] != 45 && GetPlayerWeapon(killerid) == 45)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot11] != 46 && GetPlayerWeapon(killerid) == 46)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
		            }
		        }
	        }
	    }

		if(Player[playerid][PrisonDuration] >= 1)
		{
		    Player[playerid][Money] -= 9;
		}
		else
		{
			if(Player[playerid][AdminDuty] != 1)
			{
			    if(Player[killerid][IsHacker] == 1)
			    {
			        SendClientMessage(playerid, WHITE, "It seems you were killed by a Hacker. Your weapons will be refunded and you will not be hospitalized.");
			        Player[playerid][Hospitalized] = -1;

					Spectator[playerid][SpecPlayerInterior] = SpawnInt;
					Spectator[playerid][SpecPlayerAngle] = 0.00;
					Spectator[playerid][SpecPlayerWorld] = 0;
					Spectator[playerid][SpecPlayerX] = SpawnX;
					Spectator[playerid][SpecPlayerY] = SpawnY;
					Spectator[playerid][SpecPlayerZ] = SpawnZ;
			    }
			    else
			    {
					Player[playerid][Hospitalized] = 1;
				}
			}
	    }
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	printf("[DEBUG] Vehicle %d has spawned!", vehicleid);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(Player[i][CarLinkID] != vehicleid && Player[i][Car2LinkID] != vehicleid && Player[i][Car3LinkID] != vehicleid)
	    {
	        fuel[vehicleid] = 35;
	        if(Vehicles[vehicleid][CarGroup] != 0)
	        {
	            new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(Vehicles[vehicleid][GameID], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(Vehicles[vehicleid][GameID], engine, lights, alarm, 1, bonnet, boot, objective);
	        }
	    }
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public LiteralGroupMessage(group, colour, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i))
	   	{
	   		if(Player[i][Group] == group)
	   		{
	   		    SendClientMessage(i, colour, string);
	   		}
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[512];

	if(CurGMX == 2)
	{
	    SendClientMessage(playerid, WHITE, "Please wait until the server has completely restarted.");
	    return 0;
	}


	if(! strcmp(text, "Next", true))
	{
		if(Player[playerid][Tutorial] >= 1)
		{
		    if(Player[playerid][ServerTut] >= 1)
		    {
		        switch(Player[playerid][ServerTut])
		        {
		            case 1:
		            {
		                SetPlayerCameraPos(playerid, 625.077514, -1226.489501, 27.801343);
		                SetPlayerCameraLookAt(playerid, 591.953002, -1232.312011, 17.801343);
		                TogglePlayerControllable(playerid, false);

		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "The Bank");
					    SendClientMessage(playerid, WHITE, "The Bank is a primary location on the server, within this building you can withdraw, deposit & receive money.");
					    SendClientMessage(playerid, WHITE, "The commands in the bank are: /bdeposit, /bwithdraw");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
		            case 2:
		            {
		                SetPlayerCameraPos(playerid, 575.757690, -1210.189331, 18.196769);
		                SetPlayerCameraLookAt(playerid, 562.488952, -1262.038330, 17.196769);
		                TogglePlayerControllable(playerid, false);

		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "The Vehicle Dealership");
					    SendClientMessage(playerid, WHITE, "The Vehicle Dealership is a very popular business, and the only one of its kind. You can buy your OWN vehicles");
					    SendClientMessage(playerid, WHITE, "in here. These vehicles stick to your account, they're spawned when you're online and they're despawned when you");
					    SendClientMessage(playerid, WHITE, "are offline - however, they respawn when you log back in. If you modify these at modshops, they modifications remain");
					    SendClientMessage(playerid, WHITE, "even when you logoff! You can find out more about owned vehicles using /help, once you've spawned.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
		            case 3:
		            {
		                SetPlayerCameraPos(playerid, 831.919311, -1318.614257, 13.240310);
		                SetPlayerCameraLookAt(playerid, 741.028442, -1416.087402, 13.240311);
		                TogglePlayerControllable(playerid, false);

		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Market");
					    SendClientMessage(playerid, WHITE, "Market is one of the most popular areas in our server, a lot of people hang around here, and new players spawn");
					    SendClientMessage(playerid, WHITE, "just around the corner! You can sell items here by roleplaying, and you can even buy items, from Weapons to Vehicles.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
		            case 4:
		            {
		                SetPlayerCameraPos(playerid, 614.961791, -1487.695922, 18.746559);
		                SetPlayerCameraLookAt(playerid, 614.736694, -1477.698486, 14.746559);
		                TogglePlayerControllable(playerid, false);

		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Legal Jobs");
					    SendClientMessage(playerid, WHITE, "We've bunched all of the legal jobs for the server in to this little area, run over to an 'i' icon for the ");
					    SendClientMessage(playerid, WHITE, "job titles, etc. The illegal jobs are slightly harder to find.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
					case 5:
					{
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Okay, so we're almost done.");
					    SendClientMessage(playerid, WHITE, "Please fill in these important bits of information, before we can let you proceed.");
					    ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
					    Player[playerid][ServerTut] = 0;
					    SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    return 0;
					}
		        }
		    }

		    if(Player[playerid][RPTutStep] >= 1)
		    {
		        switch(Player[playerid][RPTutStep])
		        {
		            case 1:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "IC and OOC");
					    SendClientMessage(playerid, WHITE, "IC and OOC are two prime terms you'll come across whilst roleplaying.");
					    SendClientMessage(playerid, WHITE, "IC - In Character: Everything that you're roleplaying is IC.");
					    SendClientMessage(playerid, WHITE, "OOC - Out of Character: Computer issues, real-life-related things are OOC.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 2:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Metagaming");
					    SendClientMessage(playerid, WHITE, "This is the process of mixing OOC information with IC information.");
		 				SendClientMessage(playerid, WHITE, "This is a regular thing that newbies experience; example: Responding to an OOC question IC. ");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 3:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Powergaming");
					    SendClientMessage(playerid, WHITE, "This is the process of executing an unrealistic action / forcing RP upon another player.");
		 				SendClientMessage(playerid, WHITE, "Such as: /me becomes superman and makes Justin_Bieber poke him");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 4:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Hacking");
					    SendClientMessage(playerid, WHITE, "This is the process of using third-party tools to modify your game play or others.");
		 				SendClientMessage(playerid, WHITE, "Hacking Tools are NOT allowed at any time, not even our administrators are allowed to use them.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 5:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Deathmatching");
					    SendClientMessage(playerid, WHITE, "This is the process of killing somebody without a valid IC reason.");
		 				SendClientMessage(playerid, WHITE, "For example, killing someone because they insulted you OOC. A common abbreviation for deathmatching is 'DMing'.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 6:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Revenge Killing");
					    SendClientMessage(playerid, WHITE, "This is the process of killing somebody who has just killed you.");
		 				SendClientMessage(playerid, WHITE, "You can only do this, if you have an IC link to who just killed you (for example, a friend was present when you were ");
		 				SendClientMessage(playerid, WHITE, "attacked, they told you when you respawned from hospital). If you're not informed, that is RKing (Revenge Killing)");
		 				SendClientMessage(playerid, WHITE, "As you lose 30 minutes of memory, each time you die (become severely injured).");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 7:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Administrators / Admins");
					    SendClientMessage(playerid, WHITE, "Administrators are a part of the server's staff team. They actively help players out and handle reports.");
		 				SendClientMessage(playerid, WHITE, "Administrators are usually the most active of the game, and you can contact them using out /(re)port tool.");
		 				SendClientMessage(playerid, WHITE, "Quite a lot of the time, our administrators are busy helping other players out, but they're usually very friendly");
		 				SendClientMessage(playerid, WHITE, "and do their best to help as many people out as possible. You can check if there any online, by using /admins.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 8:
		            {
		                ShowPlayerDialog(playerid, 105, DIALOG_STYLE_LIST, "OUTDATED choose NO", "Yes, please\nNo, thanks.", "Select", "Cancel");
		                Player[playerid][RPTutStep] = 0;
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Okay, we're done with the boring stuff. Would you like to participate in our server tutorial?");
		 				SendClientMessage(playerid, WHITE, "This tutorial section is focussed on explaining server locations, jobs and other bits.");
		 				SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
                        return 0;
					}
		        }
	        }
	    }
	}

	if(Player[playerid][CellphoneConsole] != -1)
	{
	    if(Player[playerid][CellphoneConsole] != 911)
	    {
		    format(string, sizeof(string), "[Phone] [%s Accent] Someone says: %s", Player[playerid][Accent], text);
		    NearByMessage(playerid, GREY, string);
		    SendClientMessage(Player[playerid][CellphoneConsole], GREY, string);
		    ICChatLog(string);
	    }
	    else
	    {
	        new txtstr[128];
		    format(txtstr, sizeof(txtstr), "[Phone] [%s Accent] Someone says: %s", Player[playerid][Accent], text);
		    NearByMessage(playerid, GREY, txtstr);
		    ICChatLog(string);

	        switch(Player[playerid][NineOneOneStep])
	        {
	            case 0:
	            {
			        if(!strcmp(text, "RCSD", true))
			        {
			            SendClientMessage(playerid, WHITE, "You've selected the RCSD - How may we help you?");
			            SendClientMessage(playerid, GREY, "Please report the crime you called about.");
			            Player[playerid][NineOneOneStep] = 1;
			        }
			        else if(!strcmp(text, "RCFMD", true))
			        {
			            SendClientMessage(playerid, WHITE, "You've selected the RCFMD - How may we help you?");
			            SendClientMessage(playerid, GREY, "Please describe the current scene!");
			            Player[playerid][NineOneOneStep] = 10;
			        }
			        else
			        {
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SendClientMessage(playerid, WHITE, "Unrecognized line. The call has been terminated.");
			        }
		        }
		        case 1:
		        {
		            if(strlen(text) >= 1)
		            {
			            format(Player[playerid][ActiveCrimeReport], 255, "%s", text);
			            Player[playerid][NineOneOneStep] = 2;
			            SendClientMessage(playerid, WHITE, "Please report the person who is comitting the crime! Say 'Unsure' if you're unsure.");
			            NearByMessage(playerid, GREY, txtstr);
		            }
		            else
		            {
		                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
     			        Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
		            }
		        }
		        case 2:
		        {
			        if(IsPlayerConnectedEx(GetPlayerID(text)))
			        {
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			            format(string, sizeof(string), "911: %s has reported %s for %s", GetName(playerid), GetPlayerID(text), Player[playerid][ActiveCrimeReport]);
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnectedEx(i))
						   	{
						   		if(Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 4 || Groups[Player[i][Group]][CommandTypes] == 6)
						   		{
						   		    new str[255];
						   		    format(str, sizeof(str), "Tracked from: %s | Number: %d", location, Player[playerid][PhoneN]);
						   		    SendClientMessage(i, RED, string);
						   		    SendClientMessage(i, RED, str);
						   		}
							}
						}

			            format(string, sizeof(string), "Thank you for reporting %s. The situation will be investigated!");
			            SendClientMessage(playerid, WHITE, string);
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;

			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			        }
			        else if(!strcmp(text, "Unsure", true))
			        {
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			            format(string, sizeof(string), "911: %s has reported a crime: %s", GetName(playerid), Player[playerid][ActiveCrimeReport], location);

						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnectedEx(i))
						   	{
						   		if(Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][CopDuty] == 1)
						   		{
						   		    new str[255];
						   		    format(str, sizeof(str), "Tracked from: %s | Number: %d", location, Player[playerid][PhoneN]);
						   		    SendClientMessage(i, RED, string);
						   		    SendClientMessage(i, RED, str);
						   		    if(Player[i][AttendingBackupCall] == -1 && Player[playerid][Checkpoint] == 0)
						   		    {
							   		    GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
							   		    SetPlayerCheckpoint(i, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 25.0);
							   		    Player[i][Checkpoint] = 1;
							   		    SendClientMessage(i, WHITE, "A checkpoint has been set at the caller's location.");
									}
						   		}
							}
						}

			            format(string, sizeof(string), "Thank you for reporting %s. The situation will be investigated!");
			            SendClientMessage(playerid, WHITE, string);
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;

			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			        }
			        else
			        {
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			            SendClientMessage(playerid, WHITE, "Name not recognized on the database of San Andreas Citizens.");
			        }
		        }
		        case 10:
		        {
			    	if(strlen(text) >= 1)
			        {
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			            SendClientMessage(playerid, WHITE, "Thank you for calling. A unit will be dispatched shortly!");
     			        Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			            format(string, sizeof(string), "911 [RCFMD]: %s has reported: %s (tracked from %s)", GetName(playerid), text, location);

						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnectedEx(i))
						   	{
						   		if(Groups[Player[i][Group]][CommandTypes] == 4)
						   		{
						   		    SendClientMessage(i, RED, string);
						   		}
							}
						}
			    	}
			    	else
			    	{
     			        Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			    	}
		        }
	        }
	    }
	}
	else
	{
		if(strcmp(text, "Yes", true) == 0 && Player[playerid][PendingProposal] >= 1)
		{
		    if(Player[Player[playerid][PendingProposal]][Money] >= 10000 && Businesses[Player[playerid][InBusiness]][bType] == 9)
		    {
		        Player[Player[playerid][PendingProposal]][Money] -= 10000;
		        Businesses[Player[playerid][InBusiness]][bVault] += 10000;
			    new str[128];
			    SendClientMessage(playerid, WHITE, "You have accepted the proposal!");
			    format(str, sizeof(str), "%s has accepted your proposal! You are now married!", GetName(Player[playerid][PendingProposal]));
			    SendClientMessage(Player[playerid][PendingProposal], WHITE, string);
			    format(Player[playerid][MarriedTo], 255, "%s", GetName(Player[playerid][PendingProposal]));
			    format(Player[Player[playerid][PendingProposal]][MarriedTo], 255, "%s", GetName(playerid));
	            Player[playerid][PendingProposal] = -1;
            }
            else
            {
                SendClientMessage(playerid, WHITE, "The wedding can't be performed as the player you're marrying doesn't have $10,000. Or you're not in a church!");
            }
		}

		if(Player[playerid][Tutorial] >= 1)
		{
		    SendClientMessage(playerid, WHITE, "Please finish the tutorial first.");
		}
		else
		{
			if(Player[playerid][Authenticated] == 0)
			{
		    	SendClientMessage(playerid, GREY, "You must login first.");
			}
			if(Player[playerid][Muted] != 0)
			{
			    SendClientMessage(playerid, GREY, "You're unable to speak as you're muted or prisoned.");
			}
			else
			{
			    if(strlen(text) >= 128)
			    {
			        SendClientMessage(playerid, WHITE, "Your message must be shorter than 128 characters.");
			    }
			    else
			    {
			        if(Player[playerid][PrisonID] != 1)
			        {
						if(Player[playerid][AdminDuty] == 1)
						{
							if(Player[playerid][AdminLevel] < 3)
							{
								format(string, sizeof(string), "((Admin {00BD03}%s{CECECE} says: %s))", GetName(playerid), text);
								NearByMessage(playerid, GREY, string);
								ICChatLog(string);
							}
							else
							{
								if(Player[playerid][AdminLevel] == 3 || Player[playerid][AdminLevel] == 4)
								{
									format(string, sizeof(string), "((Admin {C4BE00}%s{CECECE} says: %s))", GetName(playerid), text);
									NearByMessage(playerid, GREY, string);
									ICChatLog(string);
								}
								else
								{
									if(Player[playerid][AdminLevel] > 4)
									{
										format(string, sizeof(string), "((Admin {C40000}%s{CECECE} says: %s))", GetName(playerid), text);
										NearByMessage(playerid, GREY, string);
										ICChatLog(string);
									}
								}
							}
						}
						if(Player[playerid][AdminDuty] == 0)
						{
							new vid = GetPlayerVehicleID(playerid);
							new ictextstring[256];
							if(vid > 0)
							{
								if(WindowStatus[vid] == 0) // Open
								{
									format(ictextstring, sizeof(ictextstring), "[%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
									NearByMessage(playerid, WHITE, ictextstring);
									ICChatLog(ictextstring);
								}
								else if(WindowStatus[vid] == 1) // closed
								{
									for(new i = 0; i < MAX_PLAYERS; i++)
									{
										if(IsPlayerInVehicle(i, vid))
										{
											format(ictextstring, sizeof(ictextstring), "[%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
											SendSplitMessage(i, WHITE, ictextstring);
										}
									}
								}
							}
							else
							{
								format(ictextstring, sizeof(ictextstring), "[%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
								NearByMessage(playerid, WHITE, ictextstring);
								ICChatLog(ictextstring);
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
					}
				}
			}
		}
	}
	return 0;
}

public GroupMessage(playerid, colour, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i))
	   	{
	   		if(Player[i][Group] == Player[playerid][Group])
	   		{
	   		    SendClientMessage(i, colour, string);
	   		}
		}
	}
	return 1;
}

public NearByMessage(playerid, colour, string[])
{
	new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i) && IsPlayerSpawned(playerid))
	   	{
	   		GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
	   		if(IsPlayerInRangeOfPoint(i, 12, PlayerX, PlayerY, PlayerZ))
	   		{
			    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
	    	    {
	    			SendSplitMessage(i, colour, string);
	    		}
	    	}
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    SetPlayerCheckpoint(Player[playerid][GCPID], fX, fY, fZ, 10.0);
	SendClientMessage(Player[playerid][GCPID], YELLOW, "You have been given a checkpoint by a member of staff.");
	Player[playerid][GCPID] = 501;
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(IsPlayerConnectedEx(playerid))
	{
	    if(Player[playerid][Muted] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't use any commands whilst you are muted.");
			return 0;
		}
	    else
	    {

	        /*if(strfind(cmdtext, "[myid]", true))
	        {
	            new tmpstr[4];
	            format(tmpstr, sizeof(tmpstr), "%d", playerid);
	            cmdtext[128] = str_replace("[myid]", tmpstr, cmdtext, substr_count("[myid]", cmdtext));
	        }*/

	        if(Player[playerid][AdminLevel] >= 1 && strlen(Player[playerid][AdminName]) == 0)
	        {
	            SendClientMessage(playerid, WHITE, "You must have your admin name set first.");
	            return 0;
	        }
	        else
	        {
			    if(Player[playerid][AdminLevel] >= 1 && Player[playerid][PINAuth] == 0)
			    {
			        SendClientMessage(playerid, WHITE, "You must authenticate with your admin PIN first.");
			        return 0;
			    }
			    else
			    {
					Player[playerid][SpamCount]++;

					if(Player[playerid][SpamCount] >= 3 && Player[playerid][AdminLevel] >= 1 && Player[playerid][AdminLevel] < 5)
					{
					    if(strfind(cmdtext, "ban", true) != -1 || strfind(cmdtext, "kick", true) != -1 || strfind(cmdtext, "warn", true) != -1 || strfind(cmdtext, "set", true) != -1)
					    {
					    	new string[128], Name[MAX_PLAYER_NAME];
						    new hour, minute, second, day, year, month;
						    GetPlayerName(playerid, Name, sizeof(Name));
					        gettime(hour, minute, second);
					        getdate(year, month, day);
					        #pragma unused second
						    new IP[21];
						    GetPlayerIp(playerid, IP, sizeof(IP));
							format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | SPAMMING | System", day, month, year, hour, minute, IP, Name);
							BanLog(string);
					    	format(string, sizeof(string), "Ban: %s has been auto-banned, defined reason: Spamming (ban/kick/warn/set).", Name);
					    	SendClientMessageToAll(LIGHTRED, string);
					       	Player[playerid][Banned] = 4;
					       	Player[playerid][AdminDuty] = 0;
							print(string);
							Ban(playerid);
							return 0;
						}
						else
						{
						    Kick(playerid);
						}
					}

					if(substr_count(".", cmdtext, true) >= 3 && substr_count(":", cmdtext, true) >= 1)
					{
					    new string[128], tmp;
					    tmp = strfind(cmdtext, ":");
					    if(tmp != -1)
					    {
					        format(string, sizeof(string), "WARNING: %s may be server-advertising (%s).", GetName(playerid), cmdtext);
					        SendToAdmins(ADMINORANGE, string, 1);
					        return 0;
				        }
					}

					if(CurGMX == 2)
					{
					    SendClientMessage(playerid, WHITE, "Please wait until the server has completely restarted.");
					    return 0;
					}
					else
					{
					    if(Player[playerid][Tutorial] >= 1 && Player[playerid][AdminLevel] < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You may not use commands whilst in the tutorial.");
					        return 0;
					    }
					    else
					    {
		     				printf("[command] %s (%d) executes: %s", GetName(playerid), playerid, cmdtext);
							return 1;
				    	}
				    }
			    }
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "Please authenticate first.");
	    return 0;
	}
}

stock strtolower(string[])
{
    new
	    retStr[255],
	    i,
		j;

	while ((j = string[i]))  retStr[i++] = chrtolower(j);
    retStr[i] = '\0';
    return retStr;
}

stock substr_count(substring[], string[], bool:ignorecase = false, startpos = 0)
{
	new ncount, start = strfind(string, substring, ignorecase, startpos);

	while(start >- 1)
	{
		start = strfind(string, substring, ignorecase, start + strlen(substring));
		ncount++;
	}

	return ncount;
}

stock AdminWeaponWarning(playerid)
{
	if(Player[playerid][AdminLevel] < 1)
	{
	    if(! IsPlayerInAnyVehicle(playerid))
	    {
			new string[128], WepName[128], Name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, Name, sizeof(Name));
			GetWeaponName(GetPlayerWeapon(playerid), WepName, sizeof(WepName));
			format(string, sizeof(string), "WARNING: %s [ID: %d] may possibly be weapon hacking (%s).", Name, playerid, WepName);
			SendToAdmins(ADMINORANGE, string, 1);

			print(string);

			Player[playerid][AnticheatWarns]++;
			Player[playerid][ACWarnTime] = 1;

			if(Player[playerid][AnticheatWarns] >= MAX_WEAPON_HACK_WARNINGS)
			{
				AntiCheatBan(playerid);
			    Player[playerid][AnticheatWarns] = 0;
			    Player[playerid][ACWarnTime] = 0;
			}
		}
	}
}

public AntiC()
{
	if(CurrentEvent == 0)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnectedEx(i) && GetPlayerWeapon(i) > 1 && Player[i][AdminLevel] < 1 && IsPlayerSpawned(i))
		    {
		        if(Player[i][WepSlot1] != 2 && GetPlayerWeapon(i) == 2)
		        {
		            if(GetPlayerWeapon(i) == 2)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 3 && GetPlayerWeapon(i) == 3)
		        {
		            if(GetPlayerWeapon(i) == 3)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 4 && GetPlayerWeapon(i) == 4)
		        {
	           		AdminWeaponWarning(i);
		        }
		        else if(Player[i][WepSlot1] != 5 && GetPlayerWeapon(i) == 5)
		        {
		            if(GetPlayerWeapon(i) == 5)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 6 && GetPlayerWeapon(i) == 6)
		        {
		            if(GetPlayerWeapon(i) == 6)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 7 && GetPlayerWeapon(i) == 7)
		        {
		            if(GetPlayerWeapon(i) == 7)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 8 && GetPlayerWeapon(i) == 8)
		        {
		            if(GetPlayerWeapon(i) == 8)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 9 && GetPlayerWeapon(i) == 9)
		        {
		            if(GetPlayerWeapon(i) == 9)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot2] != 22 && GetPlayerWeapon(i) == 22 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 22)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot2] != 23 && GetPlayerWeapon(i) == 23 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 23)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot2] != 24 && GetPlayerWeapon(i) == 24 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 24)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot3] != 26 && GetPlayerWeapon(i) == 26 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 26)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot3] != 27 && GetPlayerWeapon(i) == 27 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 27)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot4] != 28 && GetPlayerWeapon(i) == 28 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 28)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot4] != 29 && GetPlayerWeapon(i) == 29 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 29)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot5] != 30 && GetPlayerWeapon(i) == 30 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 30)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot5] != 31 && GetPlayerWeapon(i) == 31 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 31)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot6] != 33 && GetPlayerWeapon(i) == 33 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 33)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot6] != 34 && GetPlayerWeapon(i) == 34 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 34)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot7] != 35 && GetPlayerWeapon(i) == 35)
		        {
		            if(GetPlayerWeapon(i) == 35)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot7] != 36 && GetPlayerWeapon(i) == 36)
		        {
		            if(GetPlayerWeapon(i) == 36)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot7] != 37 && GetPlayerWeapon(i) == 37)
		        {
		            if(GetPlayerWeapon(i) == 37)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot7] != 38 && GetPlayerWeapon(i) == 38)
		        {
		            AntiCheatBan(i);
		        }

		        if(Player[i][WepSlot8] != 16 && GetPlayerWeapon(i) == 16)
		        {
		            if(GetPlayerWeapon(i) == 16)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot8] != 17 && GetPlayerWeapon(i) == 17)
		        {
		            if(GetPlayerWeapon(i) == 17)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot8] != 18 && GetPlayerWeapon(i) == 18)
		        {
		            if(GetPlayerWeapon(i) == 18)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot8] != 39 && GetPlayerWeapon(i) == 39)
		        {
		            if(GetPlayerWeapon(i) == 39)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot9] != 41 && GetPlayerWeapon(i) == 41)
		        {
		            if(GetPlayerWeapon(i) == 41)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot9] != 42 && GetPlayerWeapon(i) == 42)
		        {
		            if(GetPlayerWeapon(i) == 42)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot9] != 43 && GetPlayerWeapon(i) == 43)
		        {
		            if(GetPlayerWeapon(i) == 43)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot10] != 11 && GetPlayerWeapon(i) == 11)
		        {
		            if(GetPlayerWeapon(i) == 11)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 12 && GetPlayerWeapon(i) == 12)
		        {
		            if(GetPlayerWeapon(i) == 12)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 13 && GetPlayerWeapon(i) == 13)
		        {
		            if(GetPlayerWeapon(i) == 13)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 14 && GetPlayerWeapon(i) == 14)
		        {
		            if(GetPlayerWeapon(i) == 14)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 15 && GetPlayerWeapon(i) == 15)
		        {
		            if(GetPlayerWeapon(i) == 15)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot11] != 44 && GetPlayerWeapon(i) == 44)
		        {
		            if(GetPlayerWeapon(i) == 44)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot11] != 45 && GetPlayerWeapon(i) == 45)
		        {
		            if(GetPlayerWeapon(i) == 45)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot11] != 46 && GetPlayerWeapon(i) == 46)
		        {
		        	if(GetPlayerWeapon(i) == 46)
		        	{
			        	ResetPlayerWeapons(i);
			            GivePlayerSavedWeapons(i);
		            }
		        }
		    }
	    }
	}
	return 1;
}

stock Starving(playerid)
{
	new string[256];
	if(Player[playerid][PlayerHunger] < 0)
	{
	    SetPlayerHealth(playerid, 0);
	    format(string(sizeof(string), "* %s falls onto their knees, dieing of starvation", GetName(playerid))
	    NearbyMessage(RPCOLOUR, string);
	}
	return 1;
}

stock ShowStatistics(playerid, id)
{
	if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	{
		new string[512], GenderString[20], Rank[50], GroupString[128], phonestring[128], JobString[128], VIPString[128], RaceString[128], FactionString[128];
		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------------------------------------------------------------------------");

		if(Player[id][Race] == 0 || Player[id][Race] > 3)
		{
			format(RaceString, sizeof(RaceString), "Undefined");
		}
		if(Player[id][Race] == 1)
		{
			format(RaceString, sizeof(RaceString), "White");
		}
		if(Player[id][Race] == 2)
		{
			format(RaceString, sizeof(RaceString), "Asian");
		}
		if(Player[id][Race] == 3)
		{
			format(RaceString, sizeof(RaceString), "Black");
		}
		if(Player[id][Race] == 4)
		{
			format(RaceString, sizeof(RaceString), "Hispanic");
		}

		if(Player[id][VipRank] == 1)
		{
			format(VIPString, sizeof(VIPString), "Bronze");
		}
		if(Player[id][VipRank] == 2)
		{
			format(VIPString, sizeof(VIPString), "Silver");
		}
		if(Player[id][VipRank] == 3)
		{
			format(VIPString, sizeof(VIPString), "Gold");
		}
		if(Player[id][VipRank] == 4)
		{
			format(VIPString, sizeof(VIPString), "Admin");
		}
		if(Player[id][VipRank] == 0)
		{
			format(VIPString, sizeof(VIPString), "None");
		}
		if(Player[id][VipRank] > 4)
		{
			format(VIPString, sizeof(VIPString), "None");
		}
		if(Player[id][Gender] == 1)
		{
		    format(GenderString, sizeof(GenderString), "Male");
		}
		else
		{
		    format(GenderString, sizeof(GenderString), "Female");
		}

		if(Player[id][PhoneN] == -1)
		{
		    format(phonestring, sizeof(phonestring), "Phone Number: None");
		}
		else
		{
		    format(phonestring, sizeof(phonestring), "Phone Number: %d", Player[id][PhoneN]);
		}

		if(Player[id][Job] >= 1)
		{
		    format(JobString, sizeof(JobString), "%s", Jobs[Player[id][Job]]);
		}
		else
		{
		    format(JobString, sizeof(JobString), "Unemployed");
		}

		if(Player[id][Group] >= 1)
		{
		    format(GroupString, sizeof(GroupString), "%s", Groups[Player[id][Group]][GroupName]);
		}
		else
		{
		    format(GroupString, sizeof(GroupString), "None");
		}

		if(Player[id][PlayingHours] < 1)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank1]);
		}
		else if(Player[id][PlayingHours] >= 1 && Player[id][PlayingHours] < 25)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank2]);
		}
		else if(Player[id][PlayingHours] >= 25 && Player[id][PlayingHours] < 100)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank3]);
		}
		else if(Player[id][PlayingHours] >= 100 && Player[id][PlayingHours] < 300)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank4]);
		}
		else if(Player[id][PlayingHours] >= 300)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank5]);
		}
		if(Player[playerid][FactionID] != 0)
		{
		    format(FactionString, sizeof(FactionString), "%s", Faction[Player[id][FactionID]][fName]);
		}
		else
		{
		    format(FactionString, sizeof(FactionString), "%s", "N/A");
		}

		format(string, sizeof(string), "Name: %s | Age: %d | Gender: %s | Job: %s | Group: %s | Rank: %d | Faction: %s | Faction Rank: %d", GetName(id), Player[id][Age], GenderString, JobString, GroupString, Player[id][GroupRank], FactionString, Player[id][FactionRank]);
		SendClientMessage(playerid, WHITE, string);

		if(Player[playerid][AdminLevel] >= 1)
		{
		    new IP[21], Float: Health, Float: Armour, ArmourMathFlaw, HealthMathFlaw;
		    GetPlayerHealth(id, Health);
		    GetPlayerArmour(id, Armour);
		    HealthMathFlaw = floatround(Health, floatround_ceil);
		    ArmourMathFlaw = floatround(Armour, floatround_ceil);
		    GetPlayerIp(id, IP, sizeof(IP));
			format(string, sizeof(string), "Admin Level: %d | Virtual World: %d | Interior: %d | Health: %d | Armour: %d | IP: %s", Player[id][AdminLevel], GetPlayerVirtualWorld(id), GetPlayerInterior(id), HealthMathFlaw, ArmourMathFlaw, IP);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "ID: %d | Ping: %d", id, GetPlayerPing(id));
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "First Warning: %s | Second Warning: %s | Third Warning: %s", Player[id][Warning1], Player[id][Warning2], Player[id][Warning3]);
			SendClientMessage(playerid, GREY, string);
			if(Player[id][PrisonDuration] >= 1)
			{
			    if(Player[id][PrisonID] == 1)
			    {
					format(string, sizeof(string), "Admin Actions: %s | Prison Time: %d minutes | Geographical Location: %s | Admin Name: %s | Normal Name: %s", IntToFormattedStr(Player[id][AdminActions]), SecondsToMinutes(Player[id][PrisonDuration]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName]);
					SendClientMessage(playerid, GREY, string);
				}
				else
				{
					format(string, sizeof(string), "Admin Actions: %s | Jail Time: %d minutes | Geographical Location: %s | Admin Name: %s | Normal Name: %s", IntToFormattedStr(Player[id][AdminActions]), SecondsToMinutes(Player[id][PrisonDuration]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName]);
					SendClientMessage(playerid, GREY, string);
				}
			}
			else
			{
				format(string, sizeof(string), "Admin Actions: %s | Geographical Location: %s | Admin Name: %s | Normal Name: %s", IntToFormattedStr(Player[id][AdminActions]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName]);
				SendClientMessage(playerid, GREY, string);
			}
		}

		format(string, sizeof(string), "Playing Hours: %d | Bank Money: $%s ", Player[id][PlayingHours], IntToFormattedStr(Player[id][BankMoney]));
		SendClientMessage(playerid, WHITE, string);

		format(string, sizeof(string), "Money: $%s | Hunger: %d | Walkie Frequency: %d | Married To: %s", IntToFormattedStr(Player[id][Money]), Player[id][PlayerHunger], Player[id][WalkieFrequency], Player[id][MarriedTo]);
		SendClientMessage(playerid, WHITE, string);

		format(string, sizeof(string), "Race: %s | Rope: %d | Rags: %d | Recorded Crimes: %d | Player Rank: %s | VIP: %s | VIP Tokens: %d", RaceString, Player[id][Rope], Player[id][Rags], Player[id][CriminalOffences], Rank, VIPString, Player[id][VIPTokens]);
		SendClientMessage(playerid, WHITE, string);

		if(Player[playerid][AdminLevel] >= 1)
		{
			format(string, sizeof(string), "House: %d | Business: %d | Vehicle 1: %s (%d) | Vehicle 2: %s (%d) | Vehicle 3: %s (%d)", Player[id][House], Player[id][Business], GetVehicleName(GetVehicleModel(Player[id][CarLinkID])), Player[id][CarLinkID], GetVehicleName(GetVehicleModel(Player[id][Car2LinkID])), Player[id][Car2LinkID], GetVehicleName(GetVehicleModel(Player[id][Car3LinkID])), Player[id][Car3LinkID]);
			SendClientMessage(playerid, WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "House: %d | Business: %d | Vehicle 1: %s | Vehicle 2: %s | Vehicle 3: %s", Player[id][House], Player[id][Business], GetVehicleName(GetVehicleModel(Player[id][CarLinkID])), GetVehicleName(GetVehicleModel(Player[id][Car2LinkID])), GetVehicleName(GetVehicleModel(Player[id][Car3LinkID])));
			SendClientMessage(playerid, WHITE, string);
		}

		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------------------------------------------------------------------------");
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You can only view the statistics of a player that is a lower admin level, compared to you.");
	}
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius)
{
	new Float: CarPoX, Float: CarPoY, Float: CarPoZ;
	GetVehiclePos(vehicleid, CarPoX, CarPoY, CarPoZ);
	return IsPlayerInRangeOfPoint(playerid, radius, CarPoX, CarPoY, CarPoZ);
}

/*command(disguisenumber, playerid, params[])
{
	new desiredphonenumber;
	if(Player[playerid][Group] == 1 || Player[playerid][Group] == 2)
	{
		if(Player[playerid][GroupRank] >= 3)
		{
			if(sscanf(params, "d", desiredphonenumber))
			{
				SendClientMessage(playerid, WHITE, "SYNTAX: /disguisenumber [Phone Number]");
			}
			else
			{
				Player[playerid][PhoneN] = desiredphonenumber;
				SendClientMessage(playerid, WHITE, "You have set your phone number.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not a high enough rank in the PD for this!");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You must be in the PD for this!");
	}
	return 1;
}*/

//Agency Garage Door EXIT -168.03014, -224.16040, -70.88542
command(agencygarage, playerid, params[])
{
	new veh;
	if(Player[playerid][Group] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, -138.51550, -224.16580, 1.56630))
	{
		SendClientMessage(playerid, -1, "You have entered the agency garage.");
		SetPlayerPos(playerid, -168.5620, -223.0091, -69.4045);
		if(IsPlayerInAnyVehicle(playerid))
		{
			veh = GetPlayerVehicleID(playerid);
			SetVehiclePos(veh, -165.4901, -219.3269, -70.0014);
		}
	}
	else
	{
		if(Player[playerid][Group] == 2 && IsPlayerInRangeOfPoint(playerid, 25.0, -168.5620, -223.0091, -69.4045))
		{
			SendClientMessage(playerid, -1, "You have exited the agency garage.");
			SetPlayerPos(playerid, -139.5164, -222.8535, 2.4814);
			if(IsPlayerInAnyVehicle(playerid))
			{
				veh = GetPlayerVehicleID(playerid);
				SetVehiclePos(veh, -140.4175, -217.0074, 2.4122);
			}
		}
	}
	return 1;
}

command(disguise, playerid, params[])
{
	new desiredid;
	if(desiredid > 299 || desiredid < 0)
	{
		SendClientMessage(playerid, WHITE, "Invalid skin ID.");
	}
	if(Player[playerid][Group] == 1)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,261.70258,109.92663,1003.61505))
		{
			if(sscanf(params, "d", desiredid))
			{
				SendClientMessage(playerid, WHITE, "SYNTAX: /disguise [Skin ID] [0-299]");
			}
			else
			{
				if(desiredid < 0 || desiredid > 300)
				{
					SendClientMessage(playerid, WHITE, "Invalid Skin ID. Skins go from 0-299");
				}
				else{
					if(CLOTHESEnabled == 1)
					{
						Player[playerid][LastSkin] = desiredid;
						SetPlayerSkin(playerid, desiredid);
						SendClientMessage(playerid, WHITE, "You are now wearing your undercover clothes.");
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You're not in range of the locker, or it is not enabled.");
					}
				}
			}
		}
	}
	if(Player[playerid][Group] == 2)
	{
		if(desiredid < 0 || desiredid > 300)
		{
			SendClientMessage(playerid, WHITE, "Invalid Skin ID");
		}
		else
		{
			Player[playerid][LastSkin] = desiredid;
			SetPlayerSkin(playerid, desiredid);
			SendClientMessage(playerid, WHITE, "Disguised.");
		}
	}
	return 1;
}

command(uninstallnos, playerid, params[])
{
    new vID = GetPlayerVehicleID(playerid);
	new uninstallnosString[128];
	new vNOS1, vNOS2, vNOS3;

	if(vID == Player[playerid][CarLinkID])
	{
		if(Player[playerid][v1NOS] == 0)
	    {
    		SendClientMessage(playerid, GREY, "This vehicle doesn't have Nitrous Oxide installed.");
		}
	    if(Player[playerid][v1NOS] == 1)
	    {
            format(uninstallnosString, sizeof(uninstallnosString), "* %s has uninstalled a Nitrous Oxide bottle.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, uninstallnosString);
	        Player[playerid][v1NOSFUEL] = 0;
	        Player[playerid][v1NOS] = 0;
	    }
	    if(Player[playerid][v1NOS] == 2)
	    {
			format(uninstallnosString, sizeof(uninstallnosString), "* %s has uninstalled one of their Nitrous Oxide bottles.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, uninstallnosString);
			vNOS1 = Player[playerid][v1NOSFUEL];
	        Player[playerid][v1NOSFUEL] = vNOS1 / 2;
	        Player[playerid][v1NOS] = 1;
	    }
	}
	if(vID == Player[playerid][Car2LinkID])
	{
        if(Player[playerid][v2NOS] == 0)
	    {
    		SendClientMessage(playerid, GREY, "This vehicle doesn't have Nitrous Oxide installed.");
		}
	    if(Player[playerid][v2NOS] == 1)
	    {
            format(uninstallnosString, sizeof(uninstallnosString), "* %s has uninstalled a Nitrous Oxide bottle.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, uninstallnosString);
	        Player[playerid][v2NOSFUEL] = 0;
	        Player[playerid][v2NOS] = 0;
	    }
	    if(Player[playerid][v2NOS] == 2)
	    {
			format(uninstallnosString, sizeof(uninstallnosString), "* %s has uninstalled one of their Nitrous Oxide bottles.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, uninstallnosString);
			vNOS2 = Player[playerid][v2NOSFUEL];
	        Player[playerid][v2NOSFUEL] = vNOS2 / 2;
	        Player[playerid][v2NOS] = 1;
	    }
	}
	if(vID == Player[playerid][Car3LinkID])
	{
        if(Player[playerid][v3NOS] == 0)
	    {
    		SendClientMessage(playerid, GREY, "This vehicle doesn't have Nitrous Oxide installed.");
		}
		if(Player[playerid][v3NOS] == 1)
	    {
            format(uninstallnosString, sizeof(uninstallnosString), "* %s has uninstalled a Nitrous Oxide bottle.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, uninstallnosString);
	        Player[playerid][v3NOSFUEL] = 0;
	        Player[playerid][v3NOS] = 0;
	    }
	    if(Player[playerid][v3NOS] == 2)
	    {
			format(uninstallnosString, sizeof(uninstallnosString), "* %s has uninstalled one of their Nitrous Oxide bottles.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, uninstallnosString);
			vNOS3 = Player[playerid][v1NOSFUEL];
	        Player[playerid][v3NOSFUEL] = vNOS3 / 2;
	        Player[playerid][v3NOS] = 1;
	    }
	}
}

command(installturbo, playerid, params[])
{
	#pragma tabsize 0

    new vID = GetPlayerVehicleID(playerid);
    new installupgradeString[128];

    if(Player[playerid][Turbo] == 0)
    {
        SendClientMessage(playerid, WHITE, "You need to buy a turbo before attempting to install one");
    }
	if(Player[playerid][Turbo] > 0)
	{
    	if(vID == Player[playerid][CarLinkID])
		{
		    if(Player[playerid][V1TURBO] == 1)
		    {
		        SendClientMessage(playerid, WHITE, "You've already installed a Turbo!");
		    }
		    if(Player[playerid][V1TURBO] != 1)
		    {
				Player[playerid][Turbo] -= 1;
		        Player[playerid][V1TURBO] += 1;
				format(installupgradeString, sizeof(installupgradeString), "* %s has installed a Turbo onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installupgradeString);
		    }
		}

		if(vID == Player[playerid][Car2LinkID])
		{
		    if(Player[playerid][v2TURBO] == 1)
		    {
		        SendClientMessage(playerid, WHITE, "You've already installed a Turbo!");
		    }
		    if(Player[playerid][v2TURBO] != 1)
		    {
				Player[playerid][Turbo] -= 1;
		        Player[playerid][v2TURBO] += 1;
				format(installupgradeString, sizeof(installupgradeString), "* %s has installed a Turbo onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installupgradeString);
		    }
		}

		if(vID == Player[playerid][Car3LinkID])
		{
		    if(Player[playerid][v3TURBO] == 1)
		    {
		        SendClientMessage(playerid, WHITE, "You've already upgraded your engine to the maximum.");
		    }
		    if(Player[playerid][v3TURBO] != 1)
		    {
				Player[playerid][Turbo] -= 1;
		        Player[playerid][v3TURBO] += 1;
				format(installupgradeString, sizeof(installupgradeString), "* %s has installed a Turbo onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installupgradeString);
		    }
		}
	}
	return 1;
}

command(installupgrade, playerid, params[])
{
	#pragma tabsize 0

    new vID = GetPlayerVehicleID(playerid);
    new installupgradeString[128];

    if(Player[playerid][EngineUpgrade] == 0)
    {
        SendClientMessage(playerid, WHITE, "You need to buy an engine upgrade before attempting to install one");
    }
	if(Player[playerid][EngineUpgrade] > 0)
	{
    	if(vID == Player[playerid][CarLinkID])
		{
		    if(Player[playerid][v1ENGINE] == 3)
		    {
		        SendClientMessage(playerid, WHITE, "You've already upgraded your engine to the maximum.");
		    }
		    if(Player[playerid][v1ENGINE] != 3)
		    {
				Player[playerid][EngineUpgrade] -= 1;
		        Player[playerid][v1ENGINE] += 1;
				format(installupgradeString, sizeof(installupgradeString), "* %s has installed an Engine Upgrade onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installupgradeString);
		    }
		}

		if(vID == Player[playerid][Car2LinkID])
		{
		    if(Player[playerid][v2ENGINE] == 3)
		    {
		        SendClientMessage(playerid, WHITE, "You've already upgraded your engine to the maximum.");
		    }
		    if(Player[playerid][v2ENGINE] != 3)
		    {
				Player[playerid][EngineUpgrade] -= 1;
		        Player[playerid][v2ENGINE] += 1;
				format(installupgradeString, sizeof(installupgradeString), "* %s has installed an Engine Upgrade onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installupgradeString);
		    }
		}

		if(vID == Player[playerid][Car3LinkID])
		{
		    if(Player[playerid][v3ENGINE] == 3)
		    {
		        SendClientMessage(playerid, WHITE, "You've already upgraded your engine to the maximum.");
		    }
		    if(Player[playerid][v3ENGINE] != 3)
		    {
				Player[playerid][EngineUpgrade] -= 1;
		        Player[playerid][v3ENGINE] += 1;
				format(installupgradeString, sizeof(installupgradeString), "* %s has installed an Engine Upgrade onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installupgradeString);
		    }
		}
	}
	return 1;
}

command(installnos, playerid, params[])
{
	new vID = GetPlayerVehicleID(playerid);
	new installnosString[128];

	if(Player[playerid][NosBottle] == 0)
	{
	    SendClientMessage(playerid, WHITE, "You need to buy a Nitrous Bottle before trying to install one.");
	}
	if(Player[playerid][NosBottle] > 0)
	{
		if(vID == Player[playerid][CarLinkID])
		{
		    if(Player[playerid][v1NOS] == 2)
		    {
		        SendClientMessage(playerid, WHITE, "You've already got two NOS Bottles installed in this vehicle!");
		    }
		    if(Player[playerid][v1NOS] != 2)
		    {
				Player[playerid][NosBottle] -= 1;
		        Player[playerid][v1NOS] += 1;
		        Player[playerid][v1NOSFUEL] += 100;
				format(installnosString, sizeof(installnosString), "* %s has installed a Nitrous Bottle onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installnosString);
		    }
		}

		if(vID == Player[playerid][Car2LinkID])
		{
		    if(Player[playerid][v2NOS] == 2)
		    {
		        SendClientMessage(playerid, WHITE, "You've already got two NOS Bottles installed in this vehicle!");
		    }
		    if(Player[playerid][v2NOS] != 2)
		    {
				Player[playerid][NosBottle] -= 1;
		        Player[playerid][v2NOS] += 1;
		        Player[playerid][v2NOSFUEL] += 100;
				format(installnosString, sizeof(installnosString), "* %s has installed a Nitrous Bottle onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installnosString);
		    }
		}

		if(vID == Player[playerid][Car3LinkID])
		{
		    if(Player[playerid][v3NOS] == 2)
		    {
		        SendClientMessage(playerid, WHITE, "You've already got two NOS Bottles installed in this vehicle!");
		    }
		    if(Player[playerid][v3NOS] != 2)
		    {
				Player[playerid][NosBottle] -= 1;
		        Player[playerid][v3NOS] += 1;
		        Player[playerid][v3NOSFUEL] += 100;
				format(installnosString, sizeof(installnosString), "* %s has installed a Nitrous Bottle onto their vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, installnosString);
		    }
		}
	}
	return 1;
}

command(refill, playerid, params[])
{
	#pragma tabsize 0
	if(Player[playerid][GasCan] == 2)
	{
		new vID = GetPlayerVehicleID(playerid);
		new string[128];
		new vFuel = fuel[vID];

		if(vFuel > 75)
		{
		    vFuel = 100;
			fuel[vID] = vFuel;
		}

		if(vFuel < 75)
		{
		    vFuel += 25;
		    fuel[vID] = vFuel;
		}

		Player[playerid][GasCan] = 1;

		format(string, sizeof(string), "* %s has used their Gas Can to refuel their vehicle.", GetName(playerid));
		NearByMessage(playerid, RPCOLOUR, string);
	}
	return 1;
}

command(refillgascan, playerid, params[])
{
    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED,"You need to be on foot to refill it.");
	RefuelSystemGC(playerid);
	return 1;
}

command(refuel, playerid, params[])
{
        if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED,"You are not in an vehicle!");
        if (isrefuelling[playerid]) return SendClientMessage(playerid, YELLOW,"You are already refuelling!");
		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation1X, GasStation1Y, GasStation1Z))
		{
			RefuelSystem(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation2X, GasStation2Y, GasStation2Z))
		{
            RefuelSystem(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation3X, GasStation3Y, GasStation3Z))
		{
            RefuelSystem(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation4X, GasStation4Y, GasStation4Z))
		{
            RefuelSystem(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation5X, GasStation5Y, GasStation5Z))
		{
            RefuelSystem(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation6X, GasStation6Y, GasStation6Z))
		{
            RefuelSystem(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, GasStationRefuel, GasStation7X, GasStation7Y, GasStation7Z))
		{
            RefuelSystem(playerid);
		}
		return 1;
    }

command(tazer, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] == 1) {
		new string[128];
		switch(Player[playerid][pTazer])
		{
		    case 0:
		    {
		        Player[playerid][pTazer] = 1;
		        SetPlayerAttachedObject(playerid, 4, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
		        format(string, sizeof(string), "* %s withdraws their tazer.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);

			}
			case 1:
			{
			    Player[playerid][pTazer] = 0;
	        	RemovePlayerAttachedObject(playerid, 4);
			    format(string, sizeof(string), "* %s holsters their tazer.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
			}
		}
	}
 	return 1;
}
command(award, playerid, params[])
{
	new id, amount, Reason[128], string[128];
	if(sscanf(params, "udz", id, amount, Reason))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        SendClientMessage(playerid, WHITE, "SYNTAX: /award [playerid] [amount] [reason]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        if(strlen(Reason) < 1)
	        {
	            SendClientMessage(playerid, WHITE, "SNYTAX: /award [playerid] [amount] [reason]");
	        }
			else
			{
			    if(Player[id][AdminLevel] <= Player[playerid][AdminLevel])
			    {
			        if(amount < 99999999 && amount >= 1)
			        {
			            format(string, sizeof(string), "Award: %s has been awarded $%s by %s, defined reason: %s", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
			            SendClientMessageToAll(LIGHTRED, string);
			            Player[id][Money] += amount;

			            if(Player[id][AdminLevel] < 1)
			            {
			                Player[playerid][AdminActions]++;
			                AdminActionsLog(string);
			                SendClientMessage(playerid, WHITE, "You have earned an admin action!");
			            }
					}
				}
			}
		}
	}
	return 1;
}
command(awardtokens, playerid, params[])
{
	new id, amount, Reason[128], string[128];
	if(sscanf(params, "udz", id, amount, Reason))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        SendClientMessage(playerid, WHITE, "SYNTAX: /awardtokens [playerid] [amount] [reason]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        if(strlen(Reason) < 1)
	        {
	            SendClientMessage(playerid, WHITE, "SNYTAX: /awardtokens [playerid] [amount] [reason]");
	        }
			else
			{
			    if(Player[id][AdminLevel] <= Player[playerid][AdminLevel])
			    {
			        if(amount < 99999999 && amount >= 1)
			        {
			            format(string, sizeof(string), "Award: %s has been awarded %s tokens by %s, defined reason: %s", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
			            SendClientMessageToAll(LIGHTRED, string);
			            Player[id][VIPTokens] += amount;

			            if(Player[id][AdminLevel] < 1)
			            {
			                Player[playerid][AdminActions]++;
			                AdminActionsLog(string);
			                SendClientMessage(playerid, WHITE, "You have earned an admin action!");
			            }
					}
				}
			}
		}
	}
	return 1;
}

command(map, playerid, params[])
{
	ShowPlayerDialog(playerid, 4123, DIALOG_STYLE_LIST, "Choose a Location", "Montgomery\nDillimore\nPalomino Creek\nBlueberry\nJobs", "Choose", "Cancel");
}

command(stats, playerid, params[])
{
	#pragma unused params
	ShowStatistics(playerid, playerid);
	return 1;
}

command(usecocaine, playerid, params[])
{
	#pragma unused params
	new amount;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, WHITE, "SYNTAX: /usecocaine [amount]");
	{
		if(Player[playerid][Cocaine] >= amount)
		{
		    if(Player[playerid][IsAtEvent] >= 1)
		    {
		        SendClientMessage(playerid, WHITE, "You're unable to use cocaine, whilst in an event.");
		    }
		    else
		    {
		    	if(Player[playerid][CrackEffect] != 1)
			    {
				    new string[128], MathsFlaw, Float: Armour, newarm;
				    newarm = 20 * amount;
				    Player[playerid][Cocaine] -= amount;
				    SendClientMessage(playerid, WHITE, "You have used some cocaine.");

				    format(string, sizeof(string), "* %s has sniffed %d grams of cocaine.", GetName(playerid), amount);
				    NearByMessage(playerid, RPCOLOUR, string);

				    Player[playerid][CrackEffect] = 1;

				    GetPlayerArmour(playerid, Armour);
					MathsFlaw = floatround(Armour, floatround_ceil) + newarm;

					if(MathsFlaw < 100)
					{
				    	SetPlayerArmour(playerid, MathsFlaw);
				    }

				    GetPlayerArmour(playerid, Armour);
					MathsFlaw = floatround(Armour, floatround_ceil);

					if(amount >= 5)
					{
					    SetPlayerArmour(playerid, 100);
					}

					Player[playerid][StonedEffect] = 1;
			        SetPlayerWeather(playerid, 9);
			        SetPlayerDrunkLevel(playerid, 40000);
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You are unable to sniff any more cocaine. Wait a while.");
			    }
		    }
		}
	}
	return 1;
}

/*command(rage, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][VipRank] >= 1)
	{
		if(Player[playerid][ToggedRAGE] == 1)
		{
		    Player[playerid][ToggedRAGE] = 0;
		    SendClientMessage(playerid, WHITE, "You have disabled RAGE.");
		}
		else
		{
		    Player[playerid][ToggedRAGE] = 1;
		    SendClientMessage(playerid, WHITE, "You have enabled RAGE.");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not a VIP!");
	}
	return 1;
}
*/

command(usepot, playerid, params[])
{
	#pragma unused params
	new amount;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, WHITE, "SYNTAX: /usepot [amount]");
	{
		if(Player[playerid][Pot] >= amount)
		{
		    if(Player[playerid][IsAtEvent] >= 1)
		    {
		        SendClientMessage(playerid, WHITE, "You're unable to use pot, whilst in an event.");
		    }
		    else
		    {
			    if(Player[playerid][PotEffect] != 1)
			    {
				    new string[128], string2[128];

				    Player[playerid][Pot] -= amount;
					format(string2, sizeof(string2), "You have used %d grams of pot.", amount);
				    SendClientMessage(playerid, WHITE, string2);

				    format(string, sizeof(string), "* %s grabs their blunt and a lighter and proceeds to light the blunt.", GetName(playerid));
				    NearByMessage(playerid, RPCOLOUR, string);

				    Player[playerid][PotEffect] = 1;

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

				    Player[playerid][StonedEffect] = 1;

			        SetPlayerWeather(playerid, 9);
			        SetPlayerDrunkLevel(playerid, 10000);
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You are unable to use any more pot. Wait a while.");
			    }
		    }
		}
	}
	return 1;
}

command(time, playerid, params[])
{
	#pragma unused params

	if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You're unable to execute this right now.");
	}
	else
	{
		new string[128], hour, minute, second;
		gettime(hour, minute, second);

		SendClientMessage(playerid, WHITE, "------------------------------------------------------------------");

		format(string, sizeof(string), "The current server time is %d:%d:%d.", hour, minute, second);
		SendClientMessage(playerid, WHITE, string);

		format(string, sizeof(string), "%d minutes until your next paycheck!", SecondsToMinutes(3600-Player[playerid][SecondsLoggedIn]));
		SendClientMessage(playerid, GREY, string);

		if(Player[playerid][LawyerReloadTime] >= 1)
		{
		    format(string, sizeof(string), "%d seconds until you're able to defend another player.", LAWYER_RELOAD_TIME-Player[playerid][LawyerReloadTime]);
		}

		if(Player[playerid][StonedEffect] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you're no longer stoned.", STONED_TIME-Player[playerid][StonedEffect]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][CantFish] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can fish again.", FISH_INABILITY_TIME-Player[playerid][CantFish]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][InabilityToDropCar] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can dropcar again.", 1800-Player[playerid][InabilityToDropCar]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][TrashCoolDown] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can collect trash.", Player[playerid][TrashCoolDown]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][StreetSweeperReload] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can clean the streets again.", Player[playerid][StreetSweeperReload]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][MatrunInabilityDuration] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can matrun again.", MATRUN_INABILITY_TIME-Player[playerid][MatrunInabilityDuration]);
			SendClientMessage(playerid, GREY, string);
		}
		if(Player[playerid][TruckerReload] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can trucker run again.", Player[playerid][TruckerReload]);
			SendClientMessage(playerid, GREY, string);
		}
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------------");

    }
	return 1;
}

/*command(betauninvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /betauninvite [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[id][Tester] >= 1)
	            {
	                Player[id][Tester] = 0;
	                format(string, sizeof(string), "You have been removed from the tester team by %s.", GetName(playerid));
	                SendClientMessage(id, GREY, string);

					format(string, sizeof(string), "You have uninvited %s from the testers team.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "That player isn't a tester.");
	            }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
		    }
	    }
	}
	return 1;
}

command(betainvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /betainvite [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[id][Tester] == 0)
	            {
		            SendClientMessage(id, ADMINORANGE, "You have been invited to participate in the Evolved Gaming  Roleplay BETA programme.");
			        format(string, sizeof(string), "You have been invited by %s - please type /approve betainvite to participate.", GetName(playerid));
			        SendClientMessage(id, WHITE, string);
			        Player[id][PendingBETAInvite] = 1;

			        format(string, sizeof(string), "You have invited %s to participate in the BETA programme.", GetName(id));
			        SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "That player is already a tester.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
		    }
	    }
	}
	return 1;
}

command(listtesters, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tester] >= 1)
	{
	    new string[128];

	    SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

		for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(Player[i][Tester] >= 1)
	        {
	            format(string, sizeof(string), "TESTER: %s", GetName(i));
	            SendClientMessage(playerid, GREY, string);
	        }
	    }

	    SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

	}
	return 1;
}
*/

command(gotoplayerscar, playerid, params[])
{
	new id, vehid, string[128], Float: fCarX, Float: fCarY, Float: fCarZ;
	if(sscanf(params, "ud", id, vehid))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gotoplayerscar [playerid] [1-3]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        switch(vehid)
	        {
	            case 1:
	            {
			        if(Player[id][PlayerCarModel] >= 1)
			        {
			        	GetVehiclePos(Player[id][CarLinkID], fCarX, fCarY, fCarZ);
			        	SetPlayerPos(playerid, fCarX, fCarY, fCarZ);
			        	format(string, sizeof(string), "You have teleported to %s's vehicle (slot 1).", GetName(id));
			        	SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "That player isn't currently using slot 1.");
			        }
				}
	            case 2:
	            {
			        if(Player[id][PlayerCarModel2] >= 1)
			        {
			        	GetVehiclePos(Player[id][Car2LinkID], fCarX, fCarY, fCarZ);
			        	SetPlayerPos(playerid, fCarX, fCarY, fCarZ);
			        	format(string, sizeof(string), "You have teleported to %s's vehicle (slot 2).", GetName(id));
			        	SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "That player isn't currently using slot 2.");
			        }
				}
	            case 3:
	            {
			        if(Player[id][PlayerCarModel3] >= 1)
			        {
			        	GetVehiclePos(Player[id][Car3LinkID], fCarX, fCarY, fCarZ);
			        	SetPlayerPos(playerid, fCarX, fCarY, fCarZ);
			        	format(string, sizeof(string), "You have teleported to %s's vehicle (slot 3).", GetName(id));
			        	SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "That player isn't currently using slot 3.");
			        }
	            }
	            default:
	            {
	                SendClientMessage(playerid, WHITE, "1-3 are valid slots.");
	            }
	        }
	    }
	}
	return 1;
}

command(remoteban, playerid, params[])
{
    if(Player[playerid][AdminLevel] >= 5)
	{
        if(isnull(params))
		{
            return SendClientMessage(playerid, WHITE, "SYNTAX: /remoteban [name]");
        }
        else
		{
            new string[144], rows, fields, temp[255]; // For the message broadcast string + file name storing.

            mysql_format(mysql, string, sizeof(string), "SELECT * FROM users WHERE NormalName = '%s'", params);
            mysql_query(mysql, string);
		    mysql_store_result();
			cache_get_data(rows, fields);

            if(rows)
			{
			    new pAdminLevel;
			    cache_get_field_content(0, "AdminLevel", temp), pAdminLevel = strval(temp);
                if(pAdminLevel >= Player[playerid][AdminLevel])
				{
                    return SendClientMessage(playerid, WHITE, "You can't ban a higher level administrator (or equal to your rank).");
                }
                else
				{
				    cache_get_field_content(0, "NormalName", temp), format(Player[playerid][NormalName], 255, temp);
        			mysql_format(mysql, string, sizeof(string), "UPDATE users SET Banned=%d WHERE NormalName='%s'", 1, params);
					mysql_tquery(mysql, string, "", "");
			        format(string, sizeof(string), "You have remotely banned %s.", params);
			        SendClientMessage(playerid, WHITE, string);
			        format(string, sizeof(string), "%s has been remotely banned by %s.", params, GetName(playerid));
			        SendToAdmins(ADMINORANGE, string, 1);
			        BanLog(string);
		        	AdminActionsLog(string);
		        	mysql_free_result();
                }
            }
            else
			{
				return SendClientMessage(playerid, WHITE, "Account not found.");
			}
        }
	}
	return 1;
}

command(remotewiretransfer, playerid, params[])
{
	new Name[128], amount, string[128];
	if(sscanf(params, "dz", amount, Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /remotewiretransfer [amount] [name]");
	}
	else
	{
	    if(Player[playerid][GroupRank] >= 10)
	    {
		    format(string, sizeof(string), "Accounts/%s.ini", Name);

		    if(fexist(string))
		    {
		        if(dini_Int(string, "Banned") >= 1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't transfer to a banned player.");
		        }
		        else
		        {
		            if(Player[playerid][BankMoney] >= amount)
		            {
			            new string2[128], Sum = dini_Int(string, "BankMoney");
			            Sum += amount;

			            dini_IntSet(string, "BankMoney", Sum);
			            format(string, sizeof(string), "%s has been remotely wiretransfered %s, by %s.", Name, IntToFormattedStr(amount), GetName(playerid));
			            SendToAdmins(ADMINORANGE, string, 1);
			            SendClientMessage(playerid, WHITE, string);
			            MoneyLog(string);

			            Player[playerid][BankMoney] -= amount;

			            format(string2, sizeof(string2), "%s has remotely wire transfered %s to you.", GetName(playerid), IntToFormattedStr(amount));
			            format(string, sizeof(string), "Accounts/%s.ini", Name);
						dini_Set(string, "Note", string2);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You do not have enough money.");
		            }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Account not found.");
		    }
	    }
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a Group Leader.");
		}
    }
	return 1;
}

command(remoteprison, playerid, params[])
{
	new Name[128], minutes, string[128];
	if(sscanf(params, "dz", minutes, Name))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /remoteprison [minutes] [name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    format(string, sizeof(string), "Accounts/%s.ini", Name);

		    if(fexist(string))
		    {
		        if(dini_Int(string, "AdminLevel") >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You can't prison a higher level administrator (or equal to your rank).");
		        }
		        else
		        {
		            dini_IntSet(string, "PrisonDuration", MinutesToSeconds(minutes));
		            dini_IntSet(string, "PrisonID", 1);
		            format(string, sizeof(string), "You have remotely prisoned %s.", Name);
		            SendClientMessage(playerid, WHITE, string);
		            format(string, sizeof(string), "%s has been remotely prisoned by %s (%d minutes).", Name, GetName(playerid), minutes);
		            SendToAdmins(ADMINORANGE, string, 1);
		            AdminActionsLog(string);
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Account not found.");
		    }
	    }
	}
	return 1;
}

command(prison, playerid, params[])
{
	new id, string[128], time, Reason[128];
	if(sscanf(params, "udz", id, time, Reason))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /prison [playerid] [time] [reason]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	            {
			    	if(strlen(Reason) < 1)
			    	{
			        	SendClientMessage(playerid, WHITE, "SYNTAX: /prison [playerid] [time] [reason]");
			    	}
			    	else
			    	{
		       		    if(time == 0)
		       		    {
		       		        if(Player[id][PrisonDuration] >= 1)
		       		        {
								format(string, sizeof(string), "Prison: %s has been released from prison by %s, reason: %s.", GetName(id), Player[playerid][AdminName], Reason);
			       				SendClientMessageToAll(LIGHTRED, string);
					    		Player[id][PrisonDuration] = 0;
					    		AdminActionsLog(string);
				    		}
				    		else
				    		{
				    		    SendClientMessage(playerid, WHITE, "You can't release someone who isn't even prisoned.");
				    		}
		       			}
		       			else
		       			{
							format(string, sizeof(string), "Prison: %s has been prisoned by %s, reason: %s (%d minutes).", GetName(id), Player[playerid][AdminName], Reason, time);
		       				SendClientMessageToAll(LIGHTRED, string);
				    		Player[id][PrisonDuration] = time*60;
				    		Player[id][PrisonID] = 1;
				    		AdminActionsLog(string);

				    		if(Player[id][AdminLevel] < 1)
				    		{
					    		Player[playerid][AdminActions]++;
					    		SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				    		}

							if(IsPlayerInAnyVehicle(id))
							{
							    RemovePlayerFromVehicle(id);
							}

							ResetPlayerWeaponsEx(id);

			    			SetPlayerInterior(id, Prison1Int);
			    			SetPlayerPos(id, Prison1X, Prison1Y, Prison1Z);
			   	 			SetPlayerVirtualWorld(id, Prison1World);
		       			}
	       			}
	       		}
	       		else
	       		{
	       		    SendClientMessage(playerid, WHITE, "You can't prison a higher level admin.");
	       		}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "That player isn't connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(setc, playerid, params[])
{
	return cmd_setcheckpoint(playerid, params);
}

command(setcheckpoint, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(setc)heckpoint [playerid]");
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1 && Player[playerid][AdminDuty] == 1)
		{
	        Player[playerid][GCPID] = id;
			DisablePlayerCheckpoint(id);
			Player[id][Checkpoint] = 1;
			format(string, sizeof(string), "You are giving %s a checkpoint!", GetName(id));
			SendClientMessage(playerid, GREY, string);
	    }
	}
	return 1;
}

command(knock, playerid, params[])
{
	#pragma unused params
	new string[128];
	for(new i = 0; i < sizeof(Houses); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
	    {
	        if(GetPlayerVirtualWorld(playerid) == 0)
	        {
	            for(new j = 0; j < MAX_PLAYERS; j++)
	            {
	                if(IsPlayerConnectedEx(j) && Player[j][InHouse] == i)
	                {
	                    SendClientMessage(j, PURPLE, "Somebody has knocked on the door!");
	                }
	            }

	            format(string, sizeof(string), "* %s knocks on the door.", GetName(playerid));
	            NearByMessage(playerid, RPCOLOUR, string);
	        }
	    }
	}
	return 1;
}

command(togglenewbie, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 3)
	{
		if(NewbieEnabled == 1)
		{
		    NewbieEnabled = 0;
		    format(string, sizeof(string), "%s has disabled Newbie Chat.", Player[playerid][AdminName]);
		    SendClientMessageToAll(LIGHTRED, string);
		    AdminActionsLog(string);
		}
		else
		{
		    NewbieEnabled = 1;
		    format(string, sizeof(string), "%s has enabled Newbie Chat.", Player[playerid][AdminName]);
		    SendClientMessageToAll(LIGHTRED, string);
		    AdminActionsLog(string);
		}
	}
	return 1;
}

command(newbie, playerid, params[])
{
	new
		string[256];

	if(isnull(params))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /n(ewbie) [message]");
	}
	else
	{
	    if(NewbieEnabled == 1)
	    {
	        if(Player[playerid][CanUseNewbie] == 1 && Player[playerid][Authenticated] >= 1)
	        {
	            if(Player[playerid][nMuted] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You have been muted from this channel by an admin.");
	            }
	            else
	            {
						if(Player[playerid][VipRank] > 0 && Player[playerid][VipRank] < 4)
		                {
					        format(string, sizeof(string), "{00E3A3}[N]{00EEFF} VIP {00E3A3}%s{00EEFF}: %s  ", GetName(playerid), params);
							for(new i=0; i < MAX_PLAYERS; i++)
							{
								SendSplitMessage(i, NEWBIE_CHAT, string);
							}
					    	OOCChatLog(string);
		                }
		                else
						{
			                if(Player[playerid][AdminLevel] > 0 && Player[playerid][AdminLevel] < 4)
							{
								format(string, sizeof(string), "{00E3A3}[N]{00EEFF} Moderator {00E3A3}%s{00EEFF}: %s ", GetName(playerid), params);
					            for(new i=0; i < MAX_PLAYERS; i++)
								{
									SendSplitMessage(i, NEWBIE_CHAT, string);
								}
							}
							else if(Player[playerid][AdminLevel] > 3 && Player[playerid][AdminLevel] < 5)
							{
								format(string, sizeof(string), "{00E3A3}[N]{00EEFF} Admin {00E3A3}%s{00EEFF}: %s ", GetName(playerid), params);
					            for(new i=0; i < MAX_PLAYERS; i++)
								{
									SendSplitMessage(i, NEWBIE_CHAT, string);
								}
							}
							else if(Player[playerid][AdminLevel] > 6 && Player[playerid][AdminLevel] < 8)
							{
							    format(string, sizeof(string), "{00E3A3}[N]{00EEFF} Lead Admin {00E3A3}%s{00EEFF}: %s ", GetName(playerid), params);
					            for(new i=0; i < MAX_PLAYERS; i++)
								{
									SendSplitMessage(i, NEWBIE_CHAT, string);
								}
							}
							else if(Player[playerid][AdminLevel] > 7)
							{
								format(string, sizeof(string), "{00E3A3}[N]{00EEFF} Owner {00E3A3}%s{00EEFF}: %s ", GetName(playerid), params);
					            for(new i=0; i < MAX_PLAYERS; i++)
								{
									SendSplitMessage(i, NEWBIE_CHAT, string);
								}
							}
							else
							{
								if(Player[playerid][PlayingHours] < 1)
								{
									format(string, sizeof(string), "{00E3A3}[N]{00EEFF} %s {00E3A3}%s{00EEFF}: %s ", OOCRanks[Rank1], GetName(playerid), params);
									SendClientMessageToAll(NEWBIE_CHAT, string);
									Player[playerid][CanUseNewbie] = 0;
									SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
								}
								else if(Player[playerid][PlayingHours] >= 1 && Player[playerid][PlayingHours] < 25)
								{
									format(string, sizeof(string), "{00E3A3}[N]{00EEFF} %s {00E3A3}%s{00EEFF}: %s ", OOCRanks[Rank2], GetName(playerid), params);
									SendClientMessageToAll(NEWBIE_CHAT, string);
									Player[playerid][CanUseNewbie] = 0;
									SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
								}
								else if(Player[playerid][PlayingHours] >= 25 && Player[playerid][PlayingHours] < 100)
								{
									format(string, sizeof(string), "{00E3A3}[N]{00EEFF} %s {00E3A3}%s{00EEFF}: %s ", OOCRanks[Rank3], GetName(playerid), params);
									SendClientMessageToAll(NEWBIE_CHAT, string);
									Player[playerid][CanUseNewbie] = 0;
									SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
								}
								else if(Player[playerid][PlayingHours] >= 100 && Player[playerid][PlayingHours] < 300)
								{
									format(string, sizeof(string), "{00E3A3}[N]{00EEFF} %s {00E3A3}%s{00EEFF}: %s ", OOCRanks[Rank4], GetName(playerid), params);
									SendClientMessageToAll(NEWBIE_CHAT, string);
									Player[playerid][CanUseNewbie] = 0;
									SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
								}
								else if(Player[playerid][PlayingHours] >= 300)
								{
									format(string, sizeof(string), "{00E3A3}[N]{00EEFF} %s {00E3A3}%s{00EEFF}: %s ", OOCRanks[Rank5], GetName(playerid), params);
									SendClientMessageToAll(NEWBIE_CHAT, string);
									Player[playerid][CanUseNewbie] = 0;
									SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
								}
								OOCChatLog(string);
							}
						}
		    	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Please wait 30 seconds before submitting another message.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "Newbie Chat is currently unavailable.");
	    }
	}
	return 1;
}

command(phone, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PhoneN] != -1)
	{
	    if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][PrisonDuration] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][PhoneStat] == 0)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
	        if(Player[playerid][PhoneN] != -1)
	        {
				ShowPlayerDialog(playerid, 4512, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nNews\nContacts\n", "Select", "Cancel");
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need a mobile phone to use its menu.");
	}
	return 1;
}

command(n, playerid, params[])
{
	return cmd_newbie(playerid, params);
}

command(getmotd, playerid, params[])
{
	#pragma unused params
	new string[128];
    if(Player[playerid][Group] >= 1)
    {
        format(string, sizeof(string), "Group MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
        SendClientMessage(playerid, ANNOUNCEMENT, string);
    }
    return 1;
}

command(notetoplayer, playerid, params[])
{
	new note[128], name[128], string[128];
	if(sscanf(params, "sz", name, note))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /notetoplayer [name] [note]");
		}
	}
	else
	{
	    if(strlen(name) >= 1 && strlen(note) >= 1)
	    {
		    if(Player[playerid][AdminLevel] >= 1)
		    {
		        format(string, sizeof(string), "Accounts/%s.ini", name);

		        if(fexist(string))
		        {
		            dini_Set(string, "Note", note);
		            format(string, sizeof(string), "You have set %s's note to %s.", name, note);
		            SendClientMessage(playerid, WHITE, string);

		            format(string, sizeof(string), "%s has set %s's offline note to %s.", GetName(playerid), name, note);
		            AdminActionsLog(string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "That account doesn't exist.");
		        }
		    }
	    }
	}
	return 1;
}

command(motd, playerid, params[])
{
	new NewMOTD[128], string[128];
	if(sscanf(params, "z", NewMOTD))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /motd [message of the day]");
	}
	else
	{
	    if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 9)
	    {
	        if(strlen(NewMOTD) >= 1 && strlen(NewMOTD) < 60)
	        {
		        format(Groups[Player[playerid][Group]][MOTD], 128, "%s", NewMOTD);
		        format(string, sizeof(string), "You have changed your groups' MOTD to: %s.", NewMOTD);
		        SendClientMessage(playerid, WHITE, string);
		        format(string, sizeof(string), "The Group MOTD has been changed to: %s (by %s).", NewMOTD, GetName(playerid));
		        GroupMessage(playerid, ANNOUNCEMENT, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Your MOTD must be under 60 characters and more than 0.");
	        }
	    }
	}
	return 1;
}

command(changename, playerid, params[])
{
	new id, NewName[MAX_PLAYER_NAME];
	if(sscanf(params, "uz", id, NewName))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changename [playerid] [new name]");
		}
	}
	else
	{
	    new NameStr[40], CurrentName[MAX_PLAYER_NAME], string[128];

	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(Player[id][AdminLevel] >= 1 && Player[playerid][AdminLevel] < 5)
	        {
	            SendClientMessage(playerid, WHITE, "You must have permission from a level 5 to change another administrators' name.");
	        }
	        else
	        {
	            if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	            {
		            if(strlen(NewName) >= 3 && strlen(NewName) < MAX_PLAYER_NAME)
		            {
		                GetPlayerName(id, CurrentName, sizeof(CurrentName));
		                //format(string, sizeof(string), "scriptfiles/Accounts/%s.ini", CurrentName);
		                format(NameStr, sizeof(NameStr), "Accounts/%s.ini", NewName);

		                if(fexist(NameStr))
		                {
		                    SendClientMessage(playerid, WHITE, "That account name is already registered.");
		                }
		                else
		                {
		                    format(Player[id][NormalName], MAX_PLAYER_NAME, "%s", NewName);

		                    //file_delete(string);
		                    fremove(NameStr);

	          			    SetPlayerName(id, NewName);

	          			    SavePlayerData(id);

	          			    format(string, sizeof(string), "WARNING: Server Admin %s has renamed %s to %s.", GetName(playerid), CurrentName, NewName);
			           		AdminActionsLog(string);
			           		NamechangeLog(string);
			           		SendToAdmins(ADMINORANGE, string, 1);

			           		if(Player[id][Business] >= 1 || Player[id][House] >= 1)
			           		{
			           		    if(strcmp(Businesses[Player[id][Business]][bOwner], CurrentName, true) == 0)
			           		    {
				           			format(Businesses[Player[id][Business]][bOwner], MAX_PLAYER_NAME, "%s", NewName);
				           		}

			           		    if(strcmp(Houses[Player[id][House]][hOwner], CurrentName, true) == 0)
			           		    {
				           			format(Houses[Player[id][House]][hOwner], 255, "%s", NewName);
				           		}
			           		}

			           		format(string, sizeof(string), "Your name has been changed from %s to %s, by %s.", CurrentName, NewName, Player[playerid][AdminName]);
			           		SendClientMessage(id, WHITE, string);

			           		SendClientMessage(id, GREY, "Don't worry about re-connecting, just don't forget to change your name in the connection client!");

							if(Player[id][ActiveReport] >= 1)
							{
							    Player[id][ActiveReport] = 0;
								Player[playerid][AdminActions]++;
								SendClientMessage(playerid, WHITE, "You have earned an action!");
							}

						}

		            }
		            else
		            {
		                format(string, sizeof(string), "Names must be 3 - %d characters in length.", MAX_PLAYER_NAME);
		                SendClientMessage(playerid, WHITE, string);
		            }
	            }
	        }
		}
	}
	return 1;
}

command(despawncar, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 3)
	{
	    new string[128];

		for(new i = 0; i < SpawnedVehicles; i++)
		{
			if(AdminSpawned[i] == GetPlayerVehicleID(playerid))
			{
				AdminSpawned[i] = 0;
			}
		}

    	SendClientMessage(playerid, WHITE, "Vehicle de-spawned.");
       	DestroyVehicle(GetPlayerVehicleID(playerid));
       	format(string, sizeof(string), "%s has de-spawned a vehicle.", GetName(playerid));
       	AdminActionsLog(string);
	}
   	return 1;
}

command(abandonbusiness, playerid, params[])
{
	new Confirmation[7];
	if(sscanf(params, "z", Confirmation))
	{
		SendClientMessage(playerid, WHITE, "Are you SURE you want to abandon your business? Please type /abandonbusiness confirm");
	}
	else
	{
	    if(strcmp(Confirmation, "Confirm", true) == 0)
	    {
			if(Player[playerid][Business] != 0)
			{
			    format(Businesses[Player[playerid][Business]][bOwner], 255, "Nobody");
				Businesses[Player[playerid][Business]][bLockStatus] = 0;
				SendClientMessage(playerid, WHITE, "You have now abandoned your business.");
				SaveBusiness(Player[playerid][Business]);
				Player[playerid][Business] = 0;
			}
		}
	}
	return 1;
}

command(abandonhouse, playerid, params[])
{
	new Confirmation[7];
	if(sscanf(params, "z", Confirmation))
	{
		SendClientMessage(playerid, WHITE, "Are you SURE you want to abandon your house? Please type /abandonhouse confirm");
	}
	else
	{
	    if(strcmp(Confirmation, "Confirm", true) == 0)
	    {
			if(Player[playerid][House] != 0)
			{
			    format(Houses[Player[playerid][House]][hOwner], 255, "Nobody");
				SendClientMessage(playerid, WHITE, "You have now abandoned your house.");
				SaveHouse(Player[playerid][House]);
			    DestroyDynamicPickup(Houses[Player[playerid][House]][HPickupID]);
				Houses[Player[playerid][House]][HPickupID] = CreateDynamicPickup(1273, 23, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ], 0, -1, -1, 150.0);
				Player[playerid][House] = 0;
			}
		}
	}
	return 1;
}

command(buyhouse, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][House] == 0)
	{
		for(new h = 0; h < sizeof(Houses); h++)
		{
	    	if(IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]))
	    	{
	        	if(strcmp(Houses[h][hOwner], "Nobody", true) == 0)
				{
				    if(Houses[h][HousePrice] == -1)
				    {
				        SendClientMessage(playerid, WHITE, "This house isn't purchasable.");
				    }
				    else
				    {
				    	if(Player[playerid][VipRank] < 3)
				    	{
   							if(Player[playerid][Money] >= Houses[h][HousePrice])
					    	{
					        	Player[playerid][Money] -= Houses[h][HousePrice];
						        format(Houses[h][hOwner], 128, "%s", GetName(playerid));
						        format(string, sizeof(string), "Congratulations! You are now the owner of this property (House %d)", h);
						        SendClientMessage(playerid, ANNOUNCEMENT, string);
						        Player[playerid][House] = h;
				        	    DestroyDynamicPickup(Houses[h][HPickupID]);
								Houses[h][HPickupID] = CreateDynamicPickup(1272, 23, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ], 0, -1, -1, 150.0);
						        SaveHouse(h);
						        SendClientMessage(playerid, WHITE, "By purchasing a house, you've unlocked a bunch of new commands; use /help to find them out!");
						    }
						    else
						    {
						        SendClientMessage(playerid, WHITE, "You do not have enough money to purchase this house.");
						    }
				    	}
				    	else
				    	{
							new newHousePrice = Houses[h][HousePrice];
							newHousePrice -= (Houses[h][HousePrice] / 100) * 25;

							if(Player[playerid][Money] >= newHousePrice)
							{
							    Player[playerid][Money] -= newHousePrice;
						        format(Houses[h][hOwner], 128, "%s", GetName(playerid));
						        format(string, sizeof(string), "Congratulations! You are now the owner of this property (House %d)", h);
						        SendClientMessage(playerid, ANNOUNCEMENT, string);
						        Player[playerid][House] = h;
				        	    DestroyDynamicPickup(Houses[h][HPickupID]);
								Houses[h][HPickupID] = CreateDynamicPickup(1272, 23, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ], 0, -1, -1, 150.0);
							}
							else
						    {
						        SendClientMessage(playerid, WHITE, "You do not have enough money to purchase this house.");
						    }
				    	}
				    }
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "Sorry, this house is not available!");
				}
	    	}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You already have a house, type /abandonhouse.");
	}
	return 1;
}

command(spawnownedcar, playerid, params[])
{
	new id, vehslot, string[128];
	if(sscanf(params, "ud", id, vehslot))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spawnownedcar [playerid] [1-3]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            switch(vehslot)
	            {
	                case 1:
	                {
			            if(Player[id][PlayerCarModel] >= 1)
			            {
						    if(Player[id][CarLinkID] >= 1)
						    {
						        DestroyVehicle(Player[id][CarLinkID]);
						        Player[id][CarLinkID] = 0;
						        OwnedCarCount--;
						        CarCount--;
						    }

						    SpawnOwnedCar(id, vehslot);

						    format(string, sizeof(string), "You have re-spawned %s's vehicle (slot %d)", GetName(id), vehslot);
						    SendClientMessage(playerid, WHITE, string);
			            }
	            	}
	                case 2:
	                {
			            if(Player[id][PlayerCarModel2] >= 1)
			            {
						    if(Player[id][Car2LinkID] >= 1)
						    {
						        DestroyVehicle(Player[id][Car2LinkID]);
						        Player[id][Car2LinkID] = 0;
						        OwnedCarCount--;
						        CarCount--;
						    }

						    SpawnOwnedCar(id, vehslot);

						    format(string, sizeof(string), "You have re-spawned %s's vehicle (slot %d)", GetName(id), vehslot);
						    SendClientMessage(playerid, WHITE, string);
			            }
		            }
	                case 3:
	                {
			            if(Player[id][PlayerCarModel3] >= 1)
			            {
						    if(Player[id][Car3LinkID] >= 1)
						    {
						        DestroyVehicle(Player[id][Car3LinkID]);
						        Player[id][Car3LinkID] = 0;
						        OwnedCarCount--;
						        CarCount--;
						    }

						    SpawnOwnedCar(id, vehslot);

						    format(string, sizeof(string), "You have re-spawned %s's vehicle (slot %d)", GetName(id), vehslot);
						    SendClientMessage(playerid, WHITE, string);
			            }
		            }
		    	}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

/*command(setgroupcommandtype, playerid, params[])
{
	new id, groupid, string[128];
	if(sscanf(params, "uu", id, groupid))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /setgroupcommandtype [id] [group id]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
		    Groups[groupid][CommandTypes] = id;
			format(string, sizeof(string), "You have set group id %d's command type to %d", groupid, id);
			SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}*/

command(clotheslocker, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    if(Player[playerid][GroupRank] >= 4)
	    {
			new string[65];
	        if(CLOTHESEnabled == 0)
	        {
	            CLOTHESEnabled = 1;
	            format(string, sizeof(string), "The undercover locker has been enabled by %s!", GetName(playerid));
	            GroupMessage(playerid, PURPLE, string);
	        }
	        else
	        {
	            CLOTHESEnabled = 0;
	            format(string, sizeof(string), "The undercover locker has been disabled by %s!", GetName(playerid));
	            GroupMessage(playerid, PURPLE, string);
	        }
	    }
	}
	return 1;
}

command(swatinv, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    if(Player[playerid][GroupRank] >= 4)
	    {
			new string[65];
	        if(SWATEnabled == 0)
	        {
	            SWATEnabled = 1;
	            format(string, sizeof(string), "The SWAT inventory has been enabled by %s!", GetName(playerid));
	            GroupMessage(playerid, PURPLE, string);
	        }
	        else
	        {
	            SWATEnabled = 0;
	            format(string, sizeof(string), "The SWAT inventory has been disabled by %s!", GetName(playerid));
	            GroupMessage(playerid, PURPLE, string);
	        }
	    }
	}
	return 1;
}


command(buybusiness, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Business] == 0)
	{
		for(new b = 0; b < sizeof(Businesses); b++)
		{
	    	if(IsPlayerInRangeOfPoint(playerid, 5, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]))
	    	{
	        	if(strcmp(Businesses[b][bOwner], "Nobody", true) == 0)
				{
					if(Businesses[b][bPrice] == -1)
					{
					    SendClientMessage(playerid, WHITE, "This business isn't purchasable.");
					}
					else
					{
				    	if(Player[playerid][Money] >= Businesses[b][bPrice])
				    	{
				        	Player[playerid][Money] -= Businesses[b][bPrice];
					        format(Businesses[b][bOwner], MAX_PLAYER_NAME, "%s", GetName(playerid));
					        format(string, sizeof(string), "Congratulations! You are now the owner of %s.", Businesses[b][bName]);
					        SendClientMessage(playerid, ANNOUNCEMENT, string);
					        Player[playerid][Business] = b;
					        SaveBusiness(b);
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "You do not have enough money to purchase this business.");
					    }
				    }
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "Sorry, this business is not available!");
				}
	    	}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You already have a Business, type /abandonbusiness.");
	}
	return 1;
}

command(aw, playerid, params[])
{
	new id, Names[2][MAX_PLAYER_NAME];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /aw [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnected(id))
		    {
				GetPlayerName(id, Names[0], MAX_PLAYER_NAME);
				GetPlayerName(playerid, Names[1], MAX_PLAYER_NAME);

		        new string[128];
		        format(string, sizeof(string), "You have warped %s to the Newbie Spawn.", GetName(id));
		        SendClientMessage(playerid, WHITE, string);
		        SetPlayerInterior(id, SpawnInt);
		        SetPlayerPos(id, SpawnX, SpawnY, SpawnZ);
		        SetPlayerVirtualWorld(id, 0);
		        format(string, sizeof(string), "%s has admin-warped you to the Newbie Spawn.", GetName(playerid));
		        SendClientMessage(id, WHITE, string);

		        TextDrawHideForPlayer(id, ExitTextdraw);

		        format(string, sizeof(string), "%s has been warped to the noob spawn by %s.", Names[0], Names[1]);
		        AdminActionsLog(string);
		    }
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected.");
			}
		}
	}
	return 1;
}

command(sellsupplies, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 5)
	{
		if(Player[playerid][SupplyT] >= 1)
		{
		    if(Businesses[Player[playerid][InBusiness]][bType] == 12 || Businesses[Player[playerid][InBusiness]][bType] == 1 || Businesses[Player[playerid][InBusiness]][bType] == 2 || Businesses[Player[playerid][InBusiness]][bType] == 3 || Businesses[Player[playerid][InBusiness]][bType] == 5)
		    {
		        if(Businesses[Player[playerid][InBusiness]][bVault] >= 1000)
		        {
		            if(Player[playerid][SupplyT] == Businesses[Player[playerid][InBusiness]][bType])
		            {
			        	Businesses[Player[playerid][InBusiness]][bVault] -= 250;
			        	Player[playerid][Money] += 250;
			        	Businesses[Player[playerid][InBusiness]][bSupplies] += 25;
			        	Player[playerid][SupplyT] = 0;
			        	SendClientMessage(playerid, WHITE, "You have earned $250 for delivering 25 supplies.");
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "You're not in the business you selected to deliver supplies to.");
			        }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "The business you're trying to sell to has insufficient safe funds (they need $1,000).");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're not in the business you selected to deliver supplies to.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You don't have any supplies.");
		}
	}
	return 1;
}

command(changejobmessage, playerid, params[])
{
	new string[128], jobid, id, name[128];
	if(sscanf(params, "ddz", jobid, id, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changejobmessage [job id] [id (1-2)] [new name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        format(string, sizeof(string), "Jobs/Job_%d.ini", jobid);

	        if(fexist(string))
	        {
	            switch(id)
	            {
	                case 1:
	                {
			            format(Jobs[jobid][JobMiscLocationOneMessage], 128, "%s", name);
			            dini_Set(string, "JobMiscLocationOneMessage", Jobs[jobid][JobMiscLocationOneMessage]);
			            format(string, sizeof(string), "You've changed message 1 with job %d's message to %s.", jobid, name);
			            SendClientMessage(playerid, WHITE, string);
					}

	                case 2:
	                {
			            format(Jobs[jobid][JobMiscLocationTwoMessage], 128, "%s", name);
			            dini_Set(string, "JobMiscLocationTwoMessage", Jobs[jobid][JobMiscLocationTwoMessage]);
			            format(string, sizeof(string), "You've changed message 2 with job %d's message to %s.", jobid, name);
			            SendClientMessage(playerid, WHITE, string);
					}

					default: SendClientMessage(playerid, WHITE, "SYNTAX: /changejobmessage [job id] [id (1-2)] [new name]");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Invalid Job ID.");
	        }
	    }
	}
	return 1;
}

command(changejobname, playerid, params[])
{
	new string[128], id, name[128];
	if(sscanf(params, "dz", id, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changejobname [id] [new name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        format(string, sizeof(string), "Jobs/Job_%d.ini", id);

	        if(fexist(string))
	        {
	            format(Jobs[id][JobName], 128, "%s", name);
	            dini_Set(string, "JobName", Jobs[id][JobName]);
	            format(string, sizeof(string), "Job name changed to '%s'.", name);
	            SendClientMessage(playerid, WHITE, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Invalid Job ID.");
	        }
	    }
	}
	return 1;
}

command(gunname, playerid, params[])
{
	new value[128], results, strings[128];
	if(sscanf(params, "z", value))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gunname [name/weaponid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	        for(new i; i < sizeof(WeaponNames); i++)
	        {
	            if(strfind(WeaponNames[i], value, true) != -1)
	            {
				    if(results == 0)
				    {
	                    format(strings, sizeof(strings), "%s", WeaponNames[i]);
					}
					else
					{
					    format(strings, sizeof(strings), "%s, %s", strings, WeaponNames[i]);
					}

					results++;

	   				if(strlen(strings) > 118)
		   			{
					   SendClientMessage(playerid, WHITE, "Too many results found! Please search more specified!");
					   SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
					   return 1;
					}
	            }
	        }

			if(results == 0)
			{
			    SendClientMessage(playerid, WHITE, "Sorry, no weapons found.");
			    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Results:");
				SendClientMessage(playerid, WHITE, strings);
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
		}
	}
	return 1;
}

command(stopdrag, playerid, params[])
{
	#pragma unused params

	new string[73];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnectedEx(i) && Player[i][BeingDraggedBy] == playerid)
	    {
	        format(string, sizeof(string), "* %s has stopped dragging %s.", GetName(playerid), GetName(i));
	        NearByMessage(playerid, RPCOLOUR, string);
	        Player[i][BeingDraggedBy] = -1;
	    }
	}

	return 1;
}

command(drag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /drag [playerid]");
	}
	else
	{
	    if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 7)
	        {
	            Player[id][BeingDraggedBy] = playerid;
				format(string, sizeof(string), "You have started to drag %s.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            format(string, sizeof(string), "* %s grabs ahold of %s and starts dragging them.", GetName(playerid), GetName(id));
	            NearByMessage(playerid, RPCOLOUR, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're too far away!");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "Your target has to be either tied or cuffed.");
	    }
	}
	return 1;
}

command(agiveweapon, playerid, params[])
{
	new WeaponN[60], Names[2][MAX_PLAYER_NAME], string[128], id, weaponid;
	if(sscanf(params, "ud", id, weaponid))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /agiveweapon [playerid] [weaponid] (Special Weapon: 19 - Jetpack)");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	    	    if(weaponid >= 1 && weaponid < 47)
	    	    {

					GetPlayerName(id, Names[0], MAX_PLAYER_NAME);
					GetPlayerName(playerid, Names[1], MAX_PLAYER_NAME);

	    	        if(weaponid == 19)
	    	        {
					    SetPlayerSpecialAction(id, SPECIAL_ACTION_USEJETPACK);
					    format(string, sizeof(string), "You have given %s a Jetpack (Weapon ID: 19).", GetName(id), weaponid);
		    			SendClientMessage(playerid, WHITE, string);
		    			format(string, sizeof(string), "You have been given a Jetpack, from %s.", GetName(playerid));
		    			SendClientMessage(id, WHITE, string);
		    			Player[id][HasJetpack] = 1;

		        		format(string, sizeof(string), "%s has been given weapon %d by %s.", Names[0], weaponid, Names[1]);
		        		AdminActionsLog(string);
	    	        }
	    	        else
	    	        {
				    	GetWeaponName(weaponid, WeaponN, sizeof(WeaponN));
					    GivePlayerWeaponEx(id, weaponid);
					    format(string, sizeof(string), "You have given %s a %s (Weapon ID: %d).", GetName(id), WeaponN, weaponid);
		    			SendClientMessage(playerid, WHITE, string);
		    			format(string, sizeof(string), "You have been given a %s, from %s.", WeaponN, GetName(playerid));
		    			SendClientMessage(id, WHITE, string);

		        		format(string, sizeof(string), "%s has been given weapon %d by %s.", Names[0], weaponid, Names[1]);
		        		AdminActionsLog(string);
	    			}
    			}
    			else
    			{
    			    SendClientMessage(playerid, WHITE, "Invalid weapon ID.");
    			}
	    	}
	    	else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(specoff, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
	    new string[128];

		Spectator[playerid][SpecSpectatingPlayer] = -1;

		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);

		SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
		SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
		SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
		SetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);

		SendClientMessage(playerid, WHITE, "You've finished your session of spectating.");
		Player[playerid][IsSpeccing] = 0;

		Player[playerid][Hospitalized] = -1;

		Player[playerid][PhoneStat] = 1;
		Player[playerid][ResetTimer] = 1;

		format(string, sizeof(string), "%s has finished spectating.", GetName(playerid));
		AdminActionsLog(string);
	}
	return 1;
}

command(businessname, playerid, params[])
{
	new Name[255], string[128];
	if(sscanf(params, "z", Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /businessname [New Name]");
	}
	else
	{
	    if(strlen(Name) >= 1 && strlen(Name) < 15)
	    {
	        if(strfind(Name, "~", true))
	        {
		        format(string, sizeof(string), "You have changed your business name to %s.", Name);
		        SendClientMessage(playerid, WHITE, string);
		        Businesses[Player[playerid][Business]][bName] = Name;
	        }
	        else
	        {
		        SendClientMessage(playerid, WHITE, "You may not use the '~' character.");
	        }

	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "Names must be shorter than 15 characters, and higher than 1 character.");
	    }
	}
	return 1;
}

command(spec, playerid, params[])
{
	new id, string[128], Float: health, Float: armour, healthf, armourf;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spec [playerid] (type /specoff to finish spectating)");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			if(IsPlayerConnectedEx(id))
			{
			    if(Spectator[playerid][SpecSpectatingPlayer] == -1)
			    {
					GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
					GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
					Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
					Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
				}

		    	Player[playerid][PhoneStat] = 0;

			    format(string, sizeof(string), "You are now spectating Player %s.", GetName(id));
				Player[playerid][IsSpeccing] = 1;
			    SendClientMessage(playerid, GREY, string);
			    GetPlayerHealth(id, health);
				GetPlayerArmour(id, armour);
				healthf = floatround(health, floatround_ceil);
				armourf = floatround(armour, floatround_ceil);

				SetPlayerInterior(playerid, GetPlayerInterior(id));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));

			    format(string, sizeof(string), "Health: %d | Armour: %d | Money: %d", healthf, armourf, Player[id][Money]);
			    SendClientMessage(playerid, WHITE, string);
			    Spectator[playerid][SpecSpectatingPlayer] = id;
			    TogglePlayerSpectating(playerid, true);

			    if(IsPlayerInAnyVehicle(id))
				{
				    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
				    Spectator[playerid][SpecSpectatingState] = 1;
				}
				else
				{
					PlayerSpectatePlayer(playerid, id);
					Spectator[playerid][SpecSpectatingState] = 2;
				}

			    Spectator[playerid][SpecSpectatingPlayer] = id;
			    SpectatorRefresh(playerid, id);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(bar, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bar [1-12]");
	}
	else
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
		    switch(id)
		    {
		        case 1: ApplyAnimationEx(playerid, "BAR", "Barcustom_get", 3.1, 0, 1, 1, 1, 1);
		        case 2: ApplyAnimationEx(playerid, "BAR", "Barcustom_loop", 3.1, 1, 1, 1, 1, 1);
		        case 3: ApplyAnimationEx(playerid, "BAR", "Barcustom_order", 3.1, 0, 1, 1, 1, 1);
		        case 4: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 3.1, 0, 1, 1, 1, 1);
		        case 5: ApplyAnimationEx(playerid, "BAR", "Barserve_bottle", 3.1, 0, 1, 1, 1, 1);
		        case 6: ApplyAnimationEx(playerid, "BAR", "Barserve_give", 3.1, 0, 1, 1, 1, 1);
		        case 7: ApplyAnimationEx(playerid, "BAR", "Barserve_glass", 3.1, 0, 1, 1, 1, 1);
		        case 8: ApplyAnimationEx(playerid, "BAR", "Barserve_in", 3.1, 0, 1, 1, 1, 1);
		        case 9: ApplyAnimationEx(playerid, "BAR", "Barserve_loop", 3.1, 1, 1, 1, 1, 1);
		        case 10: ApplyAnimationEx(playerid, "BAR", "Barserve_order", 3.1, 0, 1, 1, 1, 1);
		        case 11: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 3.1, 1, 1, 1, 1, 1);
		        case 12: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 3.1, 1, 1, 1, 1, 1);
		    }
		}
	}
	return 1;
}

command(hide, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You can't do this right now.");
	}
	else
	{
		ApplyAnimationEx(playerid, "ped", "cower", 4.1, 0, 1, 1, 0, 0);
	}
	return 1;
}

command(handsup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][IsAtEvent] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You're unable to do that at this time.");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed or tied.");
		}
		else
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
		}
	}
	return 1;
}

command(rap, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /rap [style: 1/2/3/4]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][IsAtEvent] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
	    else
	    {
		    switch(id)
		    {
				case 1: ApplyAnimationEx(playerid, "RAPPING", "RAP_A_Loop", 3.1, 1, 1, 1, 1, 1);
				case 2: ApplyAnimationEx(playerid, "RAPPING", "RAP_C_Loop", 3.1, 1, 1, 1, 1, 1);
				case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 3.1, 1, 1, 1, 1, 1);
				case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 3.1, 1, 1, 1, 1, 1);
				default: SendClientMessage(playerid, WHITE, "SYNTAX: /rap [style: 1/2/3/4]");
		    }
	    }
	}
	return 1;
}

command(reload, playerid, params[])
{
    new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /reload [1/2]");
	}
	else
	{
	    switch(id)
	    {
	        case 1:
	        {
	            ApplyAnimationEx(playerid, "COLT45", "colt45_reload", 4.0, 0, 1, 1, 1, 1);
	        }
	        case 2:
	        {
	            ApplyAnimationEx(playerid, "UZI", "UZI_reload", 4.0, 0, 1, 1, 1, 1);
	        }
	    }
	}
	return 1;
}

command(laugh, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
	    ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.0, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(dance, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /dance [style: 1/2/3/4]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
	    else
	    {
		    switch(id)
		    {
				case 1:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
				}
				case 2:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
		    	}
				case 3:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
		    	}
				case 4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
		    	}
				default: SendClientMessage(playerid, WHITE, "SYNTAX: /dance [style: 1/2/3/4]");
		    }
	    }
	}
	return 1;
}

command(sit, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "SEAT_down", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(gsit, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(fallback, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "FLOOR_hit_f", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(wave, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 3.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

/*command(spank, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "SWEET", "sweet_ass_slap", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(middlefinger, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "fucku", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}*/

command(chat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "IDLE_CHAT", 3.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(deal, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "DEALER", "DEALER_DEAL", 3.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(badge, playerid, params[])
{
	if(Player[playerid][Group] == 1 || Player[playerid][Group] == 3)
	{
		if(Player[playerid][BadgeNumber] > 0)
		{
			new string3[255];
			format(string3, sizeof(string3), "* %s has looked at their badge.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string3);
			new string[255], string2[255];
			SendClientMessage(playerid, GREY, "--- Red County Sheriff's Department ---");
			format(string2, sizeof(string2), "%s", GetName(playerid));
			format(string, sizeof(string), "Badge number: %d", Player[playerid][BadgeNumber]);
			SendClientMessage(playerid, WHITE, string2);
			SendClientMessage(playerid, WHITE, string);
			SendClientMessage(playerid, GREY, "--- Red County Sheriff's Department ---");
		}
		else
		{
			SendClientMessage(playerid, -1, "You don't have a badge!");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not in the RCSD/Government!");
	}
}

command(copduty, playerid, params[])
{
	if(Player[playerid][Group] == 1 || Player[playerid][Group] == 3)
	{
		if(Player[playerid][CopDuty] == 0)
		{
			Player[playerid][CopDuty] = 1;
			SendClientMessage(playerid, WHITE, "You're now on police duty!");
		}
		else
		{
			Player[playerid][CopDuty] = 0;
			ResetPlayerWeaponsEx(playerid);
			SendClientMessage(playerid, WHITE, "You're now off police duty.");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not in the RCSD/Government!");
	}
}

command(fbadge, playerid, params[])
{
	if(Player[playerid][Group] == 4)
	{
		if(Player[playerid][MedicDuty] == 0)
		{
			Player[playerid][MedicDuty] = 1;
			SendClientMessage(playerid, WHITE, "You're now on duty!");
		}
		else if(Player[playerid][MedicDuty] == 1)
		{
			Player[playerid][MedicDuty] = 0;
			SendClientMessage(playerid, WHITE, "You're now off duty.");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not in the LSFD");
	}
}

command(vomit, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(bomb, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant_Loop", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(crack, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

/*command(piss, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		SetPlayerSpecialAction(playerid, 68);
		TextDrawShowForPlayer(playerid, AnimationTextDraw);
		Player[playerid][IsInAnimation] = 1;
	}
	return 1;
}*/

command(crossarms, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 1, 1, 0, 0, 0, 0);
	}
	return 1;
}

command(robman, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You can't do this right now.");
	}
	else
	{
		ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 0, 1, 1, 0, 0);
	}
	return 1;
}

command(gsign, playerid, params[])
{
	if(Player[playerid][Cuffed] == 1 || Player[playerid][Tazed] == 1 || Player[playerid][Tied] == 1)
	{
			SendClientMessage(playerid, WHITE, "You can't do this right now.");
	}
	else
	{
		ApplyAnimationEx(playerid, "GHANDS", "gsign1", 1, 1, 0, 0, 0, 0);
	}
	return 1;
}

command(pedmove, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /pedmove [(1-10)]");
	}
	else
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
		    switch(id)
		    {
		        case 1:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 0, 0);
		        }
		        case 2:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_walkold", 4.1,1,1,1,0,0);
		        }
		        case 3:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1,1,1,1,0,0);
		        }
		        case 4:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_runfatold", 4.1,1,1,1,0,0);
		        }
		        case 5:
		        {
		            ApplyAnimationEx(playerid, "PED", "woman_runpanic", 4.1,1,1,1,0,0);
		        }
		        case 6:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_drunk", 4.1,1,1,1,0,0);
		        }
		        case 7:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1,1,1,1,0,0);
		        }
		        case 8:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1,1,1,1,0,0);
		        }
		        case 9:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_csaw", 4.1,1,1,1,0,0);
		        }
		        case 10:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1,1,1,1,0,0);
		        }
		        default:
		        {
		            SendClientMessage(playerid, WHITE, "SYNTAX: /pedmove [id (1-10)]");
		        }
	        }
	    }
	}
	return 1;
}

command(togpms, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PMsEnabled] == 1)
	{
	    Player[playerid][PMsEnabled] = 0;
	    SendClientMessage(playerid, WHITE, "You have disabled PMs.");
	}
	else
	{
	    Player[playerid][PMsEnabled] = 1;
	    SendClientMessage(playerid, WHITE, "You have enabled PMs");
	}
	return 1;
}

command(listgroups, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
		new string[128];
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
		for(new i = 0; i < MAX_GROUPS; i++)
		{
			format(string, sizeof(string), "Groups/Group_%d.ini", i);
			if(fexist(string))
			{
			    format(string, sizeof(string), "Name: %s (ID: %d) | Type: %d.", Groups[i][GroupName], i, Groups[i][CommandTypes]);
			    SendClientMessage(playerid, GREY, string);
			}
		}
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	}
	return 1;
}

command(donate, playerid, params[])
{
	new amount, string[128];
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /donate [amount]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 8)
	    {
	        if(Player[playerid][Money] >= amount)
	        {
	            if(amount < 1)
	            {
	                SendClientMessage(playerid, WHITE, "SYNTAX: /donate [amount]");
	            }
	            else
	            {
	                Player[playerid][Money] -= amount;
	                Businesses[Player[playerid][InBusiness]][bVault] += amount;
	                format(string, sizeof(string), "You have donated $%d to this charity!", amount);
	                SendClientMessage(playerid, WHITE, string);
	                format(string, sizeof(string), "%s has donated $%d.", GetName(playerid), amount);
	                NearByMessage(playerid, RPCOLOUR, string);
	                format(string, sizeof(string), "[BUSINESS DONATION] %s has donated %d to business %d (owned by %s).", amount, Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bOwner]);
	                MoneyLog(string);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You don't have that much to donate.");
	        }
	    }
	}
	return 1;
}

command(changeplayercar, playerid, params[])
{
	new id, carid, vehslot, string[128];
	if(sscanf(params, "udd", id, carid, vehslot))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeplayercar [playerid] [carid] [1-3]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            switch(vehslot)
	            {
	                case 1:
	                {
			            if(carid >= 400 && carid < 611)
			            {
				            if(Player[id][PlayerCarModel] >= 1)
				            {
							    if(Player[id][CarLinkID] >= 1)
							    {
							        DestroyVehicle(Player[id][CarLinkID]);
							        Player[id][CarLinkID] = 0;
							        OwnedCarCount--;
							        CarCount--;
							    }

							    Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;

							    Player[id][PlayerCarModel] = carid;
							    SpawnOwnedCar(id, 1);
							    format(string, sizeof(string), "You have changed %s's car model %d for their owned car (slot 1)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    Player[id][PlayerCarModel] = carid;
							    SpawnOwnedCar(id, 1);
							    format(string, sizeof(string), "You have given %s car model %d for their owned car (slot 1)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid car ID!");
						}
	                }
	                case 2:
	                {
			            if(carid >= 400 && carid < 611)
			            {
				            if(Player[id][PlayerCarModel2] >= 1)
				            {
							    if(Player[id][Car2LinkID] >= 1)
							    {
							        DestroyVehicle(Player[id][Car2LinkID]);
							        Player[id][Car2LinkID] = 0;
							        OwnedCarCount--;
							        CarCount--;
							    }

							    Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;

							    Player[id][PlayerCarModel2] = carid;
							    SpawnOwnedCar(id, 2);
							    format(string, sizeof(string), "You have changed %s's car model %d for their owned car (slot 2)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    Player[id][PlayerCarModel2] = carid;
							    SpawnOwnedCar(id, 2);
							    format(string, sizeof(string), "You have given %s car model %d for their owned car (slot 2)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid car ID!");
						}
	                }
	                case 3:
	                {
			            if(carid >= 400 && carid < 611)
			            {
				            if(Player[id][PlayerCarModel3] >= 1)
				            {
							    if(Player[id][Car3LinkID] >= 1)
							    {
							        DestroyVehicle(Player[id][Car3LinkID]);
							        Player[id][Car3LinkID] = 0;
							        OwnedCarCount--;
							        CarCount--;
							    }

							    Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;

							    Player[id][PlayerCarModel3] = carid;
							    SpawnOwnedCar(id, 3);
							    format(string, sizeof(string), "You have changed %s's car model %d for their owned car (slot 3)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    Player[id][PlayerCarModel3] = carid;
							    SpawnOwnedCar(id, 3);
							    format(string, sizeof(string), "You have given %s car model %d for their owned car (slot 3)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid car ID!");
						}
	                }
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	}
	return 1;
}

command(deployspikes, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		new bool:breakingloop = false, newid = INVALID_OBJECT_ID, string[128];

	    for(new i=0;i<MAX_SPIKES;i++)
	    {
	        if(!breakingloop)
	        {
		        if(SpikeStrips[i][sX] == 0 && SpikeStrips[i][sY] == 0 && SpikeStrips[i][sZ] == 0) // Checking for next available ID.
		        {
					breakingloop = true;
					newid = i;
		        }
	        }
	    }

	    if(newid != INVALID_OBJECT_ID)
	    {
		    GetPlayerPos(playerid, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]);
		    GetPlayerFacingAngle(playerid, SpikeStrips[newid][sZRot]);
		    SpikeStrips[newid][sObjectID] = CreateObject(2899, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]-0.8, 0.0, 0.0, SpikeStrips[newid][sZRot]);
		    format(string,sizeof(string),"Spike ID: %d successfully created.", newid);
		    SendClientMessage(playerid, WHITE, string);
	    }
	    else
	    {
		    SendClientMessage(playerid, WHITE, "Unable to spawn more strips, limit is 10.");
	    }
	}
	return 1;
}

command(destroyspikes, playerid, params[])
{
	new id, string[128];
	if (!sscanf(params, "i", id))
	{
        if(SpikeStrips[id][sX] == 0 && SpikeStrips[id][sY] == 0 && SpikeStrips[id][sZ] == 0)
        {
            return SendClientMessage(playerid, WHITE, "Invalid spike ID.");
        }
        else
        {
            DestroyObject(SpikeStrips[id][sObjectID]);
            SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
            SpikeStrips[id][sXRot] = 0; SpikeStrips[id][sYRot] = 0; SpikeStrips[id][sZRot] = 0;
            SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
            format(string,sizeof(string),"Spike ID: %d successfully deleted.", id);
    		SendClientMessage(playerid, WHITE, string);
        }
	}
	else return SendClientMessage(playerid, WHITE, "SYNTAX: /destroyspikes [id]");
	return 1;
}

command(deploybarrier, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		new bool:breakingloop = false, newid = INVALID_OBJECT_ID, string[128];

	    for(new i=0;i<MAX_BARRIERS;i++)
	    {
	        if(!breakingloop)
	        {
		        if(Barrier[i][sX] == 0 && Barrier[i][sY] == 0 && Barrier[i][sZ] == 0) // Checking for next available ID.
		        {
					breakingloop = true;
					newid = i;
		        }
	        }
	    }

	    if(newid != INVALID_OBJECT_ID)
	    {
		    GetPlayerPos(playerid, Barrier[newid][sX], Barrier[newid][sY], Barrier[newid][sZ]);
		    GetPlayerFacingAngle(playerid, Barrier[newid][sZRot]);
		    Barrier[newid][sObjectID] = CreateObject(978, Barrier[newid][sX], Barrier[newid][sY], Barrier[newid][sZ]-0.8, 0.0, 0.0, Barrier[newid][sZRot]);
		    format(string,sizeof(string),"Barrier ID: %d successfully created.", newid);
		    SendClientMessage(playerid, WHITE, string);
	    }
	    else
	    {
		    SendClientMessage(playerid, WHITE, "Unable to spawn more barriers, limit is 10.");
	    }
	}
	return 1;
}

command(destroybarrier, playerid, params[])
{
	new id, string[128];
	if (!sscanf(params, "i", id))
	{
        if(Barrier[id][sX] == 0 && Barrier[id][sY] == 0 && Barrier[id][sZ] == 0)
        {
            return SendClientMessage(playerid, WHITE, "Invalid barrier ID.");
        }
        else
        {
            DestroyObject(Barrier[id][sObjectID]);
            Barrier[id][sX] = 0; Barrier[id][sY] = 0; Barrier[id][sZ] = 0;
            Barrier[id][sXRot] = 0; Barrier[id][sYRot] = 0; Barrier[id][sZRot] = 0;
            Barrier[id][sObjectID] = INVALID_OBJECT_ID;
            format(string,sizeof(string),"Barrier ID: %d successfully deleted.", id);
    		SendClientMessage(playerid, WHITE, string);
        }
	}
	else return SendClientMessage(playerid, WHITE, "SYNTAX: /destroybarriers [id]");
	return 1;
}

command(deploybarrier2, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		new bool:breakingloop = false, newid = INVALID_OBJECT_ID, string[128];

	    for(new i=0;i<MAX_BARRIERS2;i++)
	    {
	        if(!breakingloop)
	        {
		        if(Barrier2[i][sX] == 0 && Barrier2[i][sY] == 0 && Barrier2[i][sZ] == 0) // Checking for next available ID.
		        {
					breakingloop = true;
					newid = i;
		        }
	        }
	    }

	    if(newid != INVALID_OBJECT_ID)
	    {
		    GetPlayerPos(playerid, Barrier2[newid][sX], Barrier2[newid][sY], Barrier2[newid][sZ]);
		    GetPlayerFacingAngle(playerid, Barrier2[newid][sZRot]);
		    Barrier2[newid][sObjectID] = CreateObject(1237, Barrier2[newid][sX], Barrier2[newid][sY], Barrier2[newid][sZ]-0.8, 0.0, 0.0, Barrier2[newid][sZRot]);
		    format(string,sizeof(string),"Barrier ID: %d successfully created.", newid);
		    SendClientMessage(playerid, WHITE, string);
	    }
	    else
	    {
		    SendClientMessage(playerid, WHITE, "Unable to spawn more barriers, limit is 10.");
	    }
	}
	return 1;
}

command(destroybarrier2, playerid, params[])
{
	new id, string[128];
	if (!sscanf(params, "i", id))
	{
        if(Barrier2[id][sX] == 0 && Barrier2[id][sY] == 0 && Barrier2[id][sZ] == 0)
        {
            return SendClientMessage(playerid, WHITE, "Invalid barrier ID.");
        }
        else
        {
            DestroyObject(Barrier2[id][sObjectID]);
            Barrier2[id][sX] = 0; Barrier2[id][sY] = 0; Barrier2[id][sZ] = 0;
            Barrier2[id][sXRot] = 0; Barrier2[id][sYRot] = 0; Barrier2[id][sZRot] = 0;
            Barrier2[id][sObjectID] = INVALID_OBJECT_ID;
            format(string,sizeof(string),"Barrier ID: %d successfully deleted.", id);
    		SendClientMessage(playerid, WHITE, string);
        }
	}
	else return SendClientMessage(playerid, WHITE, "SYNTAX: /destroybarriers2 [id]");
	return 1;
}

command(fingerprint, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /fingerprint [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 1)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        if(GetDistanceBetweenPlayers(id, playerid) < 7)
		        {
		            if(Player[id][Cuffed] >= 1)
		            {
		                new Name[2][MAX_PLAYER_NAME];

		                GetPlayerName(id, Name[0], MAX_PLAYER_NAME);
		                GetPlayerName(playerid, Name[1], MAX_PLAYER_NAME);

	                	if(Player[id][CriminalOffences] == 0)
	                	{
		                    format(string, sizeof(string), "* %s has grabbed ahold of %s's finger, placing it on the scanner.", Name[1], Name[0]);
		                    NearByMessage(playerid, RPCOLOUR, string);

		                    SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
		               		SendClientMessage(playerid, GREY, "The PDA returns a null result.");
		                    SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
		               	}
		               	else
		               	{
	                        format(string, sizeof(string), "* %s has grabbed ahold of %s's finger, placing it on the scanner.", Name[1], Name[0]);
	                        NearByMessage(playerid, RPCOLOUR, string);
	                        SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
	                        SendClientMessage(playerid, GREY, "The PDA returns a result, matching the entered print.");
	                        format(string, sizeof(string), "The print traces back to a %s.", Name[0]);
	                        SendClientMessage(playerid, GREEN, string);
	                        SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You must cuff them, first.");
		            }
		        }
		        else
		        {
              		SendClientMessage(playerid, WHITE, "You're not close enough.");
		        }
		    }
	    }
	}
	return 1;
}

command(attempt, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /attempt [action]");
	}
	else
	{
	    if(strlen(Message) < 1)
	    {
	        return 1;
	    }

		if(random(10) < 6)
		{
		    format(string, sizeof(string), "[ATTEMPT] * %s has attempted to %s, and succeeded.", GetName(playerid), Message);
			NearByMessage(playerid, RPCOLOUR, string);
		}
		else
		{
		    format(string, sizeof(string), "[ATTEMPT] * %s has attempted to %s, but failed.", GetName(playerid), Message);
			NearByMessage(playerid, RPCOLOUR, string);
		}
	}
	return 1;
}

command(buyid, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InGroupHQ] == 3)
	{
	    if(Player[playerid][Money] >= 100)
	    {
	        Player[playerid][Money] -= 100;
	        Player[playerid][Identity]++;
			Groups[3][SafeMoney] += 100;
	        SendClientMessage(playerid, WHITE, "You have successfully purchased some identification!");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must have at least $100.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must be inside City Hall.");
	}

	return 1;
}

CMD:vehicledata(playerid)
{
	new string[128];
	if(IsPlayerInAnyVehicle(playerid))
	{
		format(string, sizeof(string), "IG ID: %d || GameID: %d || CarID: %d ||", GetPlayerVehicleID(playerid), Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][GameID], Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarID]);
		SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

CMD:windows(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new string[128];
		if(WindowStatus[GetPlayerVehicleID(playerid)] == 1) // Closed
		{
			format(string, sizeof(string), "* %s presses a button, rolling down the windows.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);
			WindowStatus[GetPlayerVehicleID(playerid)] = 0;
		}
		else // open
		{
			new nonwindowvehicles[18] = {448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 581, 586, 473, 452, 453, 454};
			for(new i; i < 19; i++)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == nonwindowvehicles[i])
				{
					SendClientMessage(playerid, WHITE, "This vehicle does not have any windows.");
					break;
				}
				else
				{
					if(i == 17)
					{
						format(string, sizeof(string), "* %s presses a button, rolling up the windows.", GetName(playerid));
						NearByMessage(playerid, PURPLE, string);
						WindowStatus[GetPlayerVehicleID(playerid)] = 1;
						break;
					}
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You need to be in a vehicle to use this command.");
	}
	return 1;
}

CMD:requesttaxi(playerid, params[])
{
	new Message[256];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /requesttaxi [Enter your location/message]");
	}
	else
	{
		new cab_drivers, string[128], string2[128];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(Jobs[Player[i][Job]][JobType] == 6)
			{
				cab_drivers++;
				format(string, sizeof(string), "%s has requested a taxi at the following location.", GetName(playerid));
				format(string2, sizeof(string2), "Location: %s", Message);
				SendClientMessage(i, GREY, "===========================================");
				SendClientMessage(i, YELLOW, string);
				SendClientMessage(i, YELLOW, string2);
				SendClientMessage(i, GREY, "===========================================");
			}
		}
		if(cab_drivers == 0)
		{
			SendClientMessage(playerid, WHITE, "There are no cab drivers available at this moment.");
		}
		else
		{
			SendClientMessage(playerid, WHITE, "A message has been sent out to all available cab drivers.");
		}
	}
	return 1;
}

CMD:registerhouse(playerid, params[])
{
	if(Player[playerid][House] != 0 && Player[playerid][HouseReg] == 0)
	{
        if(Player[playerid][InGroupHQ] == 3)
        {
            if(Player[playerid][Money] >= 1500)
            {
                SendClientMessage(playerid, WHITE, "You have succesfully registered your home.");
				Player[playerid][HouseReg] = 1;
            }
			else if(Player[playerid][Money] < 1500)
			{
				SendClientMessage(playerid, WHITE, "You need $1,500 to be able to register your home.");
			}
        }
        else if(Player[playerid][InGroupHQ] != 3)
        {
			SendClientMessage(playerid, WHITE, "You need to be at the City Hall to register your home.");
        }
	{
	}
	}
}

/*command(buylic, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InGroupHQ] == 3)
	{
	    if(Player[playerid][Money] >= 250)
	    {
	        Player[playerid][Money] -= 250;
	        Player[playerid][License]++;
			Groups[3][SafeMoney] += 250;
	        SendClientMessage(playerid, WHITE, "You have successfully purchased a valid drivers license");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must have at least $250.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must be inside City Hall.");
	}

	return 1;
}*/

command(announce, playerid, params[])
{
	new Announcement[128], string[128];
	if(sscanf(params, "z", Announcement))
	{
		if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /announce [message]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			if(strlen(Announcement) >= 1)
			{
			    format(string, sizeof(string), "((Announcement from Server Admin %s: %s)) ", Player[playerid][AdminName], Announcement);
			    SendClientMessageToAll(LIGHTRED, string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "SYNTAX: /announce [message]");
			}
		}
	}
	return 1;
}

command(recordcrime, playerid, params[])
{
	new id, string[128], Crime[128];
	if(sscanf(params, "uz", id, Crime))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /recordcrime [playerid] [offence]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(strlen(Crime) < 1)
	            {
	                SendClientMessage(playerid, WHITE, "SYNTAX: /recordcrime [playerid] [offence]");
	            }
	            else
	            {
	                switch(GetPlayerWantedLevel(id))
	                {
	                    case 0:
	                    {
	                        SetPlayerWantedLevel(id, 1);
	                        format(Player[id][Offence1], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 1:
	                    {
	                        SetPlayerWantedLevel(id, 2);
	                        format(Player[id][Offence2], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 2:
	                    {
	                        SetPlayerWantedLevel(id, 3);
	                        format(Player[id][Offence3], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 3:
	                    {
	                        SetPlayerWantedLevel(id, 4);
	                        format(Player[id][Offence4], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 4:
	                    {
	                        SetPlayerWantedLevel(id, 5);
	                        format(Player[id][Offence5], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 5:
	                    {
	                        SetPlayerWantedLevel(id, 6);
	                        format(Player[id][Offence6], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 6:
	                    {
	                        SendClientMessage(playerid, WHITE, "That person already has 6 stars (maximum wanted level).");
	                    }
	                }
	        	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	}
	return 1;
}

command(wanted, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnectedEx(i))
		    {
		        if(GetPlayerWantedLevel(i) >= 1)
		        {
		            format(string, sizeof(string), "%s is wanted with %d active offences.", GetName(i), GetPlayerWantedLevel(i));
		            SendClientMessage(playerid, ADMINORANGE, string);
		        }
		    }
		}
		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

command(joinjob, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Job] < 1)
	{
		for(new h = 0; h < sizeof(Jobs); h++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobJoinPosX], Jobs[h][JobJoinPosY], Jobs[h][JobJoinPosZ]))
		    {
		        if(Jobs[h][JobType] == 3)
		        {
		            if(Player[playerid][PlayingHours] >= 2 || Player[playerid][VipRank] >= 1)
					{
			        	format(string, sizeof(string), "Congratulations. You have now become a %s.", Jobs[h][JobName]);
			        	SendClientMessage(playerid, WHITE, string);
			        	Player[playerid][Job] = h;
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You need 2+ hours or VIP Bronze+ to join this job.");
					}
				}
				else
				{
				    format(string, sizeof(string), "Congratulations. You have now become a %s.", Jobs[h][JobName]);
		        	SendClientMessage(playerid, WHITE, string);
		        	Player[playerid][Job] = h;
				}
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You already have a job (type /quitjob first).");
	}
	return 1;
}

command(creategun, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 1)
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You cannot do this right now.");
	    }
	    else
	    {
			if(Player[playerid][InHouse] > 0)
			{
			    for(new i = 1; i < MAX_FURNITURE; i++)
			    {
			        if(Furniture[i][frVW] == GetPlayerVirtualWorld(playerid))
			        {
			            if(Furniture[i][frObjectID] == 2370)
			            {
							ShowPlayerDialog(playerid, 969, DIALOG_STYLE_LIST, "Weapon Selection", "Katana (30 materials)\nCane (30 materials)\nPool Cue (33 materials)\nBaseball Bat (35 materials)\nShovel (50 materials)\nColt 45 (250 materials)\nSilenced Pistol (300 materials)\nPump Action Shotgun (550 materials)\nDesert Eagle (680 materials)\nMP5 (850 materials)\nMicro SMG (900 materials)\nAK-47 (1500 materials)\nM4A1 (2000 materials)\nSniper Rifle (2450 materials)\nCombat Shotgun (2550 materials)", "Select", "Cancel");
			                break;
			            }
			        }
			    }
			}
			else
			{
			    ShowPlayerDialog(playerid, 969, DIALOG_STYLE_LIST, "Weapon Selection", "Katana (30 materials)\nCane (30 materials)\nPool Cue (33 materials)\nBaseball Bat (35 materials)\nShovel (50 materials)\nColt 45 (250 materials)\nSilenced Pistol (300 materials)\nPump Action Shotgun (550 materials)", "Select", "Cancel");
			}
		}
	}
	return 1;
}

command(quitjob, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Job] >= 1)
	{
	    if(Player[playerid][Checkpoint] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "Reach the checkpoint first, or re-connect.");
	    }
	    else
	    {
		    format(string, sizeof(string), "You have quit your job (%s).", Jobs[Player[playerid][Job]][JobName]);
		    SendClientMessage(playerid, WHITE, string);
		    Player[playerid][Job] = 0;
	    }
	}
	return 1;
}

command(getmats, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InabilityToMatrun] >= 1)
	{
		SendClientMessage(playerid, WHITE, "Please wait the reload time, that is 1 minute.");
	}
	else
	{
		for(new h = 0; h < sizeof(Jobs); h++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
		    {
		        if(Player[playerid][Job] == h && Jobs[Player[playerid][Job]][JobType] == 1)
		        {
		            if(Jobs[h][JobMiscLocationOneWorld] == GetPlayerVirtualWorld(playerid))
		            {
		                if(Player[playerid][Checkpoint] == 0)
						{
		                    if(Player[playerid][Money] >= 100)
		                    {
					            isMatRunning[playerid] = 1;
					            SetPlayerCheckpoint(playerid, Jobs[h][JobMiscLocationTwoX], Jobs[h][JobMiscLocationTwoY], Jobs[h][JobMiscLocationTwoZ], 3.0);
                                SendClientMessage(playerid, WHITE, "You've received the location, head to the checkpoint to collect them.");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You need $100 to collect materials. ($200 for people with VIP bronze+)");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You already have an active checkpoint. Finish your matrun/car scrap first.");
				        }
			        }
		        }
			}
		}
	}
	return 1;
}

command(buyfightstyle, playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] == 10)
	{
	    ShowPlayerDialog(playerid, 4591, DIALOG_STYLE_LIST, "Fighting Styles", "Boxing ($500)\nKung Fu ($600)\nKneehead ($700)\nGrabkick ($800)\nElbow ($900)", "Select", "Cancel");
	}
	return 1;
}

command(usefightstyle, playerid, params[])
{
    ShowPlayerDialog(playerid, 4592, DIALOG_STYLE_LIST, "Fighting Styles", "Boxing\nKung Fu\nKneehead\nGrabkick\nElbow\nNormal", "Select", "Cancel");
    return 1;
}

command(cuff, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /cuff [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	        if(Player[id][Tazed] == 1)
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                TogglePlayerControllable(id, false);
	                SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
	            	Player[id][Cuffed] = 1;
	            	Player[id][Tazed] = 0;
	            	format(string, sizeof(string), "* %s has cuffed %s.", GetName(playerid), GetName(id));
	            	NearByMessage(playerid, RPCOLOUR, string);
	            	format(string, sizeof(string), "You have cuffed %s.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "You have been cuffed by %s.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
					TogglePlayerControllable(id, false);
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away!");
	            }
	        }
	        else
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                if(GetPlayerSpecialAction(id) == SPECIAL_ACTION_HANDSUP)
	                {
	                    TogglePlayerControllable(id, false);
		                SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
		            	Player[id][Cuffed] = 1;
		            	Player[id][Tazed] = 0;
		            	format(string, sizeof(string), "* %s has cuffed %s.", GetName(playerid), GetName(id));
		            	NearByMessage(playerid, RPCOLOUR, string);
		            	format(string, sizeof(string), "You have cuffed %s.", GetName(id));
						SendClientMessage(playerid, WHITE, string);
		            	format(string, sizeof(string), "You have been cuffed by %s.", GetName(playerid));
						SendClientMessage(id, WHITE, string);
						TogglePlayerControllable(id, false);
	                }
	            }
	        }
	    }
	}
	return 1;
}

command(createjob, playerid, params[])
{
	new type, name[128], string[128];
	if(sscanf(params, "dz", type, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /createjob [type] [name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strlen(name) >= 1 && strlen(name) < 20)
	        {
	            SpawnedJobs++;
	            new id = SpawnedJobs++;
	            format(string, sizeof(string), "Jobs/Job_%d.ini", id);
	            dini_Create(string);

	            if(fexist(string))
	            {
		            format(Jobs[id][JobName], 255, "%s", name);
		            Jobs[id][JobJoinPosX] = 0.0;
		            Jobs[id][JobJoinPosY] = 0.0;
		            Jobs[id][JobJoinPosZ] = 0.0;
		            Jobs[id][JobJoinPosWorld] = 0;
		            Jobs[id][JobJoinPosInterior] = 0;

		            Jobs[id][JobMiscLocationOneX] = 0.0;
		            Jobs[id][JobMiscLocationOneY] = 0.0;
		            Jobs[id][JobMiscLocationOneZ] = 0.0;
		            Jobs[id][JobMiscLocationOneWorld] = 0;
		            format(Jobs[id][JobMiscLocationOneMessage], 255, "Nothing");

		            Jobs[id][JobMiscLocationTwoX] = 0.0;
		            Jobs[id][JobMiscLocationTwoY] = 0.0;
		            Jobs[id][JobMiscLocationTwoZ] = 0.0;
		            Jobs[id][JobMiscLocationTwoWorld] = 0;
		            format(Jobs[id][JobMiscLocationTwoMessage], 255, "Nothing");

		            Jobs[id][JobType] = type;

		            dini_Set(string, "JobName", Jobs[id][JobName]);
		            dini_FloatSet(string, "JobJoinPosX", Jobs[id][JobJoinPosX]);
		            dini_FloatSet(string, "JobJoinPosY", Jobs[id][JobJoinPosY]);
		            dini_FloatSet(string, "JobJoinPosZ", Jobs[id][JobJoinPosZ]);
		            dini_IntSet(string, "JobJoinPosWorld", Jobs[id][JobJoinPosWorld]);
		            dini_IntSet(string, "JobJoinPosInterior", Jobs[id][JobJoinPosInterior]);

		            dini_FloatSet(string, "JobMiscLocationOneX", Jobs[id][JobMiscLocationOneX]);
		            dini_FloatSet(string, "JobMiscLocationOneY", Jobs[id][JobMiscLocationOneY]);
		            dini_FloatSet(string, "JobMiscLocationOneZ", Jobs[id][JobMiscLocationOneZ]);
		            dini_IntSet(string, "JobMiscLocationOneWorld", Jobs[id][JobMiscLocationOneWorld]);
		            dini_IntSet(string, "JobMiscLocationOneInterior", Jobs[id][JobMiscLocationOneInterior]);
		            dini_Set(string, "JobMiscLocationOneMessage", Jobs[id][JobMiscLocationOneMessage]);

		            dini_FloatSet(string, "JobMiscLocationTwoX", Jobs[id][JobMiscLocationTwoX]);
		            dini_FloatSet(string, "JobMiscLocationTwoY", Jobs[id][JobMiscLocationTwoY]);
		            dini_FloatSet(string, "JobMiscLocationTwoZ", Jobs[id][JobMiscLocationTwoZ]);
		            dini_IntSet(string, "JobMiscLocationTwoWorld", Jobs[id][JobMiscLocationTwoWorld]);
		            dini_IntSet(string, "JobMiscLocationTwoInterior", Jobs[id][JobMiscLocationTwoInterior]);
		            dini_Set(string, "JobMiscLocationTwoMessage", Jobs[id][JobMiscLocationTwoMessage]);

					dini_IntSet(string, "JobType", Jobs[id][JobType]);

					format(string, sizeof(string), "You have created job %s (ID: %d) and set the type to %d (use /movejob to change the jobs locations).", name, id, type);
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "An unexpected error has occured.");
				}
	        }
	    }
	}
	return 1;
}

command(home, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it or re-connect.");
	}
	else
	{
	    if(Player[playerid][House] >= 1)
	    {
		    Player[playerid][Checkpoint] = 1;
		    Player[playerid][FindingHouse] = 1;
		    SetPlayerCheckpoint(playerid, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ], 40.0);
		    SendClientMessage(playerid, WHITE, "A checkpoint has been set to your house!");
	    }
	}
	return 1;
}

/*command(dropcar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You already have an existing checkpoint, for a matrun or something else.");
	}
	else
	{
	    if(Player[playerid][InabilityToDropCar] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "Please wait the reload time, that is 30 minutes.");
	    }
	    else
	    {
		    if(IsPlayerInAnyVehicle(playerid))
		    {
				Player[playerid][Checkpoint] = 1;
			    SetPlayerCheckpoint(playerid, DropCarX, DropCarY, DropCarZ, 3.0);
			    SendClientMessage(playerid, WHITE, "Deliver your vehicle to the red checkpoint.");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must be in a vehicle to do this.");
		    }
	    }
	}
	return 1;
}*/

command(arrest, playerid, params[])
{
	new id, string[128], time, fine;
	if(sscanf(params, "udd", id, time, fine))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /arrest [playerid] [time (1 minute - 50 minutes)] [fine ($0 - $35000)");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	    {
	        if(fine < 40001 && fine >= 0)
	        {
	            if(time < 51)
	            {
					if(IsPlayerInRangeOfPoint(playerid, 5, ArrestPosX, ArrestPosY, ArrestPosZ))
					{
				    	if(GetDistanceBetweenPlayers(playerid, GetClosestPlayer(playerid))  < 5)
				    	{
				        	if(Player[GetClosestPlayer(playerid)][Cuffed] >= 1)
				        	{
				        	    if(GetPlayerWantedLevel(GetClosestPlayer(playerid)) >= 1)
				        	    {
				        	    	new ArrestedPlayer = GetClosestPlayer(playerid);
				            		Player[ArrestedPlayer][Money] -= fine;
				            		Groups[Player[playerid][Group]][SafeMoney] += fine;
				            		format(string, sizeof(string), "You have been arrested by %s. You have been given %d minutes jail time.", GetName(playerid), time);
				            		SendClientMessage(ArrestedPlayer, PURPLE, string);
				            		format(string, sizeof(string), "%s has arrested criminal %s, giving them %d minutes jail time.", GetName(playerid), GetName(ArrestedPlayer), time);
				            		GroupMessage(playerid, ANNOUNCEMENT, string);
		    						Player[ArrestedPlayer][PrisonDuration] = MinutesToSeconds(time);
		    						Player[ArrestedPlayer][PrisonID] = 2;
		    						Player[ArrestedPlayer][Cuffed] = 0;
									SetPlayerSpecialAction(ArrestedPlayer, SPECIAL_ACTION_NONE);
		    						ResetPlayerWeaponsEx(ArrestedPlayer);

		    						ClearCriminalRecord(ArrestedPlayer);

		    						TogglePlayerControllable(ArrestedPlayer, true);

	    							SetPlayerInterior(ArrestedPlayer, Prison2Int);
	    							SetPlayerPos(ArrestedPlayer, Prison2X, Prison2Y, Prison2Z);
	   	 							SetPlayerVirtualWorld(ArrestedPlayer, Prison2World);

	   	 							SetPlayerArmour(ArrestedPlayer, 0);
	   	 						}
	   	 						else
	   	 						{
	   	 							SendClientMessage(playerid, WHITE, "You can't arrest someone who doesn't have a criminal record.");
	   	 						}
				        	}
				        	else
				        	{
				        	    SendClientMessage(playerid, WHITE, "The nearest player must be cuffed, in order to arrest them.");
				        	}
				   		}
			   		}
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You can't fine for under $0, or over $35000.");
			}
	    }
	}
	return 1;
}

command(deliver, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 11)
	{
	    if(Player[playerid][Harvesting] == 7)
	    {
	        if(Businesses[Player[playerid][InBusiness]][bVault] >= 5000)
	        {
	            if(Businesses[Player[playerid][InBusiness]][bSupplyStatus] == 0)
	            {
		            Businesses[Player[playerid][InBusiness]][bSupplies] += 50;
		            Businesses[Player[playerid][InBusiness]][bVault] -= 5000;
		            Player[playerid][Money] += 5000;
		            Player[playerid][Harvesting] = 0;
		            SendClientMessage(playerid, WHITE, "You have finished the run and earned $5,000.");
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "This business isn't currently accepting deliveries.");
		        }
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not on a delivery.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not in a chemistry / pharmacy.");
	}
	return 1;
}

command(auncuff, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /auncuff [playerid]");
	}
	else
	{
	    if(Player[playerid][AdminLevel] < 3)
	    {
	        SendClientMessage(playerid, WHITE, "You're not an admin / you're not a level 3 admin.");
	    }
	    else
	    {
	        if(id == playerid)
	        {
	            SendClientMessage(playerid, WHITE, "You're unable to do this right now.");
	        }
	        else
	        {
		        if(Player[id][Cuffed] >= 1)
		        {
		            if(GetDistanceBetweenPlayers(playerid, id) < 7)
		            {
		            	Player[id][Cuffed] = 0;
		            	format(string, sizeof(string), "You have been uncuffed by Administrator %s.", GetName(playerid));
		            	SendClientMessage(id, WHITE, string);
		            	format(string, sizeof(string), "Admin %s has uncuffed %s.", GetName(playerid), GetName(id));
		            	NearByMessage(playerid, GREY, string);
		            	format(string, sizeof(string), "You have uncuffed %s.", GetName(id));
		            	SendClientMessage(playerid, WHITE, string);
		            	TogglePlayerControllable(id, true);
		            	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		            	ClearAnimations(id);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You're too far away!");
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(oocuncuff, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /oocuncuff [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 4)
	    {
	        SendClientMessage(playerid, WHITE, "You're not a Law Enforcement Officer.");
	    }
	    else
	    {
	        if(id == playerid)
	        {
	            SendClientMessage(playerid, WHITE, "You're unable to do this right now.");
	        }
	        else
	        {
		        if(Player[id][Cuffed] >= 1)
		        {
		            if(GetDistanceBetweenPlayers(playerid, id) < 7)
		            {
		            	// Player[id][Cuffed] = 0;
		            	format(string, sizeof(string), "You have been OOCly uncuffed by %s.", GetName(playerid));
		            	SendClientMessage(id, WHITE, string);
		            	format(string, sizeof(string), "You have OOCly uncuffed %s.", GetName(id));
		            	SendClientMessage(playerid, WHITE, string);
		            	TogglePlayerControllable(id, true);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You're too far away!");
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(uncuff, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /uncuff [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 4)
	    {
	        SendClientMessage(playerid, WHITE, "You're not a Law Enforcement Officer.");
	    }
	    else
	    {
	        if(id == playerid)
	        {
	            SendClientMessage(playerid, WHITE, "You're unable to do this right now.");
	        }
	        else
	        {
		        if(Player[id][Cuffed] >= 1)
		        {
		            if(GetDistanceBetweenPlayers(playerid, id) < 7)
		            {
		            	Player[id][Cuffed] = 0;
		            	format(string, sizeof(string), "You have been uncuffed by %s.", GetName(playerid));
		            	SendClientMessage(id, WHITE, string);
		            	format(string, sizeof(string), "* %s has uncuffed %s.", GetName(playerid), GetName(id));
		            	NearByMessage(playerid, RPCOLOUR, string);
		            	format(string, sizeof(string), "You have uncuffed %s.", GetName(id));
		            	SendClientMessage(playerid, WHITE, string);
		            	TogglePlayerControllable(id, true);
		            	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		            	ClearAnimations(id);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You're too far away!");
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(elevator, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid, 5, 265.90891, 114.87791, 1003.61450) || IsPlayerInRangeOfPoint(playerid, 5, 621.2130, -569.1777, 26.1432) || IsPlayerInRangeOfPoint(playerid, 5, 1568.68970, -1691.43201, 4.87843))
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
			ShowPlayerDialog(playerid, 3928, DIALOG_STYLE_LIST, "Elevator", "Rooftop Level\nInterior Level", "Select", "Cancel");
		}
	}
	return 1;
}

command(go, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
		ShowPlayerDialog(playerid, 1529, DIALOG_STYLE_LIST, "Select a Location", "Popular Locations\nEvent Locations", "Select", "Cancel");
	}
	return 1;
}

command(showid, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /showid [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    if(GetDistanceBetweenPlayers(playerid, id) < 7)
		    {
			    if(Player[playerid][Identity] >= 1)
			    {
			        SendClientMessage(id, GREY, "---------------------------------------------------------------------------------------------------------------------------------");

					SendClientMessage(id, WHITE, "- Personal Identification, Registered Citizen of San Andreas. - ");
					format(string, sizeof(string), "Name: %s", GetName(playerid));
				    SendClientMessage(id, WHITE, string);
				    format(string, sizeof(string), "Age: %d", Player[playerid][Age]);
				    SendClientMessage(id, GREY, string);

				    if(Player[id][House] >= 1)
				    {
				        new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

						if(Player[playerid][HouseReg] == 0)
						{
                            format(string, sizeof(string), "Doesn't own a house or it isn't registered.", Player[id][Age], location);
						}
						else if(Player[playerid][HouseReg] == 1)
						{
						    format(string, sizeof(string), "Registered House Address: %d %s Road.", Player[id][House], location);
						}

					    SendClientMessage(id, GREY, string);
				    }

				    SendClientMessage(id, GREY, "---------------------------------------------------------------------------------------------------------------------------------");

					format(string, sizeof(string), "* %s has shown %s their ID.", GetName(playerid), GetName(id));
				    NearByMessage(playerid, PURPLE, string);
 				}
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You need to buy an ID.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're too far away.");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
	    }
	}
	return 1;
}

command(showlic, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /showlic [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    if(GetDistanceBetweenPlayers(playerid, id) < 7)
		    {
			    if(Player[playerid][License] >= 1)
			    {
			        SendClientMessage(id, GREY, "---------------------------------------------------------------------------------------------------------------------------------");

					SendClientMessage(id, WHITE, "- Drivers license of Red County. - ");
					format(string, sizeof(string), "Name: %s", GetName(playerid));
				    SendClientMessage(id, WHITE, string);
				    format(string, sizeof(string), "Age: %d", Player[playerid][Age]);
				    SendClientMessage(id, GREY, string);

				    if(Player[id][House] >= 1)
				    {
				        new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

				    }

				    SendClientMessage(id, GREY, "---------------------------------------------------------------------------------------------------------------------------------");

					format(string, sizeof(string), "You have shown %s your drivers license.", GetName(id));
				    SendClientMessage(playerid, WHITE, string);
				}
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You need to buy a drivers license.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're too far away.");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
	    }
	}
	return 1;
}

command(resetplayer, playerid, params[])
{
    new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /resetplayer [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			Player[id][MatrunInabilityDuration] = 0;
			Player[id][InabilityToDropCar] = 0;
			Player[id][InabilityTrash] = 0;
			Player[id][CantFish] = 0;
			Player[id][CarModDelay] = 0;
			Player[id][DetectiveCooldown] = 0;
		    format(string, sizeof(string), "You've reset %s's abillities.", GetName(id));
		    SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(movelocation, playerid, params[])
{
	new Location[128];
	if(sscanf(params, "z", Location))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /movelocation [usage]");
			SendClientMessage(playerid, GREY, "Prison, Jail, Spawn, LockerPos, Hospital, ArrestPos, BankInt, BankExt, OwnedCarSpawn");
	        SendClientMessage(playerid, GREY, "LockerPos2, Harvest1, Harvest2, Harvest3, Harvest4, Harvest5, PrisonDoor1Ext, PrisonDoor1Int");
			SendClientMessage(playerid, GREY, "PrisonDoor2Ext, PrisonDoor2Int, FishLocation");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			if(strcmp(Location, "FishLocation", true) == 0)
			{
				GetPlayerPos(playerid, FishX, FishY, FishZ);

				dini_FloatSet("Assets.ini", "FishX", FishX);
	        	dini_FloatSet("Assets.ini", "FishY", FishY);
	        	dini_FloatSet("Assets.ini", "FishZ", FishZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the fishing location.");
			}
	    	if(strcmp(Location, "Prison", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Prison1X, Prison1Y, Prison1Z);
	        	Prison1Int = GetPlayerInterior(playerid);
	        	Prison1World = GetPlayerVirtualWorld(playerid);

	        	dini_FloatSet("Assets.ini", "Prison1X", Prison1X);
	        	dini_FloatSet("Assets.ini", "Prison1Y", Prison1Y);
	        	dini_FloatSet("Assets.ini", "Prison1Z", Prison1Z);
	        	dini_IntSet("Assets.ini", "Prison1Int", Prison1Int);
	        	dini_IntSet("Assets.ini", "Prison1World", Prison1World);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison location.");
	    	}
     	    else if(strcmp(Location, "Harvest1", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest1X, Harvest1Y, Harvest1Z);

	        	dini_FloatSet("Assets.ini", "Harvest1X", Harvest1X);
	        	dini_FloatSet("Assets.ini", "Harvest1Y", Harvest1Y);
	        	dini_FloatSet("Assets.ini", "Harvest1Z", Harvest1Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest1 location.");
	    	}
     	    else if(strcmp(Location, "Harvest2", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest2X, Harvest2Y, Harvest2Z);

	        	dini_FloatSet("Assets.ini", "Harvest2X", Harvest2X);
	        	dini_FloatSet("Assets.ini", "Harvest2Y", Harvest2Y);
	        	dini_FloatSet("Assets.ini", "Harvest2Z", Harvest2Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest2 location.");
	    	}
     	    else if(strcmp(Location, "Harvest3", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest3X, Harvest3Y, Harvest3Z);

	        	dini_FloatSet("Assets.ini", "Harvest3X", Harvest3X);
	        	dini_FloatSet("Assets.ini", "Harvest3Y", Harvest3Y);
	        	dini_FloatSet("Assets.ini", "Harvest3Z", Harvest3Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest3 location.");
	    	}
     	    else if(strcmp(Location, "Harvest4", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest4X, Harvest4Y, Harvest4Z);

	        	dini_FloatSet("Assets.ini", "Harvest4X", Harvest4X);
	        	dini_FloatSet("Assets.ini", "Harvest4Y", Harvest4Y);
	        	dini_FloatSet("Assets.ini", "Harvest4Z", Harvest4Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest4 location.");
	    	}
     	    else if(strcmp(Location, "Harvest5", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest5X, Harvest5Y, Harvest5Z);

	        	dini_FloatSet("Assets.ini", "Harvest5X", Harvest5X);
	        	dini_FloatSet("Assets.ini", "Harvest5Y", Harvest5Y);
	        	dini_FloatSet("Assets.ini", "Harvest5Z", Harvest5Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest5 location.");
	    	}
     	    else if(strcmp(Location, "OwnedCarSpawn", true) == 0)
	    	{
	        	GetPlayerPos(playerid, OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);

	        	dini_FloatSet("Assets.ini", "OwnedCarSpawnX", OwnedCarSpawnX);
	        	dini_FloatSet("Assets.ini", "OwnedCarSpawnY", OwnedCarSpawnY);
	        	dini_FloatSet("Assets.ini", "OwnedCarSpawnZ", OwnedCarSpawnZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Owned Car Spawn location.");
	    	}
	    	else if(strcmp(Location, "BankExt", true) == 0)
	    	{
	        	GetPlayerPos(playerid, BankExtX, BankExtY, BankExtZ);

				DestroyDynamicPickup(BankPickupID);
				BankPickupID = CreateDynamicPickup(1239, 23, BankExtX, BankExtY, BankExtZ, 0, -1, -1, 150.0);

	        	dini_FloatSet("Assets.ini", "BankExtX", BankExtX);
	        	dini_FloatSet("Assets.ini", "BankExtY", BankExtY);
	        	dini_FloatSet("Assets.ini", "BankExtZ", BankExtZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the BankExt location.");
	    	}
	    	else if(strcmp(Location, "DropCar", true) == 0)
	    	{
	        	GetPlayerPos(playerid, DropCarX, DropCarY, DropCarZ);

	        	dini_FloatSet("Assets.ini", "DropCarX", DropCarX);
	        	dini_FloatSet("Assets.ini", "DropCarY", DropCarY);
	        	dini_FloatSet("Assets.ini", "DropCarZ", DropCarZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the DropCar location.");
	    	}
	    	else if(strcmp(Location, "BankInt", true) == 0)
	    	{
	        	GetPlayerPos(playerid, BankIntX, BankIntY, BankIntZ);
	        	BankIntID = GetPlayerInterior(playerid);

	        	dini_FloatSet("Assets.ini", "BankIntX", BankIntX);
	        	dini_FloatSet("Assets.ini", "BankIntY", BankIntY);
	        	dini_FloatSet("Assets.ini", "BankIntZ", BankIntZ);
	        	dini_IntSet("Assets.ini", "BankIntID", BankIntID);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the BankInt location.");
	    	}
	    	else if(strcmp(Location, "PrisonDoor2Ext", true) == 0)
	    	{
	    	    GetPlayerPos(playerid, PrisonDoor2X, PrisonDoor2Y, PrisonDoor2Z);
	    	    PrisonDoor2Int1 = GetPlayerInterior(playerid);

	    	    dini_FloatSet("Assets.ini", "PrisonDoor2X", PrisonDoor2X);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor2Y", PrisonDoor2Y);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor2Z", PrisonDoor2Z);

	    	    dini_IntSet("Assets.ini", "PrisonDoor2Int1", PrisonDoor2Int1);

	    	    SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison Door 2 exterior");
	    	}
	    	else if(strcmp(Location, "PrisonDoor2Int", true) == 0)
	    	{
	    	    GetPlayerPos(playerid, PrisonDoor2X, PrisonDoor2Y, PrisonDoor2Z);
	    	    PrisonDoor2Int2 = GetPlayerInterior(playerid);

	    	    dini_FloatSet("Assets.ini", "PrisonDoor2X2", PrisonDoor2X2);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor2Y2", PrisonDoor2Y2);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor2Z2", PrisonDoor2Z2);

	    	    dini_IntSet("Assets.ini", "PrisonDoor2Int2", PrisonDoor2Int2);

	    	    SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison Door 2 interior");
	    	}
	    	else if(strcmp(Location, "PrisonDoor1Ext", true) == 0)
	    	{
	    	    GetPlayerPos(playerid, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z);

	    	    DestroyDynamicPickup(PrisonPickup1);

	    	    dini_FloatSet("Assets.ini", "PrisonDoor1X", PrisonDoor1X);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor1Y", PrisonDoor1Y);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor1Z", PrisonDoor1Z);

                PrisonPickup1 = CreateDynamicPickup(1239, 23, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z, 0, -1, -1, 150.0);

	    	    SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison Door 1 exterior.");
	    	}
	    	else if(strcmp(Location, "PrisonDoor1Int", true) == 0)
	    	{
	    	    GetPlayerPos(playerid, PrisonDoor1X1, PrisonDoor1Y1, PrisonDoor1Z1);
	    	    PrisonDoor1Int = GetPlayerInterior(playerid);

	    	    DestroyDynamicPickup(PrisonPickup1);

	    	    dini_FloatSet("Assets.ini", "PrisonDoor1X1", PrisonDoor1X1);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor1Y1", PrisonDoor1Y1);
	    	    dini_FloatSet("Assets.ini", "PrisonDoor1Z1", PrisonDoor1Z1);

	    	    dini_IntSet("Assets.ini", "PrisonDoor1Int", PrisonDoor1Int);

                PrisonPickup1 = CreateDynamicPickup(1239, 23, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z, 0, -1, -1, 150.0);

	    	    SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison Door 1 interior.");
	    	}
	    	else if(strcmp(Location, "ArrestPos", true) == 0)
	    	{
	        	GetPlayerPos(playerid, ArrestPosX, ArrestPosY, ArrestPosZ);

	        	DestroyDynamicPickup(ArrestPosPickup);

	        	dini_FloatSet("Assets.ini", "ArrestPosX", ArrestPosX);
	        	dini_FloatSet("Assets.ini", "ArrestPosY", ArrestPosY);
	        	dini_FloatSet("Assets.ini", "ArrestPosZ", ArrestPosZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the ArrestPos location.");

				ArrestPosPickup = CreateDynamicPickup(1239, 23, ArrestPosX, ArrestPosY, ArrestPosZ, 0, -1, -1, 150.0);
			}
	    	else if(strcmp(Location, "Jail", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Prison2X, Prison2Y, Prison2Z);
	        	Prison2Int = GetPlayerInterior(playerid);
	        	Prison2World = GetPlayerVirtualWorld(playerid);

	        	dini_FloatSet("Assets.ini", "Prison2X", Prison2X);
	        	dini_FloatSet("Assets.ini", "Prison2Y", Prison2Y);
	        	dini_FloatSet("Assets.ini", "Prison2Z", Prison2Z);
	        	dini_IntSet("Assets.ini", "Prison2Int", Prison2Int);
	        	dini_IntSet("Assets.ini", "Prison2World", Prison2World);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Jail location.");
	    	}
	    	else if(strcmp(Location, "Hospital", true) == 0)
	    	{
	        	GetPlayerPos(playerid, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
	        	HospitalInt = GetPlayerInterior(playerid);

	        	dini_FloatSet("Assets.ini", "HospitalSpawnX", HospitalSpawnX);
	        	dini_FloatSet("Assets.ini", "HospitalSpawnY", HospitalSpawnY);
	        	dini_FloatSet("Assets.ini", "HospitalSpawnZ", HospitalSpawnZ);
	        	dini_IntSet("Assets.ini", "HospitalInt", HospitalInt);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Hospital.");
	    	}
	    	else if(strcmp(Location, "LockerPos2", true) == 0)
	    	{
	        	GetPlayerPos(playerid, LockerPos2X, LockerPos2Y, LockerPos2Z);
	        	LockerPos2Int = GetPlayerInterior(playerid);

	    		dini_FloatSet("Assets.ini", "LockerPos2X", LockerPos2X);
	    		dini_FloatSet("Assets.ini", "LockerPos2Y", LockerPos2Y);
	    		dini_FloatSet("Assets.ini", "LockerPos2Z", LockerPos2Z);
	    		dini_IntSet("Assets.ini", "LockerPos2Int", LockerPos2Int);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos2 location.");
	    	}
	    	else if(strcmp(Location, "LockerPos", true) == 0)
	    	{
	        	GetPlayerPos(playerid, LockerPosX, LockerPosY, LockerPosZ);
	        	LockerPosInt = GetPlayerInterior(playerid);

	    		dini_FloatSet("Assets.ini", "LockerPosX", LockerPosX);
	    		dini_FloatSet("Assets.ini", "LockerPosY", LockerPosY);
	    		dini_FloatSet("Assets.ini", "LockerPosZ", LockerPosZ);
	    		dini_IntSet("Assets.ini", "LockerPosInt", LockerPosInt);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos location.");
	    	}
	    	else if(strcmp(Location, "Spawn", true) == 0)
	    	{
	    		GetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);

	    		SpawnInt = GetPlayerInterior(playerid);
	    		SpawnWorld = GetPlayerVirtualWorld(playerid);

	    		dini_FloatSet("Spawn.ini", "SpawnX", SpawnX);
	    		dini_FloatSet("Spawn.ini", "SpawnY", SpawnY);
	    		dini_FloatSet("Spawn.ini", "SpawnZ", SpawnZ);
	    		dini_IntSet("Spawn.ini", "SpawnInt", SpawnInt);
	    		dini_IntSet("Spawn.ini", "SpawnWorld", SpawnWorld);
	    		SendClientMessage(playerid, WHITE, "You have successfully re-located the Spawn location.");
			}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "Invalid location.");
	    	}
	    }
	}
	return 1;
}

command(lsfmd, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
	    if(Player[playerid][InGroupHQ] == 4)
	    {
		    ShowPlayerDialog(playerid, 9864, DIALOG_STYLE_LIST, "LSFMD Menu", "Toggle Duty\nClothing\nEquipment", "Select", "Cancel");
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You have to be inside your HQ.");
		}
	}
	return 1;
}

command(toggleradio, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][HasRadio] >= 1)
	{
	    if(Player[playerid][ToggledRadio] == 1)
	    {
	        Player[playerid][ToggledRadio] = 0;
	        SendClientMessage(playerid, WHITE, "You have switched your radio off.");
	    }
	    else
	    {
	        Player[playerid][ToggledRadio] = 1;
	        SendClientMessage(playerid, WHITE, "You have switched your radio on.");
	    }
	}
	return 1;
}

command(radiomessage, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(r)adio(m)essage [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 5 || Player[playerid][InterviewPowers] == 1)
	    {
	        format(string, sizeof(string), "[%s] %s: %s", Groups[Player[playerid][Group]][GroupName], GetName(playerid), message);

	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnectedEx(i) && IsPlayerInAnyVehicle(i) && Player[playerid][ToggledRadio] == 1 || Player[playerid][PortableRadio] == 1)
	            {
	                SendClientMessage(i, ORANGE, string);
	            }
	        }

	        NearByMessage(playerid, ORANGE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
	    }
	}
	return 1;
}

command(rm, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(r)adio(m)essage [message]");
	}
	else
	{
	    if(Player[playerid][Group] == 5 || Player[playerid][InterviewPowers] >= 1)
	    {
	        format(string, sizeof(string), "[%s] %s: %s", Groups[Player[playerid][Group]][GroupName], GetName(playerid), message);

	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnectedEx(i) && IsPlayerInAnyVehicle(i) && Player[i][ToggledRadio] == 1 || Player[i][PortableRadio] == 1)
	            {
	                SendClientMessage(i, ORANGE, string);
	            }
	        }

	        NearByMessage(playerid, ORANGE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
	    }
	}
	return 1;
}

command(grantinterviewpowers, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /grantinterviewpowers [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Player[playerid][Group] == 5)
	        {
		        if(Player[id][InterviewPowers] == 1)
		        {
		            format(string, sizeof(string), "You have removed %s' interview powers.", GetName(id));
		            SendClientMessage(playerid, WHITE, string);
					Player[id][InterviewPowers] = 0;
		            format(string, sizeof(string), "You have been removed of tempoary interview powers by %s.", GetName(playerid));
	                SendClientMessage(id, WHITE, string);
		        }
		        else
		        {
		            format(string, sizeof(string), "You have granted %s' interview powers.", GetName(id));
		            Player[id][InterviewPowers] = 1;
		            SendClientMessage(playerid, WHITE, string);
		            format(string, sizeof(string), "You have been given tempoary interview powers by %s.", GetName(playerid));
	                SendClientMessage(id, WHITE, string);
				}
		    }
	    }
	}
	return 1;
}

command(detain, playerid, params[])
{
	new id, seat, string[128];
	if(sscanf(params, "ud", id, seat))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /detain [playerid] [seat (1-3)]");
	}
	else
	{
	    if(Player[id][Cuffed] >= 1 || Player[id][Tied] >= 1)
	    {
	        if(seat >= 3 && seat < 1)
	        {
	            SendClientMessage(playerid, WHITE, "Seat ID's vary from 1-3");
	        }
	        else
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 5)
	            {
	                if(IsSeatOccupied(Player[playerid][LastCarID], seat) > 0)
	                {
	                    SendClientMessage(playerid, WHITE, "That seat ID is occupied!");
	                }
	                else
	                {
	             		PutPlayerInVehicle(id, Player[playerid][LastCarID], seat);
		                format(string, sizeof(string), "* %s has been detained into the vehicle by %s.", GetName(id), GetName(playerid));
						NearByMessage(playerid, RPCOLOUR, string);
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away from another player.");
	            }
	        }
	    }
	}
	return 1;
}

command(listgroup, playerid, params[])
{
	new groupnumber, string[128];
	if(sscanf(params, "d", groupnumber))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /listgroup [group ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(groupnumber >= MAX_GROUPS || groupnumber < 1)
		    {
		        SendClientMessage(playerid, WHITE, "Invalid Group ID!");
		    }
		    else
		    {
				format(string, sizeof(string), "-------------------- %s. --------------------", Groups[groupnumber][GroupName]);
                SendClientMessage(playerid, WHITE, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i) && Player[i][Group] == groupnumber)
		            {
				        switch(Player[i][GroupRank])
				        {
			    			case 0:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (0)", GetName(i), Groups[Player[i][Group]][RankName0]);
							}
							case 1:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (1)", GetName(i), Groups[Player[i][Group]][RankName1]);
							}
							case 2:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (2)", GetName(i), Groups[Player[i][Group]][RankName2]);
							}
							case 3:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (3)", GetName(i), Groups[Player[i][Group]][RankName3]);
							}
							case 4:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (4)", GetName(i), Groups[Player[i][Group]][RankName4]);
							}
							case 5:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (5)", GetName(i), Groups[Player[i][Group]][RankName5]);
							}
							case 6:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (6)", GetName(i), Groups[Player[i][Group]][RankName6]);
							}
							case 7:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (7)", GetName(i), Groups[Player[i][Group]][RankName7]);
							}
							case 8:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (8)", GetName(i), Groups[Player[i][Group]][RankName8]);
							}
							case 9:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (9)", GetName(i), Groups[Player[i][Group]][RankName9]);
							}
							case 10:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (10)", GetName(i), Groups[Player[i][Group]][RankName10]);
							}
						}

		                SendClientMessage(playerid, WHITE, string);
		            }
		        }
				format(string, sizeof(string), "-------------------- %s. --------------------", Groups[groupnumber][GroupName]);
                SendClientMessage(playerid, WHITE, string);
			}
	    }
	}
	return 1;
}

command(takecourse, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 7)
	{
	    new string[128];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
	    format(string, sizeof(string), "Media Studies ($%d)\nCivil Law Degree ($%d)\nEnglish Degree ($%d)\nMathematics Degree ($%d)\nChemistry Degree ($%d)\n", price1, price2, price3, price4, price5);
		ShowPlayerDialog(playerid, 1230, DIALOG_STYLE_LIST, "Course List", string, "Select", "Cancel");
	}
	return 1;
}

command(g, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /g(roup) [message]");
	}
	else
	{
	    if(Player[playerid][Group] >= 1)
	    {
		    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
		    {
		        return 1;
		    }
		    else
		    {
		        if(Player[playerid][Group] > 0)
		        {
		            if(Groups[Player[playerid][Group]][ChatDisabled] == 0)
		            {
				        switch(Player[playerid][GroupRank])
				        {
			    			case 0:
							{
								format(string, sizeof(string), "[Group Chat] %s (0) %s says: %s", Groups[Player[playerid][Group]][RankName0], GetName(playerid), Message);
							}
							case 1:
							{
								format(string, sizeof(string), "[Group Chat] %s (1) %s says: %s", Groups[Player[playerid][Group]][RankName1], GetName(playerid), Message);
							}
							case 2:
							{
								format(string, sizeof(string), "[Group Chat] %s (2) %s says: %s", Groups[Player[playerid][Group]][RankName2], GetName(playerid), Message);
							}
							case 3:
							{
								format(string, sizeof(string), "[Group Chat] %s (3) %s says: %s", Groups[Player[playerid][Group]][RankName3], GetName(playerid), Message);
							}
							case 4:
							{
								format(string, sizeof(string), "[Group Chat] %s (4) %s says: %s", Groups[Player[playerid][Group]][RankName4], GetName(playerid), Message);
							}
							case 5:
							{
								format(string, sizeof(string), "[Group Chat] %s (5) %s says: %s", Groups[Player[playerid][Group]][RankName5], GetName(playerid), Message);
							}
							case 6:
							{
								format(string, sizeof(string), "[Group Chat] %s (6) %s says: %s", Groups[Player[playerid][Group]][RankName6], GetName(playerid), Message);
                            }
							case 7:
							{
								format(string, sizeof(string), "[Group Chat] %s (7) %s says: %s", Groups[Player[playerid][Group]][RankName7], GetName(playerid), Message);
                            }
							case 8:
	                        {
								format(string, sizeof(string), "[Group Chat] %s (8) %s says: %s", Groups[Player[playerid][Group]][RankName8], GetName(playerid), Message);
							}
							case 9:
							{
                                format(string, sizeof(string), "[Group Chat] %s (9) %s says: %s", Groups[Player[playerid][Group]][RankName9], GetName(playerid), Message);
							}
                            case 10:
							{
								format(string, sizeof(string), "[Group Chat] %s (10) %s says: %s", Groups[Player[playerid][Group]][RankName10], GetName(playerid), Message);
							}
						}

						GroupMessage(playerid, DEPARTMENT_CHAT, string);
						GroupChatLog(string);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "Your Group's chat has been disabled.");
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "This group does not have an OOC chat.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "Invalid group!");
		}
	}
	return 1;
}

command(togglegroupchat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 9)
	{
	    if(Groups[Player[playerid][Group]][ChatDisabled] == 0)
	    {
	        Groups[Player[playerid][Group]][ChatDisabled] = 1;
	        SendClientMessage(playerid, WHITE, "You have disabled group chat.");
	    }
	    else
	    {
	        Groups[Player[playerid][Group]][ChatDisabled] = 0;
	        SendClientMessage(playerid, WHITE, "You have enabled group chat.");
	    }
	}
	return 1;
}

command(unfreezebank, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /unfreezebank [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            format(string, sizeof(string), "You have unfrozen %s's bank account.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            Player[id][BankStatus] = 0;
			}
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
	    }
	}
	return 1;
}

command(freezebank, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /freezebank [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            format(string, sizeof(string), "You have frozen %s's bank account.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            Player[id][BankStatus] = 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
	    }
	}
	return 1;
}

command(r, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /r(adio) [message]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 11 || Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	        {
	            GetPlayerName(playerid, Name, sizeof(Name));

	        	switch(Player[playerid][GroupRank])
	        	{
        			case 0:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName0], Name, Message);
					case 1:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName1], Name, Message);
					case 2:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName2], Name, Message);
					case 3:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName3], Name, Message);
					case 4:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName4], Name, Message);
					case 5:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName5], Name, Message);
					case 6:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName6], Name, Message);
					case 7:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName7], Name, Message);
					case 8:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName8], Name, Message);
					case 9:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName9], Name, Message);
					case 10: format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName10], Name, Message);
					default: format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, Message);
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(Player[playerid][Group] == Player[i][Group] && Player[i][ToggedRadio] == 0)
				    {
				        SendClientMessage(i, RADIO_CHAT, string);
				    }
				}

				format(string, sizeof(string), "[Radio] %s says: %s", Name, Message);
				NearByMessage(playerid, GREY, string);

				GroupChatLog(string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Your group does not have a radio.");
			}
		}
	}
	return 1;
}

command(acceptbackup, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /acceptbackup [playerid]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[playerid][Checkpoint] >= 1)
		        {
		            SendClientMessage(playerid, WHITE, "You already have an existing checkpoint, please reach it or re-connect!");
		        }
		        else
		        {
				    if(Player[id][RequestingBackup] >= 1)
				    {
				        Player[playerid][AttendingBackupCall] = id;
				        Player[playerid][Checkpoint] = 1;
				        format(string, sizeof(string), "You are now attending the call of %s!", GetName(id));
				        SendClientMessage(playerid, WHITE, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "Inactive backup call.");
				    }
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Inactive backup call.");
		    }
		}
	}
	return 1;
}

command(cancelbackup, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
	    Player[playerid][RequestingBackup] = 0;
	    SendClientMessage(playerid, WHITE, "Cleared.");
	}
	return 1;
}

command(backup, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
	    format(string, sizeof(string), "%s is requesting for backup (type /acceptbackup %d).", GetName(playerid), playerid);
	    GroupMessage(playerid, ADMINORANGE, string);
	    Player[playerid][RequestingBackup] = 1;
	}
	return 1;
}

command(settax, playerid, params[])
{
	new taxpercent;
	if(sscanf(params, "d", taxpercent))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /settax [percent]");
		SendClientMessage(playerid, GREY, "40PERCENT (maximum) and 1PERCENT (minimum)");
	}
	else
	{
	    if(Player[playerid][Group] == 1 || Player[playerid][Group] == 3)
	    {
			if(Player[playerid][GroupRank] >= 5)
			{
				if(taxpercent < 1 || taxpercent >= 40)
				{
					SendClientMessage(playerid, GREY, "40PERCENT (maximum) and 1PERCENT (minimum)");
				}
				else
				{
					new string[60];
					format(string, sizeof(string), "You have set the taxrate to %d (was %d).", taxpercent, Tax);
					SendClientMessage(playerid, WHITE, string);
					Tax = taxpercent;
					dini_IntSet("Assets.ini", "Taxrate", Tax);
				}
			}
	    }
	}
	return 1;
}

command(radio, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /r(adio) [message]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 11 || Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	        {
	            GetPlayerName(playerid, Name, sizeof(Name));

	        	switch(Player[playerid][GroupRank])
	        	{
	    			case 0:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName0], Name, Message);
					case 1:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName1], Name, Message);
					case 2:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName2], Name, Message);
					case 3:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName3], Name, Message);
					case 4:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName4], Name, Message);
					case 5:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName5], Name, Message);
					case 6:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName6], Name, Message);
					case 7:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName7], Name, Message);
					case 8:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName8], Name, Message);
					case 9:	format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName9], Name, Message);
					case 10: format(string, sizeof(string), "[Radio Chat] [Unit#%d] %s %s says: %s", Player[playerid][BadgeNumber], Groups[Player[playerid][Group]][RankName10], Name, Message);
					default: format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, Message);
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(Player[playerid][Group] == Player[i][Group] && Player[i][ToggedRadio] == 0)
				    {
				        SendClientMessage(i, RADIO_CHAT, string);
				    }
				}

				format(string, sizeof(string), "[Radio] %s says: %s", Name, Message);
				NearByMessage(playerid, GREY, string);
				GroupChatLog(string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Your group does not have a radio.");
			}
		}
	}
	return 1;
}

command(stopanim, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][IsAtEvent] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are in an event, cuffed, tazed or tied.");
	}
	else
	{
		ClearAnimations(playerid);
		StopLoopingAnimation(playerid);
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

command(do, playerid, params[])
{
	new Message[256], string[256];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /do [action]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
		{
	    	format(string, sizeof(string), "* %s ((%s)) ", Message, GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
		}
	}
	return 1;
}

command(profile, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /profile [playerid]");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 4)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
				format(string, sizeof(string), "Citizen's Registered Name: %s", GetName(id));
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Citizen's Age: %d", Player[id][Age]);
				SendClientMessage(playerid, GREY, string);

				if(Player[id][Gender] == 1)
				{
					SendClientMessage(playerid, GREY, "Citizen's Gender: Male");
				}
				else
				{
				    SendClientMessage(playerid, GREY, "Citizen's Gender: Female");
				}

		        SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
	    }
	}
	return 1;
}

command(find, playerid, params[])
{
	new id, string[128], Float: PlayerLocationX, Float: PlayerLocationY, Float: PlayerLocationZ;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /find [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Jobs[Player[playerid][Job]][JobType] == 4)
	        {
	            if(Player[playerid][DetectiveCooldown] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You must wait the reload time (30 seconds).");
	            }
	            else
	            {
	                if(Player[playerid][Checkpoint] >= 1)
	                {
	                    SendClientMessage(playerid, WHITE, "You already have an existing checkpoint. Reach it first.");
	                }
	                else
	                {
	                    if(Player[id][AdminDuty] >= 1)
	                    {
	                        SendClientMessage(playerid, WHITE, "Player can't be found.");
	                    }
	                    else
	                    {
	                        if(GetPlayerInterior(id) >= 1 || GetPlayerVirtualWorld(id) >= 1)
	                        {
	                            SendClientMessage(playerid, WHITE, "That player is an interior or an alternative virtual world.");
	                        }
	                        else
	                        {
			                	GetPlayerPos(id, PlayerLocationX, PlayerLocationY, PlayerLocationZ);
			                	SetPlayerCheckpoint(playerid, PlayerLocationX, PlayerLocationY, PlayerLocationZ, 6.0);
			                	format(string, sizeof(string), "A checkpoint has been set, %s was last seen at the marked area.", GetName(id));
			                	SendClientMessage(playerid, WHITE, string);
			                	Player[playerid][Detecting] = 1;
			                	Player[playerid][DetectiveCooldown] = 1;
		                	}
	                	}
	                }
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're not a Detective.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(b, playerid, params[])
{
	new Message[256], string[256];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /b [message]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
	    {
	        if(Player[playerid][PrisonID] == 1)
	        {
				SendClientMessage(playerid, WHITE, "You may not use this channel right now.");
	        }
	        else
	        {
				if(Player[playerid][AdminDuty] == 1)
				{
					if(Player[playerid][AdminLevel] < 3)
					{
						format(string, sizeof(string), "((Admin {00BD03}%s{CECECE} says: %s))", GetName(playerid), Message);
						NearByMessage(playerid, GREY, string);
						ICChatLog(string);
					}
					else
					{
						if(Player[playerid][AdminLevel] == 3 || Player[playerid][AdminLevel] == 4)
						{
							format(string, sizeof(string), "((Admin {C4BE00}%s{CECECE} says: %s))", GetName(playerid), Message);
							NearByMessage(playerid, GREY, string);
							ICChatLog(string);
						}
						else
						{
							if(Player[playerid][AdminLevel] > 4)
							{
								format(string, sizeof(string), "((Admin {C40000}%s{CECECE} says: %s))", GetName(playerid), Message);
								NearByMessage(playerid, GREY, string);
								ICChatLog(string);
							}
						}
					}
				}
				else
				{
					format(string, sizeof(string), "((%s says: %s ))", GetName(playerid), Message);
					NearByMessage(playerid, GREY, string);
				}
			}
		}
	}
	return 1;
}

command(me, playerid, params[]) {
	new
	    string[256];

	if(isnull(params)) {
	    return SendClientMessage(playerid, WHITE, "SYNTAX: /me [action]");
	}
	else 
	{
	    if(Player[playerid][PrisonID] == 1) 
		{
	        SendClientMessage(playerid, WHITE, "You're unable to do this right now!");
	    }
	    else 
		{
	        format(string, sizeof(string), "* %s %s", GetName(playerid), params);
	        NearByMessage(playerid, RPCOLOUR, string);

			Player[playerid][MeActions]++;

			switch(Player[playerid][MeActions]) 
			{
			    case 100: {
				    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
				    SendClientMessage(playerid, GREY, "You have executed 100 /me actions.");
				    Player[playerid][AchievementRank]++;
			    }
			    case 200: {
			    	SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
					SendClientMessage(playerid, GREY, "You have executed 200 /me actions.");
					Player[playerid][AchievementRank]++;
				}
			}
	    }
	}
	return 1;
}

command(achievements, playerid, params[])
{
	#pragma unused params
	ShowPlayerDialog(playerid, 364, DIALOG_STYLE_LIST, "ACHIEVEMENTS", "Me Actions\nQuiz Questions\nAdvertisements\nMatruns\n", "Select", "Cancel");
	return 1;
}

command(omute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /omute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	        	if(Player[id][oMuted] == 0)
	        	{
	        		format(string, sizeof(string), "You have muted %s from OOC chat.", GetName(id));
	    			Player[id][oMuted] = 1;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    		else
	    		{
	        		format(string, sizeof(string), "You have unmuted %s from OOC chat.", GetName(id));
	    			Player[id][oMuted] = 0;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    	}
    		else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(nmutes, playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "You have been muted %d times from /n.", Player[playerid][NMute]);
	SendClientMessage(playerid, GREY, string);
	return 1;
}

command(nmute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /nmute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	        	if(Player[id][nMuted] == 0)
	        	{
	        		format(string, sizeof(string), "You have muted %s from newbie chat.", GetName(id));
	    			Player[id][nMuted] = 1;
					Player[id][NMute] += 1;
	    			SendClientMessage(playerid, WHITE, string);
					if(Player[id][NMute] == 5)
					{
						if(strcmp(Player[id][Warning1], "None", true) == 0)
						{
							format(Player[id][Warning1], 255, "5th /nmute (from %s)", GetName(playerid));
							format(string, sizeof(string), "You have successfully warned %s, for 5th /nmute. This is their first warning.", GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been warned by Server Admin %s, defined reason: 5th /nmute.", GetName(playerid));
							SendClientMessage(id, GREY, string);
							SendClientMessage(id, ADMINORANGE, "This is your first warn. You have two remaining, before you are auto-banned.");
							format(string, sizeof(string), "%s has warned %s.", GetName(playerid), GetName(id));
							AdminActionsLog(string);
							Player[playerid][NMute] = 0;
						}
						else if(strcmp(Player[id][Warning2], "None", true) == 0)
						{
							format(Player[id][Warning2], 255, "5th /nmute (from %s)", GetName(playerid));
							format(string, sizeof(string), "You have successfully warned %s, for 5th /nmute. This is their second warning.", GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been warned by Server Admin %s, for: 5th /nmute.", GetName(playerid));
							SendClientMessage(id, GREY, string);
							SendClientMessage(id, ADMINORANGE, "This is your second warn. On your next, you will be auto-banned.");
							format(string, sizeof(string), "%s has warned %s.", GetName(playerid), GetName(id));
							AdminActionsLog(string);
							Player[playerid][NMute] = 0;
						}
						else if(strcmp(Player[id][Warning3], "None", true) == 0)
						{
							new hour, minute, second, day, year, month;
							gettime(hour, minute, second);
							getdate(year, month, day);
							new IP[21];
							GetPlayerIp(id, IP, sizeof(IP));
							format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE WARNINGS (5th /nmute) | %s", day, month, year, hour, minute, IP, GetName(id), GetName(playerid));
							BanLog(string);
							format(string, sizeof(string), "Ban: %s has been banned by %s, defined reason: 5th /nmute (third warning)", GetName(id), Player[playerid][AdminName]);
							SendClientMessageToAll(LIGHTRED, string);
							AdminActionsLog(string);
							format(Player[id][Warning3], 255, "5th /nmute (from %s)", GetName(playerid));
							format(string, sizeof(string), "You have successfully warned %s, for 5th /nmute. This is their third warning.", GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been warned by Admin %s, for: 5th /nmute.", GetName(playerid));
							SendClientMessage(id, GREY, string);
							SendClientMessage(id, ADMINORANGE, "You are now going to be banned, as this is your third warning. Post on the forums when it is over.");
							Player[id][Banned] = 1;
							Player[playerid][NMute] = 0;
							SavePlayerData(id);
							Ban(id);
						}
					}
	    		}
	    		else
	    		{
	        		format(string, sizeof(string), "You have unmuted %s from newbie chat.", GetName(id));
	    			Player[id][nMuted] = 0;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    	}
    		else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(mute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /mute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	        	if(Player[id][Muted] == 0)
	        	{
	        	    if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	        	    {
		        		format(string, sizeof(string), "You have muted %s.", GetName(id));
		    			Player[id][Muted] = 1;
		    			SendClientMessage(playerid, WHITE, string);
	    			}
	    		}
	    		else
	    		{
	        		format(string, sizeof(string), "You have unmuted %s.", GetName(id));
	    			Player[id][Muted] = 0;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    	}
    		else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
		else
		{
		    SendClientMessage(playerid, GREY, "You're not authenticated.");
		}

	}
	return 1;
}

/*command(bonuscar, playerid, params[])
{
	new string[128], carid;
	if(sscanf(params, "d", carid))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /bonuscar [vehicle id]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(carid == 0)
	        {
	            SendClientMessage(playerid, WHITE, "You have removed the bonus car.");
	            BonusCar = 0;
	        }
	        else
	        {
			    BonusCar = carid;
			    format(string, sizeof(string), "You have set the bonus car to %s!", VehicleNames[BonusCar-400]);
			    SendClientMessage(playerid, WHITE, string);
		    }
		}
	}
	return 1;
}*/

command(warn, playerid, params[])
{
	new string[128], id, reason[128];
	if(sscanf(params, "uz", id, reason))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /warn [playerid] [reason]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(strlen(reason) > 20)
		    {
		        SendClientMessage(playerid, WHITE, "Reasons must be under 20 characters.");
		        return 1;
		    }
			else if(IsPlayerConnectedEx(id))
			{
			    if(Player[playerid][AdminLevel] < Player[id][AdminLevel] || Player[playerid][AdminLevel] < 1)
			    {
			        SendClientMessage(playerid, WHITE, "You just can't do that.");
			    }
			    else
			    {
			        if(Player[id][AdminLevel] < 1)
			        {
			            Player[playerid][AdminActions]++;
			            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
			        }

		            if(strcmp(Player[id][Warning1], "None", true) == 0)
		            {
						format(Player[id][Warning1], 255, "%s (from %s)", reason, GetName(playerid));
						format(string, sizeof(string), "You have successfully warned %s, for %s. This is their first warning.", GetName(id), reason);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "You have been warned by Server Admin %s, defined reason: %s.", GetName(playerid), reason);
		                SendClientMessage(id, GREY, string);
		                SendClientMessage(id, ADMINORANGE, "This is your first warn. You have two remaining, before you are auto-banned.");
						format(string, sizeof(string), "%s has warned %s.", GetName(playerid), GetName(id));
						AdminActionsLog(string);
					}
		            else if(strcmp(Player[id][Warning2], "None", true) == 0)
		            {
						format(Player[id][Warning2], 255, "%s (from %s)", reason, GetName(playerid));
						format(string, sizeof(string), "You have successfully warned %s, for %s. This is their second warning.", GetName(id), reason);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "You have been warned by Server Admin %s, for: %s.", GetName(playerid), reason);
		                SendClientMessage(id, GREY, string);
		                SendClientMessage(id, ADMINORANGE, "This is your second warn. On your next, you will be auto-banned.");
						format(string, sizeof(string), "%s has warned %s.", GetName(playerid), GetName(id));
						AdminActionsLog(string);
					}
		            else if(strcmp(Player[id][Warning3], "None", true) == 0)
		            {
					    new hour, minute, second, day, year, month;
				        gettime(hour, minute, second);
				        getdate(year, month, day);
			            new IP[21];
			    		GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE WARNINGS (%s) | %s", day, month, year, hour, minute, IP, GetName(id), reason, GetName(playerid));
						BanLog(string);
		                format(string, sizeof(string), "Ban: %s has been banned by %s, defined reason: %s (third warning)", GetName(id), Player[playerid][AdminName], reason);
		                SendClientMessageToAll(LIGHTRED, string);
		                AdminActionsLog(string);
						format(Player[id][Warning3], 255, "%s (from %s)", reason, GetName(playerid));
						format(string, sizeof(string), "You have successfully warned %s, for %s. This is their third warning.", GetName(id), reason);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "You have been warned by Admin %s, for: %s.", reason, GetName(playerid));
		                SendClientMessage(id, GREY, string);
		                SendClientMessage(id, ADMINORANGE, "You are now going to be banned, as this is your third warning. Post on the forums when it is over.");
		                Player[id][Banned] = 1;
		                SavePlayerData(id);
		                Ban(id);
		            }
	            }
            }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "Invalid ID.");
		}
	}
	return 1;
}

command(joinevent, playerid, params[])
{
	#pragma unused params
	if(CurrentEvent == 1)
	{
	    GetPlayerHealth(playerid, Player[playerid][LastHealth]);
	    GetPlayerArmour(playerid, Player[playerid][LastArmour]);

	    if(Player[playerid][IsAtEvent] == 0)
	    {
	        if(IsPlayerSpawned(playerid))
	        {
	            if(Player[playerid][PrisonID] >= 1 && Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");
	            }
	            else
	            {
					GetPlayerPos(playerid, eventX[playerid], eventY[playerid], eventZ[playerid]);
		            TogglePlayerControllable(playerid, false);
		            Player[playerid][LastSkin] = GetPlayerSkin(playerid);
			        ResetPlayerWeapons(playerid);
			    	SetPlayerInterior(playerid, EventInt);
			    	SetPlayerVirtualWorld(playerid, EventWorld);
			    	SetPlayerPos(playerid, EventX, EventY, EventZ);
			    	Player[playerid][IsAtEvent] = 1;
			    	SendClientMessage(playerid, WHITE, "You have successfully joined the event. Please wait, the event will start shortly!");
			    	GivePlayerWeapon(playerid, EventWeapon1, 999999);
			    	GivePlayerWeapon(playerid, EventWeapon2, 999999);
			    	GivePlayerWeapon(playerid, EventWeapon3, 999999);
			    	GivePlayerWeapon(playerid, EventWeapon4, 999999);
			    	SetPlayerSkin(playerid, EventSkin);
			    	GivePlayerWeapon(playerid, EventWeapon5, 999999);
			    	SetPlayerHealth(playerid, EventHP);
			    	SetPlayerArmour(playerid, EventArmour);
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "You can't join as you're not currently spawned.");
	    	}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You are already participating in an event!");
	    }
	}
	else if(CurrentEvent == 2)
	{
	    SendClientMessage(playerid, WHITE, "Sorry, it appears you have missed the event. Please wait until the next!");
	}
	return 1;
}


command(startevent, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 3)
	{
		if(CurrentEvent == 0)
		{
		    CurrentEvent = 1;
		    format(string, sizeof(string), "Server Admin %s has set up an event, type /joinevent to participate!", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);
		}
		else if(CurrentEvent == 1)
		{
		    CurrentEvent = 2;
		    format(string, sizeof(string), "Server Admin %s has started the event. Best of luck playing!", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);

		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnectedEx(i))
		        {
		            if(Player[i][IsAtEvent] == 1)
		            {
		                TogglePlayerControllable(i, true);
		                EC++;
		                SendClientMessage(i, WHITE, "Good luck! You'll be refunded at the end, have fun.");
		            }
				}
		    }
		}
	}
	return 1;
}

command(eventproperties, playerid, params[])
{
	new	desiredhp, desiredarmour, desiredwep1, desiredwep2, desiredskin, desiredwep3, desiredwep4, desiredwep5;
	if(sscanf(params, "dddddddd", desiredhp, desiredarmour, desiredwep1, desiredwep2, desiredwep3, desiredwep4, desiredwep5, desiredskin))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /eventproperties [health] [armour] [weapon1] [weapon2] [weapon3] [weapon4] [weapon5] [skin]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
		    if(IsInvalidSkin(desiredskin))
		    {
		        SendClientMessage(playerid, WHITE, "Invalid skin ID!");
		    }
		    else
		    {
			    EventHP = desiredhp;
			    EventArmour = desiredarmour;
			    EventWeapon1 = desiredwep1;
			    EventWeapon2 = desiredwep2;
			    EventWeapon3 = desiredwep3;
			    EventWeapon4 = desiredwep4;
			    EventWeapon5 = desiredwep5;
			    GetPlayerPos(playerid, EventX, EventY, EventZ);
			    EventWorld = GetPlayerVirtualWorld(playerid);
			    EventInt = GetPlayerInterior(playerid);
			    EventSkin = desiredskin;
			    SendClientMessage(playerid, WHITE, "You have set the properties. Type /startevent to start the event, or use the same command to change the properties.");
		    }
		}
	}
	return 1;
}
command(startjump, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 3)
	{
		if(CurrentEvent == 0)
		{
		    CurrentEvent = 1;
		    format(string, sizeof(string), "Server Admin %s has started a jump, type /joinjump to participate!", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);
		}
		else if(CurrentEvent == 1)
		{
		    CurrentEvent = 0;
		    format(string, sizeof(string), "Server Admin %s has started the jump.", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);



		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnectedEx(i))
		        {
		            if(Player[i][IsAtEvent] == 1)
		            {
		                TogglePlayerControllable(i, true);
		                EC++;
		            }
				}
		    }
		}
	}
	return 1;
}

command(joinjump, playerid, params[])
{
	#pragma unused params
	if(CurrentEvent == 1)
	{
	    GetPlayerHealth(playerid, Player[playerid][LastHealth]);
	    GetPlayerArmour(playerid, Player[playerid][LastArmour]);

	    if(Player[playerid][IsAtEvent] == 0)
	    {
	        if(IsPlayerSpawned(playerid))
	        {
	            if(Player[playerid][PrisonID] >= 1 && Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");
	            }
	            else
	            {
		            SetPlayerPos(playerid, 315.8560, 1015.7913, 1951.8063);
					GivePlayerWeapon(playerid, 46, 1);
			    	Player[playerid][IsAtEvent] = 0;
			    	SendClientMessage(playerid, WHITE, "You have successfully joined the event. Please wait, the event will start shortly!");
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "You can't join as you're not currently spawned.");
	    	}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You are already participating in an event!");
	    }
	}
	else if(CurrentEvent == 2)
	{
	    SendClientMessage(playerid, WHITE, "Sorry, it appears you have missed the event. Please wait until the next!");
	}
	return 1;
}

command(admins, playerid, params[])
{
	#pragma unused params
	new string[128];

	SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i))
		{
		    if(Player[i][AdminDuty] == 1)
		    {
		        if(Player[i][AFKStat] == 1)
		        {
		        	format(string, sizeof(string), "Admin %s (Level %d) is currently away from keyboard.", GetName(i), Player[i][AdminLevel]);
			        SendClientMessage(playerid, YELLOW, string);
		        }
		        else
		        {
			        format(string, sizeof(string), "Admin %s (Level %d) is currently on administration duty.", GetName(i), Player[i][AdminLevel]);
			        SendClientMessage(playerid, GREEN, string);
		        }
		    }
		}
	}

	SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

command(disguisename, playerid, params[])
{
	new disguisedname[128];
	#pragma unused params

	if(Player[playerid][Group] == 1 || Player[playerid][Group] == 2)
	{
		if(Player[playerid][GroupRank] >= 3)
		{
			if(sscanf(params, "z", disguisedname))
			{
				SendClientMessage(playerid, WHITE, "SYNTAX: /disguisename [name]");
			}
			else
			{
				SetPlayerName(playerid, disguisedname);
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You need to be R3+ for this command!");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You're not an LEO!");
	}
}

command(adminduty, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(Player[playerid][AdminDuty] == 0)
		{
		    if(strlen(Player[playerid][AdminName]) >= 1 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
		    {
		        SendClientMessage(playerid, WHITE, "You are now on admin duty. You will appear on the /admins list and you'll be able to view reports.");
		        Player[playerid][AdminDuty] = 1;

		        if(Player[playerid][AdminLevel] >= 1)
		        {
		        	SetPlayerHealth(playerid, 500000);
		        }

		        format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

		        SetPlayerName(playerid, Player[playerid][AdminName]);
		        SetPlayerSkin(playerid, Player[playerid][AdminSkin]);
				SetPlayerColor(playerid, ADMINORANGE);

		        if(Player[playerid][HospitalTime] >= 1)
		        {
		            Player[playerid][HospitalTime] = 0;
		            SetCameraBehindPlayer(playerid);
		            SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
		            SetPlayerDrunkLevel(playerid, 0);
		            SendClientMessage(playerid, WHITE, "You have been de-hospitalized.");
		        }

		        format(string, sizeof(string), "%s (%s) is now on Admin Duty.", GetName(playerid), Player[playerid][NormalName]);
		        SendToAdmins(ADMINORANGE, string, 0);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You haven't set an administrators' name yet.");
	        }
		}
		else
		{
	        SendClientMessage(playerid, WHITE, "You're now off admin duty, though you will still see admin chat.");
		    Player[playerid][AdminDuty] = 0;

		    SetPlayerColor(playerid, WHITE);

			if(Player[playerid][AdminLevel] >= 1)
		    {
		    	SetPlayerHealth(playerid, 100);
		    }

		    if(strlen(Player[playerid][NormalName]) > 1)
		    {
		    	SetPlayerName(playerid, Player[playerid][NormalName]);
		    }

		    SetPlayerSkin(playerid, Player[playerid][LastSkin]);

	        format(string, sizeof(string), "%s (%s) is now off Admin Duty.", Player[playerid][AdminName], GetName(playerid));
	        SendToAdmins(ADMINORANGE, string, 0);
		}
	}
	return 1;
}

command(mole, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 3)
	{
		new string[128], message[128];
		if(sscanf(params, "z", message))
		{
			SendClientMessage(playerid, WHITE, "SYNTAX: /mole [message]");
		}
		else
		{
		    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnectedEx(i))
				{
	          		format(string, sizeof(string), "SMS from MOLE (555): %s", message);
					SendClientMessage(i, MOLEBLUE, string);
				}
			}

			new hour, minute, month, day, year;
			gettime(hour, minute);
			getdate(year, month, day);
			format(string, sizeof(string), "[%d/%d/%d %02d:%02d] -- Mole: %s has sent \"%s\" to all players.", month, day, year, hour, minute, Player[playerid][AdminName], message);
			AdminActionsLog(string);
		}
	}
	return 1;
}

command(heal, playerid, params[])
{
	new id, healreqprice, string[128];
	if(sscanf(params, "ud", id, healreqprice))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /heal [playerid] [healprice]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id) && id != playerid)
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 3)
	        {
	            if(healreqprice >= 1000 || healreqprice < 1)
	            {
	                SendClientMessage(playerid, WHITE, "The maximum heal price is $1000, you also can't go lower than $1.");
	            }
	            else
	            {
	                if(GetDistanceBetweenPlayers(id, playerid) < 5)
	                {
				        new Float: Health, HealthInt;
				        GetPlayerHealth(id, Health);

				        HealthInt = floatround(Health, floatround_ceil);

				        if(HealthInt >= 100)
				        {
				            SendClientMessage(playerid, WHITE, "That person already has full health.");
				        }
				        else
				        {
				            format(string, sizeof(string), "%s has requested to heal you, for $%d (type /approve healrequest to approve the request).", GetName(playerid), healreqprice);
				            Player[playerid][AttemptingToHeal] = id;
				            Player[id][HealPrice] = healreqprice;
				            SendClientMessage(id, ANNOUNCEMENT, string);
				            format(string, sizeof(string), "You have requested to heal %s, for $%d. Wait for them to approve it.", GetName(id), healreqprice);
				            SendClientMessage(playerid, WHITE, string);
				        }
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "You're not close enough to that player.");
			        }
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Invalid ID, or that's you.");
	        }
	    }
	}
	return 1;
}

command(changeclothes, playerid, params[])
{
	new slot;
	if(sscanf(params, "d", slot))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /changeclothes [Slot (1-3)]");
	}
	else
	{
	    if(Player[playerid][House] >= 1)
	    {
		    if(Player[playerid][InHouse] == Player[playerid][House])
		    {
			    switch(slot)
			    {
					case 1:
					{
						SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot1]);
						Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot1];
						SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 1.");
					}
					case 2:
					{
						SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot2]);
						Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot2];
						SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 2.");
					}
					case 3:
					{
						SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot3]);
						Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot3];
						SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 3.");
					}
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must be inside your house, to change your clothes.");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You don't own a house.");
	    }
	}
	return 1;
}

command(setprice, playerid, params[])
{
	new string[155], price, product;
	if(sscanf(params, "dd", product, price))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /setprice [product] [price] (Maximum Price: $75,000)");
	    switch(Businesses[Player[playerid][Business]][bType])
	    {
	        case 1:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Rope");
				SendClientMessage(playerid, GREY, "Product 2 - Rags");
				SendClientMessage(playerid, GREY, "Product 3 - Phone");
				SendClientMessage(playerid, GREY, "Product 4 - Phonebook");
				SendClientMessage(playerid, GREY, "Product 5 - Bottle o' Sprunk");
				SendClientMessage(playerid, GREY, "Product 6 - Phone Credit Voucher");
				SendClientMessage(playerid, GREY, "Product 7 - Spraycan");
				SendClientMessage(playerid, GREY, "Product 8 - Walkie Talkie");
				SendClientMessage(playerid, GREY, "Product 9 - Vehicle Radio");
				SendClientMessage(playerid, GREY, "Product 10 - Gascan");
				SendClientMessage(playerid, GREY, "Product 11 - Nitrous bottle");
				SendClientMessage(playerid, GREY, "Product 12 - Engine Upgrade");
				SendClientMessage(playerid, GREY, "Product 13 - Turbo");
			}
			case 2:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Every Skin Available");
			}
			case 3:
			{
	        	SendClientMessage(playerid, GREY, "Product 1 - Wine");
	        	SendClientMessage(playerid, GREY, "Product 2 - Beer");
	        	SendClientMessage(playerid, GREY, "Product 3 - Sprunk");
			}
			case 5:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Rope");
	        	SendClientMessage(playerid, GREY, "Product 2 - Small White Vibrator");
	        	SendClientMessage(playerid, GREY, "Product 3 - Silver Vibrator");
	        	SendClientMessage(playerid, GREY, "Product 4 - Large White Vibrator");
	        	SendClientMessage(playerid, GREY, "Product 5 - Priest Costume");
	        	SendClientMessage(playerid, GREY, "Product 6 - Naughty Police Woman Costume");
	        	SendClientMessage(playerid, GREY, "Product 7 - Cat Woman Costume");
			}
			case 7:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Media Studies");
	        	SendClientMessage(playerid, GREY, "Product 2 - Civil Law Degree");
	        	SendClientMessage(playerid, GREY, "Product 3 - Intermediate English Degree");
	        	SendClientMessage(playerid, GREY, "Product 4 - Intermediate Mathematics Degree");
	        	SendClientMessage(playerid, GREY, "Product 5 - Intermediate Chemistry Degree");
			}
			case 11:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - 5 grams of Pot");
	        	SendClientMessage(playerid, GREY, "Product 2 - 5 grams of Cocaine");
			}
			case 12:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Sprunk");
	        	SendClientMessage(playerid, GREY, "Product 2 - Vegetarian Surprise");
	        	SendClientMessage(playerid, GREY, "Product 3 - Meat Feast Pizza");
	        	SendClientMessage(playerid, GREY, "Product 4 - Cheeseburger");
	        	SendClientMessage(playerid, GREY, "Product 5 - Steak with fries");
	        	SendClientMessage(playerid, GREY, "Product 6 - Bacon and eggs");
	        	SendClientMessage(playerid, GREY, "Product 7 - Fried chicken with rice");
			}
			case 14:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Car Part");
			    SendClientMessage(playerid, GREY, "Product 2 - Spray Can");
			}
	    }
	}
	else
	{
	    if(price < 75001 && price >= 1)
	    {
		    if(Businesses[Player[playerid][Business]][bType] == 1)
		    {
		        if(product >= 1 && product < 14)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Rope to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of Rags to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of a Phone to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice4] = price;
		                    format(string, sizeof(string), "You have set the price of a Phonebook to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice5] = price;
		                    format(string, sizeof(string), "You have set the price of a Bottle o' Sprunk to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 6:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice6] = price;
		                    format(string, sizeof(string), "You have set the price of a Phone Credit Voucher to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 7:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice7] = price;
		                    format(string, sizeof(string), "You have set the price of a Spraycan to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 8:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice8] = price;
		                    format(string, sizeof(string), "You have set the price of a Walkie Talkie to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 9:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice9] = price;
		                    format(string, sizeof(string), "You have set the price of a Vehicle Radio to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 10:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice10] = price;
		                    format(string, sizeof(string), "You have set the price of a Gas Can to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 11:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice11] = price;
		                    format(string, sizeof(string), "You have set the price of a Nitrous Bottle to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 12:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice12] = price;
		                    format(string, sizeof(string), "You have set the price of an Engine Upgrade to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Rope");
					SendClientMessage(playerid, GREY, "Product 2 - Rags");
					SendClientMessage(playerid, GREY, "Product 3 - Phone");
					SendClientMessage(playerid, GREY, "Product 4 - Phonebook");
					SendClientMessage(playerid, GREY, "Product 5 - Bottle o' Sprunk");
					SendClientMessage(playerid, GREY, "Product 6 - Phone Credit Voucher");
					SendClientMessage(playerid, GREY, "Product 7 - Spraycan");
					SendClientMessage(playerid, GREY, "Product 8 - Walkie Talkie");
					SendClientMessage(playerid, GREY, "Product 9 - Vehicle Radio");
					SendClientMessage(playerid, GREY, "Product 10 - Gascan");
					SendClientMessage(playerid, GREY, "Product 11 - Nitrous bottle");
                	SendClientMessage(playerid, GREY, "Product 12 - Engine Upgrade");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 7)
		    {
		        if(product >= 1 && product < 6)
		        {
		            switch(product)
		            {
		                case 1:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice1] = price;
				            format(string, sizeof(string), "You have set the price of Media Studies to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice2] = price;
				            format(string, sizeof(string), "You have set the price of Civil Law Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice3] = price;
				            format(string, sizeof(string), "You have set the price of Intermediate English Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice4] = price;
				            format(string, sizeof(string), "You have set the price of Intermediate Mathematics Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice5] = price;
				            format(string, sizeof(string), "You have set the price of Intermediate Chemistry Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
				    SendClientMessage(playerid, GREY, "Product 1 - Media Studies");
		        	SendClientMessage(playerid, GREY, "Product 2 - Civil Law Degree");
		        	SendClientMessage(playerid, GREY, "Product 3 - Intermediate English Degree");
		        	SendClientMessage(playerid, GREY, "Product 4 - Intermediate Mathematics Degree");
		        	SendClientMessage(playerid, GREY, "Product 5 - Intermediate Chemistry Degree");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 11)
		    {
		        if(product >= 1 && product < 3)
		        {
		            switch(product)
		            {
		                case 1:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice1] = price;
				            format(string, sizeof(string), "You have set the price of 5 grams of Pot to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice2] = price;
				            format(string, sizeof(string), "You have set the price of 5 grams of Cocaine to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - 5 grams of Pot");
		        	SendClientMessage(playerid, GREY, "Product 1 - 5 grams of Cocaine");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 2)
		    {
		        if(product == 1)
		        {
		            Businesses[Player[playerid][Business]][bProductPrice1] = price;
		            format(string, sizeof(string), "You have set the skin price to $%d.", price);
		            SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Every Skin Available");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 12)
		    {
		        if(product >= 1 && product < 8)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Sprunk to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of Vegetarian Surprise to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of Meat Feast Pizza to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice4] = price;
		                    format(string, sizeof(string), "You have set the price of Cheeseburger to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice5] = price;
		                    format(string, sizeof(string), "You have set the price of Steak with fries to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 6:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice6] = price;
		                    format(string, sizeof(string), "You have set the price of Bacon and eggs to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 7:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice7] = price;
		                    format(string, sizeof(string), "You have set the price of Fried chicken with rice to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
				    SendClientMessage(playerid, GREY, "Product 1 - Sprunk");
		        	SendClientMessage(playerid, GREY, "Product 2 - Vegetarian Surprise");
		        	SendClientMessage(playerid, GREY, "Product 3 - Meat Feast Pizza");
		        	SendClientMessage(playerid, GREY, "Product 4 - Cheeseburger");
		        	SendClientMessage(playerid, GREY, "Product 5 - Steak with fries");
		        	SendClientMessage(playerid, GREY, "Product 6 - Bacon and eggs");
		        	SendClientMessage(playerid, GREY, "Product 7 - Fried chicken with rice");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 3)
		    {
		        if(product >= 1 && product < 4)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Wine to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of Beer to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of Sprunk to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Wine");
		        	SendClientMessage(playerid, GREY, "Product 2 - Beer");
		        	SendClientMessage(playerid, GREY, "Product 3 - Sprunk");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 5)
		    {
		        if(product >= 1 && product < 8)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Rope to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of a Small White Vibrator to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of a Silver Vibrator to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice4] = price;
		                    format(string, sizeof(string), "You have set the price of a Large White Vibrator to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice5] = price;
		                    format(string, sizeof(string), "You have set the price of Priest Clothing to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 6:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice6] = price;
		                    format(string, sizeof(string), "You have set the price of a Naughty Police Woman Costume to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 7:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice7] = price;
		                    format(string, sizeof(string), "You have set the price of a Cat Woman Costume to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Rope");
		        	SendClientMessage(playerid, GREY, "Product 2 - Small White Vibrator");
		        	SendClientMessage(playerid, GREY, "Product 3 - Silver Vibrator");
		        	SendClientMessage(playerid, GREY, "Product 4 - Large White Vibrator");
		        	SendClientMessage(playerid, GREY, "Product 5 - Priest Costume");
		        	SendClientMessage(playerid, GREY, "Product 6 - Naughty Police Woman Costume");
		        	SendClientMessage(playerid, GREY, "Product 7 - Cat Woman Costume");
		        }
		    }
		    if(Businesses[Player[playerid][Business]][bType] == 14)
		    {
		        if(product >= 1 && product < 3)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Car Parts to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of a Spray Can to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Car Part");
		        	SendClientMessage(playerid, GREY, "Product 2 - Spray Can");
		        }
		    }
		}
	}
	return 1;
}

command(buyclothes, playerid, params[])
{
	new whiteskins[141] = {1, 2, 3, 12, 23, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 50, 52,55, 56, 61, 62, 68, 70, 72, 73, 75, 77, 78, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93,94, 95, 96, 97, 98, 99, 100,
	101, 111, 112, 119, 124, 125, 126, 127, 129, 130, 131,132, 133, 135, 137, 138, 140, 145, 146, 147, 150, 151, 152, 153, 154, 155, 157, 158, 159,160, 161, 162, 164, 165, 167, 171, 172, 177, 178, 179, 181, 188, 198, 191, 192, 193, 194,196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 223, 230, 231, 232, 233, 
	234, 235,236, 237, 239, 240, 246, 247, 248, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 268,272, 289, 290, 291, 295, 299};
	//new whiteskins[141] = {164, 165, 167, 171, 172, 177, 178, 179, 181, 188, 198, 191, 192, 193, 194,196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 223, 230, 231, 232, 233, 234, 235,236, 237, 239, 240, 246, 247, 248, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 268,272, 289, 290, 291, 295, 299};
	new asianskins[34] = {49, 56, 57, 58, 59, 60, 117, 118, 120, 121, 122, 123, 141, 169, 170, 186, 187, 203, 208, 210, 211, 213, 213, 214, 216, 217, 224, 225, 226, 227, 228, 229, 263, 294};
	new blackskins[81] = {0, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 51, 63, 64, 65, 66, 67, 69, 76, 79, 80, 83, 86, 102, 103, 104, 105, 106, 107, 134, 136, 139, 142, 143, 144, 148, 149, 156, 163, 166, 168, 176, 180, 182, 183, 18, 190, 195, 207, 215, 218, 219, 220, 221, 222, 238, 243, 244, 245, 249, 253, 256, 260, 262, 269, 270, 271, 293, 296, 297};
	new hispanicskins[27] = {8, 12, 30, 43, 44, 46, 47, 48, 53, 54, 98, 108, 109, 110, 114, 115, 116, 173, 174, 175, 184, 223, 241, 242, 273, 292, 298};
	//new restrictedskins[] = {265, 266, 267, 280, 281, 282, 283, 284, 285, 288, 300, 301, 302, 306, 307, 309, 310, 311, 308, 287, 279, 278, 277, 276, 275, 274, 286};
	new skinid;
	if(sscanf(params, "d", skinid))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /buyclothes [ID]");
		SendClientMessage(playerid, GREY, "Buying clothes from the opposite gender is forbidden and will result in a punishment.");
	}
	else
	{
		if(Businesses[Player[playerid][InBusiness]][bType] == 2)
		{
			if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
		    {
				if(IsInvalidSkin(skinid)) 
				{
					SendClientMessage(playerid, WHITE, "Invalid skin ID!");
				}
				else
				{
					if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
					{
						switch(Player[playerid][Race])
						{
							case 1:
							{
								for(new i = 0; i < 142; i++)
								{
									if(skinid == whiteskins[i])
									{
										SendClientMessage(playerid, WHITE, "You have purchased this pair of clothes!");
										SetPlayerSkin(playerid, skinid);
										Player[playerid][LastSkin] = skinid;
										Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
										Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
										Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
										break;
									}
									else
									{
										// Continue searching.
										if(i == 141)
										{
											SendClientMessage(playerid, WHITE, "Please choose a skin that matches your race.");
											break;
										}
									}
								}
							}
							case 2:
							{
								for(new i = 0; i < 35; i++)
								{
									if(skinid == asianskins[i])
									{
										SendClientMessage(playerid, WHITE, "You have purchased this pair of clothes!");
										SetPlayerSkin(playerid, skinid);
										Player[playerid][LastSkin] = skinid;
										Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
										Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
										Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
										break;
									}
									else
									{
										// Continue searching.
										if(i == 34)
										{
											SendClientMessage(playerid, WHITE, "Please choose a skin that matches your race.");
										}
									}
								}
							}
							case 3:
							{
								for(new i = 0; i < 82; i++)
								{
									if(skinid == blackskins[i])
									{
										SendClientMessage(playerid, WHITE, "You have purchased this pair of clothes!");
										SetPlayerSkin(playerid, skinid);
										Player[playerid][LastSkin] = skinid;
										Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
										Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
										Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
										break;
									}
									else
									{
										// Continue searching.
										if(i == 81)
										{
											SendClientMessage(playerid, WHITE, "Please choose a skin that matches your race.");
										}
									}
								}
							}
							case 4:
							{
								for(new i = 0; i < 28; i++)
								{
									if(skinid == hispanicskins[i])
									{
										SendClientMessage(playerid, WHITE, "You have purchased this pair of clothes!");
										SetPlayerSkin(playerid, skinid);
										Player[playerid][LastSkin] = skinid;
										Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
										Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
										Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
										break;
									}
									else
									{
										// Continue searching.
										if(i == 27)
										{
											SendClientMessage(playerid, WHITE, "Please choose a skin that matches your race.");
										}
									}
								}
							}
						}
					}
					else
					{
						new string[128];
					    format(string, sizeof(string), "You must have %d to purchase this pair of clothes.", Businesses[Player[playerid][InBusiness]][bProductPrice1]);
					    SendClientMessage(playerid, WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "This shop has no supplies left.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not in a clothing shop.");
		}
	}
	return 1;
}

command(movehouse, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /movehouse [houseid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        format(string, sizeof(string), "Houses/House_%d.ini", id);
	        if(strcmp(Usage, "exterior", true) == 0)
        	{
	        	    DestroyDynamicPickup(Houses[id][HPickupID]);
	        	    GetPlayerPos(playerid, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ]);

			        if(strcmp(Houses[id][hOwner], "Nobody", true) == 0)
					{
		            	Houses[id][HPickupID] = CreateDynamicPickup(1273, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], 0, -1, -1, 150.0);
		            }
		            else
		            {
		                Houses[id][HPickupID] = CreateDynamicPickup(1272, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], 0, -1, -1, 150.0);
		            }

	        	    SendClientMessage(playerid, WHITE, "Exterior changed!");
	        	    SaveHouse(id);
        	}
	        else if(strcmp(Usage, "interior", true) == 0)
        	{
	        	    GetPlayerPos(playerid, Houses[id][hInteriorX], Houses[id][hInteriorY], Houses[id][hInteriorZ]);
	        	    Houses[id][hInteriorID] = GetPlayerInterior(playerid);
	        	    SendClientMessage(playerid, WHITE, "Interior changed!");
	        	    SaveHouse(id);
        	}
		}
	}
	return 1;
}

command(auninstallnos, playerid, params[])
{
	new id;
	if(Player[playerid][AdminLevel] > 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, WHITE, "NOS Uninstalled!");
			RemoveVehicleComponent(id, 1010);
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not in a vehicle!");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You're not admin level 2+!");
	}
}

command(unmodcar, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /unmodcar [1-3]");
	}
	else
	{
	    switch(id)
	    {
	        case 1:
	        {
	            if(Player[playerid][PlayerCarModel] > 0)
	            {
				    if(GetPlayerVehicleID(playerid) == Player[playerid][CarLinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
						    new Float: tmpdamage;

						    Player[playerid][CarPaintJobID] = 0;
							Player[playerid][CarCol1] = 0;
							Player[playerid][CarCol2] = 0;
							Player[playerid][OwnedCarModSlot0] = 0;
							Player[playerid][OwnedCarModSlot1] = 0;
							Player[playerid][OwnedCarModSlot2] = 0;
							Player[playerid][OwnedCarModSlot3] = 0;
							Player[playerid][OwnedCarModSlot4] = 0;
							Player[playerid][OwnedCarModSlot5] = 0;
							Player[playerid][OwnedCarModSlot6] = 0;
							Player[playerid][OwnedCarModSlot7] = 0;
							Player[playerid][OwnedCarModSlot8] = 0;
							Player[playerid][OwnedCarModSlot9] = 0;
							Player[playerid][OwnedCarModSlot10] = 0;
							Player[playerid][OwnedCarModSlot11] = 0;
							Player[playerid][OwnedCarModSlot12] = 0;
							Player[playerid][OwnedCarModSlot13] = 0;
							ChangeVehiclePaintjob(Player[playerid][CarLinkID], 0);
					        GetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][CarLinkID], Player[playerid][CarZAngle]);
						    GetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
						    DestroyVehicle(Player[playerid][CarLinkID]);

						    OwnedCarCount--;
						    CarCount--;

						    SpawnOwnedCar(playerid, 1);
						    PutPlayerInVehicle(playerid, Player[playerid][CarLinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
						    SendClientMessage(playerid, WHITE, "Your car has respawned and the modifications have been removed.");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
	            }
			}
			case 2:
			{
	            if(Player[playerid][PlayerCarModel2] > 0)
	            {
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car2LinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
						    new Float: tmpdamage;

							Player[playerid][Car2Col1] = 0;
							Player[playerid][Car2Col2] = 0;
							Player[playerid][Car2OwnedCarModSlot0] = 0;
							Player[playerid][Car2OwnedCarModSlot1] = 0;
							Player[playerid][Car2OwnedCarModSlot2] = 0;
							Player[playerid][Car2OwnedCarModSlot3] = 0;
							Player[playerid][Car2OwnedCarModSlot4] = 0;
							Player[playerid][Car2OwnedCarModSlot5] = 0;
							Player[playerid][Car2OwnedCarModSlot6] = 0;
							Player[playerid][Car2OwnedCarModSlot7] = 0;
							Player[playerid][Car2OwnedCarModSlot8] = 0;
							Player[playerid][Car2OwnedCarModSlot9] = 0;
							Player[playerid][Car2OwnedCarModSlot10] = 0;
							Player[playerid][Car2OwnedCarModSlot11] = 0;
							Player[playerid][Car2OwnedCarModSlot12] = 0;
							Player[playerid][Car2OwnedCarModSlot13] = 0;
					        GetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car2LinkID], Player[playerid][Car2ZAngle]);
						    GetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
						    DestroyVehicle(Player[playerid][Car2LinkID]);

						    OwnedCarCount--;
						    CarCount--;

       						Player[playerid][Car2PaintJobID] = 0;
						    SpawnOwnedCar(playerid, 2);
						    PutPlayerInVehicle(playerid, Player[playerid][Car2LinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
						    SendClientMessage(playerid, WHITE, "Your car has respawned and the modifications have been removed.");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
	            }
			}
			case 3:
			{
	            if(Player[playerid][PlayerCarModel3] > 0)
	            {
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car3LinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
						    new Float: tmpdamage;

							Player[playerid][Car3Col1] = 0;
							Player[playerid][Car3Col2] = 0;
							Player[playerid][Car3OwnedCarModSlot0] = 0;
							Player[playerid][Car3OwnedCarModSlot1] = 0;
							Player[playerid][Car3OwnedCarModSlot2] = 0;
							Player[playerid][Car3OwnedCarModSlot3] = 0;
							Player[playerid][Car3OwnedCarModSlot4] = 0;
							Player[playerid][Car3OwnedCarModSlot5] = 0;
							Player[playerid][Car3OwnedCarModSlot6] = 0;
							Player[playerid][Car3OwnedCarModSlot7] = 0;
							Player[playerid][Car3OwnedCarModSlot8] = 0;
							Player[playerid][Car3OwnedCarModSlot9] = 0;
							Player[playerid][Car3OwnedCarModSlot10] = 0;
							Player[playerid][Car3OwnedCarModSlot11] = 0;
							Player[playerid][Car3OwnedCarModSlot12] = 0;
							Player[playerid][Car3OwnedCarModSlot13] = 0;
					        GetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car3LinkID], Player[playerid][Car3ZAngle]);
						    GetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
						    DestroyVehicle(Player[playerid][Car3LinkID]);

						    OwnedCarCount--;
						    CarCount--;

       						Player[playerid][Car3PaintJobID] = 0;
						    SpawnOwnedCar(playerid, 2);
						    PutPlayerInVehicle(playerid, Player[playerid][Car3LinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
						    SendClientMessage(playerid, WHITE, "Your car has respawned and the modifications have been removed.");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
	            }
			}
			default:
			{
			    SendClientMessage(playerid, WHITE, "Invalid vehicle slot.");
			}
	    }
	}
	return 1;
}

command(setbusinesssupplies, playerid, params[])
{
	new amount, id, string[128];
	if(sscanf(params, "dd", id, amount))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /setbusinesssupplies [businessid] [amount]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    Businesses[id][bSupplies] = amount;
      		format(string, sizeof(string), "You have set business %d (%s)'s supplies to %d.", id, Businesses[id][bName], amount);
   			SendClientMessage(playerid, WHITE, string);
      		SaveBusiness(id);
	    }
	}
	return 1;
}

command(movebusiness, playerid, params[])
{
	new Usage[128], id;
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /movebusiness [businessid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        if(strcmp(Usage, "exterior", true) == 0)
        	{
	        	if(id > SpawnedBusinesses)
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid business ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Businesses[id][bPickupID]);
	        	    Businesses[id][bExteriorID] = GetPlayerInterior(playerid);
	        	    GetPlayerPos(playerid, Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ]);
	        	    Businesses[id][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ], 0, -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Exterior changed!");
	        	    SaveBusiness(id);
	        	}
        	}
	        else if(strcmp(Usage, "interior", true) == 0)
        	{
	        	if(id > SpawnedBusinesses)
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid business ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    GetPlayerPos(playerid, Businesses[id][bInteriorX], Businesses[id][bInteriorY], Businesses[id][bInteriorZ]);
	        	    Businesses[id][bInteriorID] = GetPlayerInterior(playerid);
	        	    SendClientMessage(playerid, WHITE, "Interior changed!");
	        	    SaveBusiness(id);
	        	}
        	}
		}
	}
	return 1;
}

command(killspotlight, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnectedEx(i) && Player[i][SpotlightEffect] == 1)
		    {
		        Player[i][SpotlightEffect] = 0;
		        Player[i][Checkpoint] = 0;
		        DisablePlayerCheckpoint(i);
		    }
		}

		Spotlight = -1;

		SendClientMessage(playerid, WHITE, "Killed the spotlight.");
	}
	return 1;
}

command(adivorce, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /adivorce [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        format(string, sizeof(string), "You have forced an admin divorce for %s.", GetName(id));
		        SendClientMessage(playerid, WHITE, string);
		        format(string, sizeof(string), "Server Admin %s has cleared your marrital record.", GetName(playerid));
		        SendClientMessage(id, WHITE, string);
		        format(Player[id][MarriedTo], 255, "Nobody");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
	    }
	}
	return 1;
}

command(agotohouse, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /agotohouse [houseid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	        format(string, sizeof(string), "Houses/House_%d.ini", id);
	        if(strcmp(Usage, "exterior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    SetPlayerInterior(playerid, Houses[id][hExteriorID]);
	        	    SetPlayerPos(playerid, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ]);
	        	    SetPlayerVirtualWorld(playerid, 0);
	        	}
        	}
	        else if(strcmp(Usage, "interior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    SetPlayerInterior(playerid, Houses[id][hInteriorID]);
	        	    SetPlayerPos(playerid, Houses[id][hInteriorX], Houses[id][hInteriorY], Houses[id][hInteriorZ]);
	        	    SetPlayerVirtualWorld(playerid, id);
	        	}
        	}
		}
	}
	return 1;
}

// This command has been removed as of 18/11/2010. You can uncomment it to re-enable it.
// The reason the command was removed is because of the fact that a majority of the scriptfiles for businesses are missing in the SVN repository,
// and they won't be uploaded. Uncomment case 6125 in OnPlayerDialogResponse as well to re-enable this command.
/*command(map, playerid, params[])
{
	#pragma unused params
	ShowPlayerDialog(playerid, 6125, DIALOG_STYLE_LIST, "Select a Location", "Bank\nMechanic Job\nGuard Job\nDetective Job\nRCPD HQ\nVehicle Dealership\nLawyer Job\nCollege\nDelivery Job\n", "Select", "Cancel");
	return 1;
}*/

command(movejob, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /movejob [jobid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: JoinPos, Location1, Location2");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        format(string, sizeof(string), "Jobs/Job_%d.ini", id);
	        if(strcmp(Usage, "JoinPos", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid job ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Jobs[id][JobJoinPosPickupID]);
	        	    Jobs[id][JobJoinPosInterior] = GetPlayerInterior(playerid);
	        	    Jobs[id][JobJoinPosWorld] = GetPlayerVirtualWorld(playerid);
	        	    GetPlayerPos(playerid, Jobs[id][JobJoinPosX], Jobs[id][JobJoinPosY], Jobs[id][JobJoinPosZ]);
	        	    Jobs[id][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobJoinPosX], Jobs[id][JobJoinPosY], Jobs[id][JobJoinPosZ], Jobs[id][JobJoinPosWorld], -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Join Job position updated.");
	        	    SaveJobs();
	        	}
        	}
	        else if(strcmp(Usage, "location1", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid job ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Jobs[id][JobMiscLocationOnePickupID]);
	        	    Jobs[id][JobMiscLocationOneInterior] = GetPlayerInterior(playerid);
	        	    Jobs[id][JobMiscLocationOneWorld] = GetPlayerVirtualWorld(playerid);
	        	    GetPlayerPos(playerid, Jobs[id][JobMiscLocationOneX], Jobs[id][JobMiscLocationOneY], Jobs[id][JobMiscLocationOneZ]);
	        	    Jobs[id][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobMiscLocationOneX], Jobs[id][JobMiscLocationOneY], Jobs[id][JobMiscLocationOneZ], Jobs[id][JobMiscLocationOneWorld], -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Join Job position updated.");
	        	    SaveJobs();
	        	}
        	}
	        else if(strcmp(Usage, "location2", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid job ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Jobs[id][JobMiscLocationTwoPickupID]);
	        	    Jobs[id][JobMiscLocationTwoInterior] = GetPlayerInterior(playerid);
	        	    Jobs[id][JobMiscLocationTwoWorld] = GetPlayerVirtualWorld(playerid);
	        	    GetPlayerPos(playerid, Jobs[id][JobMiscLocationTwoX], Jobs[id][JobMiscLocationTwoY], Jobs[id][JobMiscLocationTwoZ]);
	        	    Jobs[id][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobMiscLocationTwoX], Jobs[id][JobMiscLocationTwoY], Jobs[id][JobMiscLocationTwoZ], Jobs[id][JobMiscLocationTwoWorld], -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Join Job position updated.");
	        	    SaveJobs();
	        	}
        	}
		}
	}
	return 1;
}

command(unblindfold, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /unblindfold [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 5)
	        {
	            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You can't do this right now.");
	            }
	            else
	            {
	                if(Player[id][Blindfolded] >= 1)
	                {
						Player[id][Blindfolded] = 0;
						SetPlayerDrunkLevel(id, 0);
						SetCameraBehindPlayer(id);
						format(string, sizeof(string), "* %s grabs the rag off of %s's face.", GetName(playerid), GetName(id));
						NearByMessage(playerid, RPCOLOUR, string);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "That player isn't even tied.");
					}
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're too far away.");
	        }
        }
	}
	return 1;
}

command(togquizes, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedQUIZ] == 1)
	{
	    Player[playerid][ToggedQUIZ] = 0;
	    SendClientMessage(playerid, WHITE, "You will now see quiz messages.");
	}
	else
	{
	    Player[playerid][ToggedQUIZ] = 1;
	    SendClientMessage(playerid, WHITE, "You will no longer see quiz messages.");
	}
	return 1;
}

command(endround, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    if(ActiveQuiz >= 1)
	    {
	        ActiveQuiz = 0;
	        QuizText("The quiz round has been finished!");
	    }
	}
	return 1;
}

command(startround, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		ShowPlayerDialog(playerid, 4541, DIALOG_STYLE_INPUT, "Quiz Question", "Please set the question for the Quiz.", "Done", "Cancel");
	}
	return 1;
}

command(shakehand, playerid, params[])
{
	new style, id, string[128];
	if(sscanf(params, "ud", id, style))
	{
    	SendClientMessage(playerid, WHITE, "SYNTAX: /shakehand [playerid] [1-9]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 2)
	        {
	            if(style >= 1 && style < 10)
	            {
		            Player[id][PendingHandshakeStyle] = style;
		            Player[id][PendingHandshake] = playerid;
		            format(string, sizeof(string), "You have requested to shake %s's hand.", GetName(id));
		            SendClientMessage(playerid, WHITE, string);
		            format(string, sizeof(string), "((%s is requesting to shake your hand... Type /approve handshake to shake hands!))", GetName(playerid));
		            SendClientMessage(id, PURPLE, string);
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "SYNTAX: /handshake [playerid] [1-9]");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Please stand closer to them.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	}
	return 1;
}

command(quizhint, playerid, params[])
{
	new hint[128], string[128];
	if(sscanf(params, "z", hint))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /quizhint [hint]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(strlen(hint) >= 1)
	        {
	            format(string, sizeof(string), "((Quiz HINT from %s: %s)) ", GetName(playerid), hint);
	            QuizText(string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /quizhint [hint]");
	        }
	    }
	}
	return 1;
}

command(forcetutorial, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /forcetutorial [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
				if(Player[id][AdminLevel] < Player[playerid][AdminLevel])
				{
				    format(string, sizeof(string), "You have forced %s in to the tutorial.", GetName(id));
				    SendClientMessage(playerid, WHITE, string);

		    		PutPlayerInTutorial(id, 0);
		    	}
		    	else
		    	{
		    	    SendClientMessage(playerid, WHITE, "You can't do that to a higher level admin.");
		    	}
		    }
	    }
    }
    return 1;
}

command(answerq, playerid, params[])
{
	new answer[128], string[128];
	if(sscanf(params, "z", answer))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /answerq [answer]");
	}
	else
	{
	    if(ActiveQuiz >= 1)
	    {
	        if(strlen(answer) >= 1)
	        {
		        if(strcmp(answer, QuizAnswer, true) == 0)
		        {
		            format(string, sizeof(string), "%s has the correct answer!", GetName(playerid));
		            QuizText(string);
					Player[playerid][AnsweredQuizQuestions]++;

					switch(Player[playerid][AnsweredQuizQuestions])
					{
					    case 100:
					    {
					        SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
					        SendClientMessage(playerid, GREY, "You have submitted 100 correct quiz answers.");
					        Player[playerid][AchievementRank]++;
					    }
					    case 200:
					    {
					        SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
					        SendClientMessage(playerid, GREY, "You have submitted 200 correct quiz answers");
					        Player[playerid][AchievementRank]++;
					    }
					}
		        }
		        else
		        {
				    format(string, sizeof(string), "%s has submitted the answer: %s", GetName(playerid), answer);
				    SendToAdmins(ADMINORANGE, string, 1);
				}

			    format(string, sizeof(string), "You have submitted: %s.", answer);
			    SendClientMessage(playerid, WHITE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /answerq [answer]");
		    }
	    }
	}
	return 1;
}

command(clearchat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    for(new i = 0; i < 60; i++)
	    {
	        SendClientMessageToAll(GREY, "Clearing Chat...");
	    }
	}

	return 1;
}

command(gag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /gag [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
		    if(Player[playerid][Rags] >= 1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        {
		            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
		            {
		                SendClientMessage(playerid, WHITE, "You can't do this right now.");
		            }
		            else
		            {
		                if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
		                {
			                Player[id][Gagged] = 1;
							format(string, sizeof(string), "* %s grabs a rag, and ties it around %s's mouth.", GetName(playerid), GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
							Player[playerid][Rags]--;
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
						}
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You have no rags left.");
		    }
	    }
	}
	return 1;
}

command(ungag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /ungag [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
		    if(Player[playerid][Rags] >= 1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        {
		            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
		            {
		                SendClientMessage(playerid, WHITE, "You can't do this right now.");
		            }
		            else
		            {
		                if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
		                {
			                Player[id][Gagged] = 0;
							format(string, sizeof(string), "* %s has whipped the rag off of %s's mouth.", GetName(playerid), GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
							Player[playerid][Rags]--;
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
						}
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You have no rags left.");
		    }
	    }
	}
	return 1;
}

command(blindfold, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /blindfold [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
		    if(Player[playerid][Rags] >= 1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        {
		            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
		            {
		                SendClientMessage(playerid, WHITE, "You can't do this right now.");
		            }
		            else
		            {
			            if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
			            {
			                Player[playerid][Rags]--;
						    SetPlayerDrunkLevel(id, 50000);
							SetPlayerCameraLookAt(id, -830.8118, -1360.3612, 87.0289);
							format(string, sizeof(string), "* %s grabs a rag, and ties it around %s's eyes.", GetName(playerid), GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
							Player[id][Blindfolded] = 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
			            }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You have no rags left.");
		    }
	    }
	}
	return 1;
}

command(houseprice, playerid, params[])
{
	new money, id;
	if(sscanf(params, "dd", id, money))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /houseprice [houseid] [usage]");
	    }
	}
	else
	{
	    Houses[id][HousePrice] = money;
	    SaveHouse(id);
	}
	return 1;
}

command(businessprice, playerid, params[])
{
	new money, id;
	if(sscanf(params, "dd", id, money))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /businessprice [businessid] [usage]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        Businesses[id][bPrice] = money;
    	    SaveBusiness(id);
		}
	}
	return 1;
}

command(businesstype, playerid, params[])
{
	new type, id, string[128];
	if(sscanf(params, "dd", id, type))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /businesstype [businessid] [type]");
		    SendClientMessage(playerid, WHITE, "Types: 1 - General Store | 2 - Clothing | 3 - Club (/buydrink) | 4 - Advertisement Agency | 5 - Sex Shop | 6 - Vehicle Dealership");
	        SendClientMessage(playerid, WHITE, "Types: 7 - College | 8 - Charity | 9 - Church | 10 - Gym | 11 - Pharmacy | 12 - Restraunt | 13 - DMV | 14 - Hardware Store");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        /*format(string, sizeof(string), "Businesses/Business_%d.ini", id);

        	if(!fexist(string))
        	{
        	    SendClientMessage(playerid, WHITE, "Invalid business ID!");
            	return 1;
        	}
        	else
        	{
        	    Businesses[id][bType] = type;
        	    SaveBusiness(id);
        	    format(string, sizeof(string), "You have set the business type to %d.", type);
        	    SendClientMessage(playerid, WHITE, string);
        	}*/
        	Businesses[id][bType] = type;
			SaveBusiness(id);
			format(string, sizeof(string), "You have set the business type to %d.", type);
   			SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

command(stun, playerid, params[])
{
	#pragma unused params
	new string[128], NearestPlayer = GetClosestPlayer(playerid);

    if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 4)
    {
        SendClientMessage(playerid, WHITE, "You're not a law enforcement officer!");
    }
    else if(Player[playerid][IsSpeccing] == 1)
    {
        SendClientMessage(playerid, WHITE, "Nearest player is a law enforcer!");
    }
    else
    {
	    if(GetDistanceBetweenPlayers(NearestPlayer, playerid) < 6)
        {
            if(Player[NearestPlayer][Tazed] == 0)
            {
                if(!IsPlayerInAnyVehicle(NearestPlayer))
                {
    				TogglePlayerControllable(NearestPlayer, false);
    				Player[NearestPlayer][Tazed] = 1;
    	    		format(string, sizeof(string), "* %s has stunned %s, with their taser.", GetName(playerid), GetName(NearestPlayer));
    	    		NearByMessage(playerid, RPCOLOUR, string);
    	    		SendClientMessage(NearestPlayer, WHITE, "You have been tased. The effect will last for 12 seconds.");
    	    		SetTimerEx("UntazePlayer", 12000, false, "d", NearestPlayer);
    	    	}
    	    	else
    	    	{
    	    	    SendClientMessage(playerid, WHITE, "The suspect is in a vehicle, you can't tase whilst they're in a vehicle.");
    	    	}
    	    }
    	    else
    	    {
    	        SendClientMessage(playerid, WHITE, "That player is already stunned.");
    	    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "No players in range!");
		}
	}
	return 1;
}

command(hostname, playerid, params[])
{
	new name[128], string[128];
	if(sscanf(params, "z", name))
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /hostname [new name]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	        format(string, sizeof(string), "You have changed the server's name to %s.", name);
	        SendClientMessage(playerid, WHITE, string);
	        format(string, sizeof(string), "hostname %s", name);
	        SendRconCommand(string);
	    }
	}
	return 1;
}

command(unfreeze, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /unfreeze [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	if(IsPlayerConnectedEx(id))
	    	{
	    	    if(Player[id][Cuffed] >= 1 || Player[id][Tazed] >= 1)
	    	    {
	    	        SendClientMessage(playerid, WHITE, "You can't unfreeze a tazed / cuffed player.");
	    	    }
	    	    else
	    	    {
		        	TogglePlayerControllable(id, true);
		        	format(string, sizeof(string), "You have un-frozen player %s.", GetName(id));
		        	SendClientMessage(playerid, WHITE, string);
	        	}
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(drop, playerid, params[])
{
	new string[128];
	if(Player[playerid][PlayingHours] >= 2)
	{
		format(string, sizeof(string), "Pot (%d grams)\nCocaine (%d grams)\nMaterials (%d materials)\nWeapon (drops the weapon you're holding)\nPhone\nWalkie Talkie\nPot Seeds\nMoney", Player[playerid][Pot], Player[playerid][Cocaine], Player[playerid][Materials]);
	}
	else
	{
		format(string, sizeof(string), "Pot (%d grams)\nCocaine (%d grams)\nMaterials (%d materials)\nWeapon (drops the weapon you're holding)\nPhone\nWalkie Talkie\nPot Seeds", Player[playerid][Pot], Player[playerid][Cocaine], Player[playerid][Materials]);
	}
	ShowPlayerDialog(playerid, 4621, DIALOG_STYLE_LIST, "Inventory", string, "Drop", "Cancel");
	return 1;
}

command(setcargroup, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /setcargroup [group ID]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            if(id >= 0 && id < MAX_GROUPS)
	            {
	                    if(id == 0)
	                    {
	                        SendClientMessage(playerid, WHITE, "You have unlocked this vehicle.");
	                        Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarGroup] = 0;
	                    }
	                    else
	                    {
				            Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarGroup] = id;
				            format(string, sizeof(string), "You have locked this vehicle to Group %s.", Groups[id][GroupName]);
				            SendClientMessage(playerid, WHITE, string);
				            SaveExistingVehicle(GetVehicleCarID(GetPlayerVehicleID(playerid)));
			            }
		        }
		        else
		        {
		            format(string, sizeof(string), "Invalid Group ID (groups vary from ID 1 to ID %d).", MAX_GROUPS);
		            SendClientMessage(playerid, WHITE, string);
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're not in a valid vehicle.");
	        }
	    }
	}
	return 1;
}

command(setlvpdcar, playerid, params[])
{
	new string[128];
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(Player[playerid][Group] == 1 && Player[playerid][GroupRank] >=5)
		{
			if(GetVehicleFileID(GetPlayerVehicleID(playerid))  == 0)
			{
				SendClientMessage(playerid, WHITE, "That doesn't seem to be a saved vehicle.");
			}
			else
			{
				Vehicles[GetVehicleFileID(GetPlayerVehicleID(playerid))][CarGroup] = 1;
				format(string, sizeof(string), "You have locked this vehicle to Group %s.", Groups[1][GroupName]);
				SendClientMessage(playerid, WHITE, string);
				SaveExistingVehicle(GetPlayerVehicleID(playerid));
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not able to do this!");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You're not in a vehicle!");
	}
	return 1;
}


command(sellcar, playerid, params[])
{
	if(Player[playerid][PlayingHours] >= 2)
	{
		new id, vprice, vehslot, string[128];
		if(sscanf(params, "udd", id, vprice, vehslot))
		{
			SendClientMessage(playerid, WHITE, "SYNTAX: /sellcar [playerid] [price] [1-3]");
		}
		else
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[id][PlayingHours] >= 2)
				{
					if(vehslot >= 1 && vehslot < 4)
					{
						switch(vehslot)
						{
							case 1:
							{
								if(Player[playerid][PlayerCarModel] >= 1)
								{
									if(GetDistanceBetweenPlayers(playerid, id) < 7)
									{
										Player[id][PendingCarReceival] = playerid;
										Player[id][PendingCarPrice] = vprice;
										Player[id][CarSeller] = playerid;
										dini_IntSet(string, "CarSeller", Player[id][CarSeller]);
										Player[id][GivingSlot] = 1;
										format(string, sizeof(string), "You have requested to sell your vehicle to %s for $%d from slot 1.", GetName(id), vprice);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "%s has offered you to sell you their %s for %d (type /approve sellcar).", GetName(playerid), GetVehicleName(GetVehicleModel(Player[playerid][CarLinkID])), vprice);
										SendClientMessage(id, PURPLE, string);
									}
									else
									{
										SendClientMessage(playerid, WHITE, "You're too far away!");
									}
								}
								else
								{
									SendClientMessage(playerid, WHITE, "You don't have a vehicle in this slot.");
								}
							}
							case 2:
							{
								if(Player[playerid][PlayerCarModel2] >= 1)
								{
									if(GetDistanceBetweenPlayers(playerid, id) < 7)
									{
										Player[id][PendingCarReceival] = playerid;
										Player[id][PendingCarPrice] = vprice;
										Player[id][CarSeller] = playerid;
										dini_IntSet(string, "CarSeller", Player[id][CarSeller]);
										Player[id][GivingSlot] = 2;
										format(string, sizeof(string), "You have requested to sell your vehicle to %s for %d from slot 2.", GetName(id), vprice);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "%s has offered you to sell you their %s for %d (type /approve sellcar).", GetName(playerid), GetVehicleName(GetVehicleModel(Player[playerid][Car2LinkID])), vprice);
										SendClientMessage(id, PURPLE, string);
									}
									else
									{
										SendClientMessage(playerid, WHITE, "You're too far away!");
									}
								}
								else
								{
									SendClientMessage(playerid, WHITE, "You don't have a vehicle in this slot.");
								}
							}
							case 3:
							{
								if(Player[playerid][PlayerCarModel3] >= 1)
								{
									if(GetDistanceBetweenPlayers(playerid, id) < 7)
									{
										Player[id][PendingCarReceival] = playerid;
										Player[id][PendingCarPrice] = vprice;
										Player[id][GivingSlot] = 3;
										dini_IntSet(string, "CarSeller", Player[id][CarSeller]);
										format(string, sizeof(string), "You have requested to sell your vehicle to %s for %d from slot 3.", GetName(id), vprice);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "%s has offered you to sell you their %s for %d (type /approve sellcar).", GetName(playerid), GetVehicleName(GetVehicleModel(Player[playerid][Car3LinkID])), vprice);
										SendClientMessage(id, PURPLE, string);
									}
									else
									{
										SendClientMessage(playerid, WHITE, "You're too far away!");
									}
								}
								else
								{
									SendClientMessage(playerid, WHITE, "You don't have a vehicle in this slot.");
								}
							}
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Invalid vehicle slot.");
					}
				}
				else
				{
					SendClientMessage(playerid, YELLOW, "The person you're trying to sell this vehicle to has less than 2 hours.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That specified player not connected or isn't logged in.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, YELLOW, "You need 2 hours to be able to sell a vehicle.");
	}
	return 1;
}

command(give, playerid, params[])
{
	new item[128], quantity, id, string[128];
	if(sscanf(params, "udz", id, quantity, item))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /give [playerid] [quantity] [item]");
	    SendClientMessage(playerid, GREY, "Items: Pot, Cocaine, Rags, Rope, Materials");
	}
	else
	{
	    if(quantity < 1)
	    {
	        SendClientMessage(playerid, WHITE, "Invalid amount.");
	    }
	    else
	    {
		    if(strcmp(item, "materials", true) == 0)
		    {
		        if(Player[playerid][Materials] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Materials] += quantity;
		                    Player[playerid][Materials] -= quantity;
							format(string, sizeof(string), "You have passed %d materials on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d materials, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d materials to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough materials.");
				}
		    }
		    else if(strcmp(item, "rags", true) == 0)
		    {
		        if(Player[playerid][Rags] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Rags] += quantity;
		                    Player[playerid][Rags] -= quantity;
							format(string, sizeof(string), "You have passed %d rags on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d rags, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d rags to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough rags.");
				}
		    }
		    else if(strcmp(item, "rope", true) == 0)
		    {
		        if(Player[playerid][Rope] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Rope] += quantity;
		                    Player[playerid][Rope] -= quantity;
							format(string, sizeof(string), "You have passed %d lines of rope on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d lines of rope, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d lines of rope to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough rope.");
				}
		    }
		    else if(strcmp(item, "Cocaine", true) == 0)
		    {
		        if(Player[playerid][Cocaine] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Cocaine] += quantity;
		                    Player[playerid][Cocaine] -= quantity;
							format(string, sizeof(string), "You have passed %d grams of Cocaine on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d grams of Cocaine, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d grams of Cocaine to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That specified player not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough Cocaine.");
				}
		    }
		    else if(strcmp(item, "Pot", true) == 0)
		    {
		        if(Player[playerid][Pot] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Pot] += quantity;
		                    Player[playerid][Pot] -= quantity;
							format(string, sizeof(string), "You have passed %d grams of Pot on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d grams of Pot, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d grams of Pot to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, RPCOLOUR, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That specified player not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough Pot.");
				}
		    }
		}
	}
	return 1;
}

command(anticheat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    if(CurrentEvent >= 1)
	    {
	        if(Anticheat == -1)
	        {
	            Anticheat = 0;
	            SendClientMessage(playerid, WHITE, "You have disabled the anticheat.");
	        }
	        else
	        {
	        	SendClientMessage(playerid, WHITE, "You can't enable the anticheat in an event.");
	        }
	    }
	    else
	    {
		    if(Anticheat == 0)
		    {
		        Anticheat = 1;
		        SendClientMessage(playerid, WHITE, "You have enabled the anticheat.");
		    }
		    else
		    {
		        Anticheat = 0;
		        SendClientMessage(playerid, WHITE, "You have disabled the anticheat.");
		    }
	    }
	}
	return 1;
}

command(getsupplies, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You must first reach your concurrent checkpoint.");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 5)
	    {
	 		for(new h = 0; h < sizeof(Jobs); h++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
			    {
			        if(Player[playerid][Job] == h && Jobs[Player[playerid][Job]][JobType] == 5)
			        {
			            if(Jobs[h][JobMiscLocationOneWorld] == GetPlayerVirtualWorld(playerid))
			            {
						    SendClientMessage(playerid, WHITE, "Please select the supplies type you wish to collect.");
						    ShowPlayerDialog(playerid, 17261, DIALOG_STYLE_LIST, "Delivery Job", "Grocery Supplies (General Store)\nClothes (Skin Shops)\nAlcohol (Bars / Clubs)\nAdult Toys (Porn Shops)\nFood (Restraunts)\nHardware stores", "Select", "Cancel");
						}
					}
				}
			}
		}
	}
	return 1;
}

command(studioobjects, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] == 5)
	{
	    if(Player[playerid][GroupRank] >= 5)
	    {
		    if(StudioObjectsSpawned == 1)
		    {
		        StudioObjectsSpawned = 0;
		        for(new i = 0; i < MAX_STUDIO_OBJECTS; i++)
				{
				    DestroyDynamicObject(StudioObjects[i]);
				}
		    }
		    else
		    {
		        StudioObjectsSpawned = 1;
				StudioObjects[0] = CreateDynamicObject(1424, 1502.8394775391, -1583.5865478516, 13.060384750366, 0.000000, 0.000000, 89.324493408203, -1, -1, -1, 250.0);
				StudioObjects[1] = CreateDynamicObject(1424, 1501.8811035156, -1584.5316162109, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[2] = CreateDynamicObject(1424, 1500.0139160156, -1584.5579833984, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[3] = CreateDynamicObject(1424, 1498.1630859375, -1584.5771484375, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[4] = CreateDynamicObject(1424, 1496.3121337891, -1584.5844726563, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[5] = CreateDynamicObject(1424, 1494.4666748047, -1584.5993652344, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[6] = CreateDynamicObject(1425, 1442.1081542969, -1590.1590576172, 12.8353099823, 0.000000, 0.000000, 268.69067382813, -1, -1, -1, 250.0);
				StudioObjects[7] = CreateDynamicObject(1423, 1443.9427490234, -1588.8822021484, 13.09375, 0.000000, 0.000000, 89.324493408203, -1, -1, -1, 250.0);
				StudioObjects[8] = CreateDynamicObject(1423, 1444.7576904297, -1591.1243896484, 13.09375, 0.000000, 0.000000, 326.25524902344, -1, -1, -1, 250.0);
				StudioObjects[9] = CreateDynamicObject(1423, 1447.2380371094, -1591.7987060547, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[10] = CreateDynamicObject(1423, 1449.8553466797, -1591.7955322266, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[11] = CreateDynamicObject(1423, 1452.3983154297, -1591.8347167969, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[12] = CreateDynamicObject(1423, 1454.9035644531, -1591.8175048828, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[13] = CreateDynamicObject(1228, 1444.3485107422, -1586.060546875, 12.96800327301, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[14] = CreateDynamicObject(1423, 1457.5024414063, -1591.7775878906, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[15] = CreateDynamicObject(1423, 1460.1005859375, -1591.79296875, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[16] = CreateDynamicObject(1423, 1462.6976318359, -1591.7899169922, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[17] = CreateDynamicObject(1423, 1465.3508300781, -1591.7807617188, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[18] = CreateDynamicObject(1423, 1467.9906005859, -1591.8200683594, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[19] = CreateDynamicObject(1423, 1470.6121826172, -1591.8656005859, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[20] = CreateDynamicObject(1423, 1473.2136230469, -1591.8610839844, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[21] = CreateDynamicObject(1423, 1475.7937011719, -1591.8469238281, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[22] = CreateDynamicObject(1423, 1478.4024658203, -1591.8955078125, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[23] = CreateDynamicObject(1423, 1481.0582275391, -1591.8861083984, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[24] = CreateDynamicObject(1423, 1483.6923828125, -1591.8922119141, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[25] = CreateDynamicObject(1423, 1486.4251708984, -1591.8852539063, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[26] = CreateDynamicObject(1423, 1489.1274414063, -1591.8316650391, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[27] = CreateDynamicObject(1423, 1491.8916015625, -1591.8214111328, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[28] = CreateDynamicObject(1423, 1494.5946044922, -1591.8095703125, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[29] = CreateDynamicObject(1423, 1497.3735351563, -1591.7801513672, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[30] = CreateDynamicObject(1423, 1500.0612792969, -1591.822265625, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[31] = CreateDynamicObject(1423, 1502.6558837891, -1591.8129882813, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[32] = CreateDynamicObject(1423, 1504.1467285156, -1590.7327880859, 13.09375, 0.000000, 0.000000, 268.69067382813, -1, -1, -1, 250.0);
				StudioObjects[33] = CreateDynamicObject(1423, 1504.1456298828, -1588.1284179688, 13.09375, 0.000000, 0.000000, 91.309509277344, -1, -1, -1, 250.0);
				StudioObjects[34] = CreateDynamicObject(1423, 1505.1781005859, -1586.7438964844, 13.2578125, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[35] = CreateDynamicObject(1423, 1506.2008056641, -1585.1943359375, 13.2578125, 0.000000, 0.000000, 89.324493408203, -1, -1, -1, 250.0);
				StudioObjects[36] = CreateDynamicObject(1423, 1507.3255615234, -1583.3948974609, 13.2578125, 0.000000, 0.000000, 41.684783935547, -1, -1, -1, 250.0);
		    }
		}
	}

	return 1;
}

command(dgates, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    GetDynamicObjectPos(dGates[0], Positions[0][0], Positions[0][1], Positions[0][2]);
	    GetDynamicObjectPos(dGates[1], Positions[1][0], Positions[1][1], Positions[1][2]);
	    GetDynamicObjectPos(dGates[2], Positions[2][0], Positions[2][1], Positions[2][2]);

	    if(IsPlayerInRangeOfPoint(playerid, 15.0, Positions[0][0], Positions[0][1], Positions[0][2]))
	    {
	        switch(dGateStatus[0])
	        {
	            case 0:
	            {
	                MoveDynamicObject(dGates[0], 641.03759765625, -426.08184814453, 10.757417678833, 1);
	                dGateStatus[0] = 1;
	                SendClientMessage(playerid, WHITE, "Opening...");
	            }
	            case 1:
	            {
	                MoveDynamicObject(dGates[0], 641.03759765625, -426.08184814453, 18.757417678833, 1);
	                dGateStatus[0] = 0;
	                SendClientMessage(playerid, WHITE, "Closing...");
	            }
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15.0, Positions[1][0], Positions[1][1], Positions[1][2]))
	    {
	        switch(dGateStatus[1])
	        {
	            case 0:
	            {
	                MoveDynamicObject(dGates[1], 879.41540527344, -559.67053222656, 14.263460159302, 1);
	                dGateStatus[1] = 1;
	                SendClientMessage(playerid, WHITE, "Opening...");
	            }
	            case 1:
	            {
	                MoveDynamicObject(dGates[1], 879.41540527344, -559.67053222656, 22.263460159302, 1);
	                dGateStatus[1] = 0;
	                SendClientMessage(playerid, WHITE, "Closing...");
	            }
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15.0, Positions[2][0], Positions[2][1], Positions[2][2]))
	    {
	        switch(dGateStatus[2])
	        {
	            case 0:
	            {
	                MoveDynamicObject(dGates[2], 681.40765380859, -656.54528808594, 10.757417678833, 1);
	                dGateStatus[2] = 1;
	                SendClientMessage(playerid, WHITE, "Opening...");
	            }
	            case 1:
	            {
	                MoveDynamicObject(dGates[2], 681.40765380859, -656.54528808594, 18.757417678833, 1);
	                dGateStatus[2] = 0;
	                SendClientMessage(playerid, WHITE, "Closing...");
	            }
	        }
	    }
	}

	return 1;
}

command(gate, playerid, params[])
{
	#pragma unused params

	new string[128];
	
	if(IsPlayerInRangeOfPoint(playerid, 25.0, 82.75020, -221.24879, -3.03110) && Player[playerid][Job] == 3)
	{
		if(truckergate == 0)
		{
			MoveDynamicObject(truckergateobject, 82.75020, -221.24879, -5.03110, 5.0, 0.00000, 0.00000, -1.86000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			SendClientMessage(playerid, GREY, "Don't forget to close it. (There'll be consequences if you don't)");
			printf("%s has opened the trucker gate.", GetName(playerid));
			truckergate = 1;
		}
		else
		{
			MoveDynamicObject(truckergateobject, 82.75019, -221.24884, 0.62895, 5.0, 0.00000, 0.00000, -1.86000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			printf("%s has closed the trucker gate.", GetName(playerid));
			truckergate = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1961.52905, -2189.73389, 16.05790) && Player[playerid][Group] == 10)
	{
	    if(airportgate1o == 0)
	    {
	        MoveDynamicObject(airportgate1, 1961.52905, -2189.73389, 7.27290, 5.0, 0.0000000, 0.0000000, 180.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			airportgate1o = 1;
	    }
	    else
	    {
	        MoveDynamicObject(airportgate1, 1961.52905, -2189.73389, 16.05790, 5.0, 0.0000000, 0.0000000, 180.00000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			airportgate1o = 0;
	    }
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1426.4004000, -1884.5996000, 0.0000000) && Player[playerid][Group] == 1)
	{
	    if(prisongate1o == 0)
	    {
	        MoveDynamicObject(prisongate1, 1426.4004000,-1884.5996000,0.0000000, 5.0, 0.0000000, 0.0000000, 179.9950000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			prisongate1o = 1;
	    }
	    else
	    {
	        MoveDynamicObject(prisongate1, 1426.4004000,-1884.5996000,16.4000000, 5.0, 0.0000000, 0.0000000, 179.9950000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			prisongate1o = 0;
	    }
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1812.80322, -2072.69702, 7.69720) && Player[playerid][Group] == 4)
	{
	    if(lsfdgate1o == 0)
	    {
            MoveObject(lsfdgate1, 1812.80322, -2072.69702, 7.69720, 5.0, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lsfdgate1o = 1;
	    }
		else
	    {
            MoveObject(lsfdgate1, 1812.80322, -2072.69702, 12.87520, 5.0, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lsfdgate1o = 0;
	    }
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, -1038.16394, 1564.86023, 34.65630) && Player[playerid][House] == 119)
	{
		if(h119gateo == 0)
		{
			MoveObject(h119gate, -1038.1639, 1564.8602, 30.5109, 5.0, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			h119gateo = 1;
		}
		else
		{
			MoveObject(h119gate, -1038.16394, 1564.86023, 34.65630, 5.0, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			h119gateo = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 2265.61743, 643.28723, 11.09066) && Player[playerid][House] == 128)
	{
		if(h128gateo == 0)
		{
			MoveObject(h128gate, 2265.61743, 643.28723, 8.39697, 5.0, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			h128gateo = 1;
		}
		else
		{
			MoveObject(h128gate, 2265.61743, 643.28723, 11.09066, 5.0, 0.00000, 0.00000, 90.0000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			h128gateo = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1026.41565, -371.85690, 70.63540) && Player[playerid][Group] == 1)
	{
	    if(BaseGate1o == 0)
	    {
	        MoveObject(BaseGate1, 1026.41565, -371.85690, 70.63540, 4);
	        format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			BaseGate1o = 1;
	    }
	    else
	    {
	        MoveObject(BaseGate1, 1026.41565, -371.85690, 74.18440, 4);
	        format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			BaseGate1o = 0;
	    }
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1540.44324, -1627.13867, 12.37347) && Player[playerid][Group] == 1)
	{
      if(lvpdgate1o == 0)
       {
			MoveObject(lvpdgate1, 1544.69751, -1630.79980, 13.02970, 5.0, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpdgate1o = 1;
		}
		else
		{
			MoveObject(lvpdgate1, 1544.69751, -1630.79980, 13.02970, 5.0,  0.00000, 90.00000, 90.00000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpdgate1o = 0;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1588.49597, -1633.15430, 12.40110) && Player[playerid][Group] == 1)
	{
  if(lvpdgate2o == 0)
		{
			MoveObject(lvpdgate2, 1588.66821, -1637.92297, 7.90030, 5.0,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpdgate2o = 1;
		}
		else
		{
			MoveObject(lvpdgate2, 1588.66821, -1637.92297, 14.78830, 5.0,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpdgate2o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 15.0, -2523.21387, 2261.60229, 5.15120))
	{
		if(treygateo == 0 && Player[playerid][House] == 248)
		{
			MoveObject(treygate, -2523.21387, 2261.60229, 2.53320, 5.0, 0.00000, 0.00000, 66.00000);
			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			treygateo = 1;
		}
		else
		{
			if(Player[playerid][House] == 248)
			{
				MoveObject(treygate, -2523.21387, 2261.60229, 5.15120, 5.0, 0.00000, 0.00000, 66.00000);
				format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
				SendClientMessage(playerid, RPCOLOUR, string);
				treygateo = 0;
			}
		}
	}
}

command(door, playerid, params[])
{
	#pragma unused params

	new string[128];
	
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1088.8372, 2110.6506, 14.3458) && Player[playerid][Group] == 5 && Player[playerid][GroupRank] >= 8)
	{
		if(group5dooro == 0)
		{
			MoveDynamicObject(group5door, 1088.83716, 2110.65063, 14.34580, 2.5, 0.00000, 0.00000, -107.57999);
	        format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			group5dooro = 1;
		}
		else
		{
			MoveDynamicObject(group5door, 1088.8372, 2110.6506, 14.3458, 2.5, 0.0000, 0.0000, 0.000);
	        format(string, sizeof(string), "%s closes the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			group5dooro = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1240.4000000, -2036.2000000, 61.0000000) && Player[playerid][Group] == 1)
	{
	    if(prisondoor1o == 0)
	    {
	        MoveDynamicObject(prisondoor1, 1240.4000000, -2036.2000000, 61.0000000, 2.5, 0.0000000, 0.0000000, 258.0000000);
	        format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			prisondoor1o = 1;
	    }
	    else
	    {
	        MoveDynamicObject(prisondoor1, 1238.5000000, -2037.0000000, 60.9000000, 2.5, 0.0000000, 0.0000000, 179.9950000);
	        format(string, sizeof(string), "%s closes the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			prisondoor1o = 0;
	    }
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 228.26109, 148.63870, 1002.02417) && Player[playerid][Group] == 4)  //door 1 lsfd
	{
		if(LSFDDoor1o == 0)
		{
			MoveDynamicObject(LSFDDoor1, 228.26109, 148.63870, 1002.02417, 2.5,  0.00000, 0.00000, 90.00000);
			MoveDynamicObject(LSFDDoor11, 228.25510, 153.79781, 1002.02417, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor1o = 1;
		}
		else
		{
		    MoveDynamicObject(LSFDDoor1,  228.26109, 149.71870, 1002.02417, 2.5,  0.00000, 0.00000, 90.00000);
			MoveDynamicObject(LSFDDoor11, 228.25510, 152.71780, 1002.02417, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor1o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 228.24719, 158.64259, 1002.02399)  && Player[playerid][Group] == 4)  //door 2 lsfd
	{
		if(LSFDDoor2o == 0)
		{
			MoveDynamicObject(LSFDDoor2, 228.24719, 158.64259, 1002.02399, 2.5,  0.00000, 0.00000, 90.00000);
			MoveDynamicObject(LSFDDoor21, 228.24719, 163.79041, 1002.02399, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor2o = 1;
		}
		else
		{
            MoveDynamicObject(LSFDDoor2, 228.24719, 159.72260, 1002.02399, 2.5,  0.00000, 0.00000, 90.00000);
			MoveDynamicObject(LSFDDoor21, 228.24719, 162.71040, 1002.02399, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor2o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 228.91580, 169.82050, 1002.02460)  && Player[playerid][Group] == 4)  //door 3 lsfd
	{
		if(LSFDDoor3o == 0)
		{
			MoveDynamicObject(LSFDDoor3, 228.91580, 169.82050, 1002.02460, 2.5,  0.00000, 0.00000, 0.00000);
			MoveDynamicObject(LSFDDoor31, 234.02400, 169.82050, 1002.02460, 2.5,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor3o = 1;
		}
		else
		{
		    MoveDynamicObject(LSFDDoor3, 229.95580, 169.82050, 1002.02460, 2.5,  0.00000, 0.00000, 0.00000);
			MoveDynamicObject(LSFDDoor31, 232.94400, 169.82050, 1002.02460, 2.5,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor3o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 294.10751, 189.34680, 1006.17078)  && Player[playerid][Group] == 4)  //door 4 lsfd
	{
		if(LSFDDoor4o == 0)
		{
			MoveDynamicObject(LSFDDoor4, 294.10751, 189.34680, 1006.17078, 2.5,  0.00000, 0.00000, 0.00000);
			MoveDynamicObject(LSFDDoor41, 299.22830, 189.34680, 1006.17078, 2.5,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor4o = 1;
		}
		else
		{
		    MoveDynamicObject(LSFDDoor4, 295.10751, 189.34680, 1006.17078, 2.5,  0.00000, 0.00000, 0.00000);
			MoveDynamicObject(LSFDDoor41, 298.10831, 189.34680, 1006.17078, 2.5,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor4o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 273.01660, 189.34560, 1006.17139)  && Player[playerid][Group] == 4)  //door 5 lsfd
	{
		if(LSFDDoor5o == 0)
		{
			MoveDynamicObject(LSFDDoor5, 273.01660, 189.34560, 1006.17139, 2.5,  0.00000, 0.00000, 0.00000);
			MoveDynamicObject(LSFDDoor51, 278.17920, 189.34560, 1006.17139, 2.5,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor5o = 1;
		}
		else
		{
		    MoveDynamicObject(LSFDDoor5, 274.09659, 189.34563, 1006.17145, 2.5,  0.00000, 0.00000, 0.00000);
			MoveDynamicObject(LSFDDoor51, 277.09921, 189.34560, 1006.17139, 2.5,  0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor5o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 236.43851, 183.33380, 1002.02161)  && Player[playerid][Group] == 4)  //door 6 lsfd
	{
		if(LSFDDoor6o == 0)
		{
			MoveDynamicObject(LSFDDoor6, 236.43851, 183.33380, 1002.02161, 2.5,  0.00000, 0.00000, 0.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor6o = 1;
		}
		else
		{
		    MoveDynamicObject(LSFDDoor6, 237.99850, 183.33380, 1002.02161, 2.5,  0.00000, 0.00000, 0.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			LSFDDoor6o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1324.42322, 1923.14929, -41.96490)  && Player[playerid][House] == 124)  //door 1
	{
		if(h124dooro == 0)
		{
			MoveObject(h124door, 1324.42322, 1923.14929, -41.96490, 2.5, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			h124dooro = 1;
		}
		else
		{
			MoveObject(h124door, 1324.42322, 1923.14929, -41.96490, 2.5, 0.00000, 0.00000, 0.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			h124dooro = 0;
		}
	}

 if(IsPlayerInRangeOfPoint(playerid, 5.0, 251.92346, 108.96958, 1002.21381) && Player[playerid][Group] == 1)  //door 1
	{
		if(lvpddoor1o == 0)
		{
            MoveObject(lvpddoor1, 253.16409, 106.50260, 1002.23688, 2.5, 0.00000, 0.00000, 90.00000);
			MoveObject(lvpddoor11, 253.16409, 111.70370, 1002.23688, 2.5, 0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			lvpddoor1o = 1;
		}
		else
		{
            MoveObject(lvpddoor1, 253.16409, 107.56660, 1002.23688, 2.5, 0.00000, 0.00000, 90.00000);
			MoveObject(lvpddoor11, 253.16409, 110.55570, 1002.23688, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			lvpddoor1o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 240.81122, 117.22623, 1002.21246) && Player[playerid][Group] == 1)  //door 2
	{
		if(lvpddoor2o == 0)
		{
            MoveObject(lvpddoor2, 239.58490, 115.06570, 1002.21301, 2.5,  0.00000, 0.00000, 90.00000);
			MoveObject(lvpddoor21,  239.58490, 120.10670, 1002.21301, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor2o = 1;
		}
		else
		{
            MoveObject(lvpddoor2, 239.58490, 116.09970, 1002.21301, 2.5,  0.00000, 0.00000, 90.00000);
			MoveObject(lvpddoor21, 239.58490, 119.07270, 1002.21301, 2.5,  0.00000, 0.00000, -90.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor2o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 229.9912, 169.8195, 1002.0264) && Player[playerid][Group] == 1)  //door 3
	{
		if(lvpddoor3o == 0)
		{
			MoveObject(lvpddoor3, 229.3712, 169.8195, 1002.0264, 2.5, 0.00000, 0.00000, 0.00000);
			MoveObject(lvpddoor31, 233.6084, 169.8214, 1002.0264, 2.5, 0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor3o = 1;
		}
		else
		{
            MoveObject(lvpddoor3, 229.9912, 169.8195, 1002.0264, 2.5, 0.00000, 0.00000, 0.00000);
			MoveObject(lvpddoor31, 232.9484, 169.8214, 1002.0264, 2.5, 0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor3o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 237.05162, 193.81091, 1007.16840) && Player[playerid][Group] == 1)  //door 4
	{
		if(lvpddoor4o == 0)
		{
			MoveObject(lvpddoor4, 235.9716, 193.8109, 1007.1684, 2.5, 0.00000, 0.00000, 0.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor4o = 1;
		}
		else
		{
			MoveObject(lvpddoor4, 237.05162, 193.81091, 1007.16840, 2.5, 0.00000, 0.00000, 0.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor4o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 274.11899, 189.36549, 1006.17859) && Player[playerid][Group] == 1)  //door 5
	{
		if(lvpddoor5o == 0)
		{
			MoveObject(lvpddoor5, 273.4990, 189.3655, 1006.1786, 2.5, 0.00000, 0.00000, 0.00000);
			MoveObject(lvpddoor51, 277.7044, 189.3761, 1006.1774, 2.5, 0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor5o = 1;
		}
		else
		{
			MoveObject(lvpddoor5, 274.11899, 189.36549, 1006.17859, 2.5, 0.00000, 0.00000, 0.00000);
			MoveObject(lvpddoor51, 277.10440, 189.37610, 1006.17743, 2.5, 0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor5o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 295.14911, 189.34958, 1006.17743) && Player[playerid][Group] == 1)  //door 6
	{
		if(lvpddoor6o == 0)
		{
			MoveObject(lvpddoor6, 294.5291, 189.3496, 1006.1774, 2.5, 0.00000, 0.00000, 0.00000);
			MoveObject(lvpddoor61, 298.7560, 189.3581, 1006.1774, 2.5, 0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor6o = 1;
		}
		else
		{
			MoveObject(lvpddoor6, 295.14911, 189.34958, 1006.17743, 2.5, 0.00000, 0.00000, 0.00000);
			MoveObject(lvpddoor61, 298.13599, 189.35811, 1006.17743, 2.5, 0.00000, 0.00000, 180.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoor6o = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2275.5205, 2442.5291, -69.9322) && Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 5)  //dep chief
	{
		if(lvpddoordepo == 0)
		{
			MoveObject(lvpddoordep, 2275.62427, 2444.36963, -71.76060, 2.5, 0.00000, 0.00000, 270.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoordepo = 1;
		}
		else
		{
			MoveObject(lvpddoordep, 2275.62427, 2443.20361, -71.76060, 2.5, 0.00000, 0.00000, 270.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoordepo = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2275.3376, 2436.2964, -69.9922) && Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 5)  //chief
	{
		if(lvpddoorchiefo == 0)
		{
			MoveObject(lvpddoorchief, 2275.62427, 2434.11450, -71.76060, 2.5, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoorchiefo = 1;
		}
		else
		{
			MoveObject(lvpddoorchief, 2275.6242, 2435.29248, -71.76060, 2.5, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			lvpddoorchiefo = 0;
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 958.9101,2103.7651,1011.0234) && Player[playerid][Group] == 2 && Player[playerid][GroupRank] >= 4)  //agency 1
	{
		if(agencydoor1o == 0)
		{
			MoveObject(agencydoor1, 961.23523, 2103.24609, 1011.20142, 2.5, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			agencydoor1o = 1;
		}
		else
		{
			MoveObject(agencydoor1, 959.68121, 2103.24609, 1011.20142, 2.5, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s shuts the door before locking it.", GetName(playerid));
			SendClientMessage(playerid, RPCOLOUR, string);
			agencydoor1o = 0;
		}
	}

}

command(killcheckpoint, playerid, params[])
{
	#pragma unused params
	new string[128];

	if(Player[playerid][Checkpoint] < 1)
	{
	    format(string, sizeof(string), "You don't have a checkpoint!");
	    SendClientMessage(playerid, WHITE, string);
	}
	else
	{
	    Player[playerid][Checkpoint] = 0;
		DisablePlayerCheckpoint(playerid);
		format(string, sizeof(string), "Checkpoint killed.");
		SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

command(kc, playerid, params[])
{
	#pragma unused params
	new string[128];

	if(Player[playerid][Checkpoint] < 1)
	{
	    format(string, sizeof(string), "You don't have a checkpoint!");
	    SendClientMessage(playerid, WHITE, string);
	}
	else
	{
	    Player[playerid][Checkpoint] = 0;
		DisablePlayerCheckpoint(playerid);
		format(string, sizeof(string), "Checkpoint killed.");
		SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

command(findhouse, playerid, params[])
{
	new houseid, string[128];
	if(sscanf(params, "d", houseid))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /findhouse [houseid]");
	}
	else
	{
        if(Jobs[Player[playerid][Job]][JobType] == 4)
        {
            if(Player[playerid][DetectiveCooldown] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You must wait the reload time (30 seconds).");
            }
            else
            {
                if(Player[playerid][Checkpoint] >= 1)
                {
                    SendClientMessage(playerid, WHITE, "You already have a checkpoint spawned.");
                }
                else
                {
                    if(houseid > SpawnedHouses)
                    {
                        SendClientMessage(playerid, WHITE, "Invalid house ID.");
                    }
                    else
                    {
	                    format(string, sizeof(string), "A checkpoint has been spawned for House ID %d.", houseid);
	                    SendClientMessage(playerid, WHITE, string);
	                    SetPlayerCheckpoint(playerid, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], 10.0);
	                    Player[playerid][Checkpoint] = 69;
                    }
                }
            }
		}
	}
	return 1;
}

command(confiscate, playerid, params[])
{
	new id, item[128], string[128];
	if(sscanf(params, "uz", id, item))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /confiscate [playerid] [item]");
	    SendClientMessage(playerid, GREY, "Items: Pot, Cocaine, Materials, Weapons, Phone, WalkieTalkie");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Player[playerid][AdminLevel] >= 2)
	        {
		        if(GetDistanceBetweenPlayers(playerid, id) < 9)
		        {
		            if(strcmp(item, "pot", true) == 0)
		            {
		                if(Player[id][Pot] >= 1)
		                {
			                format(string, sizeof(string), "* %s has confiscated %s's Pot (%d grams).", GetName(playerid), GetName(id), Player[id][Pot]);
							NearByMessage(playerid, RPCOLOUR, string);
							Player[playerid][Pot] += Player[id][Pot];
			                Player[id][Pot] = 0;
			                format(string, sizeof(string), "You have confiscated %s's Pot (%d grams).", GetName(id), Player[id][Pot]);
			                SendClientMessage(playerid, WHITE, string);
			                format(string, sizeof(string), "%s has confiscated your Pot .", GetName(playerid));
			                SendClientMessage(id, WHITE, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "There is no Pot to confiscate.");
		                }
		            }
		            else if(strcmp(item, "weapons", true) == 0)
		            {
		                format(string, sizeof(string), "* %s has confiscated %s's Weapons.", GetName(playerid), GetName(id));
						NearByMessage(playerid, RPCOLOUR, string);
						ResetPlayerWeaponsEx(id);
		                format(string, sizeof(string), "%s has confiscated your Weapons.", GetName(playerid));
		                SendClientMessage(id, WHITE, string);
		            }
		            else if(strcmp(item, "phone", true) == 0)
		            {
		                format(string, sizeof(string), "* %s has confiscated %s's Phone.", GetName(playerid), GetName(id));
						NearByMessage(playerid, RPCOLOUR, string);
						Player[id][PhoneN] = -1;
		                format(string, sizeof(string), "%s has confiscated your Phone.", GetName(playerid));
		                SendClientMessage(id, WHITE, string);
		            }
		            else if(strcmp(item, "walkietalkie", true) == 0)
		            {
		                format(string, sizeof(string), "* %s has confiscated %s's Walkie Talkie.", GetName(playerid), GetName(id));
						NearByMessage(playerid, RPCOLOUR, string);
						Player[id][WalkieTalkie] = 0;
		                format(string, sizeof(string), "%s has confiscated your Walkie Talkie.", GetName(playerid));
		                SendClientMessage(id, WHITE, string);
		            }
		            else if(strcmp(item, "cocaine", true) == 0)
		            {
		                if(Player[id][Cocaine] >= 1)
		                {
			                format(string, sizeof(string), "* %s has confiscated %s's Cocaine (%d grams).", GetName(playerid), GetName(id), Player[id][Cocaine]);
							NearByMessage(playerid, RPCOLOUR, string);
							Player[playerid][Cocaine] += Player[id][Cocaine];
			                Player[id][Cocaine] = 0;
			                format(string, sizeof(string), "You have confiscated %s's Cocaine (%d grams).", GetName(id), Player[id][Pot]);
			                SendClientMessage(playerid, WHITE, string);
			                format(string, sizeof(string), "%s has confiscated your Cocaine.", GetName(playerid));
			                SendClientMessage(id, WHITE, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "There is no Cocaine to confiscate.");
		                }
		            }
		            else if(strcmp(item, "materials", true) == 0)
		            {
		                if(Player[id][Materials] >= 1)
		                {
			                format(string, sizeof(string), "* %s has confiscated %s's Materials (%d materials).", GetName(playerid), GetName(id), Player[id][Materials]);
							NearByMessage(playerid, RPCOLOUR, string);
							Player[playerid][Materials] += Player[id][Materials];
			                Player[id][Materials] = 0;
			                format(string, sizeof(string), "You have confiscated %s's Materials (%d Materials).", GetName(id), Player[id][Materials]);
			                SendClientMessage(playerid, WHITE, string);
			                format(string, sizeof(string), "%s has confiscated your Materials.", GetName(playerid));
			                SendClientMessage(id, WHITE, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "There is no Materials to confiscate.");
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away!");
		        }
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(freeze, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /freeze [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	if(IsPlayerConnectedEx(id))
	    	{
	        	TogglePlayerControllable(id, false);
	        	format(string, sizeof(string), "You have frozen player %s.", GetName(id));
	        	SendClientMessage(playerid, WHITE, string);
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

/*command(changeranktitle, playerid, params[])
{
	new Name[128], Rank, string[128];
	if (sscanf(params, "dz", Rank, Name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /changeranktitle [rank (1-5)] [new title]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strlen(Name) < 20 && strlen(Name) >= 1)
	        {
		        switch(Rank)
		        {
		            case 1:
		            {
		                format(OOCRanks[Rank1], sizeof(OOCRanks[Rank1]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank1", OOCRanks[Rank1]);
		                format(string, sizeof(string), "You have changed Rank 1's title to '%s'.", OOCRanks[Rank1]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 2:
		            {
		                format(OOCRanks[Rank2], sizeof(OOCRanks[Rank2]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank2", OOCRanks[Rank2]);
		                format(string, sizeof(string), "You have changed Rank 2's title to '%s'.", OOCRanks[Rank2]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 3:
		            {
		                format(OOCRanks[Rank3], sizeof(OOCRanks[Rank3]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank3", OOCRanks[Rank3]);
		                format(string, sizeof(string), "You have changed Rank 3's title to '%s'.", OOCRanks[Rank3]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 4:
		            {
		                format(OOCRanks[Rank4], sizeof(OOCRanks[Rank4]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank4", OOCRanks[Rank4]);
		                format(string, sizeof(string), "You have changed Rank 4's title to '%s'.", OOCRanks[Rank4]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 5:
		            {
		                format(OOCRanks[Rank5], sizeof(OOCRanks[Rank5]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank5", OOCRanks[Rank5]);
		                format(string, sizeof(string), "You have changed Rank 5's title to '%s'.", OOCRanks[Rank5]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            default:
		            {
		                SendClientMessage(playerid, WHITE, "SYNTAX: /changeranktitle [rank (1-5)] [new title]");
		            }
		        }
	        }
	        else
			{
			    SendClientMessage(playerid, WHITE, "Rank names must be longer than 1 character and shorter than 20 characters.");
			}
	    }
	}
	return 1;
}*/

command(playerwarns, playerid, params[])
{
	new string[128];

    if(IsPlayerConnectedEx(playerid))
    {
        SendClientMessage(playerid, WHITE, "------------------------------------------------------");
        format(string, sizeof(string), "Name: %s", GetName(playerid));
        SendClientMessage(playerid, WHITE, string);
        format(string, sizeof(string), "First Warning: %s", Player[playerid][Warning1]);
        SendClientMessage(playerid, GREY, string);
        format(string, sizeof(string), "Second Warning: %s", Player[playerid][Warning2]);
        SendClientMessage(playerid, GREY, string);
        format(string, sizeof(string), "Third Warning: %s", Player[playerid][Warning3]);
        SendClientMessage(playerid, GREY, string);
        SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	}
	return 1;
}

command(gotocarid, playerid, params[])
{
	new id, string[40];
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /gotocarid [carid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        new Float: PosX, Float: PosY, Float: PosZ;
	        GetVehiclePos(id, PosX, PosY, PosZ);
	        SetPlayerPos(playerid, PosX, PosY, PosZ);
	        format(string, sizeof(string), "Teleported to vehicle ID %d.", id);
	        SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(getcarid, playerid, params[])
{
	new id, string[40];
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /getcarid [carid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        new Float: PosX, Float: PosY, Float: PosZ;
	        GetPlayerPos(playerid, PosX, PosY, PosZ);
	        SetVehiclePos(id, PosX, PosY, PosZ);
	        format(string, sizeof(string), "Teleported vehicle ID %d to you.", id);
	        SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(recordcheck, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /recordcheck [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	    	if(IsPlayerConnectedEx(id))
	    	{
	    	    SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	    	    format(string, sizeof(string), "Name: %s", GetName(id));
	    	    SendClientMessage(playerid, WHITE, string);
		        format(string, sizeof(string), "Registered Offences %d.", Player[id][CriminalOffences]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "First Active Record: %s", Player[id][Offence1]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Second Active Record: %s", Player[id][Offence2]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Third Active Record: %s", Player[id][Offence3]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Fourth Active Record: %s", Player[id][Offence4]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Fifth Active Record: %s", Player[id][Offence5]);
		        SendClientMessage(playerid, GREY, string);
		        format(string, sizeof(string), "Sixth Active Record: %s", Player[id][Offence6]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	    	}
	    }
	}
	return 1;
}

command(hangup, playerid, params[])
{
	#pragma unused params
	TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
	Player[playerid][OnPhoneTime] = 0;
	Player[Player[playerid][CellphoneConsole]][OnPhoneTime] = 0;
	SendClientMessage(playerid, WHITE, "You have terminated the current call.");
	SendClientMessage(Player[playerid][CellphoneConsole], WHITE, "Your call has been terminated by the other party.");

	if(GetPlayerSpecialAction(Player[playerid][CellphoneConsole]) == SPECIAL_ACTION_USECELLPHONE)
	{
	    SetPlayerSpecialAction(Player[playerid][CellphoneConsole], SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(Player[playerid][CellphoneConsole] != -1)
	{
	    Player[Player[playerid][CellphoneConsole]][CellphoneConsole] = -1;
	    Player[playerid][CellphoneConsole] = -1;
	}

	return 1;
}

command(h, playerid, params[])
{
	#pragma unused params
	TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
	Player[playerid][OnPhoneTime] = 0;
	Player[Player[playerid][CellphoneConsole]][OnPhoneTime] = 0;
	SendClientMessage(playerid, WHITE, "You have terminated the current call.");
	Player[playerid][InCall] = 0;
	SendClientMessage(Player[playerid][CellphoneConsole], WHITE, "Your call has been terminated by the other party.");

	if(GetPlayerSpecialAction(Player[playerid][CellphoneConsole]) == SPECIAL_ACTION_USECELLPHONE)
	{
	    SetPlayerSpecialAction(Player[playerid][CellphoneConsole], SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(Player[playerid][CellphoneConsole] != -1)
	{
	    Player[Player[playerid][CellphoneConsole]][CellphoneConsole] = -1;
	    Player[playerid][CellphoneConsole] = -1;
	}

	return 1;
}

command(contract, playerid, params[])
{
	new Reason[128], id, price, string[128];
	if(sscanf(params, "udz", id, price, Reason))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /contract [playerid] [price] [reason]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 2)
	    {
	        SendClientMessage(playerid, WHITE, "Hitmen can't place contracts.");
	    }
	    else
	    {
		    if(strlen(Reason) < 1)
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /contract [playerid] [price] [reason]");
		        return 1;
		    }
		    else
		    {
			    if(IsPlayerConnectedEx(id))
			    {
		    	    if(Player[playerid][Money] >= price)
		        	{
		            	if(price >= 1000000 || price < 5000)
		            	{
		                	SendClientMessage(playerid, WHITE, "The maximum you can place is $1,000,000 and can't be smaller than $5000.");
		            	}
		            	else
		            	{
	                    	if(playerid == id)
	                    	{
	                    	    SendClientMessage(playerid, WHITE, "You can't place a contract on yourself.");
	                    	}
	                    	else
	                    	{
	                    	    if(Player[id][ContractPrice] >= 1)
	                    	    {
	                    	        SendClientMessage(playerid, WHITE, "Unable to place contract.");
	                    	    }
	                    	    else
	                    	    {
	                				Player[playerid][Money] -= price;
	                				format(Player[id][Contract], 255, "%s (from %s)", Reason, GetName(playerid));
	                				Player[id][ContractPrice] = price;
	                				format(string, sizeof(string), "You have successfullly placed a contract on %s, for $%d. For the reason: %s.", GetName(id), price, Reason);
	                				SendClientMessage(playerid, WHITE, string);
	                				format(string, sizeof(string), "A hit has become available on %s, for $%d.", GetName(id), price);
									for(new i = 0; i < MAX_PLAYERS; i++)
									{
									    if(IsPlayerConnectedEx(i))
									    {
									        if(Groups[Player[i][Group]][CommandTypes] == 2)
									        {
									            SendClientMessage(i, ANNOUNCEMENT, string);
									        }
									    }
									}
						    	}
							}
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You can't afford that.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Player not connected or logged in.");
		        }
		    }
		}
	}
	return 1;
}

/*command(disbandgroup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 10)
	{
	    new second, grptemp = Player[playerid][Group];

	    gettime(Groups[Player[playerid][Group]][DisbandHour], Groups[Player[playerid][Group]][DisbandMinute], second);
	    getdate(Groups[Player[playerid][Group]][DisbandDay], Groups[Player[playerid][Group]][DisbandMonth], Groups[Player[playerid][Group]][DisbandYear]);

	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnectedEx(i) && Player[i][Group] == grptemp)
	        {
	            SendClientMessage(i, RED, "You have been kicked from the group, reason: Disbandation.");
	            Player[i][Group] = 0;
	            Player[i][GroupRank] = 0;
	        }
	    }

	    format(Groups[grptemp][GroupName], 255, "Nothing");
	}
	return 1;
}*/

/*command(answer, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][BeingCalled] != -1)
	{
	    Player[playerid][CellphoneConsole] = Player[playerid][BeingCalled];
	    Player[Player[playerid][BeingCalled]][OnPhoneTime] = 1;
	    Player[Player[playerid][BeingCalled]][CellphoneConsole] = playerid;
	    SendClientMessage(playerid, WHITE, "You have picked up the phone.");
	    SendClientMessage(Player[playerid][BeingCalled], WHITE, "The other party has answered the call.");
	    Player[Player[playerid][BeingCalled]][CallConnectingTime] = -1;
	    Player[playerid][BeingCalled] = -1;
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    Player[Player[playerid][BeingCalled]][Calling] = -1;
	    TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not being called.");
	}
	return 1;
}*/

command(unmodallcars, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    new Float: CarPoss[3], SlotComp;
		for(new i = 0; i < 400; i++)
		{
		    GetVehiclePos(i, CarPoss[0], CarPoss[1], CarPoss[2]);

		    if(CarPoss[0] != 0.00 && CarPoss[1] != 0.00 && CarPoss[2] != 0.00)
		    {
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_SPOILER);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_HOOD);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_ROOF);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_SIDESKIRT);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_LAMPS);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_NITRO);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_EXHAUST);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_WHEELS);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_STEREO);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_HYDRAULICS);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_FRONT_BUMPER);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_REAR_BUMPER);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_VENT_RIGHT);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_VENT_LEFT);
		        RemoveVehicleComponent(i, SlotComp);
		    }
		}

	}

	return 1;
}

command(adisbandgroup, playerid, params[])
{
	new grptemp, string[128];
	if(sscanf(params, "d", grptemp))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /adisbandgroup [id]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    if(grptemp >= 1 && grptemp < 20)
		    {
			    new second;

			    gettime(Groups[Player[playerid][Group]][DisbandHour], Groups[Player[playerid][Group]][DisbandMinute], second);
			    getdate(Groups[Player[playerid][Group]][DisbandDay], Groups[Player[playerid][Group]][DisbandMonth], Groups[Player[playerid][Group]][DisbandYear]);

			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnectedEx(i) && Player[i][Group] == grptemp)
			        {
			            SendClientMessage(i, ADMINORANGE, "You have been kicked from the group, reason: Disbandation.");
			            Player[i][Group] = 0;
			            Player[i][GroupRank] = 0;
			        }
			    }
			    format(string, sizeof(string), "You have disbanded group %d (%s).", grptemp, Groups[grptemp][GroupName]);
			    SendClientMessage(playerid, WHITE, string);
			    format(Groups[grptemp][GroupName], 255, "Nothing");
		    }
	    }
	}
	return 1;
}

command(gov, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /gov [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][Group] != 0)
		{
		    if(Player[playerid][GroupRank] >= 4)
		    {
			    SendClientMessageToAll(GREY, "----------------------------- [Government Notice] ----------------------------- ");
			    format(string, sizeof(string), "%s: %s says: %s", Groups[Player[playerid][Group]][GroupName], GetName(playerid), message);
			    SendClientMessageToAll(WHITE, string);
			    SendClientMessageToAll(GREY, "----------------------------- [Government Notice] ----------------------------- ");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a LEO.");
		}
	}
	return 1;
}

command(broadcast, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /broadcast [message]");
	}
	else
	{
		if(Player[playerid][Group] == 7)
		{
		    if(Player[playerid][GroupRank] > 1)
		    {
			    format(string, sizeof(string), "[SAM] %s says: %s", GetName(playerid), message);
			    SendClientMessageToAll(SAMBROADCAST, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You need to be R2+ for this!");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not in SAM.");
		}
	}
	return 1;
}

/*command(entergarage, playerid, params[])
{
	if(Player[playerid][Group] == 6 && IsPlayerInRangeOfPoint(playerid, 10.0, 1054.5691,2133.4802,10.8203)){
		if(IsPlayerInAnyVehicle(playerid)){
			new g6vehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(g6vehid, 1063.3629,2134.3459,10.8203);
		}
		else{
		SetPlayerPos(playerid, 1063.3629,2134.3459,10.8203);
		}
	}

	if(Player[playerid][House] == 198 && IsPlayerInRangeOfPoint(playerid, 10.0, -262.2920,1135.0688,19.7920)){
		if(IsPlayerInAnyVehicle(playerid)){
			new adamsvehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(adamsvehid, -255.6830,1134.7648,-69.8290);
		}
		else{
		SetPlayerPos(playerid, -255.6830,1134.7648,-69.8290);
		}
	}

	if(Player[playerid][House] == 248 && IsPlayerInRangeOfPoint(playerid, 10.0, -2528.8030,2250.4727,4.7419)){
		if(IsPlayerInAnyVehicle(playerid)){
			new vosingtonvehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vosingtonvehid, 1608.4722,2655.7180,-90.7393);
		}
		else{
		SetPlayerPos(playerid, 1608.4722,2655.7180,-90.7393);
		}
	}

	if(Player[playerid][House] == 6 && IsPlayerInRangeOfPoint(playerid, 10.0, -255.3492,1157.6570,19.8356)){
		if(IsPlayerInAnyVehicle(playerid)){
			new basswasslevehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(basswasslevehid, -257.0441, 1159.4468, -70.3187);
		}
		else{
		SetPlayerPos(playerid, -257.0441, 1159.4468, -70.3187);
		}
	}

	if(Player[playerid][House] == 64 && IsPlayerInRangeOfPoint(playerid, 10.0, 1918.9103, 2760.4019, 11.8381)){
		if(IsPlayerInAnyVehicle(playerid)){
			new vehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehid, 1934.3044, 2759.2871, -68.9343);
		}
		else{
		SetPlayerPos(playerid, 1934.3044, 2759.2871, -68.9343);
		}
	}
}

command(entergarage2, playerid, params[])
{
	if(Player[playerid][House] == 64 && IsPlayerInRangeOfPoint(playerid, 10.0, 1918.9103, 2760.4019, 11.8381)){
		if(IsPlayerInAnyVehicle(playerid)){
			new adamsvehid2 = GetPlayerVehicleID(playerid);
			SetVehiclePos(adamsvehid2, 1935.1904, 2762.4238, -68.9427);
		}
		else{
		SetPlayerPos(playerid, 1935.1904, 2762.4238, -68.9427);
		}
	}
}*/

/*command(exitgarage, playerid, params[])
{
	if(Player[playerid][Group] == 6 && IsPlayerInRangeOfPoint(playerid, 10.0, 1063.3629,2134.3459,10.8203)){
		if(IsPlayerInAnyVehicle(playerid)){
			new g6vehid1 = GetPlayerVehicleID(playerid);
			SetVehiclePos(g6vehid1, 1050.4470,2133.9688,10.6203);
		}
		else
		{
			SetPlayerPos(playerid, 1054.5691,2133.4802,10.8203);
		}
	}
	if(Player[playerid][House] == 198 && IsPlayerInRangeOfPoint(playerid, 10.0, -255.6830,1134.7648,-69.8290)){
		if(IsPlayerInAnyVehicle(playerid)){
			new adamsvehid1 = GetPlayerVehicleID(playerid);
			SetVehiclePos(adamsvehid1, -262.2920,1135.0688,19.7920);
		}
		else
		{
			SetPlayerPos(playerid, -262.2920,1135.0688,19.7920);
		}
	}

	if(Player[playerid][House] == 248 && IsPlayerInRangeOfPoint(playerid, 10.0, 1608.4722,2655.7180,-90.7393)){
		if(IsPlayerInAnyVehicle(playerid)){
			new vosingtonvehid1 = GetPlayerVehicleID(playerid);
			SetVehiclePos(vosingtonvehid1, -2528.8030,2250.4727,4.7419);
		}
		else
		{
			SetPlayerPos(playerid, -2528.8030,2250.4727,4.7419);
		}
	}

	if(Player[playerid][House] == 6 && IsPlayerInRangeOfPoint(playerid, 10.0, -257.0441, 1159.4468, -70.3187)){
		if(IsPlayerInAnyVehicle(playerid)){
			new basswasslevehid1 = GetPlayerVehicleID(playerid);
			SetVehiclePos(basswasslevehid1, -255.3492,1157.6570,19.8356);
		}
		else
		{
			SetPlayerPos(playerid, -255.3492,1157.6570,19.8356);
		}
	}

	if(Player[playerid][House] == 64 && IsPlayerInRangeOfPoint(playerid, 10.0, 1934.3044, 2759.2871, -68.9343)){
		if(IsPlayerInAnyVehicle(playerid)){
			new vehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehid, 1918.9103, 2760.4019, 11.8381);
		}
		else
		{
			SetPlayerPos(playerid, 1918.9103, 2760.4019, 11.8381);
		}
	}
}*/

command(departments, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(d)epartments [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	    {
	        GetPlayerName(playerid, Name, sizeof(Name));

	    	switch(Player[playerid][GroupRank])
			{
	    		case 0: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
				case 1: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
				case 2:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
				case 3: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
				case 4:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
				case 5:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
				case 6: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
				case 7: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName7], Name, Message);
				case 8: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName8], Name, Message);
				case 9: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName9], Name, Message);
				case 10: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName10], Name, Message);
				default: format(string, sizeof(string), "ERROR! %s has used /d, but they're not a valid rank!", Name);
			}

			for(new i = 0; i < MAX_GROUPS; i++)
		    {
		        if(Groups[i][CommandTypes] == 1 || Groups[i][CommandTypes] == 4 || Groups[i][CommandTypes] == 3)
		        {
		            LiteralGroupMessage(i, DEPARTMENT_CHAT, string);
		        }
		    }

			format(string, sizeof(string), "[Departmental Radio] %s says: %s", Name, Message);
		    NearByMessage(playerid, GREY, string);

		    GroupChatLog(string);
	    }
	}
	return 1;
}

command(d, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(d)epartments [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	    {
	        GetPlayerName(playerid, Name, sizeof(Name));

	    	switch(Player[playerid][GroupRank])
			{
	    		case 0: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
				case 1: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
				case 2:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
				case 3: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
				case 4:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
				case 5:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
				case 6: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
				case 7: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName7], Name, Message);
				case 8: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName8], Name, Message);
				case 9: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName9], Name, Message);
                case 10: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName10], Name, Message);
				default: format(string, sizeof(string), "ERROR! %s has used /d, but they're not a valid rank!", Name);
			}

			for(new i = 0; i < MAX_GROUPS; i++)
		    {
		        if(Player[i][ToggedRadio] == 0 && Groups[i][CommandTypes] == 1 || Groups[i][CommandTypes] == 4 || Groups[i][CommandTypes] == 3)
		        {
		            LiteralGroupMessage(i, DEPARTMENT_CHAT, string);
		        }
		    }

			format(string, sizeof(string), "[Departmental Radio] %s says: %s", Name, Message);
		    NearByMessage(playerid, GREY, string);

		    GroupChatLog(string);
	    }
	}
	return 1;
}

command(megaphone, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(m)egaphone [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 3 && Player[playerid][Group] != 0)
		{
		    format(string, sizeof(string), "[Megaphone] %s: %s", GetName(playerid), message);
		    NearByMessageEx(playerid, ORANGE, string, 50);
		    ICChatLog(string);
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a LEO/medic.");
		}
	}
	return 1;
}

command(m, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(m)egaphone [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 3 && Player[playerid][Group] != 0)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
			    format(string, sizeof(string), "[Megaphone] %s: %s", GetName(playerid), message);
			    NearByMessageEx(playerid, ORANGE, string, 50);
			    ICChatLog(string);

			    for(new i = 0; i < SpawnedHouses; i++)
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 15, Houses[i][hExteriorX], Houses[i][hExteriorX], Houses[i][hExteriorX]))
			        {
			            for(new f = 0; i < SpawnedHouses; f++)
			            {
			                if(Player[f][InHouse] == i)
			                {
			                    NearByMessageEx(f, ORANGE, string, 50);
			                }
			            }
			        }
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must be in a vehicle.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a LEO/medic.");
		}
	}
	return 1;
}

command(travelannouncement, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /travelannouncement [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 11 && Player[playerid][GroupRank] >= 5)
	    {
		    format(string, sizeof(string), "Travel Announcement from %s: %s", GetName(playerid), message);
		    SendClientMessageToAll(GREEN, string);
		    ICChatLog(string);
	    }
	}
	return 1;
}

command(shout, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(s)hout [message]");
	}
	else
	{
	    if(Player[playerid][PrisonID] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
	    }
	    else
	    {
            if(Player[playerid][Gagged] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
            }
            else
            {
			    format(string, sizeof(string), "%s shouts: %s!", GetName(playerid), message);
			    NearByMessageEx(playerid, WHITE, string, 25.0);
			    ICChatLog(string);
		    }
	    }
	}
	return 1;
}

command(spotlight, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spotlight [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            format(string, sizeof(string), "You have set %s (ID: %d) as the Spotlight player.", GetName(id), id);
	            SendClientMessage(playerid, WHITE, string);
				Spotlight = id;
				format(string, sizeof(string), "%s has been set as the Spotlight Player by %s!", GetName(id), GetName(playerid));
				SendClientMessageToAll(ANNOUNCEMENT, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	}
	return 1;
}

command(low, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /low [message]");
	}
	else
	{
        if(Player[playerid][PrisonID] == 1)
        {
			SendClientMessage(playerid, WHITE, "You may not use this channel right now.");
        }
        else
        {
            if(Player[playerid][Gagged] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
            }
            else
            {
			    format(string, sizeof(string), "%s whispers: %s", GetName(playerid), message);
			    NearByMessageEx(playerid, WHITE, string, 2.0);
			    ICChatLog(string);
		    }
	    }
	}
	return 1;
}

command(untie, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /untie [playerid]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id))
		    {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                if(Player[id][Tied] >= 1)
	                {
	                    new randomc = random(4);

	                    switch(randomc)
	                    {
	                        case 0, 1, 2:
	                        {
	                    		format(string, sizeof(string), "* %s has attempted to untie %s, but failed.", GetName(playerid), GetName(id));
	                    		NearByMessage(playerid, RPCOLOUR, string);
	                    	}
	                    	case 3, 4:
	                    	{
	                    		format(string, sizeof(string), "* %s has attempted to untie %s, and succeeded.", GetName(playerid), GetName(id));
	                    		NearByMessage(playerid, RPCOLOUR, string);
			                    Player[id][Tied] = 0;
			                    TogglePlayerControllable(id, true);
	                    	}
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away!");
	            }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(supplystatus, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Business] >= 1)
	{
	    if(Businesses[Player[playerid][Business]][bSupplyStatus] == 1)
	    {
	        Businesses[Player[playerid][Business]][bSupplyStatus] = 0;
	        SendClientMessage(playerid, WHITE, "Your business is now accepting supplies again.");
	    }
	    else
	    {
	        Businesses[Player[playerid][Business]][bSupplyStatus] = 1;
	        SendClientMessage(playerid, WHITE, "Your business is no longer accepting supplies.");
	    }
	}
	return 1;
}

command(tie, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /tie [playerid]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id))
		    {
	            if(Player[playerid][Rope] >= 1)
	            {
		            if(GetDistanceBetweenPlayers(playerid, id) < 5 && GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id) && GetPlayerState(playerid) == 2 || GetPlayerSpecialAction(id) == SPECIAL_ACTION_HANDSUP)
		            {
			        	new randomc = random(4);
	                    switch(randomc)
	                    {
	                        case 0:
	                        {
	                            format(string, sizeof(string), "* %s has attempted to tie %s, but failed.", GetName(playerid), GetName(id));
	                            NearByMessage(playerid, RPCOLOUR, string);
	                        }
	                        case 1, 2, 3, 4:
	                        {
	                            format(string, sizeof(string), "* %s has attempted to tie %s, and succeeded.", GetName(playerid), GetName(id));
	                            NearByMessage(playerid, RPCOLOUR, string);
	                            Player[id][Tied] = 1;
	                            TogglePlayerControllable(id, false);
	                            Player[playerid][Rope]--;
	                        }
	                    }
	        		}
	        		else
	        		{
	        		    SendClientMessage(playerid, WHITE, "That player doesn't have their hands up or you're not in the same vehicle as them.");
	        		}
	        	}
	        	else
	        	{
	        	    SendClientMessage(playerid, WHITE, "You've not got any rope left.");
	        	}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
		}
	}
	return 1;
}

command(s, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(s)hout [message]");
	}
	else
	{
	    if(Player[playerid][PrisonID] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
	    }
	    else
	    {
            if(Player[playerid][Gagged] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
            }
            else
            {
			    format(string, sizeof(string), "%s shouts: %s!", GetName(playerid), message);
			    NearByMessageEx(playerid, WHITE, string, 25.0);
			    ICChatLog(string);
		    }
	    }
	}
	return 1;
}

command(rcmd, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    new string[128];
	    if(IsPlayerInRangeOfPoint(playerid, 5, LockerPos2X, LockerPos2Y, LockerPos2Z))
	    {
	        if(GetPlayerInterior(playerid) == LockerPos2Int)
	        {
	            format(string, sizeof(string), "%s Menu", Groups[Player[playerid][Group]][GroupName]);
	    		ShowPlayerDialog(playerid, 12000, DIALOG_STYLE_LIST, string, "Clothing", "Select", "Cancel");
			}
		}
  	}
	return 1;
}

command(rcsd, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] == 1 || Player[playerid][Group] == 3)
	{
	    new string[128];
	    if(IsPlayerInRangeOfPoint(playerid, 5, LockerPosX, LockerPosY, LockerPosZ))
	    {
	        if(GetPlayerInterior(playerid) == LockerPosInt)
	        {
				format(string, sizeof(string), "%s Menu", Groups[Player[playerid][Group]][GroupName]);
				ShowPlayerDialog(playerid, 3432, DIALOG_STYLE_LIST, string, "Toggle Duty\nEquipment\nRelease a Suspect\nClothing\nClear a Suspect\nChange name", "Select", "Cancel");
			}
		}
  	}
	return 1;
}

command(duty, playerid, params[])
{
	if(Player[playerid][Group] == 1 || Player[playerid][Group] == 3)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, LockerPosX, LockerPosY, LockerPosZ))
		{
			if(Player[playerid][CopDuty] == 0)
			{
				Player[playerid][CopDuty] = 1;
				GivePlayerWeaponEx(playerid, 3);
				GivePlayerWeaponEx(playerid, 24);
				GivePlayerWeaponEx(playerid, 25);
				GivePlayerWeaponEx(playerid, 29);
				GivePlayerWeaponEx(playerid, 41);
				SetPlayerHealth(playerid, 100);
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, WHITE, "You're now on police duty.");
			}
			else
			{
				Player[playerid][CopDuty] = 0;
				SendClientMessage(playerid, WHITE, "You're now off police duty.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not close enough to the locker!");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not in the RCSD/Government!");
	}
}


command(pda, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 2 && Player[playerid][Group] != 0)
	{
	    if(Player[playerid][GroupRank] >= 4)
	    {
			ShowPlayerDialog(playerid, 3433, DIALOG_STYLE_LIST, "Hitman Menu", "Contract List\nActive Agents\nTargets of Interest (over $250,000)\nLaw Enforcement\nEquipment\nAssign a Contract", "Select", "Cancel");
	    }
		else
		{
			ShowPlayerDialog(playerid, 3433, DIALOG_STYLE_LIST, "Hitman Menu", "Contract List\nActive Agents\nTargets of Interest (over $250,000)\nLaw Enforcement\nEquipment", "Select", "Cancel");
		}
	}
	return 1;
}

command(checkweapons, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /checkweapons [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	    	ReturnWeapons(playerid, id);
	    	SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	    }
	}
	return 1;
}

command(frisk, playerid, params[])
{
	new id, invString[255], string[255];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /frisk [playerid]");
	}
	else
	{
		format(string, sizeof(string), "* %s has frisked %s", GetName(playerid), GetName(id));
		NearByMessage(playerid, PURPLE, string);
		if(GetDistanceBetweenPlayers(playerid, id) < 5)
	    {
		SendClientMessage(playerid, GREY, "-----------------------------");
		if(Player[id][Materials] > 0)
		{
		    format(invString, sizeof(invString), "- Materials (%d)", Player[id][Materials]);
			SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][Rags] > 0)
		{
		    format(invString, sizeof(invString), "- Rags (%d)", Player[id][Rags]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][Rope] > 0)
		{
		    format(invString, sizeof(invString), "- Rope (%d)", Player[id][Rope]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][Cocaine] > 0)
		{
		    format(invString, sizeof(invString), "- Cocaine (%dG)", Player[id][Cocaine]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][Pot] > 0)
		{
		    format(invString, sizeof(invString), "- Pot (%d)", Player[id][Pot]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][PotSeeds] > 0)
		{
		    format(invString, sizeof(invString), "- Pot seeds (%d)", Player[id][PotSeeds]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][GasCan] == 1)
		{
		    format(invString, sizeof(invString), "- Gas Can (Empty)");
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][GasCan] == 2)
		{
		    format(invString, sizeof(invString), "- Gas Can (Full)");
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][Identity] == 1)
		{
		    format(invString, sizeof(invString), "- ID");
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][License] == 1)
		{
		    format(invString, sizeof(invString), "- Drivers License");
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][NosBottle] > 0)
		{
		    format(invString, sizeof(invString), "- Nos Bottles (%d)", Player[id][NosBottle]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][EngineUpgrade] > 0)
		{
		    format(invString, sizeof(invString), "- Engine Upgrade(s) (%d)", Player[id][EngineUpgrade]);
   			SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][Turbo] > 0)
		{
		    format(invString, sizeof(invString), "- Turbo(s) (%d)", Player[id][Turbo]);
   			SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][PhoneN] > 0)
		{
   			format(invString, sizeof(invString), "- Phone (%d)", Player[id][PhoneN]);
   			SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][CheckBalance] > 0)
		{
	    	format(invString, sizeof(invString), "- Check(s) ($%d)", Player[playerid][CheckBalance]);
	    	SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[playerid][CollectedFish] != 1)
		{
		    format(invString, sizeof(invString), "- Fish (%d)", Player[id][CollectedFish]);
		    SendClientMessage(playerid, WHITE, invString);
		}
		if(Player[id][CreditCard] != -1)
		{
	    	format(invString, sizeof(invString), "- Red County Bank Credit Card");
	    	SendClientMessage(playerid, WHITE, invString);
		}
		SendClientMessage(playerid, GREY, "-----------------------------");
        ReturnWeapons(playerid, id);
		}
  		else
  		{
 	    	SendClientMessage(playerid, WHITE, "You're too far away.");
  		}
	}
	return 1;
}

command(setleader, playerid, params[])
{
	new GroupID, id, string[128];
	if(sscanf(params, "ud", id, GroupID))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /setleader [playerid] [Group ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	    	format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
			if(fexist(string))
			{

				if(Player[id][Group] >= 1 && GroupID != Player[id][Group])
				{
			    	format(string, sizeof(string), "%s has left the group (admin-set to another group).", GetName(id));
			    	GroupMessage(id, ANNOUNCEMENT, string);
				}

		    	format(string, sizeof(string), "You have set %s to be the leader of Group %s.", GetName(id), Groups[GroupID][GroupName]);
		    	SendClientMessage(playerid, WHITE, string);
		    	format(string, sizeof(string), "You have been appointed to lead group %s, by %s.", Groups[GroupID][GroupName], GetName(playerid));
		    	SendClientMessage(id, WHITE, string);
		    	Player[id][Group] = GroupID;
		    	Player[id][GroupRank] = 10;
		    	Player[id][pTazer] = 0;
		    	format(string, sizeof(string), "%s has joined the group (admin-set).", GetName(id));
		    	GroupMessage(id, ANNOUNCEMENT, string);
			}
			else
			{
		    	SendClientMessage(playerid, WHITE, "Invalid group ID.");
			}
		}
	}
	return 1;
}

command(changeviplevel, playerid, params[])
{
	new level, id, string[128];
	if(sscanf(params, "ud", id, level))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeviplevel [playerid] [level]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			if(IsPlayerConnectedEx(id))
			{
			    Player[id][VipRank] = level;

			    format(string, sizeof(string), "%s's VIP level has been changed to %d, by %s.", GetName(id), level, GetName(playerid));
				for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnectedEx(i) && Player[i][VipRank] >= 1)
			        {
			            SendClientMessage(i, YELLOW, string);
			        }
			    }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
	    }
	}
	return 1;
}

command(changepass, playerid, params[])
{
	ShowPlayerDialog(playerid, 3666, DIALOG_STYLE_PASSWORD, "Password", "Please change your password.", "Change", "Cancel");
	return 1;
}

command(remotechangepassword, playerid, params[])
{
	new name[MAX_PLAYER_NAME], newpass[255], string[128];
	if(sscanf(params, "zz", name, newpass))
	{
		if(Player[playerid][AdminLevel] >= 1)
	 	{
			SendClientMessage(playerid, WHITE, "SYNTAX: /remotechangepassword [name] [password]");
		}
	}
	else
	{
	    mysql_format(mysql, string, sizeof(string), "UPDATE users SET Password='%s' WHERE NormalName='%s'", newpass, name);
		mysql_tquery(mysql, string, "", "");

		format(string, sizeof(string), "You have changed %s's password to %s", name, newpass);
		SendClientMessage(playerid, LIGHTRED, string);
	}
	return 1;
}

command(listmygroup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1)
	{
	    new string[128];
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");

		for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnectedEx(i) && Player[i][Group] == Player[playerid][Group] && Player[i][AdminDuty] < 1)
	        {
				format(string, sizeof(string), "Name: %s | Rank: %d.", GetName(i), Player[i][GroupRank]);
				SendClientMessage(playerid, WHITE, string);
	        }
	    }

	    SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	}
	return 1;
}

/*command(spyoff, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
	 	SendClientMessage(playerid, WHITE, "You are no longer spying on anybody.");
		for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(Player[i][BeingSpyedOnBy] == playerid)
	        {
	            Player[i][BeingSpyedOnBy] = -1;
	        }
	    }
    }
	return 1;
}

command(spyon, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spyon [playerid] (type /spyoff to stop)");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(Player[id][AdminLevel] < Player[playerid][AdminLevel])
	        {
		        format(string, sizeof(string), "You will now see PMs / SMS' that %s (ID: %d) is recieving.", GetName(id), id);
		        SendClientMessage(playerid, WHITE, string);
		        Player[id][BeingSpyedOnBy] = playerid;
	        }
	    }
	}
	return 1;
}*/

command(clear, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /clear [playerid]");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 7)
	    {
	        if(GetPlayerWantedLevel(id) >= 1)
	        {
	            switch(GetPlayerWantedLevel(id))
	            {
	                case 1:
					{
						format(Player[id][Offence1], 255, "None");
						SetPlayerWantedLevel(id, 0);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 0 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 2:
					{
						format(Player[id][Offence2], 255, "None");
						SetPlayerWantedLevel(id, 1);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 1 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 3:
					{
						format(Player[id][Offence3], 255, "None");
						SetPlayerWantedLevel(id, 2);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 2 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 4:
					{
						format(Player[id][Offence4], 255, "None");
						SetPlayerWantedLevel(id, 3);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 3 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 5:
					{
						format(Player[id][Offence5], 255, "None");
						SetPlayerWantedLevel(id, 4);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 4 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 6: SendClientMessage(playerid, WHITE, "You can't defend a most-wanted suspect.");
	            }

	        	Player[playerid][LawyerReloadTime] = 1;
	        }
	    }
	}
	return 1;
}

/*command(spawnnpc, playerid, params[])
{
	new string[128], NPCName[128];
	if(sscanf(params, "z", NPCName))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spawnnpc [script name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
		    format(string, sizeof(string), "npcmodes/recordings/%s.rec", NPCName);

		    if(file_actually_exists(string))
		    {
		        format(string, sizeof(string), "NPC_%d", NPCs+1);
		        ConnectNPC(string, NPCName);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That recording / script doesn't exist.");
		    }
	    }
	}
	return 1;
}*/

command(rp, playerid, params[])
{
	new string[128], message[128], id;
	if(sscanf(params, "uz", id, message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /rp [playerid] [roleplay]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(strlen(message) >= 1)
         {
              if(Player[id][AFKStat] == 1)
		            {
		                SendClientMessage(playerid, WHITE, "This administrator is away from keyboard, right now.");
		            }
		            else
		            {
			            format(string, sizeof(string), "RP to %s: %s ", GetName(id), message);
			            SendClientMessage(playerid, RPCOLOUR, string);
			            format(string, sizeof(string), "RP from %s: %s ", GetName(playerid), message);

						SendClientMessage(id, RPCOLOUR, string);

		            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /rp [playerid] [roleplay]");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
    }
	return 1;
}

command(pm, playerid, params[])
{
	new string[255], message[255], id;
	if(sscanf(params, "uz", id, message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /pm [playerid] [message]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(strlen(message) >= 1)
	        {
		        if(Player[id][PMsEnabled] == 1)
		        {
		            if(Player[id][AFKStat] == 1)
		            {
		                SendClientMessage(playerid, WHITE, "This administrator is away from keyboard, right now.");
		            }
		            else
		            {
			            format(string, sizeof(string), "PM to %s [%d]: %s", GetName(id), id, message);
			            SendSplitMessage(playerid, YELLOW, string);
			            format(string, sizeof(string), "PM from %s [%d]: %s", GetName(playerid), playerid, message);
						SendSplitMessage(id, YELLOW, string);

						PMsLog(string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "That player has disabled PMs!");
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /pm [playerid] [message]");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
    }
	return 1;
}

command(highvolume, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    if(ReportStatus == 0)
	    {
	        ReportStatus = 1;
	        SendClientMessageToAll(LIGHTRED, "We are experiencing an extremely high volume of reports right now.");
			SendClientMessageToAll(LIGHTRED, "Please only use the /(re)port feature, if your report is of extreme urgency.");
	    }
	    else
	    {
	        ReportStatus = 0;
            SendClientMessageToAll(LIGHTRED, "The volume of reports has been successfully addressed.");
            SendClientMessageToAll(LIGHTRED, "You may now use /(re)port for smaller issues / requests.");
	    }
	}
	return 1;
}

command(re, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ActiveReport] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "Our administrators have a list of reports that have been unanswered - please wait for them to attend your current report.");
	}
	else
	{
	    if(Player[playerid][ReportBanStatus] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You're banned from creating reports.");
	    }
	    else
	    {
			if(ReportStatus == 0)
			{
				ShowPlayerDialog(playerid, 6677, DIALOG_STYLE_LIST, "Report System", "Report a Player\nAccount Related Request\nHouse / Business Related Request\nSpeak to an Administrator", "Select", "Cancel");
			}
			else
			{
			    SendClientMessage(playerid, RED, "We are experiencing an extremely high volume of reports right now.");
			    SendClientMessage(playerid, WHITE, "Please only use this feature, if your report is important.");
			    SendClientMessage(playerid, WHITE, "Normal service shall resume once we've resolved the volume of reports.");
			    SendClientMessage(playerid, GREY, "If you are going to proceed with your report, please select from the menu.");
			    ShowPlayerDialog(playerid, 6897, DIALOG_STYLE_LIST, "Report System - PLEASE ONLY REPORT IF YOUR REPORT IS URGENT!", "Report a Player\nSpeak to an Administrator\n", "Proceed", "Cancel");
			}
		}
	}
	return 1;
}

command(report, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ActiveReport] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "Our administrators have a list of reports that have been unanswered - please wait for them to attend your current report.");
	}
	else
	{
	    if(Player[playerid][ReportBanStatus] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You're banned from creating reports.");
	    }
	    else
	    {
			if(ReportStatus == 0)
			{
				ShowPlayerDialog(playerid, 6677, DIALOG_STYLE_LIST, "Report System", "Report a Player\nAccount Related Request\nHouse / Business Related Request\nSpeak to an Administrator", "Select", "Cancel");
			}
			else
			{
			    SendClientMessage(playerid, RED, "We are experiencing an extremely high volume of reports right now.");
			    SendClientMessage(playerid, WHITE, "Please only use this feature, if your report is important.");
			    SendClientMessage(playerid, WHITE, "Normal service shall resume once we've resolved the volume of reports.");
			    SendClientMessage(playerid, GREY, "If you are going to proceed with your report, please select from the menu.");
			    ShowPlayerDialog(playerid, 6897, DIALOG_STYLE_LIST, "Report System - PLEASE ONLY REPORT IF YOUR REPORT IS URGENT!", "Report a Player\nSpeak to an Administrator\n", "Proceed", "Cancel");
			}
		}
	}
	return 1;
}

command(reportban, playerid, params[])
{
    new id, string[128];
    if(sscanf(params, "u", id))
    {
        if(Player[playerid][AdminLevel] >= 1)
        {
        	SendClientMessage(playerid, WHITE, "SYNTAX: /reportban [playerid]");
        }
    }
    else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	            {
	                switch(Player[id][ReportBanStatus])
	                {
	                    case 0:
	                    {
	                        Player[id][ReportBanStatus] = 1;
	                        format(string, sizeof(string), "You have banned %s from creating reports.", GetName(id));
	                        SendClientMessage(playerid, WHITE, string);
	                        format(string, sizeof(string), "Administrator %s has banned you from creating reports.", GetName(playerid));
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 1:
	                    {
	                        Player[id][ReportBanStatus] = 0;
	                        format(string, sizeof(string), "You have unbanned %s from creating reports.", GetName(id));
	                        SendClientMessage(playerid, WHITE, string);
	                        format(string, sizeof(string), "Administrator %s has unbanned you from creating reports.", GetName(playerid));
	                        SendClientMessage(id, WHITE, string);
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "Insufficient level.");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or is logged in.");
	        }
	    }
	}
	return 1;
}

command(togvip, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][VipRank] >= 1)
	{
		if(Player[playerid][ToggedVIP] == 1)
		{
		    Player[playerid][ToggedVIP] = 0;
		    SendClientMessage(playerid, WHITE, "You can now see VIP chat.");
		}
		else
		{
		    Player[playerid][ToggedVIP] = 1;
		    SendClientMessage(playerid, WHITE, "You will no longer see chat in /(v)ip.");
		}
	}
	return 1;
}

command(togooc, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedOOC] == 1)
	{
	    Player[playerid][ToggedOOC] = 0;
	    SendClientMessage(playerid, WHITE, "You can now see OOC chat.");
	}
	else
	{
	    Player[playerid][ToggedOOC] = 1;
	    SendClientMessage(playerid, WHITE, "You will no longer see chat in /(o)oc.");
	}
	return 1;
}

command(analysis, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
	    new string[128];
		SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, WHITE, "Anaysis from 01/12/2009 (04:00) to the present date:");
		format(string, sizeof(string), "Total Connections: %s | Maximum Player Connections: %s | Logins: %s | Registrations: %s", IntToFormattedStr(TotalConnections), IntToFormattedStr(MaxVisitors), IntToFormattedStr(MaxLoggedIn), IntToFormattedStr(MaxRegistered));
        SendClientMessage(playerid, GREY, string);
        SendClientMessage(playerid, WHITE, "Analysis of the System (automatically updated):");
        format(string, sizeof(string), "Objects: %d | Pickups: %d | Dynamic Checkpoints: %d. | Admin Spawned Vehicles: %d | Spawned Owned Cars: %d", CountDynamicObjects(), CountDynamicPickups(), CountDynamicCPs(), SpawnedVehicles, OwnedCarCount);
        SendClientMessage(playerid, GREY, string);
        format(string, sizeof(string), "NPCs: %d | Players Online: %d", NPCs, PlayersOn);
        SendClientMessage(playerid, GREY, string);
		SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

command(breakin, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Group] >= 1)
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 1)
	    {
			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(random(4) < 2)
			            {
			                format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetName(playerid));
			                NearByMessage(playerid, RPCOLOUR, string);
				            Businesses[i][bLockStatus] = 0;
				            Player[playerid][InBusiness] = i;
			        		SetPlayerVirtualWorld(playerid, 65000+i);
				        	SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
				        	SetPlayerPos(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);
				        }
				        else
				        {
			                format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetName(playerid));
			                NearByMessage(playerid, RPCOLOUR, string);
				        }
			        }
			    }
			}
			for(new i = 0; i < sizeof(Houses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(random(4) < 2)
			            {
			                format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetName(playerid));
			                NearByMessage(playerid, RPCOLOUR, string);
				            Houses[i][LockStatus] = 0;
			        		SetPlayerVirtualWorld(playerid, 55000+i);
			        		Player[playerid][InHouse] = i;
				        	SetPlayerInterior(playerid, Houses[i][hInteriorID]);
				        	SetPlayerPos(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);
				        }
				        else
				        {
			                format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetName(playerid));
			                NearByMessage(playerid, RPCOLOUR, string);
				        }
			        }
			    }
			}
			for(new i = 0; i < sizeof(Groups); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
			    {
			        if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(random(4) < 2)
			            {
				            Groups[i][HQLock] = 0;
				            Player[playerid][InGroupHQ] = i;
			       			SetPlayerVirtualWorld(playerid, 45000+i);
				        	SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
				        	SetPlayerPos(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
				        }
				        else
				        {
			                format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetName(playerid));
			                NearByMessage(playerid, RPCOLOUR, string);
				        }
			        }
			    }
			}
		}
	}
	return 1;
}

command(buy, playerid, params[])
{
    #pragma unused params
    if(Businesses[Player[playerid][InBusiness]][bType] == 1)
    {
        new string[455], price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
        new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
        new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
        new price8 = Businesses[Player[playerid][InBusiness]][bProductPrice8];
        new price9 = Businesses[Player[playerid][InBusiness]][bProductPrice9];
        new price10 = Businesses[Player[playerid][InBusiness]][bProductPrice10];
        new price11 = Businesses[Player[playerid][InBusiness]][bProductPrice11];
        new price12 = Businesses[Player[playerid][InBusiness]][bProductPrice12];
        new price13 = Businesses[Player[playerid][InBusiness]][bProductPrice13];
        format(string, sizeof(string), "Rope ($%d)\nRags ($%d)\nPhone ($%d)\nPhonebook ($%d)\nBottle o' Sprunk ($%d)\n$%d phone credit voucher ($%d)\nSpraycan ($%d)\nWalkie Talkie ($%d)\nVehicle Radio ($%d)\nGas Can ($%d)\nNitrous Bottle (DISABLED) ($%d)\nEngine Upgrade (DISABLED) ($%d)\nTurbo (DISABLED) ($%d)", price1, price2, price3, price4, price5, price6, price7, price7, price8, price9, price10, price11, price12, price13);
        ShowPlayerDialog(playerid, 631, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 11)
    {
        new string[128];
        format(string, sizeof(string), "50 pot seeds ($%d)\nSell your cocaine ($35/gram, sells all cocaine)\nSell your weed ($%d/gram, sells all pot)", Businesses[Player[playerid][InBusiness]][bProductPrice1], WeedPrice);
        ShowPlayerDialog(playerid, 8561, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 12)
    {
        new string[200];
        new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
        new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
        new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
        format(string, sizeof(string), "Sprunk ($%d)\nVegetarian Surprise ($%d)\nMeat Feast Pizza ($%d)\nCheeseburger ($%d)\nSteak with fries ($%d)\nBacon and eggs ($%d)\nFried chicken with rice ($%d)", price1, price2, price3, price4, price5, price6, price7);
        ShowPlayerDialog(playerid, 81, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 5)
    {
        new string[135];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
        new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
        new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
        format(string, sizeof(string), "Rope ($%d)\nSmall White Vibrator ($%d)\nSilver Vibrator ($%d)\nLarge White Vibrator ($%d)\nPriest ($%d)\nNaughty Girl Cop Costume ($%d)\nCat Woman Costume ($%d)", price1, price2, price3, price4, price5, price6, price7);
        ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 14)
    {
        new string[135];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        format(string, sizeof(string), "Engine Part ($%d)\nSpray Can ($%d)", price1, price2);
		ShowPlayerDialog(playerid, 6666, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    return 1;
}

command(setfrequency, playerid, params[])
{
    new frequency, string[128];
    if(sscanf(params, "d", frequency))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /setfrequency [id]");
    }
    else
	{
	    if(Player[playerid][WalkieTalkie] < 1)
	    {
	        SendClientMessage(playerid, WHITE, "You must purchase a Walkie Talkie from a General Store first.");
	    }
	    else
	    {
	        Player[playerid][WalkieFrequency] = frequency;
	        format(string, sizeof(string), "You have changed your frequency to #%d.", frequency);
	        SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(togwt, playerid, params[])
{
	#pragma unused params
    if(Player[playerid][WalkieTalkie] < 1)
    {
        SendClientMessage(playerid, WHITE, "You must purchase a Walkie Talkie from a General Store first.");
    }
    else
    {
        Player[playerid][WalkieFrequency] = 0;
        SendClientMessage(playerid, WHITE, "You have disabled your walkie talkie. You will need to re-select your frequency afterwards.");
    }

    return 1;
}

command(wt, playerid, params[])
{
    new message[128], string[128];
    if(sscanf(params, "z", message))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /wt [message]");
    }
    else
	{
	    if(Player[playerid][WalkieFrequency] == 0)
	    {
	        SendClientMessage(playerid, WHITE, "You must first set your frequncy, using /setfrequency [id].");
	    }
	    else
	    {
	        if(Player[playerid][WalkieTalkie] < 1)
	        {
	            SendClientMessage(playerid, WHITE, "You must purchase a Walkie Talkie from a General Store first.");
	        }
	        else
	        {
				if(strlen(message) < 1)
				{
				    SendClientMessage(playerid, WHITE, "SYNTAX: /wt [message]");
				}
				else
				{
				    if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
				    {
				        SendClientMessage(playerid, WHITE, "You can't do this right now.");
				    }
				    else
				    {
					    format(string, sizeof(string), "[WT] %s says: %s", GetName(playerid), message);

				        for(new i = 0; i < MAX_PLAYERS; i++)
				        {
				            if(IsPlayerConnectedEx(i) && Player[i][WalkieFrequency] == Player[playerid][WalkieFrequency])
				            {
				                NearByMessage(i, ORANGE, string);
				            }
				        }

				        ICChatLog(string);
			        }
				}
			}
	    }
	}
	return 1;
}

command(togradio, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedRadio] == 1)
	{
	    Player[playerid][ToggedRadio] = 0;
	    SendClientMessage(playerid, WHITE, "You have enabled your radio.");
	}
	else
	{
	    Player[playerid][ToggedRadio] = 1;
	    SendClientMessage(playerid, WHITE, "You have disabled your radio.");
	}
	return 1;
}

command(whisper, playerid, params[])
{
    new id, string[128], message[128];
    if(sscanf(params, "uz", id, message))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /w(hisper) [playerid] [message]");
    }
    else
	{
		if(Player[playerid][Gagged] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id) && GetDistanceBetweenPlayers(playerid, id) < 5 && Player[id][AdminDuty] == 0 && Player[playerid][AdminLevel] < 3)
		    {
		        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
		        SendClientMessage(playerid, PURPLE, string);
		        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
		        SendClientMessage(id, PURPLE, string);
		    }
		    else
		    {
		        if(Player[playerid][AdminLevel] >= 3)
		        {
			        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
			        SendClientMessage(playerid, PLAYERCOM, string);
			        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
					for(new i = 0; i < MAX_PLAYERS; i++)
		            {
			            if(i == id)
			            {
							SendClientMessage(i, PLAYERCOM, string);
						}
					}

					ICChatLog(string);
		        }
		        else
		        {
			        SendClientMessage(playerid, WHITE, "You're too far away!");
			    }
		    }
	    }
    }
    return 1;
}

command(togspeedo, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Speedo] == 1)
	{
	    Player[playerid][Speedo] = 0;
	    SendClientMessage(playerid, WHITE, "You have disabled your speedometer!");
	}
	else
	{
	    Player[playerid][Speedo] = 1;
	    SendClientMessage(playerid, WHITE, "You have enabled your speedometer!");
	}
	return 1;
}

command(w, playerid, params[])
{
    new id, string[128], message[128];
    if(sscanf(params, "uz", id, message))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /w(hisper) [playerid] [message]");
    }
    else
	{
		if(Player[playerid][Gagged] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id) && GetDistanceBetweenPlayers(playerid, id) < 5 && Player[id][AdminDuty] == 0 && Player[playerid][AdminLevel] < 3)
		    {
		        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
		        SendClientMessage(playerid, PURPLE, string);
		        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
		        SendClientMessage(id, PURPLE, string);
		    }
		    else
		    {
		        if(Player[playerid][AdminLevel] >= 3)
		        {
			        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
			        SendClientMessage(playerid, PLAYERCOM, string);
			        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
					for(new i = 0; i < MAX_PLAYERS; i++)
		            {
			            if(i == id)
			            {
							SendClientMessage(i, PLAYERCOM, string);
						}
					}

					ICChatLog(string);
		        }
		        else
		        {
			        SendClientMessage(playerid, WHITE, "You're too far away!");
			    }
		    }
	    }
    }
    return 1;
}

command(achangeclothes, playerid, params[])
{
	new desiredid;
	if(desiredid > 299 || desiredid < 0)
	{
		SendClientMessage(playerid, WHITE, "Invalid skin ID.");
	}
	if(Player[playerid][AdminLevel] > 0)
	{
			if(sscanf(params, "d", desiredid))
			{
				SendClientMessage(playerid, WHITE, "SYNTAX: /achangeclothes [Skin ID]");
			}
			else
			{
				if(desiredid < 0 || desiredid > 300)
				{
					SendClientMessage(playerid, WHITE, "Invalid Skin ID");
				}
				else
				{
					Player[playerid][LastSkin] = desiredid;
					SetPlayerSkin(playerid, desiredid);
					SendClientMessage(playerid, WHITE, "Changed clothes.");
				}
			}
	}
	return 1;
}

command(set, playerid, params[])
{
    new Usage[128], id, Value, string[128];
    if(sscanf(params, "udz", id, Value, Usage))
    {
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        SendClientMessage(playerid, WHITE, "SYNTAX: /set [playerid] [value] [usage]");
	        SendClientMessage(playerid, GREY, "Usages: Health, Cocaine, Pot, Job, Phone, Interior, House, Materials, Skin, Business, Group, GroupRank, Money, Armour and VirtualWorld");
	        SendClientMessage(playerid, GREY, "Usages: FailedHits, SuccessfulHits, Bank, PlayingHours, CriminalOffences, Rope, Rags, Age, AchievementPoints, Race, Hunger, PotSeeds");
	    }
    }
    else
    {
        if(Player[playerid][AdminLevel] >= 3)
        {
	        new hour, minute, second, day, year, month;
	        gettime(hour, minute, second);
	        getdate(year, month, day);
	        if(strlen(Usage) >= 1 && IsPlayerConnectedEx(id) && Player[playerid][AdminLevel] >= Player[id][AdminLevel] && Player[playerid][AdminLevel] >= 3)
	        {
	   	    	if(strcmp(Usage, "skin", true) == 0)
	        	{
	            	if(IsInvalidSkin(Value))
	            	{
	                	SendClientMessage(playerid, WHITE, "Invalid skin!");
	            	}
	            	else
	            	{
                		format(string, sizeof(string), "You have set %s's skin to %d.", GetName(id), Value);
	            		SendClientMessage(playerid, WHITE, string);
	            		format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's skin to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][LastSkin]);
	            		StatLog(string);

             			if(Player[id][IsAtEvent] >= 1)
	                	{
	                	    SendClientMessage(playerid, WHITE, "As that player is playing in an event, their skin will return itself to normal when they respawn.");
	                	}
	                	else
	                	{
	                	    if(Player[id][AdminDuty] >= 1)
	                	    {
	                	        Player[id][AdminSkin] = Value;
	                	    }
	                	    else
	                	    {
	                			Player[id][LastSkin] = Value;
	                		}
	                	}

	                	SetPlayerSkin(id, Value);
	            	}
	        	}
	        	else if(strcmp(Usage, "bank", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Bank to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Bank to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][BankMoney]);
	            	StatLog(string);
	            	Player[id][BankMoney] = Value;
	        	}
	        	else if(strcmp(Usage, "Rags", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Rags to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Rags to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Rags]);
	            	StatLog(string);
	            	Player[id][Rags] = Value;
	        	}
	        	else if(strcmp(Usage, "Rope", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Rope to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Rope to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Rope]);
	            	StatLog(string);
	            	Player[id][Rope] = Value;
	        	}
	        	else if(strcmp(Usage, "Age", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Age to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Age to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Age]);
	            	StatLog(string);
	            	Player[id][Age] = Value;
	        	}
				else if(strcmp(Usage, "Race", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Race to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Race to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Age]);
	            	StatLog(string);
	            	Player[id][Race] = Value;
	        	}
	        	else if(strcmp(Usage, "AchievementPoints", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's AchievementPoints to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's AchievementPoints to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][AchievementRank]);
	            	StatLog(string);
					Player[id][AchievementRank] = Value;
	        	}
	        	else if(strcmp(Usage, "CriminalOffences", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's CriminalOffences to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's CriminalOffences to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][CriminalOffences]);
	            	StatLog(string);
	            	Player[id][CriminalOffences] = Value;
	        	}
	        	else if(strcmp(Usage, "playinghours", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's PlayingHours to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's PlayingHours to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][PlayingHours]);
	            	StatLog(string);
	            	Player[id][PlayingHours] = Value;
	        	}
	        	else if(strcmp(Usage, "failedhits", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's FailedHits to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's FailedHits to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][FailedHits]);
	            	StatLog(string);
	            	Player[id][FailedHits] = Value;
	        	}
	        	else if(strcmp(Usage, "successfulhits", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's SuccessfulHits to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's SuccessfulHits to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][SuccessfulHits]);
	            	StatLog(string);
	            	Player[id][SuccessfulHits] = Value;
	        	}
	        	else if(strcmp(Usage, "materials", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Materials to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's materials to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Materials]);
	            	StatLog(string);
	            	Player[id][Materials] = Value;
	        	}
	        	else if(strcmp(Usage, "phone", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Phone Number to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Phone Number to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][PhoneN]);
	            	StatLog(string);
	            	Player[id][PhoneN] = Value;
	        	}
	        	else if(strcmp(Usage, "pot", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Pot to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's pot to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Pot]);
	            	StatLog(string);
	            	Player[id][Pot] = Value;
	        	}
	        	else if(strcmp(Usage, "job", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Job to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Job to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Job]);
	            	StatLog(string);
					Player[id][Job] = Value;
	        	}
	        	else if(strcmp(Usage, "cocaine", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Cocaine to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's cocaine to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Cocaine]);
	            	StatLog(string);
	            	Player[id][Cocaine] = Value;
	        	}
	        	else if(strcmp(Usage, "group", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Group to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's group to %d (%s) [was %d].", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Groups[Value][GroupName], Player[id][Group]);
	            	StatLog(string);
	            	Player[id][Group] = Value;
	        	}
	        	else if(strcmp(Usage, "house", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's House ID to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's house to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][House]);
	            	StatLog(string);
	            	Player[id][House] = Value;
	        	}
	        	else if(strcmp(Usage, "business", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Business ID to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's business to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Business]);
	            	StatLog(string);
	            	Player[id][Business] = Value;
	        	}
	        	else if(strcmp(Usage, "grouprank", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Group Rank to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's group rank to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][GroupRank]);
	            	StatLog(string);
	            	Player[id][GroupRank] = Value;
	        	}
	        	else if(strcmp(Usage, "money", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's money to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d]  Admin %s has spawned money for %s ($%d - was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Money]);
	            	MoneyLog(string);
	            	StatLog(string);
					Player[id][Money] = Value;
	        	}
	        	else if(strcmp(Usage, "health", true) == 0)
	        	{
	            	SetPlayerHealth(id, Value);
	            	format(string, sizeof(string), "You have set %s's health to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's health to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "vw", true) == 0 || strcmp(Usage, "virtualworld", true) == 0)
	        	{
	            	SetPlayerVirtualWorld(id, Value);
	            	format(string, sizeof(string), "You have set %s's virtual world to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's virtual world to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "interior", true) == 0)
	        	{
	            	SetPlayerInterior(id, Value);
	            	format(string, sizeof(string), "You have set %s's interior to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's interior to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "armour", true) == 0)
	        	{
	            	SetPlayerArmour(id, Value);
	            	format(string, sizeof(string), "You have set %s's armour to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's armour to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "hunger", true) == 0)
	        	{
	            	Player[id][PlayerHunger] = Value;
	            	format(string, sizeof(string), "You have set %s's Hunger to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's armour to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "potseeds", true) == 0)
	        	{
	        	    if(Player[playerid][AdminLevel] == 8)
	        	    {
		        	    Player[id][PotSeeds] = Value;
		            	format(string, sizeof(string), "You have set %s's PotSeeds to %d.", GetName(id), Value);
		            	SendClientMessage(playerid, WHITE, string);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You cheeky shit, go buy them yourself.");
					}
	        	}
        	}
        }
        else
        {
            return 1;
        }
    }
    return 1;
}

command(lockhq, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5)
	{
	    if(Groups[Player[playerid][Group]][HQLock] == 0)
	    {
	        Groups[Player[playerid][Group]][HQLock] = 1;
	        SendClientMessage(playerid, WHITE, "You have locked your HQ.");
	    }
	    else
	    {
	        Groups[Player[playerid][Group]][HQLock] = 0;
	        SendClientMessage(playerid, WHITE, "You have un-locked your HQ.");
	    }
	}
	return 1;
}

command(buydrink, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 3)
	{
	    new string[128];
	    format(string, sizeof(string), "Wine ($%d)\nBeer ($%d)\nSprunk ($%d)", Businesses[Player[playerid][InBusiness]][bProductPrice1], Businesses[Player[playerid][InBusiness]][bProductPrice2], Businesses[Player[playerid][InBusiness]][bProductPrice3]);
		ShowPlayerDialog(playerid, 2365, DIALOG_STYLE_LIST, "Drinks Menu", string, "Purchase", "Cancel");
	}
	return 1;
}

/*command(parkcar, playerid, params[])
{
	new vehslot;
    if(sscanf(params, "d", vehslot))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /parkcar [1-3]");
    }
    else
    {
        switch(vehslot)
        {
			case 1:
			{
				if(Player[playerid][PlayerCarModel] > 0)
				{
				    if(GetPlayerVehicleID(playerid) == Player[playerid][CarLinkID])
				    {

					        new Float: tmpdamage;
					        GetOwnedCarMods(playerid);
					        GetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][CarLinkID], Player[playerid][CarZAngle]);
						    GetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
							SendClientMessage(playerid, WHITE, "You have parked your vehicle.");

				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
				}
			}
			case 2:
			{
				if(Player[playerid][PlayerCarModel2] > 0)
				{
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car2LinkID])
				    {

					        new Float: tmpdamage;
					        GetOwnedCarMods(playerid);
					        GetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car2LinkID], Player[playerid][Car2ZAngle]);
						    GetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
							SendClientMessage(playerid, WHITE, "You have parked your vehicle.");

				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
				}
			}
			case 3:
			{
				if(Player[playerid][PlayerCarModel3] > 0)
				{
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car3LinkID])
				    {

					        new Float: tmpdamage;
					        GetOwnedCarMods(playerid);
					        GetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car3LinkID], Player[playerid][Car3ZAngle]);
						    GetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
							SendClientMessage(playerid, WHITE, "You have parked your vehicle.");

				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
				}
			}
		}
	}
	return 1;
}*/

command(colorcar, playerid, params[])
{
    new col1, col2, vehslot;
	if(sscanf(params, "ddd", col1, col2, vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /colorcar [colour1] [colour2] [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
			    if(col1 >= 0 && col1 < 255 || col2 >= 0 && col2 < 255)
			    {
				    if(Player[playerid][PlayerCarModel] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][CarLinkID], col1, col2);
				        	Player[playerid][CarCol1] = col1;
				        	Player[playerid][CarCol2] = col2;
			        		Player[playerid][HasSprayCans]--;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
			case 2:
			{
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel2] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][Car2LinkID], col1, col2);
				        	Player[playerid][Car2Col1] = col1;
				        	Player[playerid][Car2Col2] = col2;
			        		Player[playerid][HasSprayCans]--;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
			case 3:
			{
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel3] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][Car3LinkID], col1, col2);
				        	Player[playerid][Car3Col1] = col1;
				        	Player[playerid][Car3Col2] = col2;
			        		Player[playerid][HasSprayCans]--;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
		}
	}
	return 1;
}

/*command(ocarcolor, playerid, params[])
{
	new col1, col2, vehslot;
	if(sscanf(params, "ddd", col1, col2, vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ocarcolor [colour1] [colour2] [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][CarLinkID], col1, col2);
				        	Player[playerid][CarCol1] = col1;
				        	Player[playerid][CarCol2] = col2;
				        	if(Player[playerid][VipRank] < 2)
				        	{
				        		Player[playerid][HasSprayCans]--;
				        	}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
			case 2:
			{
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel2] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][Car2LinkID], col1, col2);
				        	Player[playerid][Car2Col1] = col1;
				        	Player[playerid][Car2Col2] = col2;
				        	if(Player[playerid][VipRank] < 2)
				        	{
				        		Player[playerid][HasSprayCans]--;
				        	}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
			case 3:
			{
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel3] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][Car3LinkID], col1, col2);
				        	Player[playerid][Car3Col1] = col1;
				        	Player[playerid][Car3Col2] = col2;
				        	if(Player[playerid][VipRank] < 2)
				        	{
				        		Player[playerid][HasSprayCans]--;
				        	}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
		}
	}
	return 1;
}
*/

command(gtype, playerid, params[])
{
	new GroupID, GroupType, string[128];
	if(sscanf(params, "dd", GroupID, GroupType))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gtype [Group ID] [Group Type]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);

		    if(fexist(string))
		    {
		        Groups[GroupID][CommandTypes] = GroupType;
		        format(string, sizeof(string), "You have set %s's group type to %d.", Groups[GroupID][GroupName], GroupType);
		        SendClientMessage(playerid, WHITE, string);
		        SaveGroup(GroupID);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid Group ID!");
		    }
	    }
	}
	return 1;
}

command(gskins, playerid, params[])
{
	new skin, skinslot, GroupID, string[128];
	if(sscanf(params, "ddd", GroupID, skinslot, skin))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gskins [Group ID] [Skin Slot (0-6)] [Skin ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
		    if(fexist(string))
		    {
			    if(skinslot < 7 && skinslot >= 0)
			    {
			        if(!IsInvalidSkin(skin))
			        {
			            switch(skinslot)
			            {
			            	case 0: Groups[Player[playerid][Group]][Skin0] = skin;
			            	case 1: Groups[Player[playerid][Group]][Skin1] = skin;
			            	case 2: Groups[Player[playerid][Group]][Skin2] = skin;
			            	case 3: Groups[Player[playerid][Group]][Skin3] = skin;
			            	case 4: Groups[Player[playerid][Group]][Skin4] = skin;
			            	case 5: Groups[Player[playerid][Group]][Skin5] = skin;
			            	case 6: Groups[Player[playerid][Group]][Skin6] = skin;
			            }

			            format(string, sizeof(string), "You have changed skin slot %d, to skin %d.", skinslot, skin);
			            SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "Invalid skin ID.");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid Skin slot ID! Slots are from 0-6.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must specify a valid group ID.");
		    }
	    }
	}
	return 1;
}

command(changerank, playerid, params[])
{
	new id, rank, string[128];
	if(sscanf(params, "ud", id, rank))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /changerank [playerid] [rank]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    if(Player[playerid][GroupRank] >= 7 && Player[playerid][Group] == 1)
			{
			    if(rank >= 1 && rank < 10 && Player[playerid][GroupRank] == 10 || rank >= 1 && rank < 10 && Player[playerid][GroupRank] == 6)
			    {
					if(IsPlayerConnectedEx(id))
					{
					    if(Player[id][Group] == Player[playerid][Group])
					    {
					        if(Player[playerid][GroupRank] >= Player[id][GroupRank])
					        {
						        Player[id][GroupRank] = rank;
						        format(string, sizeof(string), "You have altered %s's rank to %d.", GetName(id), rank);
						        SendClientMessage(playerid, WHITE, string);
						        format(string, sizeof(string), "Your rank has been changed to %d, by %s.", rank, GetName(playerid));
						        SendClientMessage(id, WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You may not alter a higher ranks' rank.");
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "You must be in the same group as that player to control their rank.");
					    }
					}
			    }
		    }
			if(Player[playerid][GroupRank] >= 9 && Player[playerid][Group] >= 2)
			{
			    if(rank >= 1 && rank < 10 && Player[playerid][GroupRank] == 10 || rank >= 1 && rank < 10 && Player[playerid][GroupRank] == 6)
			    {
					if(IsPlayerConnectedEx(id))
					{
					    if(Player[id][Group] == Player[playerid][Group])
					    {
					        if(Player[playerid][GroupRank] >= Player[id][GroupRank])
					        {
						        Player[id][GroupRank] = rank;
						        format(string, sizeof(string), "You have altered %s's rank to %d.", GetName(id), rank);
						        SendClientMessage(playerid, WHITE, string);
						        format(string, sizeof(string), "Your rank has been changed to %d, by %s.", rank, GetName(playerid));
						        SendClientMessage(id, WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You may not alter a higher ranks' rank.");
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "You must be in the same group as that player to control their rank.");
					    }
					}
			    }
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(changeranks, playerid, params[])
{
	new rankname[128], rank, string[128];
	if(sscanf(params, "dz", rank, rankname))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /changeranks [rank slot (0-10)] [new name]");
	}
	else
	{
	    if(Player[playerid][GroupRank] >= 9 && Player[playerid][Group] >= 1)
		{
		    if(rank < 11 && rank > 0)
		    {
		        if(strlen(rankname) >= 1 && strlen(rankname) < 20)
		        {
		            switch(rank)
		            {
		            	case 0: format(Groups[Player[playerid][Group]][RankName0], 255, "%s", rankname);
		            	case 1: format(Groups[Player[playerid][Group]][RankName1], 255, "%s", rankname);
		            	case 2: format(Groups[Player[playerid][Group]][RankName2], 255, "%s", rankname);
		            	case 3: format(Groups[Player[playerid][Group]][RankName3], 255, "%s", rankname);
		            	case 4: format(Groups[Player[playerid][Group]][RankName4], 255, "%s", rankname);
		            	case 5: format(Groups[Player[playerid][Group]][RankName5], 255, "%s", rankname);
                        case 6: format(Groups[Player[playerid][Group]][RankName6], 255, "%s", rankname);
                        case 7: format(Groups[Player[playerid][Group]][RankName7], 255, "%s", rankname);
                        case 8: format(Groups[Player[playerid][Group]][RankName8], 255, "%s", rankname);
                        case 9: format(Groups[Player[playerid][Group]][RankName9], 255, "%s", rankname);
                        case 10: format(Groups[Player[playerid][Group]][RankName10], 255, "%s", rankname);
		            }

		            format(string, sizeof(string), "You have changed rank %d's name to %s.", rank, rankname);
		            SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Rank name length can't be longer than 20 characters, or shorter than 1.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid Rank ID! Ranks start from 0-10.");
		    }
	    }
	}
	return 1;
}

command(remoteuninvite, playerid, params[])
{
	new Name[128], string[128], Result = -1;
	if(sscanf(params, "z", Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /remoteuninvite [name]");
		SendClientMessage(playerid, GREY, "NOTE: This command is CaSe SeNsItIvE.");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 10 && Player[playerid][Group] >= 1)
		{
		    if(strlen(Name) >= 1 && strlen(Name) < MAX_PLAYER_NAME)
		    {
		        for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i))
		            {
		                if(strcmp(GetName(i), Name, true) == 0)
		                {
		                    Result = i;
		                }
		            }
		        }

		        if(Result == -1)
		        {
			        format(string, sizeof(string), "Accounts/%s.ini", Name);
			        if(fexist(string))
			        {
			            if(dini_Isset(string, "Group"))
			            {
			                if(dini_Int(string, "Group") == Player[playerid][Group])
			                {
			                    if(dini_Int(string, "GroupRank") > Player[playerid][GroupRank])
			                    {
			                        SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
			                    }
			                    else
			                    {
				                	dini_IntSet(string, "Group", 0);
				                	dini_IntSet(string, "GroupRank", 0);
				                	format(string, sizeof(string), "%s has left the group (remotely un-invited)", Name);
				                	GroupMessage(playerid, ANNOUNCEMENT, string);
			                	}
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "That person isn't in the same group as you.");
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "They are missing the player group variable.");
			            }
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "Invalid name.");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "That player is connected, use /uninvite.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid name.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a Group Leader.");
		}
	}
	return 1;
}

command(changeranktitle, playerid, params[])
{
	new Name[128], Rank, string[128];
	if (sscanf(params, "dz", Rank, Name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /changeranktitle [rank (1-5)] [new title]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strlen(Name) < 20 && strlen(Name) >= 1)
	        {
		        switch(Rank)
		        {
		            case 1:
		            {
		                format(OOCRanks[Rank1], sizeof(OOCRanks[Rank1]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank1", OOCRanks[Rank1]);
		                format(string, sizeof(string), "You have changed Rank 1's title to '%s'.", OOCRanks[Rank1]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 2:
		            {
		                format(OOCRanks[Rank2], sizeof(OOCRanks[Rank2]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank2", OOCRanks[Rank2]);
		                format(string, sizeof(string), "You have changed Rank 2's title to '%s'.", OOCRanks[Rank2]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 3:
		            {
		                format(OOCRanks[Rank3], sizeof(OOCRanks[Rank3]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank3", OOCRanks[Rank3]);
		                format(string, sizeof(string), "You have changed Rank 3's title to '%s'.", OOCRanks[Rank3]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 4:
		            {
		                format(OOCRanks[Rank4], sizeof(OOCRanks[Rank4]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank4", OOCRanks[Rank4]);
		                format(string, sizeof(string), "You have changed Rank 4's title to '%s'.", OOCRanks[Rank4]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 5:
		            {
		                format(OOCRanks[Rank5], sizeof(OOCRanks[Rank5]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank5", OOCRanks[Rank5]);
		                format(string, sizeof(string), "You have changed Rank 5's title to '%s'.", OOCRanks[Rank5]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            default:
		            {
		                SendClientMessage(playerid, WHITE, "SYNTAX: /changeranktitle [rank (1-5)] [new title]");
		            }
		        }
	        }
	        else
			{
			    SendClientMessage(playerid, WHITE, "Rank names must be longer than 1 character and shorter than 20 characters.");
			}
	    }
	}
	return 1;
}

command(remotecheck, playerid, params[])
{
	new Name[128], string[128], string2[128];
	if(sscanf(params, "z", Name))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /remotecheck [name]");
			SendClientMessage(playerid, GREY, "NOTE: This command is CaSe SeNsItIvE.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(strlen(Name) >= 3 && strlen(Name) < MAX_PLAYER_NAME+1)
	        {
		        format(string2, sizeof(string2), "Accounts/%s.ini", Name);
		        if(fexist(string2))
		        {
		            if(dini_Int(string2, "AdminLevel") >= Player[playerid][AdminLevel])
		            {
		                SendClientMessage(playerid, WHITE, "You can't check a higher admin.");
		            }
		            else
		            {
			            SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
						new tmpint = dini_Int(string2, "Banned");
						switch(tmpint)
						{
						    case -1:
						    {
						        if(IsPlayerConnectedEx(GetPlayerID(Name)))
						        {
						            ShowStatistics(playerid, GetPlayerID(Name));
						        }
						        else
						        {
									format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Unbanned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Geographical Location: %s | Playing Hours: %d | Materials: %d | House: %d | Business: %d", GetIPCountry(dini_Get(string2, "LastIP")) , dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Cocaine: %d grams | Pot: %d grams | Group: %d (%s)", dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"), Groups[dini_Int(string2, "Group")][GroupName]);
                                    SendClientMessage(playerid, GREY, string);
								}
						    }
						    case 0:
						    {
						        if(IsPlayerConnectedEx(GetPlayerID(Name)))
						        {
						            ShowStatistics(playerid, GetPlayerID(Name));
						        }
						        else
						        {
									format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Offline.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Geographical Location: %s | Playing Hours: %d | Materials: %d | House: %d | Business: %d", GetIPCountry(dini_Get(string2, "LastIP")) , dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Cocaine: %d grams | Pot: %d grams | Group: %d (%s)", dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"), Groups[dini_Int(string2, "Group")][GroupName]);
                                    SendClientMessage(playerid, GREY, string);
								}
							}
						    case 1:
						    {
								format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Banned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
								SendClientMessage(playerid, GREY, string);
								format(string, sizeof(string), "Geographical Location: %s | Playing Hours: %d | Materials: %d | House: %d | Business: %d | Cocaine: %d | Pot: %d | Group: %d", GetIPCountry(dini_Get(string2, "LastIP")) , dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"), dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"));
								SendClientMessage(playerid, GREY, string);
							}
						    case 2:
						    {
								format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Permabanned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
								SendClientMessage(playerid, GREY, string);
								format(string, sizeof(string), "Geographical Location: %s | Playing Hours: %d | Materials: %d | House: %d | Business: %d | Cocaine: %d | Pot: %d | Group: %d", GetIPCountry(dini_Get(string2, "LastIP")) , dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"), dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"));
								SendClientMessage(playerid, GREY, string);
							}
						    case 4:
						    {
								format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Autobanned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
								SendClientMessage(playerid, GREY, string);
								format(string, sizeof(string), "Geographical Location: %s | Playing Hours: %d | Materials: %d | House: %d | Business: %d | Cocaine: %d | Pot: %d | Group: %d", GetIPCountry(dini_Get(string2, "LastIP")) , dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"), dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"));
								SendClientMessage(playerid, GREY, string);
							}
						}
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
			        }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Account not found.");
		        }
	        }
	    }
	}
	return 1;
}

command(kick, playerid, params[])
{
	new id, reason[128], string[128];
	if(sscanf(params, "us", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /kick [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnected(id))
		    {
		        if(Player[id][AdminLevel] > Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank).");
		            return 1;
		        }

		        if(Player[id][AdminLevel] < 1)
		        {
		        	Player[playerid][AdminActions]++;
		            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
		        }

		        format(string, sizeof(string), "Kick: %s has been kicked by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
		        SendClientMessageToAll(LIGHTRED, string);
		        AdminActionsLog(string);
		        format(string, sizeof(string), "You have been kicked from the server for %s", reason);
		        SendClientMessage(id, WHITE, string);
		        Kick(id);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected.");
		        return 1;
		    }
		}
	}
	return 1;
}

command(adminname, playerid, params[])
{
	new name[128], id, string[128];
	if(sscanf(params, "uz", id, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /adminname [playerid] [new name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(Player[id][AdminLevel] >= 1)
	        {
		        if(strlen(name) > 1 && strlen(name) < MAX_PLAYER_NAME)
		        {
		            format(string, sizeof(string), "Accounts/%s.ini", name);

		            if(fexist(string))
		            {
		                SendClientMessage(playerid, WHITE, "You can't select an admin name that is already an active account.");
		            }
		            else
		            {
		                format(string, sizeof(string), "Admin %s has changed %s's admin name to %s.", Player[playerid][AdminName], GetName(id), name);
		                StatLog(string);
		                SendToAdmins(ADMINORANGE, string, 0);

		                format(Player[id][AdminName], 255, "%s", name);

		                if(Player[id][AdminDuty] >= 1)
		                {
		                    SetPlayerName(id, Player[id][AdminName]);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid name. The name must exceed 1 character and be shorter than 24 characters.");
		        }
	        }
	    }
	}
	return 1;
}

command(check, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /check [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
            	ShowStatistics(playerid, id);
            }
            else
            {
                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
            }
	    }
	}
	return 1;
}

command(resetwarns, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /resetwarns [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
        	format(Player[id][Warning1], 255, "None");
			format(Player[id][Warning2], 255, "None");
			format(Player[id][Warning3], 255, "None");

			format(string, sizeof(string), "You have reset %s's warnings.", GetName(id));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "%s has reset your warnings.", GetName(playerid));
			SendClientMessage(id, YELLOW, string);
			format(string, sizeof(string), "Server Admin %s has reset player %s's warnings.", GetName(playerid), GetName(id));
			StatLog(string);
	    }
	}
	return 1;
}

command(removewarn, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /removewarn [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			format(Player[id][Warning1], 255, "None");
			format(string, sizeof(string), "You have removed %s's first warning.", GetName(id));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "%s has removed your first warning.", GetName(playerid));
			SendClientMessage(id, YELLOW, string);
			format(string, sizeof(string), "Server Admin %s has removed player %s's first warning.", GetName(playerid), GetName(id));
			StatLog(string);
		}

		/*if(warnnumber == 2)
		{
			if(Player[playerid][AdminLevel] >= 4)
			{
				format(Player[id][Warning2], 255, "None");

				format(string, sizeof(string), "You have removed %s's second warning.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has removed your second warning.", GetName(playerid));
				SendClientMessage(id, YELLOW, string);
				format(string, sizeof(string), "Server Admin %s has removed player %s's second warning.", GetName(playerid), GetName(id));
				StatLog(string);
			}
		}

		if(warnnumber == 3)
		{
			if(Player[playerid][AdminLevel] >= 4)
			{
				format(Player[id][Warning3], 255, "None");

				format(string, sizeof(string), "You have removed %s's third warning.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has removed your third warning.", GetName(playerid));
				SendClientMessage(id, YELLOW, string);
				format(string, sizeof(string), "Server Admin %s has removed player %s's third warning.", GetName(playerid), GetName(id));
				StatLog(string);
			}
		}*/
	}
	return 1;
}

command(removewarn2, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /removewarn2 [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			format(Player[id][Warning2], 255, "None");
			format(string, sizeof(string), "You have removed %s's second warning.", GetName(id));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "%s has removed your second warning.", GetName(playerid));
			SendClientMessage(id, YELLOW, string);
			format(string, sizeof(string), "Server Admin %s has removed player %s's second warning.", GetName(playerid), GetName(id));
			StatLog(string);
		}

	}
	return 1;
}

command(removewarn3, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /removewarn3 [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			format(Player[id][Warning3], 255, "None");
			format(string, sizeof(string), "You have removed %s's third warning.", GetName(id));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "%s has removed your third warning.", GetName(playerid));
			SendClientMessage(id, YELLOW, string);
			format(string, sizeof(string), "Server Admin %s has removed player %s's third warning.", GetName(playerid), GetName(id));
			StatLog(string);
		}
	}
	return 1;
}

command(ad, playerid, params[])
{
	new advertisement[128], string[128];
	if(sscanf(params, "z", advertisement))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ad(vertise) [message]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 4)
	    {
	        if(Player[playerid][Money] >= 500)
	        {
	            if(AdCanBePlaced == 50)
	            {
	                if(Player[playerid][PhoneN] != -1)
	                {
				        format(string, sizeof(string), "Advertisement: %s.", advertisement);
						SendClientMessageToAll(GREEN, string);
						format(string, sizeof(string), "Advertisement placed by %s - Phone Number: %d, from %s.", GetName(playerid), Player[playerid][PhoneN], Businesses[Player[playerid][InBusiness]][bName]);
						SendToAdmins(GREY, string, 0);
						SendToPD(GREY, string, 0);
						Player[playerid][Money] -= 500;
						Businesses[Player[playerid][InBusiness]][bVault] += 500;
						AdCanBePlaced = 1;
						SendClientMessage(playerid, WHITE, "You have placed an advertisement and have been charged $500.");

						Player[playerid][AdsPlaced]++;

						switch(Player[playerid][AdsPlaced])
						{
						    case 100:
						    {
							    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
							    SendClientMessage(playerid, GREY, "You have placed 100 advertisements.");
							    Player[playerid][AchievementRank]++;
						    }
						    case 200:
						    {
							    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
							    SendClientMessage(playerid, GREY, "You have placed 200 advertisements.");
							    Player[playerid][AchievementRank]++;
						    }
						}

					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You need a phone.");
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're unable to place an advertisement right now, please wait 50 seconds!");
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need at least $500 to place an advertisement.");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be in an advertisement business, to place an advertisement.");
	    }
	}
	return 1;
}

command(advertise, playerid, params[])
{
	new advertisement[128], string[128];
	if(sscanf(params, "z", advertisement))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ad(vertise) [message]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 4)
	    {
	        if(Player[playerid][Money] >= 500)
	        {
	            if(AdCanBePlaced == 50)
	            {
	                if(Player[playerid][PhoneN] != -1)
	                {
				        format(string, sizeof(string), "Advertisement: %s.", advertisement);
						SendClientMessageToAll(GREEN, string);
						format(string, sizeof(string), "Advertisement placed by %s - Phone Number: %d, from %s.", GetName(playerid), Player[playerid][PhoneN], Businesses[Player[playerid][InBusiness]][bName]);
						SendToAdmins(GREY, string, 0);
						SendToPD(GREY, string, 0);
						Player[playerid][Money] -= 500;
						Businesses[Player[playerid][InBusiness]][bVault] += 500;
						AdCanBePlaced = 1;
						SendClientMessage(playerid, WHITE, "You have placed an advertisement and have been charged $500.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You need a phone.");
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're unable to place an advertisement right now, please wait 50 seconds!");
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need at least $500 to place an advertisement.");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be in an advertisement business, to place an advertisement.");
	    }
	}
	return 1;
}

command(forcegmx, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 6)
	{
		SendClientMessageToAll(LIGHTRED, "An administrator has forcefully restarted the server.");
		SetTimer("DoGMX", 3000, false);
		SetTimer("SaveGeneralData", 100, false);
	}
}

command(gmx, playerid, params[])
{
	new reason[128];
	if(sscanf(params, "z", reason))
	{
	    if(Player[playerid][AdminLevel] >= 7)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gmx [reason]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 7)
	    {
	    	if(CurGMX == 0)
	    	{
	    		GMXPrep(playerid, reason);
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "There already is a current GMX in execution.");
	    	}
	    }
	}
	return 1;
}

command(bbalance, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Business] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------");
	    format(string, sizeof(string), "Supplies: %d | Vault Money: %d", Businesses[Player[playerid][Business]][bSupplies], Businesses[Player[playerid][Business]][bVault]);
	    SendClientMessage(playerid, GREY, string);
	    SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------");
	}
	return 1;
}

command(destroyvehicles, playerid, params[])
{
    #pragma unused params

	if(Player[playerid][AdminLevel] >= 3)
	{

    	for(new i = 0; i < SpawnedVehicles; i++)
    	{

			DestroyVehicle(AdminSpawned[i]);
			printf("[DEBUG] Car %d despawned.", AdminSpawned[i]);
			SpawnedVehicles--;

        }

        SendClientMessage(playerid, WHITE, "Destroyed all admin-spawned vehicles.");
        SpawnedVehicles = 0;
	}

	return 1;
}

command(respawncar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 2)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	    	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
	}
	return 1;
}

command(lockbusiness, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Business] > 0)
	{
	    if(Businesses[Player[playerid][Business]][bLockStatus] == 1)
	    {
	        Businesses[Player[playerid][Business]][bLockStatus] = 0;
	        SendClientMessage(playerid, WHITE, "Business un-locked.");
	    }
	    else
	    {
	        Businesses[Player[playerid][Business]][bLockStatus] = 1;
	        SendClientMessage(playerid, WHITE, "Business locked.");
	    }
	}
	return 1;
}

command(lockhouse, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 5.0, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 5.0, Houses[Player[playerid][House]][hInteriorX], Houses[Player[playerid][House]][hInteriorY], Houses[Player[playerid][House]][hInteriorZ]))
	{
		if(Player[playerid][House] > 0)
		{
			// Houses[Player[playerid][House]][bExteriorX]
			// Houses[Player[playerid][House]][bExteriorY]
			// Houses[Player[playerid][House]][bExteriorZ]
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 18389884, 18389884, 18389884))
			{
			    if(Houses[Player[playerid][House]][LockStatus] == 1)
			    {
			        Houses[Player[playerid][House]][LockStatus] = 0;

			        format(string, sizeof(string), "* %s has used their key to unlock the house.", GetName(playerid));
			        NearByMessage(playerid, PURPLE, string);
			    }
			    else
			    {
			        Houses[Player[playerid][House]][LockStatus] = 1;
			        format(string, sizeof(string), "* %s has used their key to lock the house.", GetName(playerid));
			        NearByMessage(playerid, PURPLE, string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "How the fuck did you get at X 18389884 Y 18389884 Z 18389884"); //You need to be at your house to unlock it.
			}
		}
	}
	else if(Player[playerid][HouseKey] > 0)
	{
		if(Player[playerid][HouseKeyID] == Houses[Player[playerid][HouseKey]][KeyID])
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, Houses[Player[playerid][HouseKey]][hExteriorX], Houses[Player[playerid][HouseKey]][hExteriorY], Houses[Player[playerid][HouseKey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 5.0, Houses[Player[playerid][HouseKey]][hInteriorX], Houses[Player[playerid][HouseKey]][hInteriorY], Houses[Player[playerid][HouseKey]][hInteriorZ]))
		    {
			    if(Houses[Player[playerid][HouseKey]][LockStatus] == 1)
			    {
			        Houses[Player[playerid][HouseKey]][LockStatus] = 0;

			        format(string, sizeof(string), "* %s has used their key to unlock the house.", GetName(playerid));
		        	NearByMessage(playerid, PURPLE, string);
			    }
	            else
			    {
			        Houses[Player[playerid][HouseKey]][LockStatus] = 1;

			        format(string, sizeof(string), "* %s has used their key to lock the house.", GetName(playerid));
		        	NearByMessage(playerid, PURPLE, string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You're not near a house.");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "Your key doesn't match the houselocks.");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not near your house.");
	}
	return 1;
}

command(asetplate, playerid, params[])
{
	new asetplate[128], string[128];
	if(sscanf(params, "z", asetplate))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /asetplate [plate]");
	}
	if(Player[playerid][AdminLevel] > 3)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			format(string, sizeof(string), asetplate);
			new plateveh = GetPlayerVehicleID(playerid);
			SetVehicleNumberPlate(plateveh, asetplate);
			SetVehicleToRespawn(plateveh);
		}
	}
}

command(despawncityhallobjects, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
		if(CityHall == 1)
		{
			for(new i = 1; i < 29; i++)
			{
			    DestroyDynamicObject(CityHallObjects[i]);
			}

			CityHall = 0;
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "The City Hall objects have been de-spawned.");
		}
	}
	return 1;
}

command(cityhallobjects, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    SendClientMessage(playerid, WHITE, "The City Hall objects have been spawned.");
	    CityHall = 1;
		CityHallObjects[1] = CreateDynamicObject(982, 1434.6097412109, -1732.6772460938, 13.066367149353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[2] = CreateDynamicObject(982, 1434.6334228516, -1758.2786865234, 13.066367149353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[3] = CreateDynamicObject(982, 1434.609375, -1732.6767578125, 14.341347694397, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[4] = CreateDynamicObject(982, 1434.6328125, -1758.2783203125, 14.341347694397, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[5] = CreateDynamicObject(982, 1524.5596923828, -1732.6767578125, 13.230429649353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[6] = CreateDynamicObject(982, 1524.5347900391, -1758.2783203125, 13.230429649353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[7] = CreateDynamicObject(982, 1524.5595703125, -1732.6767578125, 14.455410957336, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[8] = CreateDynamicObject(982, 1524.5341796875, -1758.2783203125, 14.455410957336, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[9] = CreateDynamicObject(982, 1447.4156494141, -1719.8780517578, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[10] = CreateDynamicObject(982, 1447.4150390625, -1719.8779296875, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[11] = CreateDynamicObject(982, 1511.8211669922, -1719.8779296875, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[12] = CreateDynamicObject(982, 1511.8203125, -1719.8779296875, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[13] = CreateDynamicObject(982, 1463.4311523438, -1719.8780517578, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[14] = CreateDynamicObject(982, 1463.4311523438, -1719.8779296875, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[15] = CreateDynamicObject(982, 1495.8223876953, -1719.8742675781, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[16] = CreateDynamicObject(982, 1495.822265625, -1719.8740234375, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[17] = CreateDynamicObject(983, 1477.4157714844, -1716.9256591797, 13.230429649353, 0.000000, 0.000000, 338.16516113281, -1, -1, -1, 150.0); //
		CityHallObjects[18] = CreateDynamicObject(983, 1477.4150390625, -1716.9248046875, 14.480410575867, 0.000000, 0.000000, 338.16467285156, -1, -1, -1, 150.0); //
		CityHallObjects[19] = CreateDynamicObject(983, 1482.0812988281, -1716.837890625, 13.230429649353, 0.000000, 0.000000, 18.029968261719, -1, -1, -1, 150.0); //
		CityHallObjects[20] = CreateDynamicObject(983, 1482.0810546875, -1716.837890625, 14.480410575867, 0.000000, 0.000000, 18.028564453125, -1, -1, -1, 150.0); //
		CityHallObjects[21] = CreateDynamicObject(1436, 1480.6085205078, -1732.3073730469, 13.938022613525, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[22] = CreateDynamicObject(1436, 1482.8724365234, -1732.3005371094, 13.938022613525, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[23] = CreateDynamicObject(3406, 1477.8425292969, -1746.1690673828, 13.990423202515, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[24] = CreateDynamicObject(3406, 1477.8444824219, -1748.1450195313, 13.990423202515, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[25] = CreateDynamicObject(3406, 1486.6118164063, -1748.1579589844, 13.990423202515, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[26] = CreateDynamicObject(974, 1487.1790771484, -1749.1290283203, 18.838981628418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[27] = CreateDynamicObject(974, 1476.2663574219, -1749.1290283203, 18.838981628418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[28] = CreateDynamicObject(974, 1481.8503417969, -1749.1037597656, 18.838981628418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
	}
	return 1;
}

command(endevent, playerid, params[])
{
	#pragma unused params
	new string[128];

	if(Player[playerid][AdminLevel] >= 3)
	{
	    if(CurrentEvent == 0)
	    {
	        SendClientMessage(playerid, WHITE, "There isn't an active event.");
	    }
	    else
	    {
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(Player[i][IsAtEvent] == 1)
		        {
		            ResetPlayerWeapons(i);
		        	TogglePlayerControllable(i, true);
				    SetPlayerInterior(i, SpawnInt);
				    SetPlayerVirtualWorld(i, 0);
				    SetPlayerPos(i, SpawnX, SpawnY, SpawnZ);
		        	Player[i][IsAtEvent] = 0;
		        	SetPlayerSkin(i, Player[i][LastSkin]);
					new MathsFlaw = floatround(Player[i][LastHealth], floatround_ceil);
		    		SetPlayerHealth(i, MathsFlaw);
					MathsFlaw = floatround(Player[i][LastArmour], floatround_ceil);
					SetPlayerArmour(i, MathsFlaw);
		    		GivePlayerSavedWeapons(i);
		    	}
		    }

		    format(string, sizeof(string), "%s has closed the event.", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);
		    CurrentEvent = 0;
		    EC = 0;
		}
    }
    return 1;
}

command(admincommands, playerid, params[])
{
	#pragma unused params
	SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------");

	if(Player[playerid][AdminLevel] >= 1)
	{
		SendClientMessage(playerid, WHITE, "Level 1 Moderator: /a, /warn, /kick, /goto, /get, /mute, /adminduty, /go, /checkweapons, /check, /slap, /spec, /afk");
		SendClientMessage(playerid, WHITE, "Level 1 Moderator: /prison, /spawnownedcar, /vehname, /gunname, /aw, /analysis, /listgroups, /remotecheck, /reports, /acceptreport");
		SendClientMessage(playerid, WHITE, "Level 1 Moderator: /notetoplayer, /gotopoint, /gotoplayerscar, /reportban, /entervehicle");
		SendClientMessage(playerid, WHITE, "Level 1 Moderator: /acceptrequest, /endrequest (/requestmod and /cancelrequest for players)");
	}

	if(Player[playerid][AdminLevel] >= 2)
	{
		SendClientMessage(playerid, GREY, "Level 2 Moderator: /ban, /freeze, /unfreeze, /listgroup, /confiscate, /adivorce, /belt");
		SendClientMessage(playerid, GREY, "Level 2 Moderator: /agotohouse, /agotobusiness, /forcetutorial");
	}

	if(Player[playerid][AdminLevel] >= 3)
	{
		SendClientMessage(playerid, WHITE, "Level 3 Moderator: /spawncar, /agiveweapon, /eventproperties, /startevent, /startjump, /endevent, /despawncar");
		SendClientMessage(playerid, WHITE, "Level 3 Moderator: /toggleooc, /togglenewbie, /togglevip, /setleader, /destroyvehicles, /award, /awardtokens, /fine, /finetokens");
	}

	if(Player[playerid][AdminLevel] >= 4)
	{
	    SendClientMessage(playerid, GREY, "Level 4 Admin: /changeviplevel, /permaban, /unban, /resetwarns, /respawncar, /gtype, /resetplayer, /endround, /adisbandgroup");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /unbanip, /banip, /ghqinterior, /ghqexterior, /gskins, /setcargroup, /businesstype, /spotlight, /quizhint, /startround");
        SendClientMessage(playerid, GREY, "Level 4 Admin: /movecar, /setcarcolour, /remoteprison, /asellhouse, /asellbusiness, /spotlight, /killspotlight, /movejob");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /setbusinesssupplies, /highvolume, /setweather, /gotocarid, /clearchat, /unmodallcars, /asetplate");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /houseprice, /businessprice, /set, /movehouse, /movebusiness, /announce, /deletevehicle");
	}

	if(Player[playerid][AdminLevel] >= 5)
	{
	    SendClientMessage(playerid, WHITE, "Level 5 Admin: /changename, /changeplayercar, /changeranktitle, /remoteban, /sban, /betainvite, /betauninvite, /bonuscar");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /respawnallvehicles, /anticheat, /cityhallobjects, /despawncityhallobjects, /createjob, /adminname, /changejobmessage");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /changejobname, /savedata, /createhouse, /createbusiness, /movelocation, /changeranktitle");
	}

	if(Player[playerid][AdminLevel] >= 6)
	{
	    SendClientMessage(playerid, GREY, "Level 6 Admin: /hostname, /deleteaccount");
	}

	if(Player[playerid][AdminLevel] >= 7)
	{
	    SendClientMessage(playerid, GREY, "Head Admin: /changeadminlevel, /gmx");
	}

	SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

command(savedata, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    SendClientMessageToAll(LIGHTRED, "All general data is now being saved. Stand by for lag.");
	    SaveGeneralData();
	    SendClientMessageToAll(LIGHTRED, "All general data now saved.");
	}
	return 1;
}

command(getid, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /getid [playerid/name]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    format(string, sizeof(string), "The ID that matches %s is %d.", GetName(id), id);
		    SendClientMessage(playerid, WHITE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	}
	return 1;
}

command(eject, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /eject [playerid]");
	}
	else
	{
	    if(GetPlayerState(playerid) == 2)
	    {
	        if(GetPlayerVehicleID(id) == GetPlayerVehicleID(playerid))
	        {
		        format(string, sizeof(string), "* %s has ejected %s from their vehicle.", GetName(playerid), GetName(id));
		        NearByMessage(playerid, RPCOLOUR, string);
		        RemovePlayerFromVehicle(id);
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not the driver.");
	    }
	}
	return 1;
}

command(flipcoin, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Money] >= 1)
	{
	    Player[playerid][Money] -= 1;

	    if(random(6) < 3)
	    {
	    	format(string, sizeof(string), "* %s has withdrawn a coin, and flips it. Getting the 'HEADS' side.", GetName(playerid));
	    }
	    else
	    {
	    	format(string, sizeof(string), "* %s has withdrawn a coin, and flips it. Getting the 'TAILS' side.", GetName(playerid));
	    }

	    NearByMessage(playerid, RPCOLOUR, string);
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must have more than $1 to flip.");
	}
	return 1;
}

command(explode, playerid, params[])
{
	new	userid, string[128];
	if(sscanf(params, "u", userid))
	{
	    if(Player[playerid][AdminLevel] >= 8)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /explode [playerid]");
		}
	}
	else
	{
	    if(IsPlayerConnectedEx(userid))
	    {
	        if(Player[playerid][AdminLevel] >= 7)
	        {
				if(userid == INVALID_PLAYER_ID)
				{
			    	SendClientMessage(playerid, WHITE, "Invalid ID.");
			    	return 1;
				}
				else
				{
					if(Player[playerid][AdminLevel] >= Player[userid][AdminLevel])
					{
						new Float:px, Float:py, Float:pz;
						GetPlayerPos(userid, px, py, pz);
						SetPlayerHealth(userid, 50);
						CreateExplosion(px+10, py, pz, 7, 100.0);
						CreateExplosion(px, py+10, pz, 7, 100.0);
						CreateExplosion(px-10, py, pz, 7, 100.0);
						CreateExplosion(px, py-10, pz, 7, 100.0);
						CreateExplosion(px, py, pz, 7, 100.0);
						format(string, sizeof(string), "You have exploded %s.", GetName(userid));
						SendClientMessage(playerid, WHITE, string);
				    }
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is logged in.");
	    }
	}
	return 1;
}

command(slap, playerid, params[])
{
	new string[128], id, Float: pX, Float: pY, Float: pZ, MathsFlaw, Float: Mathematical;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /slap [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
		        {
					GetPlayerPos(id, pX, pY, pZ);
					SetPlayerPos(id, pX, pY, pZ+5);

					GetPlayerHealth(id, Mathematical);
					MathsFlaw = floatround(Mathematical, floatround_ceil);
			    	SetPlayerHealth(id, MathsFlaw-5);

			    	format(string, sizeof(string), "You have slapped %s.", GetName(id));
			    	SendClientMessage(playerid, WHITE, string);
			    	format(string, sizeof(string), "%s has been slapped.", GetName(id));
			    	NearByMessage(id, PURPLE, string);
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(belt, playerid, params[])
{
	new string[128], id, Float: pX, Float: pY, Float: pZ;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /belt [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
		        {
					GetPlayerPos(id, pX, pY, pZ);
					SetPlayerPos(id, pX+21, pY+-16, pZ+16);

			    	format(string, sizeof(string), "You have whipped %s with your huge belt!", GetName(id));
			    	SendClientMessage(playerid, WHITE, string);
			    	format(string, sizeof(string), "%s has been whipped by the almighty belt.", GetName(id));
			    	NearByMessage(id, PURPLE, string);
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(createatm, playerid, params[])
{
	new usage[128];
	if(sscanf(params, "z", usage))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        SendClientMessage(playerid, WHITE, "SYNTAX: /createatm confirm");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strcmp(usage, "confirm", true) == 0)
	        {
				new atmID = SpawnedATMs+1;

				if(atmID >= MAX_ATMS)
				{
				    SendClientMessage(playerid, WHITE, "There are too many ATMs spawned in.");
				}
				else
				{
					new Float: x, Float: y, Float: z, string[128], string2[128];
					GetPlayerPos(playerid, x, y, z);

					format(string, sizeof(string), "ATMs/ATM_%d.ini", atmID);
					format(string2, sizeof(string2), "ATM\nID %d\n(( Use /atm ))", atmID);

					ATMs[atmID][ExteriorX] = x;
					ATMs[atmID][ExteriorY] = y;
					ATMs[atmID][ExteriorZ] = z;
					// ATMs[atmID][ATMText] = Create3DTextLabel(string2, WHITE, ATMs[atmID][ExteriorX], ATMs[atmID][ExteriorY], ATMs[atmID][ExteriorZ], 15.0, 0, 0);
					ATMs[atmID][ATMToggle] = 0;
					Create3DTextLabel(string2, WHITE, ATMs[atmID][ExteriorX], ATMs[atmID][ExteriorY], ATMs[atmID][ExteriorZ], 20.0, 0, 0);

					SpawnedATMs++;

					if(!fexist(string))
					{
					    dini_Create(string);
					    dini_FloatSet(string, "ExteriorX", ATMs[atmID][ExteriorX]);
					    dini_FloatSet(string, "ExteriorY", ATMs[atmID][ExteriorY]);
					    dini_FloatSet(string, "ExteriorZ", ATMs[atmID][ExteriorZ]);
					    dini_IntSet(string, "ATMToggle", ATMs[atmID][ATMToggle]);
					    SendClientMessage(playerid, WHITE, "ATM successfully created.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "ERROR: That file already exists!");
					}
				}
	        }
	    }
	}
}

command(createbusiness, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "z", Usage))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /createbusiness [usage]");
			SendClientMessage(playerid, GREY, "Usage: Interior, Exterior or Complete.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strcmp(Usage, "exterior", true) == 0)
    	    {
				Player[playerid][BusinessExterior]++;
            	Player[playerid][bExtID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][bExtX], Player[playerid][bExtY], Player[playerid][bExtZ]);
            	format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][bExtX], Player[playerid][bExtY], Player[playerid][bExtZ]);
            	SendClientMessage(playerid, WHITE, string);
       		}
        	if(strcmp(Usage, "interior", true) == 0)
        	{
				Player[playerid][BusinessInterior]++;
            	Player[playerid][bIntID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][bIntX], Player[playerid][bIntY], Player[playerid][bIntZ]);
            	format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][bIntX], Player[playerid][bIntY], Player[playerid][bIntZ]);
            	SendClientMessage(playerid, WHITE, string);
        	}
        	if(strcmp(Usage, "complete", true) == 0)
        	{
            	if(Player[playerid][BusinessInterior] > 0 || Player[playerid][BusinessExterior] > 0)
            	{
                	new NewBusinessID = SpawnedBusinesses+1;

                	if(NewBusinessID >= MAX_BUSINESSES)
                	{
                    	SendClientMessage(playerid, WHITE, "Too many businesses are currently spawned!");
                	}

                	format(string, sizeof(string), "INSERT INTO businesses (bID) VALUES (%d)", NewBusinessID);
                	mysql_query(mysql, string);

						Businesses[NewBusinessID][bInteriorID] = Player[playerid][bIntID];
						Businesses[NewBusinessID][bExteriorID] = Player[playerid][bExtID];
						Businesses[NewBusinessID][bInteriorX] = Player[playerid][bIntX];
						Businesses[NewBusinessID][bInteriorY] = Player[playerid][bIntY];
						Businesses[NewBusinessID][bInteriorZ] = Player[playerid][bIntZ];
						Businesses[NewBusinessID][bExteriorX] = Player[playerid][bExtX];
						Businesses[NewBusinessID][bExteriorY] = Player[playerid][bExtY];
						Businesses[NewBusinessID][bExteriorZ] = Player[playerid][bExtZ];
						format(Businesses[NewBusinessID][bOwner], 255, "Nobody");
						Businesses[NewBusinessID][bLockStatus] = 0;
						Businesses[NewBusinessID][bPrice] = 0;
						Businesses[NewBusinessID][bType] = 0;
						format(Businesses[NewBusinessID][bName], 255, "Nothing");
						Businesses[NewBusinessID][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ], 0, -1, -1, 150.0);

                		Player[playerid][BusinessExterior]--;
                		Player[playerid][BusinessInterior]--;

                		SpawnedBusinesses++;
                		SendClientMessage(playerid, PURPLE, "Successfully created business!");
                		format(string, sizeof(string), "Please now proceed to use /businesstype and /businessprice (ID: %d)", NewBusinessID);
                		SendClientMessage(playerid, WHITE, string);
                		SetPlayerInterior(playerid, Businesses[NewBusinessID][bExteriorID]);
                		SetPlayerPos(playerid, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ]);
                		SaveBusiness(NewBusinessID);
            	}
            	else
            	{
                	SendClientMessage(playerid, WHITE, "You must select an exterior and an interior first!");
            	}
            }
        }
	}
	return 1;
}

command(respawnallvehicles, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    for(new i = 0; i < MAX_VEHICLES; i++)
	    {
	        if(Vehicles[i][GameID] >= 1)
	        {
	            SetVehicleToRespawn(Vehicles[i][GameID]);
	        }
	    }

	    SendClientMessage(playerid, WHITE, "All saved vehicles have been respawned.");
    }
	return 1;
}

/*command(wiretransfer, playerid, params[])
{
	new string[255], id, amount;
	if(sscanf(params, "ud", id, amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /wiretransfer [playerid] [amount]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Player[playerid][BankMoney] >= amount)
	        {
	            if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	            {
		            if(Player[playerid][BankStatus] == 1)
		            {
		                SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
		            }
		            else
		            {
			            if(amount < 2000000 && amount > 0)
			            {
				            Player[playerid][BankMoney] -= amount;
				            Player[id][BankMoney] += amount;
				            format(string, sizeof(string), "You have given $%s to %s.", IntToFormattedStr(amount), GetName(id));
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "You have been wired $%s, from %s.", IntToFormattedStr(amount), GetName(playerid));
				            SendClientMessage(id, WHITE, string);
				            format(string, sizeof(string), "WARNING: %s has wire-transfered $%s to %s.", GetName(playerid), IntToFormattedStr(amount), GetName(id));
			            	new tmpip1[128], tmpip2[128];

			            	if(amount >= 50000)
			                {
			                    SendToAdmins(ADMINORANGE, string, 1);
			                }

			                LiteralGroupMessage(3, ADMINORANGE, string);

			            	GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
			            	GetPlayerIp(id, tmpip2, sizeof(tmpip2));
							new hour, minute, second, day, year, month;
							gettime(hour, minute, second);
							getdate(year, month, day);
			            	format(string, sizeof(string), "[WIRETRANSFER] %s (IP: %s) has paid %s (IP: %s) $%s on %d/%d/%d (%d:%d:%d)", GetName(playerid), tmpip1, GetName(id), tmpip2, IntToFormattedStr(amount), day, month, year, hour, minute, second);
			            	MoneyLog(string);

			            	if(Player[playerid][PlayingHours] == 0 && amount >= 999 && Player[playerid][AdminLevel] < 1 )
			            	{
			            	    format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've given $%s to %s (w/ 0 playing hours)", GetName(playerid), IntToFormattedStr(amount), GetName(id));
			            	    SendToAdmins(ADMINORANGE, string, 0);
			            	}
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You're trying to give too much. Or you're trying to glitch the system with using a -.");
			            }
		            }
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You don't have that much money.");
	        }
	    }
	}
	return 1;
}*/

command(hlistweapons, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][House] >= 1)
	{
	    switch(Houses[Player[playerid][House]][WeaponSlot1])
		{
		    case 0:
			{
				SendClientMessage(playerid, WHITE, "Slot 1: Empty.");
			}
			default:
			{
		        new WeaponName[128];
		        GetWeaponName(Houses[Player[playerid][House]][WeaponSlot1], WeaponName, sizeof(WeaponName));
		    	format(string, sizeof(string), "Slot 1: %s", WeaponName);
		    	SendClientMessage(playerid, WHITE, string);
	    	}
	    }

	    switch(Houses[Player[playerid][House]][WeaponSlot2])
		{
		    case 0:
			{
				SendClientMessage(playerid, WHITE, "Slot 2: Empty.");
			}
			default:
			{
		        new WeaponName[128];
		        GetWeaponName(Houses[Player[playerid][House]][WeaponSlot2], WeaponName, sizeof(WeaponName));
		    	format(string, sizeof(string), "Slot 2: %s", WeaponName);
		    	SendClientMessage(playerid, WHITE, string);
	    	}
	    }

	    switch(Houses[Player[playerid][House]][WeaponSlot3])
		{
		    case 0:
			{
				SendClientMessage(playerid, WHITE, "Slot 3: Empty.");
			}
			default:
			{
		        new WeaponName[128];
		        GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], WeaponName, sizeof(WeaponName));
		    	format(string, sizeof(string), "Slot 3: %s", WeaponName);
		    	SendClientMessage(playerid, WHITE, string);
	    	}
	    }
	}
	return 1;
}

command(hgetweapon, playerid, params[])
{
	new string[128], slot, name[128];
	if(sscanf(params, "d", slot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hgetweapon [slot (1-3)]");
	}
	else
	{
	    if(Player[playerid][House] == Player[playerid][InHouse] && Player[playerid][House] != 0)
	    {
		    switch(slot)
		    {
		        case 1:
		        {
		            if(Houses[Player[playerid][House]][WeaponSlot1] >= 1)
		            {
		                GivePlayerWeaponEx(playerid, Houses[Player[playerid][House]][WeaponSlot1]);
		                GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], name, sizeof(name));
						format(string, sizeof(string), "You have withdrawn your %s from Slot 1.", name);
						SendClientMessage(playerid, WHITE, string);
						Houses[Player[playerid][House]][WeaponSlot1] = 0;
						SaveHouse(Player[playerid][House]);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "This slot is unoccupied.");
		            }
		        }
		        case 2:
		        {
		            if(Houses[Player[playerid][House]][WeaponSlot2] >= 1)
		            {
		                GivePlayerWeaponEx(playerid, Houses[Player[playerid][House]][WeaponSlot2]);
		                GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], name, sizeof(name));
						format(string, sizeof(string), "You have withdrawn your %s from Slot 2.", name);
						SendClientMessage(playerid, WHITE, string);
						Houses[Player[playerid][House]][WeaponSlot2] = 0;
						SaveHouse(Player[playerid][House]);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "This slot is unoccupied.");
		            }
		        }
		        case 3:
		        {
		            if(Houses[Player[playerid][House]][WeaponSlot3] >= 1)
		            {
		                GivePlayerWeaponEx(playerid, Houses[Player[playerid][House]][WeaponSlot3]);
		                GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], name, sizeof(name));
						format(string, sizeof(string), "You have withdrawn your %s from Slot 3.", name);
						SendClientMessage(playerid, WHITE, string);
						Houses[Player[playerid][House]][WeaponSlot3] = 0;
						SaveHouse(Player[playerid][House]);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "This slot is unoccupied.");
		            }
		        }
				default:
				{
				    SendClientMessage(playerid, WHITE, "SYNTAX: /hgetweapon [slot (1-3)]");
				}
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be inside your house.");
	    }
	}
	return 1;
}

command(hstoreweapon, playerid, params[])
{
	new slot, WeaponName[128];
	if(sscanf(params, "dz", slot, WeaponName))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hstoreweapon [slot (1-3)] [weapon]");
		SendClientMessage(playerid, WHITE, "Weapons: SilencedPistol, AK47, PumpActionShotgun, MP5, SniperRifle, DesertEagle, M4, CombatShotgun");
		SendClientMessage(playerid, WHITE, "Weapons: Colt45, MicroSMG");
	}
	else
	{
	    if(Player[playerid][House] == Player[playerid][InHouse] && Player[playerid][House] != 0)
	    {
			if(slot >= 1 && slot < 4)
			{
			    if(slot == 1 && Houses[Player[playerid][House]][WeaponSlot1] != 0 || slot == 2 && Houses[Player[playerid][House]][WeaponSlot2] != 0 || slot == 3 && Houses[Player[playerid][House]][WeaponSlot3] != 0)
			    {
			        SendClientMessage(playerid, WHITE, "You already have stored a weapon in this slot. Please withdraw it first.");
			    }
			    else
			    {
		         	if(strcmp(WeaponName, "SilencedPistol", true) == 0)
			        {
			            if(Player[playerid][WepSlot2] == 23)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 23;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Silenced Pistol in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 23;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Silenced Pistol in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 23;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Silenced Pistol in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "Colt45", true) == 0)
			        {
			            if(Player[playerid][WepSlot2] == 22)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 22;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Colt45 in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 22;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Colt45 in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 22;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Colt45 in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][House]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "MicroSMG", true) == 0)
			        {
			            if(Player[playerid][WepSlot4] == 28)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 28;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a MicroSMG in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 28;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a MicroSMG in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 28;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a MicroSMG in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][House]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "AK47", true) == 0)
			        {
			            if(Player[playerid][WepSlot5] == 30)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 30;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an AK-47 in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 30;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an AK-47 in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 30;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an AK-47 in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "SniperRifle", true) == 0)
			        {
			            if(Player[playerid][WepSlot6] == 34)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 34;
			                        Player[playerid][WepSlot6] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an Sniper Rifle in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 34;
			                        Player[playerid][WepSlot6] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an Sniper Rifle in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 34;
			                        Player[playerid][WepSlot6] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an Sniper Rifle in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "M4", true) == 0)
			        {
			            if(Player[playerid][WepSlot5] == 31)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 31;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an M4 in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 31;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an M4 in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 31;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an M4 in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "MP5", true) == 0)
			        {
			            if(Player[playerid][WepSlot4] == 29)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 29;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an MP5 in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
		                        	Houses[Player[playerid][House]][WeaponSlot2] = 29;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an MP5 in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
		                        	Houses[Player[playerid][House]][WeaponSlot3] = 29;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an MP5 in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "DesertEagle", true) == 0)
			        {
			            if(Player[playerid][WepSlot2] == 24)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 24;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Desert Eagle in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 24;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Desert Eagle in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 24;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Desert Eagle in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "PumpActionShotgun", true) == 0)
			        {
			            if(Player[playerid][WepSlot3] == 25)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 25;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Pump Action Combat Shotgun in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
	                                Houses[Player[playerid][House]][WeaponSlot2] = 25;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Pump Action Combat Shotgun in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 25;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Pump Action Shotgun in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "CombatShotgun", true) == 0)
			        {
			            if(Player[playerid][WepSlot3] == 27)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 27;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Combat Shotgun in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
	                                Houses[Player[playerid][House]][WeaponSlot2] = 27;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Combat Shotgun in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 27;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Combat Shotgun in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		        }
		    }
		}
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be inside your house.");
	    }
	}
	return 1;
}

command(vwreset, playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) > 0)
	{
		SetPlayerVirtualWorld(playerid, 0);
		SendClientMessage(playerid, WHITE, "You have reset your virtual world!");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "Your virtual world is already 0!");
	}
}

command(interiorreset, playerid, params[])
{
	if(Player[playerid][AdminLevel] > 0)
	{
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, WHITE, "You've set your interior to 0!");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You're unable to do this!");
	}
}

command(setweather, playerid, params[])
{
	new weatherid;
	if(sscanf(params, "d", weatherid))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    SendClientMessage(playerid, WHITE, "USAGE: /setweather [weatherid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    if(weatherid >= 1 && weatherid < 46)
		    {
		        SetWeather(weatherid);
		        GlobalWeather = weatherid;
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid weather ID - must be between 1 and 45.");
		    }
	    }
	}
	return 1;
}

command(giveweapon, playerid, params[])
{
	new string[128], id, WeaponName[128];
	if(sscanf(params, "uz", id, WeaponName))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /giveweapon [playerid] [usage]");
		SendClientMessage(playerid, WHITE, "Usages: SilencedPistol, AK47, PumpActionShotgun, MP5, SniperRifle, DesertEagle, M4, CombatShotgun");
		SendClientMessage(playerid, WHITE, "Usages: Colt45, BaseballBat, Katana, MicroSMG");
	}
	else
	{
	    if(Player[playerid][Group] != 1)
	    {
			if(IsPlayerConnectedEx(id))
			{
		   	    if(GetDistanceBetweenPlayers(id, playerid) < 7 && !IsPlayerInAnyVehicle(playerid))
	    	    {
		            if(strcmp(WeaponName, "silencedpistol", true) == 0)
		            {
		                if(Player[playerid][WepSlot2] == 23)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot2] = 0;
	                     	GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot2] = 23;
	                     	ResetPlayerWeapons(id);
	                     	GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "MicroSMG", true) == 0)
		            {
		                if(Player[playerid][WepSlot4] == 28)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot4] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot4] = 28;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "Katana", true) == 0)
		            {
		                if(Player[playerid][WepSlot1] == 8)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot1] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot1] = 8;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "baseballbat", true) == 0)
		            {
		                if(Player[playerid][WepSlot1] == 5)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot1] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot1] = 5;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "baseballbat", true) == 0)
		            {
		                if(Player[playerid][WepSlot1] == 5)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot1] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot1] = 5;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "sniperrifle", true) == 0)
		            {
		                if(Player[playerid][WepSlot6] == 34)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot6] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot6] = 34;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "Colt45", true) == 0)
		            {
		                if(Player[playerid][WepSlot2] == 22)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot2] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot2] = 22;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "ak47", true) == 0)
		            {
		                if(Player[playerid][WepSlot5] == 30)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot5] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot5] = 30;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "pumpactionshotgun", true) == 0)
		            {
		                if(Player[playerid][WepSlot3] == 25)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot3] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot3] = 25;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "mp5", true) == 0)
		            {
		                if(Player[playerid][WepSlot4] == 29)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot4] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot4] = 29;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "deserteagle", true) == 0)
		            {
		                if(Player[playerid][WepSlot2] == 24)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot2] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot2] = 24;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "m4", true) == 0)
		            {
		                if(Player[playerid][WepSlot5] == 31)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
		                    ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot5] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot5] = 31;
		                    ResetPlayerWeapons(id);
		                    GivePlayerSavedWeapons(id);
		                    SetPlayerArmedWeapon(id, 0);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }

		            else if(strcmp(WeaponName, "combatshotgun", true) == 0)
		            {
		                if(Player[playerid][WepSlot3] == 27)
		                {
		                    SetPlayerArmedWeapon(playerid, 0);
							ResetPlayerWeapons(playerid);
		                    Player[playerid][WepSlot3] = 0;
		                    GivePlayerSavedWeapons(playerid);
		                    Player[id][WepSlot3] = 27;
		                    GivePlayerSavedWeapons(id);
		                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
		                    SendClientMessage(playerid, WHITE, string);
		                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
		                    SendClientMessage(id, WHITE, string);
		                }
		            }
		    	}
		    	else
		    	{
		    	    SendClientMessage(playerid, WHITE, "You're too far away or in a vehicle.");
		    	}
		    }
		}
        else
		{
		    SendClientMessage(playerid, WHITE, "SD Members can't give weapons. (to prevent SD weaponfarming)");
		}
	}
	return 1;
}

command(asellbusiness, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /asellbusiness [Business ID]");
		}
	}
	else
	{

		        format(Businesses[id][bOwner], 128, "Nobody");
		        SaveBusiness(id);

		        format(string, sizeof(string), "You have sold business %d.", id);
		        SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

command(asellhouse, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /asellhouse [house ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		        format(Houses[id][hOwner], 128, "Nobody");
		        format(string, sizeof(string), "You have sold house %d.", id);
		        SendClientMessage(playerid, WHITE, string);
		        SaveHouse(id);
			    DestroyDynamicPickup(Houses[id][HPickupID]);
				Houses[id][HPickupID] = CreateDynamicPickup(1273, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], 0, -1, -1, 150.0);
		}
	}
	return 1;
}

command(banip, playerid, params[])
{
	new string[128], PlayersIP[21];
	if(sscanf(params, "z", PlayersIP))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /banip [IP]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    if(strlen(PlayersIP) >= 5)
		    {
		    	format(string, sizeof(string), "banip %s", PlayersIP);
		    	SendRconCommand(string);
		    	SendClientMessage(playerid, WHITE, "IP banned.");
		    	format(string, sizeof(string), "WARNING: %s has banned IP %s.", GetName(playerid), PlayersIP);
		    	SendToAdmins(ADMINORANGE, string, 0);

				new hour, minute, second, day, year, month, string2[128];
			    gettime(hour, minute, second);
			    getdate(year, month, day);
				format(string2, sizeof(string2), "%d/%d/%d | %d:%d | %s | %s (IP banned)", day, month, year, hour, minute, PlayersIP, GetName(playerid));
				BanLog(string2);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid IP.");
		    }
		}
	}
	return 1;
}

command(unbanip, playerid, params[])
{
	new string[128], PlayersIP[21];
	if(sscanf(params, "z", PlayersIP))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /unbanip [IP]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    if(strlen(PlayersIP) >= 5)
		    {
		    	format(string, sizeof(string), "unbanip %s", PlayersIP);
		    	SendRconCommand(string);
		    	format(string, sizeof(string), "WARNING: %s has un-banned IP %s.", GetName(playerid), PlayersIP);
		    	SendToAdmins(ADMINORANGE, string, 0);
		    	SendRconCommand("reloadbans");

				new hour, minute, second, day, year, month, string2[128];
			    gettime(hour, minute, second);
			    getdate(year, month, day);
				format(string2, sizeof(string2), "%d/%d/%d | %d:%d | %s | %s (IP unbanned)", day, month, year, hour, minute, PlayersIP, GetName(playerid));
				UnbanLog(string2);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid IP.");
		    }
		}
	}
	return 1;
}

command(mc, playerid, params[])
{
    new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /mc [message]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
			format(string, sizeof(string), "[M] {2A7306}%s (%d): %s", Player[playerid][NormalName], Player[playerid][AdminLevel], Message);
			SendClientMessage(playerid, MCHAT, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
	    	{
	    	    if(Player[i][AdminLevel] >= 1 && i != playerid)
	    	    {
	    	        SendClientMessage(i, MCHAT, string);
	    	    }
	    	}
		}
	}
	return 1;
}

command(a, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /a [message]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "[A] {00C4DE}%s (%d): %s", Player[playerid][AdminName], Player[playerid][AdminLevel], Message);
      		SendToAdmins(ACHAT, string, 0);
		}
	}
	return 1;
}

command(calculate, playerid, params[])
{
	new Value1, Method[20], Value2, string[128];
	if(sscanf(params, "ddz", Value1, Value2, Method))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /calculate [value] [value] [method]");
		SendClientMessage(playerid, GREY, "Method: Add, Subtract, Multiply & Divide.");
	}
	else
	{
		if(strcmp(Method, "multiply", true) == 0)
		{
			new Sum = Value1*Value2;
	    	format(string, sizeof(string), "%d X (multiplied) %d = %d.", Value1, Value2, Sum);
	    	SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "subtract", true) == 0)
		{
			new Sum = Value1-Value2;
	  	  	format(string, sizeof(string), "%d - (subtract) %d = %d.", Value1, Value2, Sum);
	    	SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "divide", true) == 0)
		{
			new Sum = Value1/Value2;
	    	format(string, sizeof(string), "%d / (divide) %d = %d.", Value1, Value2, Sum);
	    	SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "add", true) == 0)
		{
			new Sum = Value1+Value2;
		    format(string, sizeof(string), "%d + (add) %d = %d.", Value1, Value2, Sum);
		    SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

command(agotobusiness, playerid, params[])
{
	new number, string[128];
	if(sscanf(params, "d", number))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /agotobusiness [business ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    format(string, sizeof(string), "Businesses/Business_%d.ini", number);

		    if(fexist(string))
		    {
		        SetPlayerInterior(playerid, Businesses[number][bExteriorID]);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetPlayerPos(playerid, Businesses[number][bExteriorX],Businesses[number][bExteriorY], Businesses[number][bExteriorZ]);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid business ID!");
		    }
	    }
	}
	return 1;
}

command(fine, playerid, params[])
{
	new id, amount, Reason[128], string[128];
	if(sscanf(params, "udz", id, amount, Reason))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /fine [playerid] [amount] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
		    if(strlen(Reason) < 1)
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /fine [playerid] [amount] [reason]");
		    }
		    else
		    {

			    if(amount < 99999999 && amount >= 1)
			    {
				    format(string, sizeof(string), "Fine: %s has been fined $%s by %s, defined reason: %s", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
				    SendClientMessageToAll(LIGHTRED, string);
				   	Player[id][Money] -= amount;

				    if(Player[id][AdminLevel] < 1)
				       {
				       	Player[playerid][AdminActions]++;
				       	AdminActionsLog(string);
			           	SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				       }
			    }

		    }
		}
	}
	return 1;
}
command(finetokens, playerid, params[])
{
	new id, amount, Reason[128], string[128];
	if(sscanf(params, "udz", id, amount, Reason))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /finetokens [playerid] [amount] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
		    if(strlen(Reason) < 1)
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /finetokens [playerid] [amount] [reason]");
		    }
		    else
		    {

			    if(amount < 99999999 && amount >= 1)
			    {
				    format(string, sizeof(string), "Fine: %s has been fined %s tokens by %s, defined reason: %s", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
				    SendClientMessageToAll(LIGHTRED, string);
				   	Player[id][VIPTokens] -= amount;

				    if(Player[id][AdminLevel] < 1)
				       {
				       	Player[playerid][AdminActions]++;
				       	AdminActionsLog(string);
			           	SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				       }
			    }

		    }
		}
	}
	return 1;
}

command(toggleooc, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 3)
	{
		if(oocenabled == 0)
		{
		    format(string, sizeof(string), "%s has enabled the OOC channel.", GetName(playerid));
	    	oocenabled = 1;
	    	SendClientMessageToAll(LIGHTRED, string);
		}
		else if(oocenabled == 1)
		{
		    format(string, sizeof(string), "%s has disabled the OOC channel.", GetName(playerid));
	    	oocenabled = 0;
	    	SendClientMessageToAll(LIGHTRED, string);
		}
	}
	return 1;
}

command(ooc, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /o(oc) [message]");
	}
	else
	{
	    if(Player[playerid][oMuted] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You have been muted from the global OOC channel by an administrator.");
	    }
	    else
	    {
			if(Player[playerid][AdminLevel] >= 1)
			{
			    format(string, sizeof(string), "((Server Admin %s: %s)) ", GetName(playerid), Message);
			    SendClientMessageToAll(OOC_CHAT, string);
			}
			else if(oocenabled == 1 && Player[playerid][Authenticated] >= 1)
			{
			    if(Player[playerid][VipRank] > 0 && Player[playerid][VipRank] < 4)
			    {
			        format(string, sizeof(string), "((VIP %s: %s)) ", GetName(playerid), Message);
			    	for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
						{
					   		SendClientMessage(i, OOC_CHAT, string);
						}
					}

					OOCChatLog(string);
			    }
			    else
			    {
				    if(Player[playerid][PlayingHours] < 1)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank1], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 1 && Player[playerid][PlayingHours] < 25)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank2], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 25 && Player[playerid][PlayingHours] < 100)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank3], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 100 && Player[playerid][PlayingHours] < 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank4], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
				    }
				    else if(Player[playerid][PlayingHours] >= 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank5], GetName(playerid), Message);
					    for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}

				    OOCChatLog(string);
			    }
			}
			else if(oocenabled == 0)
			{
			    SendClientMessage(playerid, WHITE, "OOC channel is currently disabled.");
			}
		}
	}
	return 1;
}

command(acceptreport, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /acceptreport [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(IsPlayerConnectedEx(id) &&  Player[id][ActiveReport] == 1)
	        {
	            format(string, sizeof(string), "You have taken %s's report.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);

	            format(string, sizeof(string), "REPORT TEXT: %s", Player[id][ReportText]);
	            SendClientMessage(playerid, GREY, string);

	            format(string, sizeof(string), "Admin %s has taken your report. Please note this could take a while to resolve!", GetName(playerid));
	            SendClientMessage(id, ADMINORANGE, string);

	            format(string, sizeof(string), "REPORTS: %s has taken %s's report.", GetName(playerid), GetName(id));
	            SendToAdmins(ADMINORANGE, string, 1);

	            Player[id][ActiveReport] = 0;

	            if(Player[id][AdminLevel] < 1)
	            {
	                Player[playerid][AdminActions]++;
	                SendClientMessage(playerid, WHITE, "You have earned an admin action!");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "There are no active reports from that player.");
	        }
	    }
	}
	return 1;
}

command(o, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /o(oc) [message]");
	}
	else
	{
	    if(Player[playerid][oMuted] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You have been muted from the global OOC channel by an administrator.");
	    }
	    else
	    {
			if(Player[playerid][AdminDuty] >= 1)
			{
			    format(string, sizeof(string), "((Server Admin %s: %s)) ", GetName(playerid), Message);
			    SendClientMessageToAll(OOC_CHAT, string);
			}
			else if(oocenabled == 1 && Player[playerid][Authenticated] >= 1)
			{
			    if(Player[playerid][VipRank] >= 1)
			    {
			        format(string, sizeof(string), "((VIP %s: %s)) ", GetName(playerid), Message);
			    	for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
						{
					   		SendClientMessage(i, OOC_CHAT, string);
						}
					}

					OOCChatLog(string);
			    }
			    else
			    {
				    if(Player[playerid][PlayingHours] < 1)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank1], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 1 && Player[playerid][PlayingHours] < 25)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank2], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 25 && Player[playerid][PlayingHours] < 100)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank3], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 100 && Player[playerid][PlayingHours] < 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank4], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
				    }
				    else if(Player[playerid][PlayingHours] >= 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank5], GetName(playerid), Message);
					    for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}

				    OOCChatLog(string);
			    }
			}
			else if(oocenabled == 0)
			{
			    SendClientMessage(playerid, WHITE, "OOC channel is currently disabled.");
			}
		}
	}
	return 1;
}

command(reports, playerid, params[])
{
	#pragma unused params

	if(Player[playerid][AdminLevel] >= 1)
	{
		new string[128], Count;

		SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, WHITE, "Please use /acceptreport [playerid] to remove it from the list.");

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnectedEx(i) && Player[i][ActiveReport] == 1)
		    {
		        Count++;
		        format(string, sizeof(string), "REPORTER: %s (%d) | REPORT: %s", GetName(i), i, Player[i][ReportText]);
		        SendClientMessage(playerid, GREY, string);
		    }
		}

		format(string, sizeof(string), "There are %d active reports!", Count);
		SendClientMessage(playerid, GREY, string);

		SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	}

	return 1;
}

/*command(harvest, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You already have an active checkpoint. Please reach it, or re-connect.");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 6)
	    {
	        SetPlayerCheckpoint(playerid, Harvest1X, Harvest1Y, Harvest1Z, 10.0);
	    	Player[playerid][Checkpoint] = 1;
	    	Player[playerid][Harvesting] = 1;
	    	SendClientMessage(playerid, WHITE, "There will be 5 checkpoints in total, please reach the first in order to harvest the drugs.");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a Smuggler.");
	    }
	}
	return 1;
}*/

command(olddoor, playerid, params[])
{
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
		GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(LSPDDoor1, Positions[1][0], Positions[1][1], Positions[1][2]);
		GetDynamicObjectPos(LSPDDoor2, Positions[2][0], Positions[2][1], Positions[2][2]);
		GetDynamicObjectPos(LSPDDoor3, Positions[3][0], Positions[3][1], Positions[3][2]);

		if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 10.0)
		{
			if(LSPDDoor1Open == 0)
			{
				format(string, sizeof(string), "* %s unlocks the door before sliding it open.", GetName(playerid));
                NearByMessage(playerid, RPCOLOUR, string);
				MoveDynamicObject(LSPDDoor1, 239.5439453125, 114.099609375, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor4, 239.54446411133, 121.09854125977, 1002.21875, 1);
				LSPDDoor1Open = 1;
			}
			else
			{
				format(string, sizeof(string), "* %s slides the doors shut before locking them.", GetName(playerid));
                NearByMessage(playerid, RPCOLOUR, string);
				MoveDynamicObject(LSPDDoor1, 239.5439453125, 116.099609375, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor4, 239.54446411133, 119.09854125977, 1002.21875, 1);
				LSPDDoor1Open = 0;
			}
		}
		else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[2][0], Positions[2][1], Positions[2][2]) < 10.0)
		{
			if(LSPDDoor2Open == 0)
			{
				format(string, sizeof(string), "* %s unlocks the door before sliding it open.", GetName(playerid));
                NearByMessage(playerid, RPCOLOUR, string);
				MoveDynamicObject(LSPDDoor2, 253.20678710938, 105.55118560791, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor5, 253.2060546875, 112.5517578125, 1002.21875, 1);
				LSPDDoor2Open = 1;
			}
			else
			{
				format(string, sizeof(string), "* %s slides the doors shut before locking them.", GetName(playerid));
                NearByMessage(playerid, RPCOLOUR, string);
				MoveDynamicObject(LSPDDoor2, 253.20678710938, 107.55118560791, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor5, 253.2060546875, 110.5517578125, 1002.21875, 1);
				LSPDDoor2Open = 0;
			}
		}
		else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[3][0], Positions[3][1], Positions[3][2]) < 10.0)
		{
			if(LSPDDoor3Open == 0)
			{
				format(string, sizeof(string), "* %s unlocks the door before sliding it open.", GetName(playerid));
                NearByMessage(playerid, RPCOLOUR, string);
				MoveDynamicObject(LSPDDoor3, 214.35855102539, 116.49627685547, 998.015625, 1);
				MoveDynamicObject(LSPDDoor6, 221.33728027344, 116.49627685547, 998.015625, 1);
				LSPDDoor3Open = 1;
			}
			else
			{
				format(string, sizeof(string), "* %s slides the doors shut before locking them.", GetName(playerid));
                NearByMessage(playerid, RPCOLOUR, string);
				MoveDynamicObject(LSPDDoor3, 216.35855102539, 116.49627685547, 998.015625, 1);
				MoveDynamicObject(LSPDDoor6, 219.33728027344, 116.49627685547, 998.015625, 1);
				LSPDDoor3Open = 0;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not a police officer.");
	}
	return 1;
}

command(groupsafebalance, playerid, params[])
{
	new string[128];
	if(Player[playerid][Group] > 0)
	{
		format(string, sizeof(string), "There is currently $%d in your safe.", Groups[Player[playerid][Group]][SafeMoney]);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "There is currently %d Cocaine in your safe.", Groups[Player[playerid][Group]][SavedCrack]);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "There is currently %d Pot in your safe.", Groups[Player[playerid][Group]][SavedPot]);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "There is currently %d Material(s) in your safe.", Groups[Player[playerid][Group]][SafeMaterials]);
		SendClientMessage(playerid, GREY, string);
	}
	else
	{
		SendClientMessage(playerid, GREY, "You're not in a group!");
	}
}

command(groupsafedeposit, playerid, params[])
{
	new Amount, string[128], Item[128];
	if(sscanf(params, "dz", Amount, Item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /groupsafedeposit [amount] [item]");
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 1)
		{
			format(string, sizeof(string), "There is currently $%d in your safe.", Groups[Player[playerid][Group]][SafeMoney]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Cocaine in your safe.", Groups[Player[playerid][Group]][SavedCrack]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Pot in your safe.", Groups[Player[playerid][Group]][SavedPot]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Material(s) in your safe.", Groups[Player[playerid][Group]][SafeMaterials]);
			SendClientMessage(playerid, GREY, string);
		}
		SendClientMessage(playerid, WHITE, "Items: Money, Pot, Cocaine, Materials");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 1)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
		    {
		        if(strcmp(Item, "money", true) == 0)
		        {
					if(Player[playerid][Money] >= Amount)
					{
				    	Player[playerid][Money] -= Amount;
				    	Groups[Player[playerid][Group]][SafeMoney] += Amount;
				    	format(string, sizeof(string), "You have deposited $%d into your group safe.", Amount);
			    		SendClientMessage(playerid, WHITE, string);
			    		SaveGroup(Player[playerid][Group]);
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your don't have that amount of Money.");
					}
				}
				else if(strcmp(Item, "cocaine", true) == 0)
				{
					if(Player[playerid][Cocaine] >= Amount)
					{
				    	Player[playerid][Cocaine] -= Amount;
				    	Groups[Player[playerid][Group]][SavedCrack] += Amount;
				    	format(string, sizeof(string), "You have deposited %d grams of Cocaine into your group safe.", Amount);
			    		SendClientMessage(playerid, WHITE, string);
			    		SaveGroup(Player[playerid][Group]);
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your don't have that amount of Cocaine.");
					}
				}
				else if(strcmp(Item, "pot", true) == 0)
				{
					if(Player[playerid][Pot] >= Amount)
					{
				    	Player[playerid][Pot] -= Amount;
				    	Groups[Player[playerid][Group]][SavedPot] += Amount;
				    	format(string, sizeof(string), "You have deposited %d grams of Pot into your group safe.", Amount);
			    		SendClientMessage(playerid, WHITE, string);
			    		SaveGroup(Player[playerid][Group]);
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your don't have that amount of Pot.");
					}
				}
				else if(strcmp(Item, "materials", true) == 0)
				{
					if(Player[playerid][Materials] >= Amount)
					{
						Groups[Player[playerid][Group]][SafeMaterials] += Amount;
		                Player[playerid][Materials] -= Amount;
		                format(string, sizeof(string), "You have deposited %d materials in to your group safe.", Amount);
		                SendClientMessage(playerid, WHITE, string);
		                SaveGroup(Player[playerid][Group]);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be at your safe to do this.");
			}
		}
	}
	return 1;
}

command(groupname, playerid, params[])
{
	new Name[128], string[128];
	if(sscanf(params, "z", Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /groupname [new name]");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 9)
		{
		    if(strlen(Name) < 3 || strlen(Name) >= 41)
		    {
		        SendClientMessage(playerid, WHITE, "You must use a name that is above 3 characters, and no longer than 40.");
		    }
		    else
		    {
		        if(strfind(Name, "~", true) || strfind(Name, "=", true))
		        {
		        	format(string, sizeof(string), "You have changed your group name to %s.", Name);
		        	format(Groups[Player[playerid][Group]][GroupName], 255, "%s", Name);
		        	SendClientMessage(playerid, WHITE, string);
		        	SaveGroup(Player[playerid][Group]);
		        }
		        else
		        {
		        	SendClientMessage(playerid, WHITE, "Invalid character! Names can only be alphanumeric.");
		        }
		    }
		}
	}
	return 1;
}

command(givecheck, playerid, params[])
{
	new string[128], id, money;
	if(sscanf(params, "ud", id, money))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /givecheck [playerid] [amount]");
	}
	else
	{
		if(Player[playerid][PlayingHours] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[playerid][BankMoney] >= money)
				{
					if(GetDistanceBetweenPlayers(playerid, id) < 5)
					{
						if(money > 100000)
						{
							SendClientMessage(playerid, WHITE, "You can't give that much. Checks must be between 0 - 100,000");
							return 1;
						}
						if(money <= 0)
						{
							SendClientMessage(playerid, WHITE, "You can't give that less. Checks must be between 0 - 100,000");
							return 1;
						}

						format(string, sizeof(string), "You have given $%s to %s. This has been excluded from your bank balance.", IntToFormattedStr(money), GetName(id));
						SendClientMessage(playerid, WHITE, string);
						Player[playerid][BankMoney] -= money;
						Player[id][CheckBalance] += money;

						format(string, sizeof(string), "You have been given a check for $%s, from %s.", IntToFormattedStr(money), GetName(playerid));
						SendClientMessage(id, WHITE, string);

						format(string, sizeof(string), "[CHECK] %s has given %s to %s.", GetName(playerid), IntToFormattedStr(money), GetName(id));
						MoneyLog(string);

						format(string, sizeof(string), "* %s signs a check and gives it to %s.", GetName(playerid), GetName(id));
						NearByMessage(playerid, PURPLE, string);

						SendClientMessage(id, WHITE, "You must visit the bank and use /redeemcheck to redeem the check balance.");
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You're too far away.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You don't have that much in your bank.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
			}
		}
		else
		{
			SendClientMessage(playerid, YELLOW, "You need to have 2 or more hours to be able to give a check.");
		}
	}
	return 1;
}

command(redeemcheck, playerid, params[])
{
 #pragma unused params
 if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
 {
  if(Player[playerid][BankStatus] == 1)
     {
      SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
     }
     else
     {
         if(Player[playerid][CheckBalance] >= 1)
         {
             new string[128];
             format(string, sizeof(string), "You have redeemed $%s, it has been added to your bank balance.", IntToFormattedStr(Player[playerid][CheckBalance]));
          	SendClientMessage(playerid, WHITE, string);
          	Player[playerid][BankMoney] += Player[playerid][CheckBalance];
       		Player[playerid][CheckBalance] = 0;
         }
         else
         {
             SendClientMessage(playerid, WHITE, "There is no money on your check balance.");
         }
     }
 }
 return 1;
}

command(fdeposit, playerid, params[])
{
	new amount, string[128];
	if(sscanf(params, "d", amount))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /fdeposit [amount]");
	}
	else
	{
		if(Player[playerid][PlayingHours] >= 2)
		{
			if(amount < 1)
			{

			}
			else
			{
				if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
				{
					if(amount > Player[playerid][Money])
					{
						SendClientMessage(playerid, WHITE, "You don't have that much money on you");
					}
					else
					{
						Faction[Player[playerid][FactionID]][fBank] += amount;
						Player[playerid][Money] -= amount;
						format(string, sizeof(string), "You have successfully deposited $%d to your faction's bank account.", amount);
						SendClientMessage(playerid, WHITE, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, YELLOW, "You can't deposit money into a faction bank account with less than 2 hours.");
		}
	}
	return 1;
}

command(bdeposit, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bdeposit [amount]");
	}
	else
	{
		if(Amount < 1)
    	{
	    }
	    else
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	        {
	            if(Player[playerid][BankStatus] == 1)
	            {
	                SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
	            }
	            else
	            {
			        if(Player[playerid][Money] < Amount)
			        {
			            SendClientMessage(playerid, WHITE, "You don't have that much to deposit in to your bank account.");
			        }
			        else
			        {
			            Player[playerid][Money] -= Amount;
			            Player[playerid][BankMoney] += Amount;
			            format(string, sizeof(string), "You have successfully deposited $%d in to your bank account.", Amount);
			            SendClientMessage(playerid, WHITE, string);
			        }
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You have to be at the bank to complete such a transaction.");
	        }
	    }
	}
	return 1;
}

CMD:deletevehicle(playerid)
{
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new query[256], vid;
			vid = GetPlayerVehicleID(playerid);
			for(new i; i < MAX_VEHICLES; i++)
			{
				if(Vehicles[i][GameID] == vid)
				{
					new carid = Vehicles[i][CarID];
					format(query, sizeof(query), "UPDATE vehicles SET CarID=%d WHERE CarID=%d", -1, carid);
					mysql_query(mysql, query);
					DestroyVehicle(GetPlayerVehicleID(playerid));
					SendClientMessage(playerid, WHITE, "You've succesfully deleted a vehicle.");
					break;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "SYNTAX: /deletevehicle (inside of a car");
		}
	}
	return 1;
}

CMD:loans(playerid)
{
	if(Player[playerid][PlayingHours] >= 15)
	{
    	if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
		{
		    ShowPlayerDialog(playerid, 7777, DIALOG_STYLE_LIST, "The LS Bank", "Loan\nCurrent loan\nPay back", "Choose", "Cancel");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need 15+ hours to get a loan.");
	}
	return 1;
}

CMD:buycreditcard(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	{
		if(Player[playerid][BankMoney] >= 350)
	    {
			new string[128];
			Player[playerid][BankMoney] -= 350;
			format(string, sizeof(string), "You have bought a credit card ($350 has been taken from your bank)");
			SendClientMessage(playerid, WHITE, string);
			Player[playerid][CreditCard] = 1;
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need atleast $350 in the bank for a credit card.");
		}
	}
	return 1;
}

CMD:atm(playerid, params[])
{
	for(new i = 0; i < MAX_ATMS; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, ATMs[i][ExteriorX], ATMs[i][ExteriorY], ATMs[i][ExteriorZ]))
		{
			new string[128];
			ShowPlayerDialog(playerid, 2973, DIALOG_STYLE_MSGBOX, "ATM", "When withdrawing/depositing money, there will be a small transaction fee\nYou will be sent to the menu in a couple of seconds.", "Close", "");
			SetTimerEx("ATMDelay", 3000, false, "i", playerid);
			format(string, sizeof(string), "* %s inserts their credit card inside of the ATM", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);
		}
	}
	return 1;
}

command(fwithdraw, playerid, params[])
{
	new amount, string[128];
	if(sscanf(params, "d", amount))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /fwithdraw [amount]");
	}
	else
	{
	    if(amount < 1)
	    {

	    }
	    else
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	        {
	            if(amount > Faction[Player[playerid][FactionID]][fBank])
	            {
	                SendClientMessage(playerid, WHITE, "Your faction does not have that much money in its bank");
	            }
	            else
	            {
	                Player[playerid][Money] += amount;
	                Faction[Player[playerid][FactionID]][fBank] -= amount;
	                format(string, sizeof(string), "You have successfully withdrawn $%d from your faction's bank account.", amount);
	            	SendClientMessage(playerid, WHITE, string);
	            }
	        }
	    }
	}
	return 1;
}

command(bwithdraw, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bwithdraw [amount]");
	}
	else
	{
		if(Amount < 1)
    	{
	    }
	    else
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	        {
	            if(Player[playerid][BankStatus] == 1)
	            {
	                SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
	            }
	            else
	            {
			        if(Amount > Player[playerid][BankMoney])
			        {
			            SendClientMessage(playerid, WHITE, "You don't have that much in your bank account.");
			        }
			        else
			        {
			            Player[playerid][Money] += Amount;
			            Player[playerid][BankMoney] -= Amount;
			            format(string, sizeof(string), "You have successfully withdrawn $%d from your bank account.", Amount);
			            SendClientMessage(playerid, WHITE, string);
			        }
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You have to be at the bank to complete such a transaction.");
	        }
	    }
	}
	return 1;
}

command(hbalance, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][House] >= 0)
	{
		    if(Houses[Player[playerid][House]][VaultMoney] != -1)
		    {
		    	format(string, sizeof(string), "There is currently $%d in your house vault.", Houses[Player[playerid][House]][VaultMoney]);
		    	SendClientMessage(playerid, GREY, string);
		    	format(string, sizeof(string), "There is currently %d grams of Cocaine in your house vault.", Houses[Player[playerid][House]][HouseCocaine]);
		    	SendClientMessage(playerid, GREY, string);
		    	format(string, sizeof(string), "There is currently %d grams of Pot in your house vault.", Houses[Player[playerid][House]][HousePot]);
		    	SendClientMessage(playerid, GREY, string);
		    	format(string, sizeof(string), "There is currently %d Materials in your house vault.", Houses[Player[playerid][House]][HouseMaterials]);
		    	SendClientMessage(playerid, GREY, string);
		    	SaveHouse(Player[playerid][House]);
		    }
	}
	return 1;
}

command(hdeposit, playerid, params[])
{
	new Amount, item[128], string[128];
	if(sscanf(params, "dz", Amount, item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hdeposit [amount] [item]");
		SendClientMessage(playerid, GREY, "Items: Materials, Cocaine, Pot, Money");
	}
	else
	{
	    if(Player[playerid][House] >= 0)
	    {
	        if(Player[playerid][InHouse] == Player[playerid][House])
	        {
		        if(Houses[Player[playerid][House]][VaultMoney] == -1)
		        {
		            SendClientMessage(playerid, WHITE, "You must purchase a house vault (using /buyvault), before you can use it.");
		        }
		        else
		        {
		            if(Amount >= 6000000)
		            {
		                SendClientMessage(playerid, WHITE, "You can't deposit this much.");
		                return 1;
		            }

		            if(strcmp(item, "money", true) == 0)
		            {
		                if(Amount > Player[playerid][Money])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that much money to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][VaultMoney] += Amount;
		                    Player[playerid][Money] -= Amount;
		                    format(string, sizeof(string), "You have deposited $%d in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "materials", true) == 0)
		            {
		                if(Amount > Player[playerid][Materials])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many materials to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseMaterials] += Amount;
		                    Player[playerid][Materials] -= Amount;
		                    format(string, sizeof(string), "You have deposited %d materials in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "cocaine", true) == 0)
		            {
		                if(Amount > Player[playerid][Cocaine])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Cocaine to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseCocaine] += Amount;
		                    Player[playerid][Cocaine] -= Amount;
		                    format(string, sizeof(string), "You have deposited %d grams of Cocaine in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "pot", true) == 0)
		            {
		                if(Amount > Player[playerid][Pot])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Pot to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HousePot] += Amount;
		                    Player[playerid][Pot] -= Amount;
		                    format(string, sizeof(string), "You have deposited %d grams of Pot in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be in your house.");
			}
	    }
	}
	return 1;
}

command(hwithdraw, playerid, params[])
{
	new Amount, item[128], string[128];
	if(sscanf(params, "dz", Amount, item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hwithdraw [amount] [item]");
		SendClientMessage(playerid, GREY, "Items: Materials, Cocaine, Pot, Money");
	}
	else
	{
	    if(Player[playerid][House] >= 0)
	    {
	        if(Player[playerid][InHouse] == Player[playerid][House])
	        {
		        if(Houses[Player[playerid][House]][VaultMoney] == -1)
		        {
		            SendClientMessage(playerid, WHITE, "You must purchase a house vault (using /buyvault), before you can use it.");
		        }
		        else
		        {
		            if(strcmp(item, "money", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][VaultMoney] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that much money to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][VaultMoney] -= Amount;
		                    Player[playerid][Money] += Amount;
		                    format(string, sizeof(string), "You have withdrawn $%d from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "materials", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][HouseMaterials] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many materials to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseMaterials] -= Amount;
		                    Player[playerid][Materials] += Amount;
		                    format(string, sizeof(string), "You have withdrawn %d materials from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "cocaine", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][HouseCocaine] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Cocaine to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseCocaine] -= Amount;
		                    Player[playerid][Cocaine] += Amount;
		                    format(string, sizeof(string), "You have withdrawn %d grams of Cocaine from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "pot", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][HousePot] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Pot to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HousePot] -= Amount;
		                    Player[playerid][Pot] += Amount;
		                    format(string, sizeof(string), "You have withdraw %d grams of Pot from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be in your house.");
			}
	    }
	}
	return 1;
}

command(groupsafewithdraw, playerid, params[])
{
	new Amount, string[128], Item[128];
	if(sscanf(params, "dz", Amount, Item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /groupsafewithdraw [amount] [item]");
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 9)
		{
			format(string, sizeof(string), "There is currently $%d in your safe.", Groups[Player[playerid][Group]][SafeMoney]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Cocaine in your safe.", Groups[Player[playerid][Group]][SavedCrack]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d pot in your safe.", Groups[Player[playerid][Group]][SavedPot]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Material(s) in your safe.", Groups[Player[playerid][Group]][SafeMaterials]);
			SendClientMessage(playerid, GREY, string);
		}
		SendClientMessage(playerid, WHITE, "Items: Money, Pot, Cocaine, Materials");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 9)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
		    {
		        if(strcmp(Item, "money", true) == 0)
		        {
					if(Groups[Player[playerid][Group]][SafeMoney] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Money] += Amount;
				    		Groups[Player[playerid][Group]][SafeMoney] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn $%d from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of money.");
					}
				}
				else if(strcmp(Item, "pot", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedPot] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Pot] += Amount;
				    		Groups[Player[playerid][Group]][SavedPot] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn %d grams of Pot from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Pot.");
					}
				}
				else if(strcmp(Item, "Cocaine", true) == 0)
		        {
					if(Groups[Player[playerid][Group]][SavedCrack] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Cocaine] += Amount;
				    		Groups[Player[playerid][Group]][SavedCrack] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn %d grams of Cocaine from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Crack.");
					}
		        }
				else if(strcmp(Item, "Materials", true) == 0)
		        {
					if(Groups[Player[playerid][Group]][SafeMaterials] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Materials] += Amount;
				    		Groups[Player[playerid][Group]][SafeMaterials] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn %d Materials from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of materials.");
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be at your safe to do this.");
			}
		}
	}
	return 1;
}

command(afk, playerid, params[])
{
	#pragma unused params
    new string[128];
    if(Player[playerid][AdminLevel] >= 1)
    {
	    if(Player[playerid][AFKStat] == 1)
	    {
			format(string, sizeof(string), "%s has been set to 'Available' (used /afk to resume gameplay)", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
	        Player[playerid][AFKStat] = 0;
	        SendClientMessage(playerid, WHITE, "Your status has been set back to 'Available'.");
	    }
	    else
	    {
			format(string, sizeof(string), "%s has been set to 'AFK' (using /afk).", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
	        Player[playerid][AFKStat] = 1;
	        SendClientMessage(playerid, WHITE, "You have set your status to AFK.");
	    }
    }
	return 1;
}

command(quitgroup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1)
	{
	    new string[128];
	    format(string, sizeof(string), "%s has left the group (quit).", GetName(playerid));
	    GroupMessage(playerid, ANNOUNCEMENT, string);
	    format(string, sizeof(string), "You have quit %s.", Groups[Player[playerid][Group]][GroupName]);
	    SendClientMessage(playerid, WHITE, string);
	    Player[playerid][Group] = 0;
	    Player[playerid][GroupRank] = 0;
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have a group to quit.");
	}
	return 1;
}

command(sms, playerid, params[])
{
	new number, string[128], message[128], string2[255], string3[255];
	if(sscanf(params, "dz", number, message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /sms [number] [message]");
	}
	else
	{
	    if(Player[playerid][PhoneN] == number || Player[playerid][PhoneN] == -1)
	    {
	        SendClientMessage(playerid, WHITE, "You either don't have a phone, OR you're attempting to call yourself.");
	    }
		else
		{

            if(Player[playerid][PhoneStat] == 1)
            {
		        for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnectedEx(i))
					{
					    if(Player[i][PhoneN] == number && number != -1)
					    {
					        if(strlen(message) >= 1)
					        {
					            if(Player[i][PhoneStat] == 1)
					            {
									format(string2, sizeof(string2), "* %s presses some buttons on his phone, sending a message.", GetName(playerid));
									format(string, sizeof(string), "SMS to %d: %s", number, message);
									NearByMessage(playerid, PURPLE, string2);
						            SendClientMessage(playerid, GREY, string);
						            format(string, sizeof(string), "SMS from %d: %s", Player[playerid][PhoneN], message);

                           			for(new j = 0; j < MAX_PLAYERS; j++)
			                        {
			                            if(j == i)
			                            {
											SendClientMessage(j, GREY, string);
											format(string3, sizeof(string3), "* %s's phone would buzz a couple of times.", GetName(j));
										}
									}
						            Player[playerid][BankMoney] -= 1;
					            }
					            else
					            {
					                SendClientMessage(playerid, WHITE, "That person's phone is offline.");
					            }
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "SYNTAX: /sms [number] [message]");
					        }
					    }
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You must switch your phone online (/togphone)");
			}
		}
	}
	return 1;
}

command(accent, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /accent [ID]");
		SendClientMessage(playerid, WHITE, "Accents: 1 - American | 2 - British | 3 - Irish | 4 - Chinese | 5 - Southern");
		SendClientMessage(playerid, WHITE, "Accents: 6 - Spanish | 7 - Gangster | 8 - Japanese | 9 - Afro-American | 10 - French");
		SendClientMessage(playerid, WHITE, "Accents: 11 - Italian | 12 - Norwegian | 13 - Dutch | 14 - Polish | 15 - Russian | 16 - Mongolian");
	}
	else
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
		    switch(id)
		    {
		        case 1:
				{
					format(Player[playerid][Accent], 128, "American");
		        	SendClientMessage(playerid, WHITE, "You are now taking in the American accent!");
		        }
		        case 2:
		        {
		            format(Player[playerid][Accent], 128, "British");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the British accent!");
		        }
		        case 3:
		        {
		            format(Player[playerid][Accent], 128, "Irish");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Irish accent!");
		        }
		        case 4:
		        {
		            format(Player[playerid][Accent], 128, "Chinese");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Chinese accent!");
		        }
		        case 5:
		        {
		            format(Player[playerid][Accent], 128, "Southern");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Southern accent!");
		        }
		        case 6:
		        {
		            format(Player[playerid][Accent], 128, "Spanish");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Spanish accent!");
		        }
		        case 7:
		        {
		            format(Player[playerid][Accent], 128, "Gangster");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Gangster accent!");
		        }
		        case 8:
		        {
		            format(Player[playerid][Accent], 128, "Japanese");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Japanese accent!");
		        }
		        case 9:
		        {
		            format(Player[playerid][Accent], 128, "Afro-American");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Afro-American accent!");
		        }
		        case 10:
		        {
		            format(Player[playerid][Accent], 128, "French");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the French accent!");
		        }
		        case 11:
		        {
		            format(Player[playerid][Accent], 128, "Italian");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Italian accent!");
		        }
		        case 12:
		        {
		            format(Player[playerid][Accent], 128, "Norwegian");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Norwegian accent!");
		        }
		        case 13:
		        {
		            format(Player[playerid][Accent], 128, "Dutch");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Dutch accent!");
		        }
		        case 14:
		        {
		            format(Player[playerid][Accent], 128, "Polish");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Polish accent!");
		        }
		        case 15:
		        {
		            format(Player[playerid][Accent], 128, "Russian");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Russian accent!");
		        }
				case 16:
				{
					format(Player[playerid][Accent], 128, "Mongolian");
		        	SendClientMessage(playerid, WHITE, "You are now talking in the Mongolian accent!");
				}
		    }
	  	}
	}
	return 1;
}

command(forceaccent, playerid, params[])
{
	new accent[128], id, string[128];
	if(sscanf(params, "uz", id, accent))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /forceaccent [playerid] [accent]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        if(strlen(accent) >= 1 && strlen(accent) < 15)
		        {
					format(Player[id][Accent], 128, "%s", accent);
					format(string, sizeof(string), "You have forced %s to speak in the %s accent.", GetName(id), accent);
					SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "An accent is more than 15 characters, or less than 1.");
		        }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player isn't connected, or is not logged in.");
			}
	    }
	}
	return 1;
}

command(togglevip, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 3)
	{
		if(VIPEnabled == 1)
		{
			VIPEnabled = 0;
			SendClientMessage(playerid, RED, "You have disabled VIP chat.");
		}
		else
		{
			VIPEnabled = 1;
			SendClientMessage(playerid, GREEN, "You have enabled VIP chat.");
		}
	}
	else
	{
		SendClientMessage(playerid, RED, "You are not an admin!");
	}
	return 1;
}

command(vip, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(v)ip [message]");
	}
	if(VIPEnabled == 0)
	{
		SendClientMessage(playerid, RED, "VIP chat is disabled.");
	}
	else
	{
	    if(Player[playerid][VipRank] >= 1)
	    {
	        if(strlen(message) < 1)
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /(v)ip [message]");
	        }
	        else  //vchat = E6D300
	        {
				if(Player[playerid][VipRank] == 1)
				{
					format(string, sizeof(string), "[{F7E300}V{E6D300}] {CD9932}%s{E6D300} says (%d): %s", GetName(playerid), Player[playerid][VipRank], message);
				}
				if(Player[playerid][VipRank] == 2)
				{
					format(string, sizeof(string), "[{F7E300}V{E6D300}] {C0C0C0}%s{E6D300} says (%d): %s", GetName(playerid), Player[playerid][VipRank], message);
				}
				if(Player[playerid][VipRank] == 3)
				{
					format(string, sizeof(string), "[{F7E300}V{E6D300}] {EDC800}%s{E6D300} says (%d): %s", GetName(playerid), Player[playerid][VipRank], message);
				}
				if(Player[playerid][VipRank] == 4)
				{
					format(string, sizeof(string), "[{F7E300}V{E6D300}] {00C4DE}%s{E6D300} says (%d): %s", GetName(playerid), Player[playerid][VipRank], message);
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i) && Player[i][VipRank] >= 1 && Player[i][ToggedVIP] == 0)
		            {
		                SendClientMessage(i, VCHAT, string);
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(v, playerid, params[])
{
	return cmd_vip(playerid, params);
}

command(adminvehicle, playerid, params[])
{
	new vehid = GetPlayerVehicleID(playerid);
	if(Player[playerid][AdminLevel] < 5)
	{
		SendClientMessage(playerid, -1, "You are not a high enough admin level!");
	}
	else
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, -1, "You're not in a vehicle!");
		}
		else
		{
			Player[playerid][CarBeingCarried] = GetVehicleModel(vehid);
			Player[playerid][CarPriceBeingCarried] = 0;
			PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 3);
		}
	}
	return 1;
}

command(buyvehicle, playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] == 6)
	{
	    if(Player[playerid][VipRank] >= 1)
	    {
	        ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Special Deals\nLow-Riders\nSaloon Cars\n4x4 / Off-Roaders / Pickups\nBikes\nSports, Muscle and Supercars\nImports\nSpecialised vehicles\nVans\nVIP Models", "Select", "Cancel");
	    }
	    else
	    {
	    	ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Special Deals\nLow-Riders\nSaloon Cars\n4x4 / Off-Roaders / Pickups\nBikes\nSports, Muscle and Supercars\nImports\nSpecialised vehicles\nVans", "Select", "Cancel");
		}
	}
	return 1;
}

command(abandoncar, playerid, params[])
{
	new vehslot;
	if(sscanf(params, "d", vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /abandoncar [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
				if(Player[playerid][PlayerCarModel] > 0)
				{
				    Player[playerid][PlayerCarModel] = 0;

					Player[playerid][OwnedCarModSlot0] = 0;
					Player[playerid][OwnedCarModSlot1] = 0;
					Player[playerid][OwnedCarModSlot2] = 0;
					Player[playerid][OwnedCarModSlot3] = 0;
					Player[playerid][OwnedCarModSlot4] = 0;
					Player[playerid][OwnedCarModSlot5] = 0;
					Player[playerid][OwnedCarModSlot6] = 0;
					Player[playerid][OwnedCarModSlot7] = 0;
					Player[playerid][OwnedCarModSlot8] = 0;
					Player[playerid][OwnedCarModSlot9] = 0;
					Player[playerid][OwnedCarModSlot10] = 0;
					Player[playerid][OwnedCarModSlot11] = 0;
					Player[playerid][OwnedCarModSlot12] = 0;
					Player[playerid][OwnedCarModSlot13] = 0;
                    format(Player[playerid][Car1Plate], 255, "0");
                    Player[playerid][v1NOS] = 0;
                    Player[playerid][v1NOSFUEL] = 0;
                    Player[playerid][V1TURBO] = 0;
                    Player[playerid][v1ENGINE] = 0;


				    if(Player[playerid][CarLinkID] != 0)
				    {
				        DestroyVehicle(Player[playerid][CarLinkID]);
				        OwnedCarCount--;
				        CarCount--;
				    }

				    SendClientMessage(playerid, WHITE, "You have abandoned your vehicle (slot 1).");
				    if(Player[playerid][FindingCar] == 1)
				    {
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][FindingCar] = 0;
				        Player[playerid][Checkpoint] = 0;
				        SendClientMessage(playerid, GREY, "Your checkpoint has been cleared.");
				    }

				    Player[playerid][CarLinkID] = 0;
				}
			}
			case 2:
			{
				if(Player[playerid][PlayerCarModel2] > 0)
				{
				    Player[playerid][PlayerCarModel2] = 0;

					Player[playerid][Car2OwnedCarModSlot0] = 0;
					Player[playerid][Car2OwnedCarModSlot1] = 0;
					Player[playerid][Car2OwnedCarModSlot2] = 0;
					Player[playerid][Car2OwnedCarModSlot3] = 0;
					Player[playerid][Car2OwnedCarModSlot4] = 0;
					Player[playerid][Car2OwnedCarModSlot5] = 0;
					Player[playerid][Car2OwnedCarModSlot6] = 0;
					Player[playerid][Car2OwnedCarModSlot7] = 0;
					Player[playerid][Car2OwnedCarModSlot8] = 0;
					Player[playerid][Car2OwnedCarModSlot9] = 0;
					Player[playerid][Car2OwnedCarModSlot10] = 0;
					Player[playerid][Car2OwnedCarModSlot11] = 0;
					Player[playerid][Car2OwnedCarModSlot12] = 0;
					Player[playerid][Car2OwnedCarModSlot13] = 0;
					Player[playerid][v2NOS] = 0;
                    Player[playerid][v2NOSFUEL] = 0;
                    Player[playerid][v2TURBO] = 0;
                    Player[playerid][v2ENGINE] = 0;

				    if(Player[playerid][Car2LinkID] != 0)
				    {
				        DestroyVehicle(Player[playerid][Car2LinkID]);
				        OwnedCarCount--;
				        CarCount--;
				    }

				    SendClientMessage(playerid, WHITE, "You have abandoned your vehicle (slot 2).");

				    if(Player[playerid][FindingCar] == 1)
				    {
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][FindingCar] = 0;
				        Player[playerid][Checkpoint] = 0;
				        SendClientMessage(playerid, GREY, "Your checkpoint has been cleared.");
				    }

				    Player[playerid][Car2LinkID] = 0;
				}
			}
			case 3:
			{
				if(Player[playerid][PlayerCarModel3] > 0)
				{
				    Player[playerid][PlayerCarModel3] = 0;

					Player[playerid][Car3OwnedCarModSlot0] = 0;
					Player[playerid][Car3OwnedCarModSlot1] = 0;
					Player[playerid][Car3OwnedCarModSlot2] = 0;
					Player[playerid][Car3OwnedCarModSlot3] = 0;
					Player[playerid][Car3OwnedCarModSlot4] = 0;
					Player[playerid][Car3OwnedCarModSlot5] = 0;
					Player[playerid][Car3OwnedCarModSlot6] = 0;
					Player[playerid][Car3OwnedCarModSlot7] = 0;
					Player[playerid][Car3OwnedCarModSlot8] = 0;
					Player[playerid][Car3OwnedCarModSlot9] = 0;
					Player[playerid][Car3OwnedCarModSlot10] = 0;
					Player[playerid][Car3OwnedCarModSlot11] = 0;
					Player[playerid][Car3OwnedCarModSlot12] = 0;
					Player[playerid][Car3OwnedCarModSlot13] = 0;
					Player[playerid][v3NOS] = 0;
                    Player[playerid][v3NOSFUEL] = 0;
                    Player[playerid][v3TURBO] = 0;
                    Player[playerid][v3ENGINE] = 0;

				    if(Player[playerid][Car3LinkID] != 0)
				    {
				        DestroyVehicle(Player[playerid][Car3LinkID]);
				        OwnedCarCount--;
				        CarCount--;
				    }

				    SendClientMessage(playerid, WHITE, "You have abandoned your vehicle (slot 3).");

				    if(Player[playerid][FindingCar] == 1)
				    {
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][FindingCar] = 0;
				        Player[playerid][Checkpoint] = 0;
				        SendClientMessage(playerid, GREY, "Your checkpoint has been cleared.");
				    }

				    Player[playerid][Car3LinkID] = 0;
				}
			}
		}
	}
	return 1;
}

command(ticket, playerid, params[])
{
	new price, id, string[128];
	if(sscanf(params, "ud", id, price))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ticket [playerid] [price]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 7)
	        {
	            if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	            {
	                format(string, sizeof(string), "* %s writes out a ticket and hands it to %s.", GetName(playerid), GetName(id));
	                NearByMessage(playerid, RPCOLOUR, string);
	                format(string, sizeof(string), "You have written a ticket to %s, for $%d.", GetName(id), price);
	                SendClientMessage(playerid, WHITE, string);
	                format(string, sizeof(string), "You have been written a ticket, from LEO %s, the price is $%d. type /approve copticket to accept the ticket", GetName(playerid), price);
	                SendClientMessage(id, ANNOUNCEMENT, string);
	                Player[playerid][TicketPrice] = price;
	                Player[playerid][Ticketing] = id;
	                Player[id][BeingTicketed] = playerid;
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're not a LEO.");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're too far away.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

/*command(track, playerid, params[])
{
	new number, id, string[128];
	if(sscanf(params, "d", number))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /track [number]");
	}
	else
	{
		if(Player[playerid][PhoneN] == number || Player[playerid][PhoneN] == -1)
		{
			SendClientMessage(playerid, WHITE, "You don't have a phone, or you're tracking yourself!");
		}
		else
		{
			if(Player[playerid][Group] == 1)
			{

				Player[playerid][AttendingBackupCall] = id;
				Player[playerid][Checkpoint] = 1;
				format(string, sizeof(string), "You are now attending the call of %s!", GetName(id));
				SendClientMessage(playerid, WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You're not in the PD!");
			}
		}
	}
	return 1;
}*/

command(call, playerid, params[])
{
	new number, string[128];
	if(sscanf(params, "d", number))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /call [number]");
	}
	else
	{
	    if(Player[playerid][PhoneN] == number || Player[playerid][PhoneN] == -1)
	    {
	        SendClientMessage(playerid, WHITE, "You either don't have a phone, OR you're attempting to call yourself.");
	    }
	    else
	    {
	        if(Player[playerid][PhoneStat] == 1)
	        {
		        if(Player[playerid][CellphoneConsole] == -1)
		        {
			        if(number == 911)
			        {
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			            Player[playerid][CellphoneConsole] = 911;
			            SendClientMessage(playerid, WHITE, "You've called Emergency services, please select the department you desire (i.e: RCSD, RCFMD)");
			        }
			        else
			        {
			            if(number != -1)
			            {
					        for(new i = 0; i < MAX_PLAYERS; i++)
							{
								if(IsPlayerConnectedEx(i))
								{
								    if(Player[i][PhoneN] == number)
								    {
								        if(Player[i][PhoneStat] == 1)
								        {
											if(Player[i][InCall] == 0)
											{
												Player[playerid][Calling] = i;
												Player[i][BeingCalled] = playerid;
												format(string, sizeof(string), "* %s takes out their cellphone, and presses '%d'", GetName(playerid), Player[i][PhoneN]);
												NearByMessage(playerid, RPCOLOUR, string);
												format(string, sizeof(string), "* %s's cellphone starts to ring because of %d calling.", GetName(i), Player[playerid][PhoneN]);
												NearByMessage(i, PURPLE, string);

												if(IsPlayerInAnyVehicle(i))
												{
													TextDrawShowForPlayer(i, CellPhoneTextDrawInVehicle);
												}
												else
												{
													TextDrawShowForPlayer(i, CellPhoneTextDraw);
												}

												Player[i][CallConnectingTime] = 1;

												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

												SendClientMessage(playerid, WHITE, "You can use the 'T' chat to proceed to talk.");
												Player[playerid][InCall] = 1;
												Player[i][InCall] = 1;
											}
											else
											{
												SendClientMessage(playerid, GREY, "That player is in a call!");
											}
								    	}
								    	else
								    	{
								    	    SendClientMessage(playerid, WHITE, "That person's phone is offline.");
								    	}
								    }
								}
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid number.");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You are currently in a call.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You must switch your phone online (/togphone).");
			}
		}
	}
	return 1;
}

command(setcarcolour, playerid, params[])
{
	new col1, col2;
	if(sscanf(params, "dd", col1, col2))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /setcarcolour [colour1] [colour2]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			//new id = vehicleid;
			if(IsPlayerInAnyVehicle(playerid))
			{
				Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarColour1] = col1;
				Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarColour2] = col2;
				ChangeVehicleColor(Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][GameID], Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarColour1], Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarColour2]);
				SaveExistingVehicle(Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarID]);				
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You're not in a vehicle.");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "This isn't a saved vehicle.");
		}
	}
	return 1;
}

/*command(movecar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = vehicleid;
		if(IsPlayerInAnyVehicle(playerid))
		{
			GetVehiclePos(vehicleid, Vehicles[id][CarPosX], Vehicles[id][CarPosY], Vehicles[id][CarPosZ]);
			GetVehicleZAngle(vehicleid, Vehicles[id][CarZAngle]);
			SaveExistingVehicle(vehicleid);
			DestroyVehicle(vehicleid);
			Vehicles[id][GameID] = CreateVehicle(Vehicles[id][CarModel], Vehicles[id][CarPosX], Vehicles[id][CarPosY], Vehicles[id][CarPosZ], Vehicles[id][CarZAngle], Vehicles[id][CarColour1], Vehicles[id][CarColour2], 3600);
			PutPlayerInVehicle(playerid, Vehicles[id][GameID], 0);
		}
	}
	return 1;
}*/

command(savecar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
		if(UnconfirmedSave[playerid] == 0)
		{
		    SendClientMessage(playerid, WHITE, "Are you sure you want to save this vehicle? Please re-type this command to confirm this action.");
		    UnconfirmedSave[playerid] = 1;
		}
		else
		{
			if(Vehicles[CarCount][GameID] == 0)
			{
				GetVehiclePos(GetPlayerVehicleID(playerid), Vehicles[CarCount][CarPosX], Vehicles[CarCount][CarPosY], Vehicles[CarCount][CarPosZ]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), Vehicles[CarCount][CarZAngle]);

				Vehicles[CarCount][CarModel] = GetVehicleModel(GetPlayerVehicleID(playerid));
				Vehicles[CarCount][CarGroup] = 0;

				Vehicles[CarCount][CarColour1] = -1;
				Vehicles[CarCount][CarColour2] = -1;
				Vehicles[CarCount][CarID] = CarCount;
				UnconfirmedSave[playerid] = 0;
				new query[128];
				mysql_format(mysql, query, sizeof(query), "INSERT INTO vehicles (CarID) VALUES (%d)", CarCount);
				mysql_query(mysql, query);
				SaveExistingVehicle(CarCount);

				DestroyVehicle(GetPlayerVehicleID(playerid));
				Vehicles[CarCount][GameID] = CreateVehicle(Vehicles[CarCount][CarModel], Vehicles[CarCount][CarPosX], Vehicles[CarCount][CarPosY], Vehicles[CarCount][CarPosZ], Vehicles[CarCount][CarZAngle], Vehicles[CarCount][CarColour1], Vehicles[CarCount][CarColour2], 3600);
				PutPlayerInVehicle(playerid, Vehicles[CarCount][GameID], 0);

				SendClientMessage(playerid, WHITE, "Do NOT despawn this vehicle.");

				CarCount++;
			}
			else
			{
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(Vehicles[i][GameID] == 0)
					{
						GetVehiclePos(GetPlayerVehicleID(playerid), Vehicles[i][CarPosX], Vehicles[i][CarPosY], Vehicles[i][CarPosZ]);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), Vehicles[i][CarZAngle]);

						Vehicles[i][CarModel] = GetVehicleModel(GetPlayerVehicleID(playerid));
						Vehicles[i][CarGroup] = 0;

						Vehicles[i][CarColour1] = -1;
						Vehicles[i][CarColour2] = -1;
						Vehicles[i][CarID] = i;
						UnconfirmedSave[playerid] = 0;
						new query[128];
						mysql_format(mysql, query, sizeof(query), "INSERT INTO vehicles (CarID) VALUES (%d)", CarCount);
						mysql_query(mysql, query);
						SaveExistingVehicle(CarCount);

						DestroyVehicle(GetPlayerVehicleID(playerid));
						Vehicles[i][GameID] = CreateVehicle(Vehicles[i][CarModel], Vehicles[i][CarPosX], Vehicles[i][CarPosY], Vehicles[i][CarPosZ], Vehicles[i][CarZAngle], Vehicles[i][CarColour1], Vehicles[i][CarColour2], -1);
						PutPlayerInVehicle(playerid, Vehicles[i][GameID], 0);

						SendClientMessage(playerid, WHITE, "Do NOT despawn this vehicle.");
						
						CarCount++;
						break;
					}
				}
			}
		}
	}
	return 1;
}

command(buyvault, playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, WHITE, "Please type /buyvault confirm, to confirm. The price is $5000.");
	}
	else
	{
	    if(strcmp(params, "confirm", true) == 0)
	    {
	        if(Player[playerid][House] >= 1)
	        {
	        	if(Player[playerid][Money] >= 5000)
	        	{
	        	    Player[playerid][Money] -= 5000;
	            	Houses[Player[playerid][House]][VaultMoney] = 0;
	            	SendClientMessage(playerid, WHITE, "You have successfully purchased a house vault! It has been installed and you have been charged $5000.");
	        	}
	        	else
	        	{
	            	SendClientMessage(playerid, WHITE, "You do not have enough money to complete this transacation.");
	        	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You need a house to purchase a vault for.");
	        }
	    }
	}
	return 1;
}

command(bswithdraw, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bswithdraw [amount]");
		if(Player[playerid][Business] >= 0)
		{
		    if(Businesses[Player[playerid][Business]][bVault] != -1)
		    {
		    	format(string, sizeof(string), "There is currently $%d in your business vault.", Businesses[Player[playerid][Business]][bVault]);
		    	SendClientMessage(playerid, GREY, string);
		    }
		}
	}
	else
	{
	    if(Player[playerid][Business] >= 0)
	    {
            if(Amount < 1)
            {
                SendClientMessage(playerid, WHITE, "Invalid amount.");
            }
            else
            {
                if(Businesses[Player[playerid][Business]][bVault] >= Amount)
                {
                    if(Player[playerid][InBusiness] == Player[playerid][Business])
                    {
	                    Player[playerid][Money] += Amount;
	                    Businesses[Player[playerid][Business]][bVault] -= Amount;
	                    format(string, sizeof(string), "You have withdrawn $%d from your business vault.", Amount);
	                    SendClientMessage(playerid, WHITE, string);
                    }
                    else
                    {
                        SendClientMessage(playerid, WHITE, "You're not at your business.");
                    }
                }
                else
                {
                    SendClientMessage(playerid, WHITE, "You don't have enough cash to complete this transaction.");
                }
            }
        }
    }
	return 1;
}

command(bsdeposit, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bsdeposit [amount]");
		if(Player[playerid][Business] >= 0)
		{
		    if(Businesses[Player[playerid][Business]][bVault] != -1)
		    {
		    	format(string, sizeof(string), "There is currently $%d in your business vault.", Businesses[Player[playerid][Business]][bVault]);
		    	SendClientMessage(playerid, GREY, string);
		    }
		}
	}
	else
	{
	    if(Player[playerid][Business] >= 0)
	    {
            if(Amount < 1)
            {
                SendClientMessage(playerid, WHITE, "Invalid amount.");
            }
            else
            {
                if(Player[playerid][Money] >= Amount)
                {
                    if(Player[playerid][InBusiness] == Player[playerid][Business])
                    {
	                    Player[playerid][Money] -= Amount;
	                    Businesses[Player[playerid][Business]][bVault] += Amount;
	                    format(string, sizeof(string), "You have deposited $%d in to your business vault.", Amount);
	                    SendClientMessage(playerid, WHITE, string);
                    }
                    else
                    {
                        SendClientMessage(playerid, WHITE, "You're not at your business.");
                    }
                }
                else
                {
                    SendClientMessage(playerid, WHITE, "You don't have enough cash to complete this transaction.");
                }
            }
        }
    }
	return 1;
}

command(buyboat, playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, BoatShopX, BoatShopY, BoatShopZ))
	{
	    if(Player[playerid][VipRank] >= 1)
	    {
			ShowPlayerDialog(playerid,5674,DIALOG_STYLE_LIST ,"Choose a boat!","Dinghy - $13,500\nReefer - $90,000\nSpeeder - $235,000\nTropic - $175,000","Buy","Cancel");
		}
		else
		{
		    ShowPlayerDialog(playerid,5674,DIALOG_STYLE_LIST ,"Choose a boat!","Dinghy - $13,500\nReefer - $90,000\nSpeeder - $235,000\n","Buy","Cancel");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not in the correct place to buy a boat!");
	}
}

command(entervehicle, playerid, params[])
{
	new tpvehid;
	if(Player[playerid][AdminLevel] > 0)
	{
		if(sscanf(params, "d", tpvehid))
		{
			SendClientMessage(playerid, WHITE, "SYNTAX: /entervehicle [ID]");
		}
			else
			{
				PutPlayerInVehicle(playerid, tpvehid, 0);
			}

	}
}

command(help, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InBusiness] >= 1)
	{
		ShowPlayerDialog(playerid, 3260, DIALOG_STYLE_LIST, "Help Menu", "Commands\nAdministrators\nRules\nFrequently Asked Questions\nCommands For This Business", "Select", "Cancel");
	}
	else
	{
		ShowPlayerDialog(playerid, 3260, DIALOG_STYLE_LIST, "Help Menu", "Commands\nAdministrators\nRules\nFrequently Asked Questions\n", "Select", "Cancel");
	}
	return 1;
}

/*command(streamradio, playerid, params[])
{
	ShowPlayerDialog(playerid,6785,DIALOG_STYLE_LIST ,"Choose a Station","The Eagle (Classic Rock)\nTop 40\nIrish Pub Radio\nParty Vibe Radio (Dubstep + Rap)","Play","Cancel");
	return 1;
}

command(sr, playerid, params[])
{
	ShowPlayerDialog(playerid,6785,DIALOG_STYLE_LIST ,"Choose a Station","The Eagle (Classic Rock)\nTop 40\nIrish Pub Radio\nParty Vibe Radio (Dubstep + Rap)","Play","Cancel");
	return 1;
}

command(stopradio, playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	SendClientMessage(playerid, WHITE, "You have stopped the radio! Use /streamradio or /sr to turn it back on!");
	return 1;
}*/

command(invite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /invite [playerid]");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 7 && Player[playerid][Group] == 1)
		{
		    if(IsPlayerConnectedEx(id) || id != playerid)
	    	{
   				Player[id][PendingInvite] = Player[playerid][Group];
	    		format(string, sizeof(string), "You have been invited to join %s, by %s (type /approve groupinvite to join the group). ", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
	    		SendClientMessage(id, ANNOUNCEMENT, string);
	    		format(string, sizeof(string), "You have invited %s to join your group.", GetName(id));
	    		SendClientMessage(playerid, ANNOUNCEMENT, string);
	    	}
	    	else
	    	{
	    		SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	    	}
	    }
		else if(Player[playerid][GroupRank] >= 9 && Player[playerid][Group] >= 5)
		{
		    if(IsPlayerConnectedEx(id) || id != playerid)
	    	{
   				Player[id][PendingInvite] = Player[playerid][Group];
	    		format(string, sizeof(string), "You have been invited to join %s, by %s (type /approve groupinvite to join the group). ", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
	    		SendClientMessage(id, ANNOUNCEMENT, string);
	    		format(string, sizeof(string), "You have invited %s to join your group.", GetName(id));
	    		SendClientMessage(playerid, ANNOUNCEMENT, string);
	    	}
	    	else
	    	{
	    		SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	    	}
	    }
	}
	return 1;
}

command(togphone, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PhoneN] != -1)
	{
		if(Player[playerid][PhoneStat] == 1)
		{
		    Player[playerid][PhoneStat] = 0;
		    SendClientMessage(playerid, WHITE, "Your phone is now offline.");
		}
		else
		{
		    Player[playerid][PhoneStat] = 1;
		    SendClientMessage(playerid, WHITE, "Your phone is now online.");
		}
	}
	return 1;
}

command(pay, playerid, params[])
{
	new id, plmoney, string[128];
	if(sscanf(params, "ud", id, plmoney))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /pay [playerid] [amount]");
	}
	else
	{	if(Player[playerid][PlayingHours] >= 2)
		{
			if(Player[playerid][Money] >= plmoney)
			{
				if(IsPlayerConnectedEx(id) || id != playerid)
				{
					if(Spectator[id][SpecSpectatingPlayer] != -1)
					{
						SendClientMessage(playerid, WHITE, "You're too far away.");
					}
					else
					{
						if(plmoney > 0 && plmoney < 500000)
						{
							if(GetDistanceBetweenPlayers(playerid, id) < 5)
							{
								Player[playerid][Money] -= plmoney;
								Player[id][Money] += plmoney;
								format(string, sizeof(string), "You have paid $%s to %s.", IntToFormattedStr(plmoney), GetName(id));
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has paid %s some money.", GetName(playerid), GetName(id), IntToFormattedStr(plmoney));
								NearByMessage(id, PURPLE, string);
								new tmpip1[128], tmpip2[128];
								GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
								GetPlayerIp(id, tmpip2, sizeof(tmpip2));
								new hour, minute, second, day, year, month;
								gettime(hour, minute, second);
								getdate(year, month, day);
								format(string, sizeof(string), "[PAY] %s (IP: %s) has paid %s (IP: %s) $%s on %d/%d/%d (%d:%d:%d)", GetName(playerid), tmpip1, GetName(id), tmpip2, IntToFormattedStr(plmoney), day, month, year, hour, minute, second);
								MoneyLog(string);
								format(string, sizeof(string), "You have been paid $%s, by %s.", IntToFormattedStr(plmoney), GetName(playerid));
								SendClientMessage(id, WHITE, string);

								if(Player[playerid][PlayingHours] <= 5 && plmoney >= 999 && Player[playerid][AdminLevel] < 1)
								{
									format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've given $%s to %s (w/ 0 playing hours)", GetName(playerid), IntToFormattedStr(plmoney), GetName(id));
									SendToAdmins(ADMINORANGE, string, 0);
								}
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You're too far away.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You can't pay under $1, or over $500,000.");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
				}
			}
		}
		else {
			SendClientMessage(playerid, YELLOW, "You need to have played for 2 hours or more to pay money.");
		}
	}
	return 1;
}

command(uninvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /uninvite [playerid]");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 7 && Player[playerid][Group] == 1)
		{
	    	if(IsPlayerConnectedEx(id) || id != playerid)
	    	{
	    	    if(Player[id][Group] == Player[playerid][Group])
	    	    {
	    	        if(Player[playerid][GroupRank] > Player[id][GroupRank])
	    	        {
		    	        format(string, sizeof(string), "%s has left the group (un-invited).", GetName(id));
		    	        GroupMessage(id, ANNOUNCEMENT, string);
		    	        format(string, sizeof(string), "You have uninvited player %s.", GetName(id));
		    	        SendClientMessage(playerid, ANNOUNCEMENT, string);
		    	        format(string, sizeof(string), "You have been uninvited from %s, by %s.", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
		    	        SendClientMessage(id, WHITE, string);
						Player[id][Group] = 0;
		    	        SavePlayerData(playerid);
	    	        }
	    	        else
	    	        {
	    	            SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
	    	        }
	    	    }
	    	    else
	    	    {
	    	        SendClientMessage(playerid, WHITE, "Player is not in your group to un-invite.");
	    	    }
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	    	}
	    }
		else if(Player[playerid][GroupRank] >= 9 && Player[playerid][Group] >= 5)
		{
	    	if(IsPlayerConnectedEx(id) || id != playerid)
	    	{
	    	    if(Player[id][Group] == Player[playerid][Group])
	    	    {
	    	        if(Player[playerid][GroupRank] > Player[id][GroupRank])
	    	        {
		    	        format(string, sizeof(string), "%s has left the group (un-invited).", GetName(id));
		    	        GroupMessage(id, ANNOUNCEMENT, string);
		    	        format(string, sizeof(string), "You have uninvited player %s.", GetName(id));
		    	        SendClientMessage(playerid, ANNOUNCEMENT, string);
		    	        format(string, sizeof(string), "You have been uninvited from %s, by %s.", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
		    	        SendClientMessage(id, WHITE, string);
						Player[id][Group] = 0;
		    	        SavePlayerData(playerid);
	    	        }
	    	        else
	    	        {
	    	            SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
	    	        }
	    	    }
	    	    else
	    	    {
	    	        SendClientMessage(playerid, WHITE, "Player is not in your group to un-invite.");
	    	    }
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	    	}
	    }
	}
	return 1;
}

command(lock, playerid, params[])
{
	new string[128];
	if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][CarLinkID], 5))
	{
	    if(Player[playerid][LockedCar] == 0)
     	{
     	    Player[playerid][LockedCar] = 1;
			format(string, sizeof(string), "%s locks their vehicle.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				SetVehicleParamsForPlayer(Player[playerid][CarLinkID], i, 0, 1);
			}
 			return 1;
     	}
		else
		{
     	    Player[playerid][LockedCar] = 0;
			format(string, sizeof(string), "%s unlocks their vehicle.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				SetVehicleParamsForPlayer(Player[playerid][CarLinkID], i, 0, 0);
			}
 			return 1;
     	}
	}
	else if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][Car2LinkID], 5))
	{
	    if(Player[playerid][LockedCar2] == 0)
     	{
     	    Player[playerid][LockedCar2] = 1;
			format(string, sizeof(string), "%s locks their vehicle.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				SetVehicleParamsForPlayer(Player[playerid][Car2LinkID], i, 0, 1);
			}
 			return 1;
     	}
		else
		{
     	    Player[playerid][LockedCar2] = 0;
			format(string, sizeof(string), "%s unlocks their vehicle.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				SetVehicleParamsForPlayer(Player[playerid][Car2LinkID], i, 0, 0);
			}
 			return 1;
     	}
	}
	else if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][Car3LinkID], 5))
	{
	    if(Player[playerid][LockedCar3] == 0)
     	{
     	    Player[playerid][LockedCar3] = 1;
			format(string, sizeof(string), "%s locks their vehicle.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				SetVehicleParamsForPlayer(Player[playerid][Car3LinkID], i, 0, 1);
			}
 			return 1;
     	}
		else
		{
     	    Player[playerid][LockedCar3] = 0;
			format(string, sizeof(string), "%s unlocks their vehicle.", GetName(playerid));
			NearByMessage(playerid, PURPLE, string);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				SetVehicleParamsForPlayer(Player[playerid][Car3LinkID], i, 0, 0);
			}
 			return 1;
     	}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not near any of your vehicles");
	}
	/*new vehslot, string[128];
	if(sscanf(params, "d", vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /lock [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
				if(Player[playerid][PlayerCarModel] > 0)
				{
				    if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][CarLinkID], 10))
				    {
					    if(Player[playerid][CarLinkID] > 0)
					    {
					        if(Player[playerid][LockedCar] == 0)
					        {
					    		Player[playerid][LockedCar] = 1;
								format(string, sizeof(string), "%s locks their vehicle.", GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][CarLinkID], i, 0, 1);
								}
					    		return 1;
					    	}
					    	else
					    	{
					    	    Player[playerid][LockedCar] = 0;

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][CarLinkID], i, 0, 0);
								}
					    	    format(string, sizeof(string), "%s unlocks their vehicle.", GetName(playerid));
					    	    NearByMessage(playerid, RPCOLOUR, string);
					    	    return 1;
					    	}
					    }
					    else
				    	{
				        	SendClientMessage(playerid, WHITE, "You're too far away.");
				    	}
				    }
				}
	        }
	        case 2:
	        {
				if(Player[playerid][PlayerCarModel2] > 0)
				{
				    if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][Car2LinkID], 10))
				    {
					    if(Player[playerid][Car2LinkID] > 0)
					    {
					        if(Player[playerid][LockedCar2] == 0)
					        {
					    		Player[playerid][LockedCar2] = 1;
								format(string, sizeof(string), "%s locks their vehicle.", GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][Car2LinkID], i, 0, 1);
								}
					    		return 1;
					    	}
					    	else
					    	{
					    	    Player[playerid][LockedCar2] = 0;

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][Car2LinkID], i, 0, 0);
								}

					    	    format(string, sizeof(string), "%s unlocks their vehicle.", GetName(playerid));
					    	    NearByMessage(playerid, RPCOLOUR, string);
					    	    return 1;
					    	}
					    }
                        else
					    {
					        SendClientMessage(playerid, WHITE, "You're too far away.");
					    }
					}
				}
	        }
	        case 3:
	        {
				if(Player[playerid][PlayerCarModel3] > 0)
				{
				    if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][Car3LinkID], 10))
				    {
					    if(Player[playerid][Car3LinkID] > 0)
					    {
					        if(Player[playerid][LockedCar3] == 0)
					        {
					    		Player[playerid][LockedCar3] = 1;
					    		format(string, sizeof(string), "%s locks their vehicle.", GetName(playerid));
								NearByMessage(playerid, RPCOLOUR, string);

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][Car3LinkID], i, 0, 1);
								}
					    		return 1;
					    	}
					    	else
					    	{
					    	    Player[playerid][LockedCar3] = 0;

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][Car3LinkID], i, 0, 0);
								}

					    	    format(string, sizeof(string), "%s unlocks their vehicle.", GetName(playerid));
					    	    NearByMessage(playerid, RPCOLOUR, string);
					    	    return 1;
					    	}
					    }
                        else
					    {
					        SendClientMessage(playerid, WHITE, "You're too far away.");
					    }
					}
				}
	        }
		}
	}*/
	return 1;
}

command(givebadge, playerid, params[])
{
	new targetplayer;
	new badge;
	new string[255], string2[255];
	if(sscanf(params, "dd", targetplayer, badge))
	{
		SendClientMessage(playerid, -1, "SYNTAX: /givebadge [playerid] [number]");
	}
	else
	{
		if(Player[playerid][Group] == 1 && Player[playerid][GroupRank] > 3 && Player[targetplayer][Group] == 1)
		{
			if(badge != 69)
			{
				Player[targetplayer][BadgeNumber] = badge;
				format(string2, sizeof(string2), "You have given a badge #%d to %s", badge, GetName(targetplayer));
				SendClientMessage(playerid, WHITE, string2);
				format(string, sizeof(string), "You have been given badge #%d by %s", badge, GetName(playerid));
				SendClientMessage(targetplayer, WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You're a funny one aren't ya.");
			}
		}
	}
	return 1;
}

command(showbadge, playerid, params[])
{
	new string[128], string2[255], string3[255], target;
	if(sscanf(params, "d", target)) return SendClientMessage(playerid, WHITE, "SYNTAX: /showbadge [ID]");
	{
		if(Player[playerid][BadgeNumber] > 0)
		{
            format(string3, sizeof(string3), "* %s has showed %s their badge", GetName(playerid), GetName(target));
			NearByMessage(playerid, PURPLE, string3);
			SendClientMessage(target, GREY, "--- Red County Police Department ---");
			format(string2, sizeof(string2), "%s", GetName(playerid));
			format(string, sizeof(string), "Badge number: %d", Player[playerid][BadgeNumber]);
			SendClientMessage(target, WHITE, string2);
			SendClientMessage(target, WHITE, string);
			SendClientMessage(target, GREY, "--- Red County Police Department ---");
		}
		else
		{
			SendClientMessage(playerid, -1, "You don't have a badge!");
		}
	}
	return 1;
}

command(callcar, playerid, params[])
{
	new vehslot;
	if(sscanf(params, "d", vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /callcar [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
			case 1:
			{
				if(Player[playerid][PlayerCarModel] > 0)
				{
					if(Player[playerid][Checkpoint] == 0)
					{
					    new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
					    GetVehiclePos(Player[playerid][CarLinkID], CurCarX, CurCarY, CurCarZ);
					    SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
					    Player[playerid][Checkpoint] = 1;
					    Player[playerid][FindingCar] = 1;
					    SendClientMessage(playerid, WHITE, "A checkpoint has been set. If you can't reach it, contact an admin or /abandoncar.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it first.");
					}
				}
			}
			case 2:
			{
				if(Player[playerid][PlayerCarModel2] > 0)
				{
					if(Player[playerid][Checkpoint] == 0)
					{
					    new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
					    GetVehiclePos(Player[playerid][Car2LinkID], CurCarX, CurCarY, CurCarZ);
					    SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
					    Player[playerid][Checkpoint] = 1;
					    Player[playerid][FindingCar] = 1;
					    SendClientMessage(playerid, WHITE, "A checkpoint has been set. If you can't reach it, contact an admin or /abandoncar.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it first.");
					}
				}
			}
			case 3:
			{
				if(Player[playerid][PlayerCarModel3] > 0)
				{
					if(Player[playerid][Checkpoint] == 0)
					{
					    new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
					    GetVehiclePos(Player[playerid][Car3LinkID], CurCarX, CurCarY, CurCarZ);
					    SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
					    Player[playerid][Checkpoint] = 1;
					    Player[playerid][FindingCar] = 1;
					    SendClientMessage(playerid, WHITE, "A checkpoint has been set. If you can't reach it, contact an admin or /abandoncar.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it first.");
					}
				}
			}
		}
	}
	return 1;
}

command(testcallcar, playerid, params[])
{
	ShowPlayerDialog(playerid,57434567,DIALOG_STYLE_LIST ,"Choose a vehicle","Vehicle 1\nVehicle 2\nVehicle 3","Okay","Cancel");
	return 1;
}

/*command(guard, playerid, params[])
{
	new id, price, string[128];
	if(sscanf(params, "ud", id, price))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /guard [playerid] [price]");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 3)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                new Float: Armour;
	                GetPlayerArmour(id, Armour);

	                if(Armour >= 50)
	                {
	                    SendClientMessage(playerid, WHITE, "You can't guard this person, they have 50 percent armour already.");
	                }
	                else
	                {
	                    if(price >= 5000 && price < 10000)
	                    {
		                    format(string, sizeof(string), "%s has offered to give you 50 percent armour, for $%d (type /approve guardrequest to get the fulfill the request).", GetName(playerid), price);
		                    SendClientMessage(id, ANNOUNCEMENT, string);
		                    format(string, sizeof(string), "You have offered to guard %s, for $%d.", GetName(id), price);
		                    SendClientMessage(playerid, WHITE, string);

		                    Player[id][GuardOffer] = playerid;
		                    Player[id][GuardPrice] = price;
		                    Player[playerid][GuardPrice] = price;
		                    Player[playerid][Guarding] = id;
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "Minimum price is $5,000 and the maximum is $10,000");
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away!");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a guard.");
	    }
	}
	return 1;
}*/

command(approve, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "z", Usage))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /approve [usage]");
		SendClientMessage(playerid, GREY, "Usages: BETAInvite, GroupInvite, Handshake, HealRequest, GuardRequest, DivorceRequest");
	}
	else
	{
		if(strcmp(Usage, "healrequest", true) == 0)
		{
		    if(Player[playerid][HealPrice] != 0)
		    {
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i) && Player[i][AttemptingToHeal] == playerid)
				    {
				        if(GetDistanceBetweenPlayers(playerid, i) < 5)
				        {
				            SetPlayerHealth(playerid, 100);
				            Player[i][Money] += Player[playerid][HealPrice];
				            Player[playerid][Money] -= Player[playerid][HealPrice];
				            SendClientMessage(playerid, WHITE, "You have been fully healed");
				            Player[i][AttemptingToHeal] = -1;
				            Player[playerid][HealPrice] = 0;
				        }
				    }
				}
		    }
		}
		else if(strcmp(Usage, "BETAInvite", true) == 0)
		{
		    if(Player[playerid][PendingBETAInvite] >= 1)
		    {
		        Player[playerid][PendingBETAInvite] = 0;
		        Player[playerid][Tester] = 1;
		        SendClientMessage(playerid, WHITE, "Congratulations! You are now a tester.");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You do not have a pending invitation.");
		    }
		}
		else if(strcmp(Usage, "Handshake", true) == 0)
		{
		    if(Player[playerid][PendingHandshake] != -1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, Player[playerid][PendingHandshake]) < 3)
		        {
			        switch(Player[playerid][PendingHandshakeStyle])
			        {
			            case 1:
			            {
			                Player[playerid][PendingHandshake] = -1;
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
						}
			            case 2:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 3:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 4:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 5:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 6:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkea", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkea", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 7:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkfa", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkfa", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 8:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkfa_swt", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkfa_swt", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 9:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're too far away.");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You don't have a pending handshake request.");
		    }
		}
		else if(strcmp(Usage, "sellcar", true) == 0)
		{
		    if(Player[playerid][BuyingCar] != -1)
		    {
		        if(IsPlayerConnectedEx(Player[playerid][BuyingCar]))
		        {
		            ShowPlayerDialog(playerid, 3625, DIALOG_STYLE_LIST, "Slot to store in?", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3\n", "Select", "Cancel");
		        }
		        else
		        {
		            Player[playerid][BuyingCar] = -1;
		            SendClientMessage(playerid, WHITE, "The deal is off, that player is no longer connected!");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "No one is offering you a vehicle.");
		    }
		}
		else if(strcmp(Usage, "DivorceRequest", true) == 0)
		{
		    new res;

		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnectedEx(i) && Player[i][PendingDivorce] == playerid && Player[i][PendingDivorce] != -1)
		        {
		            res = i;
		        }
		    }

		    if(IsPlayerConnectedEx(res))
		    {
		        format(string, sizeof(string), "%s has accepted your divorce request, you are no longer married.", GetName(playerid));
		        SendClientMessage(res, WHITE, string);
		        format(Player[res][MarriedTo], 255, "Nobody");
		        format(Player[playerid][MarriedTo], 255, "Nobody");
				SendClientMessage(playerid, WHITE, "You are now divorced!");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You don't have a pending divorce request.");
		    }
		}
		/*else if(strcmp(Usage, "GuardRequest", true) == 0)
		{
		    if(Player[playerid][GuardOffer] != -1)
		    {
		        if(Player[playerid][Money] >= Player[Player[playerid][GuardOffer]][GuardPrice])
		        {
		            Player[playerid][Money] -= Player[Player[playerid][GuardOffer]][GuardPrice];
		            Player[Player[playerid][GuardOffer]][Money] += Player[Player[playerid][GuardOffer]][GuardPrice];
		            SetPlayerArmour(playerid, 50);
		            format(string, sizeof(string), "You have earned $%d as they accepted the guard request.", Player[Player[playerid][GuardOffer]][GuardPrice]);
		            SendClientMessage(Player[playerid][GuardOffer], WHITE, string);
		            format(string, sizeof(string), "[BODYGUARD] %s has been guarded by %s for $%d.", GetName(playerid), GetName(Player[playerid][GuardOffer]), Player[Player[playerid][GuardOffer]][GuardPrice]);
		            MoneyLog(string);
		            SendClientMessage(playerid, WHITE, "You've accepted the request and your armour has been filled to 50 percent.");
					Player[Player[playerid][GuardOffer]][Guarding] = -1;
					Player[playerid][GuardOffer] = -1;
		            Player[playerid][GuardPrice] = 0;
		        }
		    }
		}*/
		else if(strcmp(Usage, "CopTicket", true) == 0)
		{
		    if(Player[playerid][BeingTicketed] > 0)
		    {
		        if(IsPlayerConnectedEx(Player[playerid][BeingTicketed]))
		        {
					format(string, sizeof(string), "[TICKET] %s has been ticketed by %s, for $%d.", GetName(playerid), GetName(Player[playerid][BeingTicketed]), Player[Player[playerid][BeingTicketed]][TicketPrice]);
					MoneyLog(string);
			        Player[playerid][Tickets] += Player[Player[playerid][BeingTicketed]][TicketPrice];
					SendClientMessage(playerid, WHITE, "You have accepted the ticket. Pay it at the RCSD with /paytickets");
					SendClientMessage(Player[playerid][BeingTicketed], WHITE, "The other party has accepted the ticket.");
                    Player[Player[playerid][BeingTicketed]][TicketPrice] = 0;
                    Player[Player[playerid][BeingTicketed]][Ticketing] = -1;
					Player[playerid][BeingTicketed] = -1;
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're not being ticketed.");
		    }
		}
		else if(strcmp(Usage, "GroupInvite", true) == 0)
		{
		    if(Player[playerid][PendingInvite] != 0)
		    {
		        Player[playerid][Group] = Player[playerid][PendingInvite];
		        Player[playerid][GroupRank] = 1;
				format(string, sizeof(string), "Congratulations! You are now a part of Group %s.", Groups[Player[playerid][Group]][GroupName]);
		        SendClientMessage(playerid, ANNOUNCEMENT, string);
		        SavePlayerData(playerid);
		        format(string, sizeof(string), "%s has joined the group (invitation).", GetName(playerid));
		        GroupMessage(playerid, ANNOUNCEMENT, string);
		    }
		}
	}
	return 1;
}

command(safelocation, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][GroupRank] >= 9 && Player[playerid][Group] != 0)
	{
        Groups[Player[playerid][Group]][SafeWorld] = GetPlayerVirtualWorld(playerid);
	    DestroyDynamicPickup(Groups[Player[playerid][Group]][SafePickupID]);
	    Groups[Player[playerid][Group]][SafeInteriorID] = GetPlayerInterior(playerid);
	    GetPlayerPos(playerid, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]);
	    Groups[Player[playerid][Group]][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ], Groups[Player[playerid][Group]][SafeWorld], -1, -1, 150.0);
	    SendClientMessage(playerid, WHITE, "Success! You have relocated your group Safe's location.");
	    SaveGroup(Player[playerid][Group]);
	}
	return 1;
}

command(noscar, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(IsPlayerInInvalidNosVehicle(playerid))
		    {
		        SendClientMessage(playerid, WHITE, "You can't modify this vehicle.");
		    }
		    else
		    {
		        if(Player[playerid][CarModDelay] == 0)
		        {
			    	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			    	SendClientMessage(playerid, WHITE, "You have applied NOS and were charged $1,000.");
			    	Player[playerid][Money] -= 1000;
			    	Player[playerid][CarModDelay] = 1;
		    	}
		    	else
		    	{
		    	    SendClientMessage(playerid, WHITE, "Wait 60 seconds before modding your vehicle!");
		    	}
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not in this vehicle.");
		}
	}
	return 1;
}

CMD:citytrash(playerid)
{
	if(Jobs[Player[playerid][Job]][JobType] == 8)
    {
        new string[255];
        format(string, sizeof(string), "Current amount: %dKG", CityTrash);
    }
}

CMD:collectpay(playerid)
{
    if(Player[playerid][PlayingHours] >= 5 || Player[playerid][VipRank] >= 1)
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 8)
	    {
		    if(Player[playerid][InabilityTrash] > 1)
		    {
				SendClientMessage(playerid, WHITE, "Please wait out the reload time.");
			}
			else
			{
		  		TrashT(playerid);
			}
		}
	}
}

CMD:loadtrash(playerid)
{
    if(Player[playerid][PlayingHours] >= 5 || Player[playerid][VipRank] >= 1)
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 8)
	    {
			if(Player[playerid][InabilityTrash] > 1)
		    {
				SendClientMessage(playerid, WHITE, "Please wait out the reload time.");
			}
			else
			{
		  		TrashT(playerid);
			}
		}
	}
}

CMD:pickuptrash(playerid)
{
    if(Player[playerid][PlayingHours] >= 5 || Player[playerid][VipRank] >= 1)
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 8)
	    {
			new pSeat = GetPlayerVehicleSeat(playerid);
			new vID = GetPlayerVehicleID(playerid);

		    if(Player[playerid][InabilityTrash] > 1)
		    {
				SendClientMessage(playerid, WHITE, "Please wait out the reload time.");
			}
			else
			{
				if(pSeat == 0)
				{
				    if(GetVehicleModel(vID) == 408)
				    {
		          		TrashT(playerid);

		  				fuel[vID] = 35;
				    }
				}
			}
		}
	}
	return 1;
}

CMD:hq(playerid)
{
	if(Player[playerid][Group] > 0)
	{
	    SetPlayerCheckpoint(playerid, Groups[Player[playerid][Group]][HQExteriorX], Groups[Player[playerid][Group]][HQExteriorY], Groups[Player[playerid][Group]][HQExteriorZ], 3.0);
	}
	return 1;
}

CMD:togglenametags(playerid)
{
	ShowPlayerDialog(playerid, 2090, DIALOG_STYLE_LIST, "Toggle Nametags", "Nametags on\nNametags off", "Choose", "Cancel");
}

CMD:removetoys(playerid)
{
	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
	RemovePlayerAttachedObject(playerid, 2);
	RemovePlayerAttachedObject(playerid, 3);
	RemovePlayerAttachedObject(playerid, 4);
	RemovePlayerAttachedObject(playerid, 5);
	RemovePlayerAttachedObject(playerid, 6);
	RemovePlayerAttachedObject(playerid, 7);
	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
}

CMD:pdtoys(playerid)
{
	if(Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 2)
	{
		if(Player[playerid][CopDuty] == 1)
		{
		    ShowPlayerDialog(playerid, 358, DIALOG_STYLE_LIST, "PD Toys", "Police Cap 1\nChief's hat\nRiot Shield\nSWAT Helmet\nKevlar vest", "Use", "Cancel");
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need to be on duty to use PD toys.");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not a PD member.");
	}
}

CMD:buytoys(playerid)
{
    if(Businesses[Player[playerid][InBusiness]][bType] == 2)
    {
		ShowPlayerDialog(playerid, 356, DIALOG_STYLE_LIST, "Buy a toy", "Hat 1 ($200)\nHat 2 ($200)\nHelmet 1 ($500)\nHelmet 2 ($650)\nBandana 1 ($850)\nMustache 1 ($300)\nGlasses 1 ($550)\nGlasses 2 ($550)\nGlasses 3 ($550)", "Buy", "Cancel");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You need to be in a Clothes Store to buy a toy.");
	}
}

CMD:deletetoys(playerid)
{
	ShowPlayerDialog(playerid, 357, DIALOG_STYLE_LIST, "Delete a toy", "Toy 1\nToy 2\nToy 3", "Delete", "Cancel");
}

command(toyban, playerid, params[])
{
	new id, reason[128], string[128];
	if(sscanf(params, "uz", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /toyban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank, or the same).");
		        }
		        else
		        {
				    if(strlen(reason) >= 1)
				    {

				        if(Player[id][AdminLevel] < 1)
				        {
				        	Player[playerid][AdminActions]++;
				        	SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				        }

				        format(string, sizeof(string), "Toy Ban: %s has been banned from using toys by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
				        SendClientMessageToAll(LIGHTRED, string);
				        AdminActionsLog(string);
				        format(string, sizeof(string), "You have been banned from using toys for %s. You cannot appeal this.", reason);
				        SendClientMessage(id, GREY, string);
				        Player[id][ToyBan] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "SYNTAX: /toyban [playerid] [reason]");
			        }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		        return 1;
		    }
		}
	}
	return 1;
}

CMD:edittoys(playerid)
{
	ShowPlayerDialog(playerid, 354, DIALOG_STYLE_LIST, "Toys", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
}

CMD:atoys(playerid, params[])
{
	new toyID;
	if(sscanf(params, "d", toyID)) return SendClientMessage(playerid, WHITE, "USAGE: /atoys [ID]");
	if(Player[playerid][AdminLevel] > 4)
	{
		SetPlayerAttachedObject(playerid, 8, toyID, 2);
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be a level 4 admin for this command.");
	}
	return 1;
}
CMD:aedittoy(playerid, params[])
{
	if(Player[playerid][AdminLevel] > 4)
	{
		EditAttachedObject(playerid, 8);
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need to be a level 5 admin for this command.");
	}
	return 1;
}

CMD:arefuel(playerid)
{
	if(Player[playerid][AdminLevel] >= 8)
	{
		new vID = GetPlayerVehicleID(playerid);
		fuel[vID] = 100;
	}
}

CMD:modifyvehicle(playerid)
{
	if(Player[playerid][AdminLevel] >= 5)
	{
		ShowPlayerDialog(playerid, 700, DIALOG_STYLE_LIST, "Vehicle mods", "Spoilers\nWheels\nHydraulics", "Choose", "Cancel");
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have access to this command.");
	}
	return 1;
}

CMD:toys(playerid)
{
	if(Player[playerid][ToyBan] == 0)
	{
  		ShowPlayerDialog(playerid, 355, DIALOG_STYLE_LIST, "Toys", "Slot 1\nSlot 2\nSlot 3", "Choose", "Cancel");
	}
	else
	{
	    SendClientMessage(playerid, RED, "You're banned from using toys.");
	}
	return 1;
}

CMD:lights(playerid)
{
	new szMessage[128];
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "You need to be the driver of the vehicle");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(lights == 1){
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 0, alarm, doors, bonnet, boot, objective);
	format(szMessage, sizeof(szMessage), "* %s flicks a switch on the dashboard, turning off the vehicles lights.", GetName(playerid));
	NearByMessage(playerid, PURPLE, szMessage);
	}else{
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
	format(szMessage, sizeof(szMessage), "* %s flicks a switch on the dasboard, turning on the vehicles lights.", GetName(playerid));
	NearByMessage(playerid, PURPLE, szMessage);
	}
	return 1;
}

CMD:hood(playerid)
{
	new szMessage[128];
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "You need to be the driver of the vehicle");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(bonnet == 1){
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, 0, boot, objective);
	format(szMessage, sizeof(szMessage), "* %s presses a button on the dashboard, closing the hood.", GetName(playerid));
	NearByMessage(playerid, PURPLE, szMessage);
	}else{
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, 1, boot, objective);
	format(szMessage, sizeof(szMessage), "* %s presses a button on the dashboard, opening the hood.", GetName(playerid));
	NearByMessage(playerid, PURPLE, szMessage);
	}
	return 1;
}

CMD:trunk(playerid)
{
	new szMessage[128];
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "You need to be the driver of the vehicle");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(boot == 1){
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 0, objective);
	format(szMessage, sizeof(szMessage), "* %s presses a button on the dashboard, closing the trunk.", GetName(playerid));
	NearByMessage(playerid, PURPLE, szMessage);
	}else{
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 1, objective);
	format(szMessage, sizeof(szMessage), "* %s presses a button on the dashboard, opening the trunk of the car.", GetName(playerid));
	NearByMessage(playerid, PURPLE, szMessage);
	}
	return 1;
}

CMD:setfuelprice(playerid, params[])
{
	new price;
	new string[255];
 	for(new i=0; i < MAX_PLAYERS; i++)
	{
		if(sscanf(params, "d", price)) return SendClientMessage(playerid, WHITE, "SYNTAX: /setfuelprice [price]");
			{
			if(Player[playerid][AdminLevel] >= 6)
			{
				dini_IntSet("Assets.ini", "FuelPrice", price);
				if(Player[i][AdminLevel] >= 4)
				{
				    format(string, sizeof(string), "[NOTICE] Admin %s has changed the fuel price to %d", GetName(playerid), price);
				    SendToAdmins(ADMINORANGE, string, 0);
				}
			}
			else if(Player[playerid][AdminLevel] < 6)
			{
			    SendClientMessage(playerid, GREY, "Your admin level is not high enough for this command.");
			}
		}
	}
	return 1;
}

CMD:fuelprice(playerid)
{
	new string[255];
	new fPrice = dini_Int("Assets.ini", "FuelPrice");

	format(string, sizeof(string), "[FUEL PRICE: $%d]", fPrice);
	SendClientMessage(playerid, WHITE, string);
}

CMD:fuel(playerid)
{
	new string[128];
	new vID;
	vID = GetPlayerVehicleID(playerid);

	format(string, sizeof(string), "%d units of fuel left.", fuel[vID]);
	SendClientMessage(playerid, YELLOW, string);
}

CMD:hotwire(playerid)
{
	new Float:vhp;
	new vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleHealth(vehicleid,vhp);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "You need to be the driver of the vehicle");
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);

	if(fuel[vehicleid] == 0)
	{
	    SendClientMessage(playerid, GREY, "This vehicle is out of fuel.");
     	SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
	}

	if(vhp>400.0)
	{
		if(GetVehicleModel(vehicleid) != 448 || GetVehicleModel(vehicleid) != 403 || GetVehicleModel(vehicleid) != 408)
		{
		    if(Hotwiring[playerid] == 0)
		    {
				new string[128];
				SetTimerEx("Hotwire", 3000, false, "i", playerid);
			    format(string, sizeof(string), "* %s breaks open the panel under the steering wheel, starting to hotwire the vehicle.", GetName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				Hotwiring[playerid] = 1;
			}
			else
			{
			    SendClientMessage(playerid, -1, "You're already hotwiring.");
			}
		}
	}
	return 1;
}

CMD:vehicleinfo(playerid)
{
	new vID = GetPlayerVehicleID(playerid);
	new string[128];
	new string2[128];
	new string3[128];
	new string4[128];
	new string5[128];
	if(vID == Player[playerid][CarLinkID])
	{
		format(string, sizeof(string), "Nitrous Bottles installed: %d", Player[playerid][v1NOS]);
		format(string4, sizeof(string4), "Turbo's installed: %d", Player[playerid][V1TURBO]);
		format(string3, sizeof(string3), "Engine upgrades: %d", Player[playerid][v1ENGINE]);
		format(string2, sizeof(string2), "Uses left: %d", Player[playerid][v1NOSFUEL]);
		format(string5, sizeof(string5), "Plate: %s", Player[playerid][Car1Plate]);

		SendClientMessage(playerid, WHITE, "----- Vehicle Info -----");
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, WHITE, string4);
		SendClientMessage(playerid, WHITE, string3);
		SendClientMessage(playerid, WHITE, string2);
        SendClientMessage(playerid, WHITE, string5);
		SendClientMessage(playerid, WHITE, "------------------------");
	}
	if(vID == Player[playerid][Car2LinkID])
	{
		format(string, sizeof(string), "Nitrous Bottles installed: %d", Player[playerid][v2NOS]);
		format(string3, sizeof(string3), "Engine upgrades: %d", Player[playerid][v2ENGINE]);
		format(string4, sizeof(string4), "Turbo's installed: %d", Player[playerid][v2TURBO]);
		format(string2, sizeof(string2), "Uses left: %d", Player[playerid][v2NOSFUEL]);
		format(string5, sizeof(string5), "Plate: %s", Player[playerid][Car2Plate]);

		SendClientMessage(playerid, WHITE, "----- Vehicle Info -----");
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, WHITE, string4);
		SendClientMessage(playerid, WHITE, string3);
		SendClientMessage(playerid, WHITE, string2);
		SendClientMessage(playerid, WHITE, string5);
		SendClientMessage(playerid, WHITE, "------------------------");
	}
	if(vID == Player[playerid][Car3LinkID])
	{
		format(string, sizeof(string), "Nitrous Bottles installed: %d", Player[playerid][v3NOS]);
		format(string3, sizeof(string3), "Engine upgrades: %d", Player[playerid][v3ENGINE]);
		format(string4, sizeof(string4), "Turbo's installed: %d", Player[playerid][v3TURBO]);
		format(string2, sizeof(string2), "Uses left: %d", Player[playerid][v3NOSFUEL]);
		format(string5, sizeof(string5), "Plate: %s", Player[playerid][Car3Plate]);

		SendClientMessage(playerid, WHITE, "----- Vehicle Info -----");
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, WHITE, string4);
		SendClientMessage(playerid, WHITE, string3);
		SendClientMessage(playerid, WHITE, string2);
		SendClientMessage(playerid, WHITE, string5);
		SendClientMessage(playerid, WHITE, "------------------------");
	}

}

CMD:checkvehicle(playerid, params[])
{
	new vID = GetPlayerVehicleID(playerid);
	new string[128];
	new string2[128];
	new string3[128];
	new string4[128];
	new string5[128];
	if(Player[playerid][Group] == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(vID == Player[i][CarLinkID])
			{
				format(string, sizeof(string), "Nitrous Bottles installed: %d", Player[i][v1NOS]);
				format(string4, sizeof(string4), "Turbo's installed: %d", Player[i][V1TURBO]);
				format(string3, sizeof(string3), "Engine upgrades: %d", Player[i][v1ENGINE]);
				format(string2, sizeof(string2), "Uses left: %d", Player[i][v1NOSFUEL]);
				format(string5, sizeof(string5), "Plate: %s", Player[i][Car1Plate]);
				SendClientMessage(playerid, WHITE, "----- Vehicle Info -----");
				SendClientMessage(playerid, WHITE, string);
				SendClientMessage(playerid, WHITE, string4);
				SendClientMessage(playerid, WHITE, string3);
				SendClientMessage(playerid, WHITE, string2);
		        SendClientMessage(playerid, WHITE, string5);
				SendClientMessage(playerid, WHITE, "------------------------");
			}
			if(vID == Player[i][Car2LinkID])
			{
				format(string, sizeof(string), "Nitrous Bottles installed: %d", Player[i][v2NOS]);
				format(string3, sizeof(string3), "Engine upgrades: %d", Player[i][v2ENGINE]);
				format(string4, sizeof(string4), "Turbo's installed: %d", Player[i][v2TURBO]);
				format(string2, sizeof(string2), "Uses left: %d", Player[i][v2NOSFUEL]);
				format(string5, sizeof(string5), "Plate: %s", Player[i][Car2Plate]);

				SendClientMessage(playerid, WHITE, "----- Vehicle Info -----");
				SendClientMessage(playerid, WHITE, string);
				SendClientMessage(playerid, WHITE, string4);
				SendClientMessage(playerid, WHITE, string3);
				SendClientMessage(playerid, WHITE, string2);
				SendClientMessage(playerid, WHITE, string5);
				SendClientMessage(playerid, WHITE, "------------------------");
			}
			if(vID == Player[i][Car3LinkID])
			{
				format(string, sizeof(string), "Nitrous Bottles installed: %d", Player[i][v3NOS]);
				format(string3, sizeof(string3), "Engine upgrades: %d", Player[i][v3ENGINE]);
				format(string4, sizeof(string4), "Turbo's installed: %d", Player[i][v3TURBO]);
				format(string2, sizeof(string2), "Uses left: %d", Player[i][v3NOSFUEL]);
				format(string5, sizeof(string5), "Plate: %s", Player[i][Car3Plate]);

				SendClientMessage(playerid, WHITE, "----- Vehicle Info -----");
				SendClientMessage(playerid, WHITE, string);
				SendClientMessage(playerid, WHITE, string4);
				SendClientMessage(playerid, WHITE, string3);
				SendClientMessage(playerid, WHITE, string2);
				SendClientMessage(playerid, WHITE, string5);
				SendClientMessage(playerid, WHITE, "------------------------");
			}
		}
	}
	return 1;
}

CMD:inventory(playerid)
{
	new invString[128];
	SendClientMessage(playerid, WHITE, "------ Inventory ------");
	if(Player[playerid][Materials] > 0)
	{
	    format(invString, sizeof(invString), "- Materials (%d)", Player[playerid][Materials]);
		SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Rags] > 0)
	{
	    format(invString, sizeof(invString), "- Rags (%d)", Player[playerid][Rags]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Rope] > 0)
	{
	    format(invString, sizeof(invString), "- Rope (%d)", Player[playerid][Rope]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Cocaine] > 0)
	{
	    format(invString, sizeof(invString), "- Cocaine (%dG)", Player[playerid][Cocaine]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Pot] > 0)
	{
	    format(invString, sizeof(invString), "- Pot (%dG)", Player[playerid][Pot]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][PotSeeds] > 0)
	{
	    format(invString, sizeof(invString), "- Pot Seeds (%d)", Player[playerid][PotSeeds]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][CocaineIngredients] > 0)
	{
	    format(invString, sizeof(invString), "- Cocaine Ingredients (%d)", Player[playerid][CocaineIngredients]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][GasCan] == 1)
	{
	    format(invString, sizeof(invString), "- Gas Can (Empty)");
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][GasCan] == 2)
	{
	    format(invString, sizeof(invString), "- Gas Can (Full)");
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Identity] == 1)
	{
	    format(invString, sizeof(invString), "- ID");
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][License] == 1)
	{
	    format(invString, sizeof(invString), "- Drivers License");
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][NosBottle] > 0)
	{
	    format(invString, sizeof(invString), "- Nos Bottles (%d)", Player[playerid][NosBottle]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][EngineUpgrade] > 0)
	{
	    format(invString, sizeof(invString), "- Engine Upgrades (%d)", Player[playerid][EngineUpgrade]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Turbo] > 0)
	{
	    format(invString, sizeof(invString), "- Turbo(s) (%d)", Player[playerid][Turbo]);
   		SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][PhoneN] > 0)
	{
	    format(invString, sizeof(invString), "- Phone (%d)", Player[playerid][PhoneN]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][CheckBalance] > 0)
	{
	    format(invString, sizeof(invString), "- Check(s) ($%d)", Player[playerid][CheckBalance]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][CollectedFish] != 1)
	{
	    format(invString, sizeof(invString), "- Fish (%d)", Player[playerid][CollectedFish]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Guarding] > 0)
	{
	    format(invString, sizeof(invString), "- Car Parts (%d)", Player[playerid][Guarding]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Tickets] > 0)
	{
	    format(invString, sizeof(invString), "- Ticket(s) ($%d)", Player[playerid][Tickets]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Fish1] > 0)
	{
	    format(invString, sizeof(invString), "- Tilapia (mud fish) (%d)", Player[playerid][Fish1]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Fish2] > 0)
	{
	    format(invString, sizeof(invString), "- Cod (%d)", Player[playerid][Fish2]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Fish3] > 0)
	{
	    format(invString, sizeof(invString), "- Salmon (%d)", Player[playerid][Fish3]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Fish4] > 0)
	{
	    format(invString, sizeof(invString), "- Lobster (%d)", Player[playerid][Fish4]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][Fish5] > 0)
	{
	    format(invString, sizeof(invString), "- Tuna (%d)", Player[playerid][Fish5]);
	    SendClientMessage(playerid, WHITE, invString);
	}
	if(Player[playerid][CreditCard] != -1)
	{
	    format(invString, sizeof(invString), "- Red County Bank Credit Card");
	    SendClientMessage(playerid, WHITE, invString);
	}
	SendClientMessage(playerid, WHITE, "-----------------------");
	return 1;
}

CMD:inv(playerid)
{
	return cmd_inventory(playerid);
}

CMD:engine(playerid)
{
	new szMessage[128];
	new Float:vhp;
	new vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehicleid);
	GetVehicleHealth(vehicleid,vhp);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "You need to be the driver of the vehicle");
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	new fid = Player[playerid][FactionID];
	new fCar1 = Faction[fid][fLinkID1];
	new fCar2 = Faction[fid][fLinkID2];
	new fCar3 = Faction[fid][fLinkID3];

    if(model == 401)
    {
        if(DrivingTest[playerid] == 2)
        {
            if(vhp>400.0)
			{
			    StartingEngine[playerid] = 1;
				if(engine == 1)
				{
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
				}
				else
				{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
				}
			}
        }
        else
        {
            SendClientMessage(playerid, WHITE, "You need to pass your theoretical exam before doing the driving test");
        }
    }
	if(Player[playerid][FactionID] != 0)
	{
		if(vehicleid == fCar1 || vehicleid == fCar2 || vehicleid == fCar3)
		{
		    if(vhp>400.0)
			{
			    StartingEngine[playerid] = 1;
				if(engine == 1){
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
		}
		}
	}

	if(vehicleid == Player[playerid][CarLinkID])
	{
		if(vhp>400.0)
		{
		    StartingEngine[playerid] = 1;
			if(engine == 1){
		    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
		    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
			NearByMessage(playerid, PURPLE, szMessage);

			}else{
		    SetTimerEx("EngineStart", 3000, false, "i", playerid);
		    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
			NearByMessage(playerid, PURPLE, szMessage);
		}
	}
	}

	if(vehicleid == Player[playerid][Car2LinkID])
	{
		if(vhp>400.0)
		{
		    StartingEngine[playerid] = 1;
			if(engine == 1)
			{
		    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
		    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
			NearByMessage(playerid, PURPLE, szMessage);

			}else{
		    SetTimerEx("EngineStart", 3000, false, "i", playerid);
		    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
			NearByMessage(playerid, PURPLE, szMessage);
		}
	}
	}

	if(vehicleid == Player[playerid][Car3LinkID])
	{
		if(vhp>400.0)
		{
		    StartingEngine[playerid] = 1;
			if(engine == 1){
		    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
		    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
			NearByMessage(playerid, PURPLE, szMessage);

			}else{
		    SetTimerEx("EngineStart", 3000, false, "i", playerid);
		    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
			NearByMessage(playerid, PURPLE, szMessage);
		}
	}
	}

	if(Player[playerid][Group] > 0)
	{
	    if(Vehicles[GetVehicleCarID(GetPlayerVehicleID(playerid))][CarGroup] == Player[playerid][Group])
	    {
	        if(vhp>400.0)
			{
			    StartingEngine[playerid] = 1;
				if(engine == 1){
			    SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
	    }
	}
	}

	/*if(Player[playerid][CopDuty] == 1)
	{
		if(Vehicles[vehicleid][CarGroup] == 1)
		{
			if(vhp>400.0)
			{
				if(engine == 1){
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
		}
	}
	}

	if(Player[playerid][MedicDuty] == 1)
	{
	    if(GetVehicleModel(vehicleid) == 407 || GetVehicleModel(vehicleid) == 490 || GetVehicleModel(vehicleid) == 487)
	    {
			if(vhp>400.0)
			{
				if(engine == 1){
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
		}
	}
	}*/

	if(GetVehicleModel(vehicleid) == 574)
	{
		if(Jobs[Player[playerid][Job]][JobType] == 9)
		{
			if(vhp>400.0)
			{
			    StartingEngine[playerid] = 1;
				if(engine == 1){
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
		}
	}
	}

	if(GetVehicleModel(vehicleid) == 403)
	{
		if(Jobs[Player[playerid][Job]][JobType] == 3)
		{
			if(vhp>400.0)
			{
			    StartingEngine[playerid] = 1;
				if(engine == 1){
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
		}
	}
	}

	if(GetVehicleModel(vehicleid) == 448)
	{
		if(Jobs[Player[playerid][Job]][JobType] == 10)
		{
			if(vhp>400.0)
			{
			    StartingEngine[playerid] = 1;
				if(engine == 1){
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
			    format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);

				}else{
			    SetTimerEx("EngineStart", 3000, false, "i", playerid);
			    format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
				NearByMessage(playerid, PURPLE, szMessage);
			}
		}
	}
	}

	else if(Player[playerid][AdminDuty] == 1)
	{
	    StartingEngine[playerid] = 1;
		if(engine == 1){
  		SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
  		format(szMessage, sizeof(szMessage), "* %s twists the key in the ignition, and removes it.", GetName(playerid));
		NearByMessage(playerid, PURPLE, szMessage);

		}else{
  		SetTimerEx("EngineStart", 3000, false, "i", playerid);
  		format(szMessage, sizeof(szMessage), "* %s slides the key into the ignition, twisting the key to on", GetName(playerid));
		NearByMessage(playerid, PURPLE, szMessage);
	}
	}

	if(StartingEngine[playerid] == 0)
	{
	    SendClientMessage(playerid, WHITE, "You do not have the keys to this vehicle");
	}
    return 1;
}

CMD:e(playerid)
{
	return cmd_engine(playerid);
}


command(fixcar, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(Player[playerid][CarModDelay] == 0)
			{
			    if(GetPlayerSpeed(playerid, 0) == 0)
			    {
			        if(Player[playerid][Guarding] > 0)
			        {
					    RepairVehicle(GetPlayerVehicleID(playerid));
					    Player[playerid][Guarding] -= 1;
					    SendClientMessage(playerid, WHITE, "You have fixed your vehicle.");
					    Player[playerid][CarModDelay] = 1;
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You need car parts from the Hardware store before being able to repair a car.");
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You must stop your vehicle first.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
		    }
		}
	}
	return 1;
}

command(anoscar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] > 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(IsPlayerInInvalidNosVehicle(playerid))
		    {
		        SendClientMessage(playerid, WHITE, "You can't modify this vehicle.");
		    }
		    else
		    {
	    		AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not in this vehicle.");
		}
	}
	return 1;
}

command(afixcar, playerid, params[])
{

	if(Player[playerid][AdminLevel] > 1)
	{
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, WHITE, "You have repaired the vehicle.");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You need to be level 2+ to do this!");
	}
	return 1;
}

command(agivecar, playerid, params[])
{
	new carid = GetPlayerVehicleID(playerid);
	if(Player[playerid][AdminLevel] > 4)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, WHITE, "You're not in a car!");
		}
		else
		{
			PurchaseCar(playerid, carid, 0, 1);
		}
	}
	return 1;
}

command(ghqinterior, playerid, params[])
{
	new GroupID, string[128];
	if(sscanf(params, "d", GroupID))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /ghqinteror [group ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
		    if(fexist(string))
		    {
			    Groups[GroupID][HQInteriorID] = GetPlayerInterior(playerid);
			    GetPlayerPos(playerid, Groups[GroupID][HQInteriorX], Groups[GroupID][HQInteriorY], Groups[GroupID][HQInteriorZ]);
			    format(string, sizeof(string), "You have successfully moved Group %s's interior.", Groups[GroupID][GroupName]);
			    SendClientMessage(playerid, WHITE, string);
                SaveGroup(GroupID);
		    }
		}
	}
	return 1;
}

command(ghqexterior, playerid, params[])
{
	new GroupID, string[128];
	if(sscanf(params, "d", GroupID))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /ghqexteror [group ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
		    if(fexist(string))
		    {
		        DestroyDynamicPickup(Groups[GroupID][HQPickupID]);
			    Groups[GroupID][HQExteriorID] = GetPlayerInterior(playerid);
			    GetPlayerPos(playerid, Groups[GroupID][HQExteriorX], Groups[GroupID][HQExteriorY], Groups[GroupID][HQExteriorZ]);
			    format(string, sizeof(string), "You have successfully moved Group %s's exterior.", Groups[GroupID][GroupName]);
			    SendClientMessage(playerid, WHITE, string);
			    Groups[GroupID][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[GroupID][HQExteriorX], Groups[GroupID][HQExteriorY], Groups[GroupID][HQExteriorZ], 0, -1, -1, 150.0);
                SaveGroup(GroupID);
		    }
		}
	}
	return 1;
}

command(createhouse, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "z", Usage))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /createhouse [usage]");
			SendClientMessage(playerid, GREY, "Usage: Interior, Exterior or Complete.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strcmp(Usage, "exterior", true) == 0)
    	    {
				Player[playerid][HouseExterior]++;
            	Player[playerid][hExtID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ]);
            	format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ]);
            	SendClientMessage(playerid, WHITE, string);
       		}
        	if(strcmp(Usage, "interior", true) == 0)
        	{
				Player[playerid][HouseInterior]++;
            	Player[playerid][hIntID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][hIntX], Player[playerid][hIntY], Player[playerid][hIntZ]);
            	format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][hIntX], Player[playerid][hIntY], Player[playerid][hIntZ]);
            	SendClientMessage(playerid, WHITE, string);
        	}
        	if(strcmp(Usage, "complete", true) == 0)
        	{
            	if(Player[playerid][HouseInterior] > 0 || Player[playerid][HouseExterior] > 0)
            	{
                	new NewHouseID = SpawnedHouses+1;

                	if(NewHouseID >= MAX_HOUSES)
                	{
                    	SendClientMessage(playerid, WHITE, "Too many houses are currently spawned!");
                	}
                	else
                	{
	                	format(string, sizeof(string), "INSERT INTO houses (hID) VALUES (%d)", NewHouseID);
	                	mysql_query(mysql, string);

	                	    new keyid = random(500000);
							Houses[NewHouseID][hInteriorID] = Player[playerid][hIntID];
							Houses[NewHouseID][hExteriorID] = Player[playerid][hExtID];
							Houses[NewHouseID][hInteriorX] = Player[playerid][hIntX];
							Houses[NewHouseID][hInteriorY] = Player[playerid][hIntY];
							Houses[NewHouseID][hInteriorZ] = Player[playerid][hIntZ];
							Houses[NewHouseID][hExteriorX] = Player[playerid][hExtX];
							Houses[NewHouseID][hExteriorY] = Player[playerid][hExtY];
							Houses[NewHouseID][hExteriorZ] = Player[playerid][hExtZ];
							Houses[NewHouseID][KeyID] = keyid;
							format(Houses[NewHouseID][hOwner], 255, "Nobody");
							Houses[NewHouseID][LockStatus] = 1;
							Houses[NewHouseID][HPickupID] = CreateDynamicPickup(1273, 23, Houses[NewHouseID][hExteriorX], Houses[NewHouseID][hExteriorY], Houses[NewHouseID][hExteriorZ], 0, -1, -1, 150.0);

	                		Player[playerid][HouseExterior]--;
	                		Player[playerid][HouseInterior]--;

	                		SpawnedHouses++;
	                		SendClientMessage(playerid, PURPLE, "Successfully created house!");
	                		SetPlayerInterior(playerid, Houses[NewHouseID][hExteriorID]);
	                		SetPlayerPos(playerid, Houses[NewHouseID][hExteriorX], Houses[NewHouseID][hExteriorY], Houses[NewHouseID][hExteriorZ]);
	                		SaveHouse(NewHouseID);
		            }
            	}
            	else
            	{
                	SendClientMessage(playerid, WHITE, "You must select an exterior and an interior first!");
            	}
            }
        }
	}
	return 1;
}

command(unban, playerid, params[])
{
	new Name[MAX_PLAYER_NAME], string[128], fields, rows, pBanned, temp[255], temp2[255];
	if(sscanf(params, "z", Name))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /unban [name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    mysql_format(mysql, string, sizeof(string), "SELECT * FROM users WHERE NormalName = '%s'", Name);
		    mysql_query(mysql, string);
		    mysql_store_result();
		    new pnormalname[255];
			cache_get_data(rows, fields);
			cache_get_field_content(0, "Banned", temp), pBanned = strval(temp);
			cache_get_field_content(0, "NormalName", temp2), format(pnormalname, 255, temp2);
		    if(rows)
		    {
		            if(pBanned == 1)
		            {
		                mysql_format(mysql, string, sizeof(string), "UPDATE	users SET Banned=%d WHERE NormalName='%s'", 0, pnormalname);
		                mysql_tquery(mysql, string, "", "");
		                SendClientMessage(playerid, WHITE, "Account unbanned. (You need to manually unban the IP)");
					}
		            /*else
		            {
		                if(dini_Int(string, "Banned") == 2 || dini_Int(string, "Banned") == 4)
		                {
		                    if(Player[playerid][AdminLevel] >= 5)
		                    {
				                dini_IntSet(string, "Banned", 0);

				                if(dini_Isset(string, "LastIP"))
				                {
				                    if(dini_Int(string, "AdminLevel") == -1)
				                    {
				                        dini_IntSet(string, "AdminLevel", 0);
				                        dini_Set(string, "Note", "You have been removed from the admin team.");
				                    }
				                    else
				                    {
				                        new ssadas[128];
				                        format(ssadas, sizeof(ssadas), "You have been unbanned by %s.", GetName(playerid));
				                        dini_Set(string, "Note", ssadas);
				                    }

				                	format(string2, sizeof(string2), "Now attempting to unban players' last known IP (%s).", dini_Get(string, "LastIP"));
				                	SendClientMessage(playerid, GREY, string2);
				                	format(string2, sizeof(string2), "unbanip %s", dini_Get(string, "LastIP"));
				                	SendRconCommand(string2);
				                	SendRconCommand("reloadbans");
				                	SendClientMessage(playerid, GREY, "IP unbanned and bans list reloaded.");
				                	format(string, sizeof(string), "WARNING: %s has unbanned Player %s.", Player[playerid][AdminName], Name);
                                    AdminActionsLog(string);
									SendToAdmins(ADMINORANGE, string, 0);
									new hour, minute, second, day, year, month, string3[128];
								    gettime(hour, minute, second);
								    getdate(year, month, day);
									format(string3, sizeof(string3), "%s | %d/%d/%d | %d:%d | %s", Name, day, month, year, hour, minute, Player[playerid][AdminName]);
									UnbanLog(string3);
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "Account unbanned, though the IP was not valid or even in the file. You'll have to manualy unban it.");
				                }

				                SendClientMessage(playerid, WHITE, "Account unbanned.");
		                    }
		                    else
		                    {
				                SendClientMessage(playerid, WHITE, "That account has been permabanned.");
			                }
		                }
		            }*/
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Account not found.");
		    }
		    return 1;
		}
		return 1;
}

command(vehname, playerid, params[])
{
	new value[128], results, strings[128];
	if(sscanf(params, "z", value))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /vehname [name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	        for(new i; i < sizeof(VehicleNames); i++)
	        {
	            if(strfind(VehicleNames[i], value, true) != -1)
	            {
				    if(results == 0)
				    {
	                    format(strings, sizeof(strings), "%s", VehicleNames[i]);
					}
					else
					{
					    format(strings, sizeof(strings), "%s, %s", strings, VehicleNames[i]);
					}

					results++;

	   				if(strlen(strings) > 118)
		   			{
					   SendClientMessage(playerid, WHITE, "Too many results found! Please search more specified!");
					   SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
					   return 1;
					}
	            }
	        }

			if(results == 0)
			{
			    SendClientMessage(playerid, WHITE, "Sorry, no vehicles found.");
			    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Results:");
				SendClientMessage(playerid, WHITE, strings);
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
		}
	}
	return 1;
}

command(get, playerid, params[])
{
	new id, string[128], Float: ToX, Float: ToY, Float: ToZ;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /get [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Spectator[id][SpecSpectatingPlayer] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a spectator.");
		        }
		        else if(Player[id][Hospitalized] != 0 && Player[id][Hospitalized] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a hospitalized player.");
		        }
		        else if(Player[id][Tutorial] != 0)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a player in the tutorial.");
		        }
		        else if(Player[id][PrisonDuration] >= 1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a prisoned / jailed player.");
		        }
		        else if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "That person is a higher ranked admin than you, request them to teleport to you.");
		        }
				else if (GetPlayerState(id) == 2)
				{
				    if(Player[id][ActiveReport] >= 1)
				    {
				        SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
				    }

					GetPlayerPos(playerid, ToX, ToY, ToZ);
					SetPlayerInterior(id, GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
					new tmpcar = GetPlayerVehicleID(id);
					SetVehiclePos(tmpcar, ToX, ToY+2, ToZ);
					SetVehicleVirtualWorld(tmpcar, GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(GetPlayerVehicleID(id), GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(GetPlayerVehicleID(id), GetPlayerVirtualWorld(playerid));
	    			format(string, sizeof(string), "%s has teleported you over to him / her.", GetName(playerid));
		    		SendClientMessage(id, WHITE, string);
					format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
				    if(Player[id][ActiveReport] >= 1)
				    {
				        SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
				    }

					GetPlayerPos(playerid, ToX, ToY, ToZ);
					SetPlayerInterior(id, GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
					SetPlayerPos(id, ToX, ToY+2, ToZ);
	    			format(string, sizeof(string), "%s has teleported you over to him / her.", GetName(playerid));
		    		SendClientMessage(id, WHITE, string);
					format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
		}
	}
	return 1;
}

command(gotopoint, playerid, params[])
{
	new Interior, Float: X, Float: Y, Float: Z;
	if(sscanf(params, "dfff", Interior, X, Y, Z))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gotopoint [Interior ID] [x point] [y point] [z point]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    SetPlayerPos(playerid, X, Y, Z);
		    SetPlayerInterior(playerid, Interior);
		    SendClientMessage(playerid, WHITE, "You have been teleported to the defined position.");
		}
	}
	return 1;
}

command(spawncar, playerid, params[])
{
	new carid, string[128], Float: CarToX, Float: CarToY, Float: CarToZ, physical_car_id;
	if(sscanf(params, "d", carid))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spawncar [vehicleid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
		    if(CarCount < MAX_VEHICLES)
		    {
				if(carid < 400 || carid > 611)
				{
					SendClientMessage(playerid, WHITE, "Valid car IDs start from 400, ending at 611.");
				    return 1;
				}

				new vehicleid = GetPlayerVehicleID(playerid);
				GetPlayerPos(playerid, CarToX, CarToY, CarToZ);
				physical_car_id = CreateVehicle(carid, CarToX, CarToY+4, CarToZ, 90, -1, -1, -1);

				format(string, sizeof(string), "You have spawned model ID %d. If you wish to save this, type /savecar.", carid);
				SendClientMessage(playerid, WHITE, string);

				AdminSpawned[SpawnedVehicles] = physical_car_id;
				SpawnedVehicles++;

				PutPlayerInVehicle(playerid, physical_car_id, 0);
				LinkVehicleToInterior(physical_car_id, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(physical_car_id, GetPlayerVirtualWorld(playerid));

				fuel[vehicleid] = 500000;
				SetProgressBarColor(Fuel[playerid], DARKGREEN);
				SetProgressBarValue(Fuel[playerid], fuel[vehicleid]);

				SetTimer("SpawnCar", 1000, false);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Despawn the current spawned vehicles before spawning any more (or attempting to do so).");
		    }
		}
	}
	return 1;
}

command(goto, playerid, params[])
{
	new id, string[128], Float: ToX, Float: ToY, Float: ToZ;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /goto [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Spectator[id][SpecSpectatingPlayer] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport to a spectator.");
		        }
		        else if(Player[id][Hospitalized] != 0 && Player[id][Hospitalized] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport to a hospitalized player.");
		        }
		        else if(Player[id][Tutorial] != 0)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport to a player in the tutorial.");
		        }
				else
				{
				    if(Player[id][ActiveReport] >= 1)
				    {
				        SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
				    }

					GetPlayerPos(id, ToX, ToY, ToZ);
					SetPlayerPosEx(playerid, ToX, ToY, ToZ, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
					format(string, sizeof(string), "You have teleported to %s.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
		}
	}
	return 1;
}

command(sellfish, playerid, params[])
{
	new fishtype, string[128];
	if(sscanf(params, "d", fishtype))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /sellfish [type]");
	    SendClientMessage(playerid, GREY, "-----------------------------");
	    SendClientMessage(playerid, WHITE, "Type 1: Tilapia ($10)");
	    SendClientMessage(playerid, WHITE, "Type 2: Cod ($15)");
	    SendClientMessage(playerid, WHITE, "Type 3: Salmon ($80)");
	    SendClientMessage(playerid, WHITE, "Type 4: Lobster ($110)");
	    SendClientMessage(playerid, WHITE, "Type 5: Tuna ($150)");
	    SendClientMessage(playerid, WHITE, "Type 6: All");
	    SendClientMessage(playerid, GREY, "-----------------------------");
	}
	else
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, SellFishX, SellFishY, SellFishZ))
	    {
			if(fishtype < 1 || fishtype > 6)
			{
			    SendClientMessage(playerid, WHITE, "Invalid fish type");
			}
			else
			{
				switch(fishtype)
				{
				    case 1:
				    {
				        new maths;
				        maths = 10 * Player[playerid][Fish1];
				        format(string, sizeof(string), "You have sold all your Tilapia for $%d", maths);
				        SendClientMessage(playerid, WHITE, string);
				        Player[playerid][Fish1] = 0;
				        Player[playerid][Money] += maths;
				    }
				    case 2:
				    {
				        new maths;
				        maths = 15 * Player[playerid][Fish2];
				        format(string, sizeof(string), "You have sold all your Cod for $%d", maths);
				        SendClientMessage(playerid, WHITE, string);
				        Player[playerid][Fish2] = 0;
				        Player[playerid][Money] += maths;
				    }
				    case 3:
				    {
				        new maths;
				        maths = 80 * Player[playerid][Fish3];
				        format(string, sizeof(string), "You have sold all your Salmon for $%d", maths);
				        SendClientMessage(playerid, WHITE, string);
				        Player[playerid][Fish3] = 0;
				        Player[playerid][Money] += maths;
				    }
				    case 4:
				    {
				        new maths;
				        maths = 110 * Player[playerid][Fish4];
				        format(string, sizeof(string), "You have sold all your Lobster for $%d", maths);
				        SendClientMessage(playerid, WHITE, string);
				        Player[playerid][Fish4] = 0;
				        Player[playerid][Money] += maths;
				    }
				    case 5:
				    {
				        new maths;
				        maths = 150 * Player[playerid][Fish5];
				        format(string, sizeof(string), "You have sold all your Tuna for $%d", maths);
				        SendClientMessage(playerid, WHITE, string);
				        Player[playerid][Fish5] = 0;
				        Player[playerid][Money] += maths;
				    }
				    case 6:
				    {
				        new maths;
				        maths = (Player[playerid][Fish1] * 10)+(Player[playerid][Fish2] * 15)+(Player[playerid][Fish3] * 80)+(Player[playerid][Fish4] * 110)+(Player[playerid][Fish5] * 150);
				        
				        Player[playerid][Fish1] = 0;
				        Player[playerid][Fish2] = 0;
				        Player[playerid][Fish3] = 0;
				        Player[playerid][Fish4] = 0;
				        Player[playerid][Fish5] = 0;
				        Player[playerid][Money] += maths;
				        format(string, sizeof(string), "You have sold all your fish for $%d", maths);
				        SendClientMessage(playerid, WHITE, string);
				    }
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not at the /sellfish location.");
	    }
	}
	return 1;
}

command(fish, playerid, params[])
{
	#pragma unused params

	new string[128];

	if(Player[playerid][CantFish] == 0 && Player[playerid][FishCoolDown] == 0)
	{
	    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	    {
			case 473: // Dinghy max. 10
			{
			    if(Player[playerid][FishAttempts] >= 10)
			    {
			        Player[playerid][CantFish] = 1;
	        		SendClientMessage(playerid, WHITE, "You have caught enough fish for now, please wait 15 minutes.");
			    }
			    else
			    {
					new rand = random(20);
					Player[playerid][FishAttempts]++;
					Player[playerid][FishCoolDown] += 10;
					format(string, sizeof(string), "* %s reels in the rod, catching a fish.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);
					switch(rand)
					{
					    case 0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17:
					    {
					        Player[playerid][Fish2]++;
					        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					    }
					    case 8, 9, 10, 11, 12, 13, 14, 19:
					    {
					        Player[playerid][Fish1]++;
					        SendClientMessage(playerid, WHITE, "You have caught a Tilapia (mud fish).");
					    }
					    case 18:
					    {
					        Player[playerid][Fish3]++;
					        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
					    }
					}
			    }
			}
			case 453: // Reefer
			{
			    new Float: x, Float: y, Float: z;
			    GetPlayerPos(playerid, x, y, z);
				if(Player[playerid][FishAttempts] >= 15)
			    {
			        Player[playerid][CantFish] = 1;
	        		SendClientMessage(playerid, WHITE, "You have caught enough fish for now, please wait 15 minutes.");
			    }
			    else
			    {
					new rand = random(5);
					Player[playerid][FishAttempts]++;
					Player[playerid][FishCoolDown] += 10;
					format(string, sizeof(string), "* %s reels in the rod, catching a fish.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);
                    if(x <= 3063.1777 && x >= 2801.8359 && y <= 591.3929 && y >= 302.2123) // Salmon
					{
						switch(rand)
						{
						    case 0, 1:
						    {
						        Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
						    }
						    case 3, 4, 2:
						    {
						        Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
						    }
						}
					}
					else if(x <= 81.895 && x >= -254.500 && y <= -1623.460 && y >= -1839.900) // Lobster
					{
					    switch(rand)
					    {
					        case 0:
					        {
					            Player[playerid][Fish4]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Lobster.");
					        }
					        case 1, 2, 3, 4:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else if(x <= -1881.382 && x >= -2614.206 && y <= 2118.073 && y >= 1559.330) // salmon 2
					{
					    switch(rand)
					    {
					        case 0, 1:
					        {
					            Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
					        }
					        case 4, 2, 3:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else
					{
					    switch(rand)
					    {
							case 0:
							{
							    Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
							}
							case 2:
							{
							    Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
							}
							case 1, 3, 4:
							{
							    Player[playerid][Fish1]++;
					        	SendClientMessage(playerid, WHITE, "You have caught a Tilapia (mud fish).");
							}
						}
					}
			    }
			}
			case 454: // tropic
			{
			    if(Player[playerid][FishAttempts] >= 25)
			    {
			        Player[playerid][CantFish] = 1;
	        		SendClientMessage(playerid, WHITE, "You have caught enough fish for now, please wait 15 minutes.");
			    }
			    else
			    {
					new rand = random(5);
					Player[playerid][FishAttempts]++;
					Player[playerid][FishCoolDown] += 10;
					format(string, sizeof(string), "* %s reels in the rod, catching a fish.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);
					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid, x, y, z);
					if(x <= 3063.1777 && x >= 2801.8359 && y <= 591.3929 && y >= 302.2123) // Salmon
					{
						switch(rand)
						{
						    case 0, 1, 2:
						    {
						        Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
						    }
						    case 3, 4:
						    {
						        Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
						    }
						}
					}
					else if(x <= 1267.763 && x >= 104.950 && y <= -2752.155 && y >= -2970.958)// tuna
					{
					    switch(rand)
					    {
					        case 0, 1:
					        {
					            Player[playerid][Fish5]++;
					            SendClientMessage(playerid, WHITE, "You have caught a Tuna.");
					        }
					        case 2:
					        {
					            new rand2 = random(100);
					            if(rand2 == 69)
					            {
					                SendClientMessage(playerid, WHITE, "You have found an oyster with a pearl worth $5,000!");
					                Player[playerid][Money] += 5000;
					            }
					            else
					            {
									Player[playerid][Fish5]++;
									SendClientMessage(playerid, WHITE, "You have caught a Tuna.");
					            }
					        }
					        case 3, 4:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else if(x <= 81.895 && x >= -254.500 && y <= -1623.460 && y >= -1839.900) // Lobster
					{
					    switch(rand)
					    {
					        case 0, 1, 2:
					        {
					            Player[playerid][Fish4]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Lobster.");
					        }
					        case 3, 4:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else if(x <= -1881.382 && x >= -2614.206 && y <= 2118.073 && y >= 1559.330) // salmon 2
					{
					    switch(rand)
					    {
					        case 0, 1, 2, 3:
					        {
					            Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
					        }
					        case 4:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else
					{
					    switch(rand)
					    {
							case 0, 1:
							{
							    Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
							}
							case 2, 3:
							{
							    Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
							}
							case 4:
							{
							    Player[playerid][Fish1]++;
					        	SendClientMessage(playerid, WHITE, "You have caught a Tilapia (mud fish).");
							}
						}
					}
				}
			}
			case 452: // speeder
			{
			    if(Player[playerid][FishAttempts] > 15)
			    {
			        Player[playerid][CantFish] = 1;
	        		SendClientMessage(playerid, WHITE, "You have caught enough fish for now, please wait 15 minutes.");
			    }
			    else
			    {
					new rand = random(5);
					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid, x, y, z);
					Player[playerid][FishAttempts]++;
					Player[playerid][FishCoolDown] += 5;
					format(string, sizeof(string), "* %s reels in the rod, catching a fish.", GetName(playerid));
					NearByMessage(playerid, PURPLE, string);
					if(x <= 3063.1777 && x >= 2801.8359 && y <= 591.3929 && y >= 302.2123) // Salmon
					{
						switch(rand)
						{
						    case 0, 1:
						    {
						        Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
						    }
						    case 3, 4, 2:
						    {
						        Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
						    }
						}
					}
					else if(x <= 81.895 && x >= -254.500 && y <= -1623.460 && y >= -1839.900) // Lobster
					{
					    switch(rand)
					    {
					        case 0:
					        {
					            Player[playerid][Fish4]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Lobster.");
					        }
					        case 1, 2, 3, 4:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else if(x <= -1881.382 && x >= -2614.206 && y <= 2118.073 && y >= 1559.330) // salmon 2
					{
					    switch(rand)
					    {
					        case 0, 1:
					        {
					            Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
					        }
					        case 4, 2, 3:
					        {
					            Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
					        }
					    }
					}
					else
					{
					    switch(rand)
					    {
							case 0:
							{
							    Player[playerid][Fish3]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Salmon.");
							}
							case 2:
							{
							    Player[playerid][Fish2]++;
						        SendClientMessage(playerid, WHITE, "You have caught a Cod.");
							}
							case 1, 3, 4:
							{
							    Player[playerid][Fish1]++;
					        	SendClientMessage(playerid, WHITE, "You have caught a Tilapia (mud fish).");
							}
						}
					}
			    }
			}
		}
	}
	else
	{
	    if(Player[playerid][FishCoolDown] != 0)
	    {
	        SendClientMessage(playerid, WHITE, "Please wait 10 seconds before trying to fish again.");
	    }
	    else if(Player[playerid][CantFish] == 0)
	    {
	        Player[playerid][CantFish] = 1;
	        SendClientMessage(playerid, WHITE, "You have caught enough fish for now, please wait 15 minutes.");
	    }
	    else
	    {
	    	SendClientMessage(playerid, WHITE, "Please wait your reload time (15 minutes).");
	    }
	}
}

command(remotechangeadminlevel, playerid, params[])
{
	new name[MAX_PLAYER_NAME], level, string[255];
	if(sscanf(params, "zd", name, level))
	{
	    if(Player[playerid][AdminLevel] >= 7)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeadminlevel [playername] [new level]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 7)
	    {
	    	mysql_format(mysql, string, sizeof(string), "UPDATE users SET AdminLevel=%d WHERE NormalName='%s'", level, name);
			mysql_tquery(mysql, string, "", "");
			format(string, sizeof(string), "You have successfully changed %s's admin level to %d", name, level);
			SendClientMessage(playerid, LIGHTRED, string);
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You need to be a level 7+ admin to use this command.");
		}
	}
	return 1;
}

command(changeadminlevel, playerid, params[])
{
	new id, level, string[128];
	if(sscanf(params, "ud", id, level))
	{
	    if(Player[playerid][AdminLevel] >= 7)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeadminlevel [playerid] [new level]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 7)
	    {
	        if(Player[id][AdminLevel] == 0 && level >= 1)
	        {
                if(level >= Player[playerid][AdminLevel])
                {
                    SendClientMessage(playerid, WHITE, "You can only hire an admin to a lower level.");
                }
                else
                {
	                Player[id][AdminLevel] = level;
					Player[id][BeforeAdminVipRank] = Player[id][VipRank];
					Player[id][VipRank] = 4;
			        format(string, sizeof(string), "%s has been hired to admin level %d by %s.", GetName(id), level, GetName(playerid));
			        SendToAdmins(ADMINORANGE, string, 0);
			        StatLog(string);

				    if(Player[id][AdminPIN] == 0)
				    {
				        TogglePlayerControllable(id, false);
				        SendClientMessage(id, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
				        ShowPlayerDialog(id, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
				    }
				    else
				    {
				        Player[id][PINUnauthedTime] = 1;
				        SendClientMessage(id, WHITE, "You have 10 seconds to login before you are auto-kicked.");
				        TogglePlayerControllable(id, false);
						ShowPlayerDialog(id, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
					}
		        }
            }
	        else if(level >= Player[playerid][AdminLevel])
    	    {
        	    SendClientMessage(playerid, WHITE, "You're unable to execute this action.");
        	}
        	else if(level >= Player[id][AdminLevel])
	    	{
	        	format(string, sizeof(string), "%s has been promoted to admin level %d by %s.", GetName(id), level, GetName(playerid));
	        	SendToAdmins(ADMINORANGE, string, 0);
	        	Player[id][AdminLevel] = level;
		        StatLog(string);
		    }
		    else if(level < 1)
		    {
		        format(string, sizeof(string), "%s has been removed from the admin team by %s.", GetName(id), GetName(playerid));
		        SendToAdmins(ADMINORANGE, string, 0);
		        Player[id][AdminLevel] = level;
		        Player[id][AdminDuty] = 0;
		        Player[id][VipRank] = Player[id][BeforeAdminVipRank];
		        SetPlayerName(id, Player[id][NormalName]);
		        StatLog(string);
		    }
		    else if(level < Player[id][AdminLevel])
		    {
		        format(string, sizeof(string), "%s has been demoted to admin level %d by %s.", GetName(id), level, GetName(playerid));
		        SendToAdmins(ADMINORANGE, string, 0);
		        Player[id][AdminLevel] = level;
		        StatLog(string);
		    }
		}
    }
	return 1;
}

/*command(permaban, playerid, params[])
{
	new id, reason[128], string[128], ServerURL[128];
	if(sscanf(params, "us", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /permaban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    if(IsPlayerConnected(id) && id != playerid)
		    {
		        if(Player[id][AdminLevel] > Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank).");
		            return 1;
		        }

			    new hour, minute, second, day, year, month;
		        gettime(hour, minute, second);
		        getdate(year, month, day);
	            new IP[21];
	    		GetPlayerIp(id, IP, sizeof(IP));
				format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | %s (Permabanned) | %s", day, month, year, hour, minute, IP, GetName(id), reason, Player[playerid][AdminName]);
				BanLog(string);

		        if(Player[id][AdminLevel] < 1)
		        {
		        	Player[playerid][AdminActions]++;
		            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
		        }

		        GetServerVarAsString("weburl", ServerURL, sizeof(ServerURL));
		        format(string, sizeof(string), "Ban: %s has been permanently banned by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
		        SendClientMessageToAll(LIGHTRED, string);
		        AdminActionsLog(string);
		        format(string, sizeof(string), "You have been banned for %s. Only an admin with FTP access can unban you.", reason);
		        SendClientMessage(id, GREY, string);
		        Player[id][Banned] = 2;
		        RangeBan(id);
		        Ban(id);
		        SendRconCommand("reloadbans");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in or is you.");
		        return 1;
		    }
		}
	}
	return 1;
}*/

command(propose, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /propose [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(strcmp(Player[id][MarriedTo], "Nobody", true) == 0)
	        {
	            if(Businesses[Player[playerid][InBusiness]][bType] == 9 && Businesses[Player[id][InBusiness]][bType] == 9)
	            {
	                if(GetDistanceBetweenPlayers(playerid, id) < 7)
	                {
	                    if(Player[playerid][Money] >= 10000)
	                    {
				            format(string, sizeof(string), "You are proposing to %s! Wait for them to approve/deny your proposal.", GetName(id));
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "%s is proposing to you! Type 'Yes' (and only that) in character to accept their proposal.", GetName(playerid));
				            SendClientMessage(id, WHITE, string);
				            Player[id][PendingProposal] = playerid;
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You need at least $10,000 to pay for the essential church services.");
			            }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You're too far away!");
		            }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You both have to be in a church to do this.");
	            }
	        }
	        else
	        {
	        	SendClientMessage(playerid, WHITE, "That person is already married.");
	        }
	    }
		else
		{
		    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in or is you.");
		}
	}
	return 1;
}

command(divorce, playerid, params[])
{
	#pragma unused params
	if(strlen(Player[playerid][MarriedTo]) < 1)
	{
	    SendClientMessage(playerid, WHITE, "You're not married.");
	}
	else
	{
		new string[128], tmp = GetPlayerID(Player[playerid][MarriedTo]);
		if(IsPlayerConnectedEx(tmp))
		{
		    format(string, sizeof(string), "%s is requesting a divorce (type /approve divorcerequest to proceed).", GetName(playerid));
		    SendClientMessage(tmp, WHITE, string);
		    format(string, sizeof(string), "You have requested to divorce %s.", GetName(tmp));
		    SendClientMessage(playerid, WHITE, string);
		    Player[playerid][PendingDivorce] = tmp;
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "Your bride must submit to the divorce, and they aren't online.");
		}
	}
	return 1;
}

command(deleteaccount, playerid, params[])
{
	new Name[128], string[128], string2[128];
	if(sscanf(params, "z", Name))
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /deleteaccount [name]");
			SendClientMessage(playerid, GREY, "NOTE: This command is CaSe SeNsItIvE.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	        if(strlen(Name) >= 3 && strlen(Name) < MAX_PLAYER_NAME+1)
	        {
		        format(string2, sizeof(string2), "Accounts/%s.ini", Name);
		        if(fexist(string2))
		        {
		            if(dini_Int(string, "AdminLevel") < Player[playerid][AdminLevel])
		            {
		                dini_IntSet(string, "Banned", 3);
		                fremove(string2);
		                format(string, sizeof(string), "Account %s (%s) has been deleted / locked.", Name, string2);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "WARNING: %s has deleted / locked %s's account.", GetName(playerid), Name);
		                SendToAdmins(ADMINORANGE, string, 1);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You can't delete a higher level admins' account.");
		            }
		    	}
				else
				{
				    SendClientMessage(playerid, WHITE, "Account not found.");
				}
			}
		}
	}
}

command(sban, playerid, params[])
{
	new id, reason[128], string[128];
	if(sscanf(params, "uz", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /sban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
		    if(IsPlayerConnected(id))
		    {
		        if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank, or the same).");
		        }
				else
				{
				    if(strlen(reason) >= 1)
				    {
					    new hour, minute, second, day, year, month;
				        gettime(hour, minute, second);
				        getdate(year, month, day);

			            new IP[21];
			    		GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | %s (SILENT) | %s", day, month, year, hour, minute, IP, GetName(id), reason, Player[playerid][AdminName]);
						BanLog(string);

				        if(Player[id][AdminLevel] < 1)
				        {
				        	Player[playerid][AdminActions]++;
                            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				        }

				        format(string, sizeof(string), "WARNING: %s has been silently banned by %s, defined reason: %s", GetName(id), Player[playerid][AdminName], reason);
						SendToAdmins(ADMINORANGE, string, 0);
				        Player[id][Banned] = 1;
				        Ban(id);
				        AdminActionsLog(string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "SYNTAX: /sban [playerid] [reason]");
			        }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		        return 1;
		    }
		}
	}
	return 1;
}

command(ban, playerid, params[])
{
	new id, reason[128], string[128], ServerURL[128];
	if(sscanf(params, "uz", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /ban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank, or the same).");
		        }
		        else
		        {
				    if(strlen(reason) >= 1)
				    {
					    new hour, minute, second, day, year, month;
				        gettime(hour, minute, second);
				        getdate(year, month, day);
				        SavePlayerData(playerid);

			            new IP[21];

			    		GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | %s | %s", day, month, year, hour, minute, IP, GetName(id), reason, Player[playerid][AdminName]);
						BanLog(string);

				        if(Player[id][AdminLevel] < 1)
				        {
				        	Player[playerid][AdminActions]++;
				        	SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				        }

				        GetServerVarAsString("weburl", ServerURL, sizeof(ServerURL));
				        format(string, sizeof(string), "Ban: %s has been banned by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
				        SendClientMessageToAll(LIGHTRED, string);
				        AdminActionsLog(string);
				        format(string, sizeof(string), "You have been banned for %s. If you wish to appeal your ban, go to %s.", reason, ServerURL);
				        SendClientMessage(id, GREY, string);
				        Player[id][Banned] = 1;
				        Ban(id);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "SYNTAX: /ban [playerid] [reason]");
			        }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		        return 1;
		    }
		}
	}
	return 1;
}

//--------------------------------------------------------------------------------------------------

public RandomEx(min, max)
{
	return random(max - min) + min;
}

public IsSeatOccupied(vehicleid, seatid)
{
	new occurrence = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnectedEx(i))
	    {
	        if(IsPlayerInAnyVehicle(i))
	        {
	            if(GetPlayerVehicleID(i) == vehicleid)
	            {
	                if(GetPlayerVehicleSeat(i) == seatid)
	                {
	                    occurrence++;
	                }
	            }
	        }
	    }
	}
	return occurrence;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{

 	/*Fuel[playerid] = CreateProgressBar(549.00, 30.00, 60.0, 4.50, -16776961, 100.0);
	ShowProgressBarForPlayer(playerid, Fuel[playerid]);
	SetProgressBarColor(Fuel[playerid], GREEN);
	SetProgressBarValue(Fuel[playerid], fuel[vID]);
	UpdateProgressBar(Fuel[playerid], playerid);
	SetTimerEx("ProgressBarValue", 5000, false, "i", playerid);*/
    new model = GetVehicleModel(vehicleid);
	if(Player[playerid][PlayingHours] <= 2)
	{
		SendClientMessage(playerid, YELLOW, "Type /e to start the vehicle. (/hotwire if it isn't yours.)");
	}
    switch(RadioStation[vehicleid])
    {
        case 1:
        {
        	PlayAudioStreamForPlayer(playerid, "http://housenationuk.com/listen.pls");
		}
		case 2:
		{
		    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-uktop40&file=181-uktop40.pls");
		}
		case 3:
		{
		    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-eagle&file=181-eagle.pls");
		}
		case 4:
		{
		    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-reggae&file=181-reggae.pls");
		}
		case 5:
		{
		    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls");
		}
		case 6:
		{
		    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-comedy&file=181-comedy.pls");
		}
		case 7:
		{
		    PlayAudioStreamForPlayer(playerid, Player[playerid][SavedMP3Link]);
		}
	}

    if(model == 401)
    {
        if(DrivingTest[playerid] == 1 || DrivingTest[playerid] == 2)
        {
        	SendClientMessage(playerid, WHITE, "Type /e to start the engine drive safe to pass your exam. $1,000 has been deducted from your bank account for this test.");
        	DrivingTest[playerid] = 2;
        	fuel[vehicleid] = 100;
        	SetPlayerCheckpoint(playerid, 192.5616,-24.4100,1.4297, 5.0);
		}
		else
		{
	        SendClientMessage(playerid, WHITE, "You need to have passed the theoretical exam before you can take the drivers test");
	        fuel[vehicleid] = 0;
	        RemovePlayerFromVehicle(playerid);		
		}
	}

    if(Jobs[Player[playerid][Job]][JobType] != 8)
    {
        if(model == 574)
        {
            RemovePlayerFromVehicle(playerid);
        }
    }

	if (GetPlayerSurfingVehicleID(playerid) == vehicleid)
	{
		ClearAnimations(playerid);
	}

	if(Jobs[Player[playerid][Job]][JobType] != 3)
	{
		if(model == 403)
		{
            RemovePlayerFromVehicle(playerid);
		}
	}

	if(Jobs[Player[playerid][Job]][JobType] == 9)
	{
		if(model == 574)
		{
			SendClientMessage(playerid, WHITE, "Type /cleanstreets to start!");
		}
	}
	else if(model == 574)
	{
	    RemovePlayerFromVehicle(playerid);
	}

	if(model == 596)
	{
	    Player[playerid][GotInCopCar]++;
	    ResetPlayerWeapons(playerid);
	    GivePlayerSavedWeapons(playerid);
	}
	return 1;
}

stock GetVehicleCarID(gameid)
{
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(Vehicles[i][GameID] == gameid)
		{
			return i;
		}
	}
	return 1;
}	

stock SpectatorRefresh(playerid, otherplayer)
{
	if(Player[playerid][AdminLevel] >= 1)
	{
		if(otherplayer == INVALID_PLAYER_ID)
		{
		    SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
		    SetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
		    SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
		    SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);

	    	SetCameraBehindPlayer(playerid);

	    	Spectator[playerid][SpecSpectatingPlayer] = -1;
	    	Spectator[playerid][SpecSpectatingState] = -1;

	    	SetPlayerSkin(playerid, Player[playerid][LastSkin]);
	    	TogglePlayerControllable(playerid, true);

	    	SendClientMessage(playerid, WHITE, "You are no longer spectating; the specified player ID is unavailable.");

		}
		else
		{
		    if(GetPlayerInterior(playerid) != GetPlayerInterior(otherplayer))
		    {
				SetPlayerInterior(playerid, GetPlayerInterior(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 0;
			}

		    if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(otherplayer))
		    {
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 0;
			}

	    	if(IsPlayerInAnyVehicle(otherplayer) == 1 && Spectator[playerid][SpecSpectatingState] != 1)
			{
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 1;
			}
	    	else if(!IsPlayerInAnyVehicle(otherplayer) && Spectator[playerid][SpecSpectatingState] != 2)
			{
				PlayerSpectatePlayer(playerid, otherplayer);
				Spectator[playerid][SpecSpectatingState] = 2;
			}
		}
	}
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(Player[playerid][AdminLevel] >= 1)
	{
	    new Float: health, Float: armour, healthf, armourf, string[128];
		if(Spectator[playerid][SpecSpectatingPlayer] == -1)
		{
			GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
			Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
			Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
		}

		if(Player[playerid][PhoneStat] == 1)
		{
    		Player[playerid][PhoneStat] = 0;
    	}

	    format(string, sizeof(string), "You are now spectating player %s.", GetName(clickedplayerid));
	    SendClientMessage(playerid, GREY, string);
	    printf("%s is now spectating %s", GetName(playerid), GetName(clickedplayerid));
	    GetPlayerHealth(clickedplayerid, health);
		GetPlayerArmour(clickedplayerid, armour);
		healthf = floatround(health, floatround_ceil);
		armourf = floatround(armour, floatround_ceil);

	    format(string, sizeof(string), "Health: %d | Armour: %d | Money: $%d", healthf, armourf, Player[clickedplayerid][Money]);
	    SendClientMessage(playerid, WHITE, string);
	    Spectator[playerid][SpecSpectatingPlayer] = clickedplayerid;
	    TogglePlayerSpectating(playerid, true);

	    if(IsPlayerInAnyVehicle(clickedplayerid))
		{
		    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
		    Spectator[playerid][SpecSpectatingState] = 1;
		}
		else
		{
			PlayerSpectatePlayer(playerid, clickedplayerid);
			Spectator[playerid][SpecSpectatingState] = 2;
		}

	    Spectator[playerid][SpecSpectatingPlayer] = clickedplayerid;
	    SpectatorRefresh(playerid, clickedplayerid);
	}
	else
	{
	    new string[128];
	    format(string, sizeof(string), "You have clicked %s (ID: %d).", GetName(clickedplayerid), clickedplayerid);
	    SendClientMessage(playerid, WHITE, string);
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    LastEnteredCar[playerid] = vehicleid;
    StopAudioStreamForPlayer(playerid);
    if(Player[playerid][TrashRoute] != 0)
    {
        if(Player[playerid][TrashCP] != 0)
        {
            SendClientMessage(playerid, WHITE, "Your run has been cancelled");
            Player[playerid][TrashRoute] = 0;
            Player[playerid][TrashCP] = 0;
        }
    }

	KillTimer(EngineUpgrade1[playerid]);
	SetTimerEx("DProgressBar", 1000, false, "i", playerid);
    KillTimer(TimerCE[playerid]);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
		/*if(Vehicles[PlayerVehicle][CarGroup] != 0 && Vehicles[PlayerVehicle][CarGroup] != Player[playerid][Group])
		{
			format(string, sizeof(string), "This vehicle is only usable by %s.", Groups[Vehicles[PlayerVehicle][CarGroup]][GroupName]);
			SendClientMessage(playerid, WHITE, string);
			RemovePlayerFromVehicle(playerid);
		}*/

			Fuel[playerid] = CreateProgressBar(549.00, 30.00, 60.0, 4.50, -16776961, 100.0);
			ShowProgressBarForPlayer(playerid, Fuel[playerid]);
			SetProgressBarColor(Fuel[playerid], GREEN);
			SetProgressBarValue(Fuel[playerid], fuel[GetPlayerVehicleID(playerid)]);
			UpdateProgressBar(Fuel[playerid], playerid);

		new vehicleid = GetPlayerVehicleID(playerid);

		if(IsAnOwnedCar(vehicleid))
		{
		    if(Player[playerid][AdminLevel] < 1)
		    {
			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(Player[i][LockedCar] == 1 && Player[i][CarLinkID] == vehicleid)
			        {
			            SendClientMessage(playerid, WHITE, "This vehicle is locked.");
			            RemovePlayerFromVehicle(i);
			        }
			        if(Player[i][LockedCar2] == 1 && Player[i][Car2LinkID] == vehicleid)
			        {
			            SendClientMessage(playerid, WHITE, "This vehicle is locked.");
			            RemovePlayerFromVehicle(i);
			        }
			        if(Player[i][LockedCar3] == 1 && Player[i][Car3LinkID] == vehicleid)
			        {
			            SendClientMessage(playerid, WHITE, "This vehicle is locked.");
			            RemovePlayerFromVehicle(i);
			        }
			    }
		    }
		}

	    Player[playerid][LastCarID] = GetPlayerVehicleID(playerid);
	    new VehID = GetPlayerVehicleID(playerid), VehModel = GetVehicleModel(VehID);

	    if(VehModel == 596)
	    {
	        Player[playerid][GotInCopCar]++;
	        ResetPlayerWeapons(playerid);
	        GivePlayerSavedWeapons(playerid);
	    }
	    /*else if(VehModel == 427)
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] != 1)
	        {
	        	SetPlayerArmour(playerid, 0);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You have collected some armour from the Enforcer.");
	        }
	    }*/

	    if(Player[playerid][Cuffed] >= 1)
	    {
	        RemovePlayerFromVehicle(playerid);
	        TogglePlayerControllable(playerid, false);
	        SendClientMessage(playerid, WHITE, "You may not execute that action right now.");
	    }
	}
	else if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    if(Player[playerid][GotInCopCar] >= 1)
	    {
	        ResetPlayerWeapons(playerid);
	        GivePlayerSavedWeapons(playerid);
	        Player[playerid][GotInCopCar] = 0;
	    }

	    if(Player[playerid][ModShop] == 1)
	    {
	        Player[playerid][ModShop] = 0;
	        SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
	        SetPlayerVirtualWorld(playerid, SpawnWorld);
	        SetPlayerInterior(playerid, SpawnInt);
	        SetPlayerFacingAngle(playerid, 0);
	    }
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
	    DestroyProgressBar(Fuel[playerid]);
	}
	return 1;
}

public RefreshMaterials(playerid)
{
	Player[playerid][CompleteRun] = 0;
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	switch(DrivingTest[playerid])
	{
	    case 2:
	    {
	        SetPlayerCheckpoint(playerid, 221.0767,-24.5804,1.4265, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 3:
	    {
	        SetPlayerCheckpoint(playerid, 235.2916,35.9162,2.4297, 5.0);
	        DrivingTest[playerid] += 2;
	    }
	    case 4:
	    {
	        /*SetPlayerCheckpoint(playerid, 386.7373,124.5974,6.3339, 5.0);
	        DrivingTest[playerid]++;*/
	    }
	    case 5:
	    {
	        SetPlayerCheckpoint(playerid, 393.3128,130.1183,6.7091, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 6:
	    {
	        SetPlayerCheckpoint(playerid, 499.1152,219.8402,12.7927, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 7:
	    {
	        SetPlayerCheckpoint(playerid, 526.5207,24.9739,22.3886, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 8:
	    {
	        SetPlayerCheckpoint(playerid, 512.6799,-136.5560,37.6072, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 9:
	    {
	        SetPlayerCheckpoint(playerid, 338.9831,-139.8703,1.4246, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 10:
	    {
	        SetPlayerCheckpoint(playerid, 333.2666,-75.5594,1.4219, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 11:
	    {
	        SetPlayerCheckpoint(playerid, 186.1886,-68.9543,1.4297, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 12:
	    {
	        SetPlayerCheckpoint(playerid, 171.6335,-33.2325,1.5781, 5.0);
	        DrivingTest[playerid]++;
	    }
	    case 13:
	    {
			new Float: vHP;
			GetVehicleHealth(GetPlayerVehicleID(playerid), vHP);
			if(vHP == 1000)
			{
			    Player[playerid][License] = 1;
                DisablePlayerCheckpoint(playerid);
			    DrivingTest[playerid] = 0;
			    SendClientMessage(playerid, WHITE, "Congratulations, you've passed your driving test, you have received your License");
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
			else
			{
			    DisablePlayerCheckpoint(playerid);
				DrivingTest[playerid] = 1;
			    SendClientMessage(playerid, WHITE, "Unfortunately you've failed your driving test, you can retry but it will cost you $1,000");
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
	    }
	}
	switch(SweepProgress[playerid])
	{
	    case 0:
	    {
			SetPlayerCheckpoint(playerid, 2290.6721,-18.0573,26.3356, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 1:
	    {
	        SetPlayerCheckpoint(playerid, 2230.2266,-25.8540,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 2:
	    {
	        SetPlayerCheckpoint(playerid, 2223.3584,-95.6355,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 3:
	    {
	        SetPlayerCheckpoint(playerid, 2335.2886,-101.5277,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 4:
	    {
	        SetPlayerCheckpoint(playerid, 2346.6838,-31.1570,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 5:
	    {
	        SetPlayerCheckpoint(playerid, 2466.4626,-20.1892,26.3382, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 6:
	    {
	        SetPlayerCheckpoint(playerid, 2534.5613,-4.7381,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 7:
	    {
	        SetPlayerCheckpoint(playerid, 2536.6187,41.7412,26.3437, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 8:
	    {
	        SetPlayerCheckpoint(playerid, 2536.0002,106.5739,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 9:
	    {
	        SetPlayerCheckpoint(playerid, 2469.8770,113.8279,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 10:
	    {
	        SetPlayerCheckpoint(playerid, 2460.9695,45.9028,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 11:
	    {
	        SetPlayerCheckpoint(playerid, 2407.2756,44.4224,26.3353, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 12:
	    {
	        SetPlayerCheckpoint(playerid, 2396.3003,86.0493,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 13:
	    {
	        SetPlayerCheckpoint(playerid, 2396.3003,86.0493,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 14:
	    {
	        SetPlayerCheckpoint(playerid, 2345.3704,94.3532,26.3324, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 15:
	    {
	        SetPlayerCheckpoint(playerid, 2295.4316,94.3752,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 16:
	    {
	        SetPlayerCheckpoint(playerid, 2224.8157,94.5162,26.3390, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 17:
	    {
	        SetPlayerCheckpoint(playerid, 2221.9363,42.9940,26.3350, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 18:
	    {
			SetPlayerCheckpoint(playerid, 2267.5063,38.6956,26.3359, 3.0);
			SweepProgress[playerid]++;
	    }
	    case 19:
	    {
	        SweepProgress[playerid] = -1;
			SendClientMessage(playerid, WHITE, "Good job! You've earned $350, you can clean the streets again in 10 minutes");
			Player[playerid][Money] += 350;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			DisablePlayerCheckpoint(playerid);
			Player[playerid][StreetSweeperReload] = 600;
	    }
	}
	if(Player[playerid][Checkpoint] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    Player[playerid][Checkpoint] = 0;
	}
	if(PizzaDelivery[playerid] == 1)
	{
	    SendClientMessage(playerid, WHITE, "You have delivered your pizza, head back to collect your pay. (/collectpizzapay)");
	    PizzaDelivery[playerid] = 2;
		SetPlayerCheckpoint(playerid, Jobs[10][JobMiscLocationOneX], Jobs[10][JobMiscLocationOneY], Jobs[10][JobMiscLocationOneZ], 5.0);
	}
	if(Player[playerid][Map] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You have reached your desired destination.");
	    Player[playerid][Map] = 0;
	    Player[playerid][Checkpoint] = 0;
	    DisablePlayerCheckpoint(playerid);
	    return 1;
	}
	else
	{
	    if(Player[playerid][Checkpoint] == 69 || Player[playerid][Checkpoint] == 1)
	    {
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, WHITE, "Checkpoint reached!");
	        Player[playerid][Checkpoint] = 0;
	    }
	    else
	    {
		    if(Player[playerid][AttendingBackupCall] != -1)
		    {
		        Player[playerid][Checkpoint] = 0;
		        Player[playerid][AttendingBackupCall] = -1;
		        SendClientMessage(playerid, WHITE, "Backup checkpoint reached.");
		        DisablePlayerCheckpoint(playerid);
		        return 1;
		    }

			if(Player[playerid][Harvesting] >= 1)
			{
			    switch(Player[playerid][Harvesting])
			    {
			        case 1:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the first checkpoint! You have 4 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest2X, Harvest2Y, Harvest2Z, 10.0);
		                Player[playerid][Harvesting] = 2;
					}
			        case 2:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the second checkpoint! You have 3 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest3X, Harvest3Y, Harvest3Z, 10.0);
		                Player[playerid][Harvesting] = 3;
					}
			        case 3:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the third checkpoint! You have 2 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest4X, Harvest4Y, Harvest4Z, 10.0);
		                Player[playerid][Harvesting] = 4;
					}
			        case 4:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the forth checkpoint! You have 1 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest5X, Harvest5Y, Harvest5Z, 10.0);
		                Player[playerid][Harvesting] = 5;
					}
			        case 5:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the fifth checkpoint! You have 0 remaining.");
						DisablePlayerCheckpoint(playerid);
						Player[playerid][Checkpoint] = 0;
		                Player[playerid][Harvesting] = 7;
		                SendClientMessage(playerid, WHITE, "Now you have the drugs, please deliver them to a chemist / pharmacy business (use /deliver).");


					}
			    }
			}

			if(Player[playerid][FindingHouse] >= 1)
			{
				Player[playerid][Checkpoint] = 0;
				Player[playerid][FindingHouse] = 0;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, WHITE, "You have reached your desired destination.");
			}

			if(Player[playerid][Detecting] >= 1)
			{
			    DisablePlayerCheckpoint(playerid);
			    SendClientMessage(playerid, WHITE, "You have reached the checkpoint. You must now wait 30 seconds before you can /find again.");
			    Player[playerid][Detecting] = 0;
			    Player[playerid][Checkpoint] = 0;
			    Player[playerid][DetectiveCooldown] = 1;
			}

			if(Player[playerid][FindingCar] == 1)
			{
			    DisablePlayerCheckpoint(playerid);
			    Player[playerid][FindingCar] = 0;
			    Player[playerid][Checkpoint] = 0;
			    SendClientMessage(playerid, WHITE, "You've reached the checkpoint.");
			}

			if(isMatRunning[playerid] == 1)
			{
			    if(Player[playerid][VipRank] == 0)
				{
    				Player[playerid][Money] -= 100;
        			SendClientMessage(playerid, WHITE, "You have collected 100 materials.");
           			Player[playerid][Materials] += 100;
           			isMatRunning[playerid] = 0;
           			Player[playerid][Checkpoint] = 0;
			        DisablePlayerCheckpoint(playerid);
				}
				else if(Player[playerid][VipRank] >= 1)
				{
    				Player[playerid][Money] -= 200;
        			SendClientMessage(playerid, WHITE, "You have collected 100 material packages.");
           			SendClientMessage(playerid, YELLOW, "You have taken an additional 100 due to your VIP bronze+");
              		Player[playerid][Materials] += 200;
              		isMatRunning[playerid] = 0;
              		Player[playerid][Checkpoint] = 0;
			        DisablePlayerCheckpoint(playerid);
				}
			}

			if(IsPlayerInRangeOfPoint(playerid, 3.0, DropCarX, DropCarY, DropCarZ))
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        if(IsAnOwnedCar(GetPlayerVehicleID(playerid)))
			        {
			            SendClientMessage(playerid, WHITE, "You're unable to drop your owned vehicle.");
			        }
			        else
			        {
				        new string[71], playerscar, value = 2000+random(200);
				        Player[playerid][Money] += value;
				        format(string, sizeof(string), "You have delivered a vehicle to be scrapped, and earned $%d.", value);
				        SendClientMessage(playerid, WHITE, string);
				        playerscar = GetPlayerVehicleID(playerid);
				        SetPlayerPos(playerid, DropCarX, DropCarY, DropCarZ);
				        RemovePlayerFromVehicle(playerid);
				        SetVehicleToRespawn(playerscar);
				        Player[playerid][Checkpoint] = 0;
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][InabilityToDropCar] = 1;
				        SendClientMessage(playerid, WHITE, "You will now have to wait 30 minutes before you can scrap another car!");
				    }
			    }
			}


			/*for(new h = 0; h < sizeof(Jobs); h++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, Jobs[h][JobMiscLocationTwoX], Jobs[h][JobMiscLocationTwoY], Jobs[h][JobMiscLocationTwoZ]))
			    {
					if(Jobs[h][JobMiscLocationTwoWorld] == GetPlayerVirtualWorld(playerid))
					{
					    if(Player[playerid][CompleteRun] == 0)
						{
					        Player[playerid][InabilityToMatrun] = 1;
						    DisablePlayerCheckpoint(playerid);
						    Player[playerid][Materials] += 100;
						    Player[playerid][Checkpoint] = 0;
						    Player[playerid][CompleteRun] = 0;
						    Player[playerid][MaterialPackages] = 0;
						    SendClientMessage(playerid, WHITE, "You have collected 100 materials! You must wait 60 seconds before you can run again!");
	                        Player[playerid][MatrunsExecuted]++;

							switch(Player[playerid][MatrunsExecuted])
							{
							    case 100:
							    {
								    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
								    SendClientMessage(playerid, GREY, "You have completed 100 matruns!");
								    Player[playerid][AchievementRank]++;
							    }
							    case 200:
							    {
								    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
								    SendClientMessage(playerid, GREY, "You have completed 200 matruns!");
								    Player[playerid][AchievementRank]++;
							    }
							}
						}
                        else
					    {
					        if(Player[playerid][CompleteRun] < 50)
					        {
					            new string[98];
						        format(string, sizeof(string), "WARNING: %s has reached the mat-run checkpoint in %d seconds (less than 50).", GetName(playerid), Player[playerid][CompleteRun]);
						        SendToAdmins(ADMINORANGE, string, 1);
                            }

					        SendClientMessage (playerid, WHITE, "You must wait 60 seconds (minimum) before you can drop the material packages at the factory.");
         				}
					}
				}
			}*/
		}
	}
	return 1;
}

stock SaveGroup(i)
{
	new FileName[21];
	format(FileName, sizeof(FileName), "Groups/Group_%d.ini", i);
	if(fexist(FileName))
    {
		dini_Set(FileName, "GroupName", Groups[i][GroupName]);
        dini_IntSet(FileName, "CommandTypes", Groups[i][CommandTypes]);
        dini_Set(FileName, "RankName0", Groups[i][RankName0]);
        dini_Set(FileName, "RankName1", Groups[i][RankName1]);
        dini_Set(FileName, "RankName2", Groups[i][RankName2]);
        dini_Set(FileName, "RankName3", Groups[i][RankName3]);
        dini_Set(FileName, "RankName4", Groups[i][RankName4]);
        dini_Set(FileName, "RankName5", Groups[i][RankName5]);
        dini_Set(FileName, "RankName6", Groups[i][RankName6]);
        dini_Set(FileName, "RankName7", Groups[i][RankName7]);
        dini_Set(FileName, "RankName8", Groups[i][RankName8]);
        dini_Set(FileName, "RankName9", Groups[i][RankName9]);
        dini_Set(FileName, "RankName10", Groups[i][RankName10]);
		dini_IntSet(FileName, "Skin0", Groups[i][Skin0]);
        dini_IntSet(FileName, "Skin1", Groups[i][Skin1]);
        dini_IntSet(FileName, "Skin2", Groups[i][Skin2]);
        dini_IntSet(FileName, "Skin3", Groups[i][Skin3]);
        dini_IntSet(FileName, "Skin4", Groups[i][Skin4]);
        dini_IntSet(FileName, "Skin5", Groups[i][Skin5]);
        dini_IntSet(FileName, "Skin6", Groups[i][Skin6]);
        dini_IntSet(FileName, "HQInteriorID", Groups[i][HQInteriorID]);
        dini_FloatSet(FileName, "HQInteriorX", Groups[i][HQInteriorX]);
        dini_FloatSet(FileName, "HQInteriorY", Groups[i][HQInteriorY]);
        dini_FloatSet(FileName, "HQInteriorZ", Groups[i][HQInteriorZ]);
        dini_IntSet(FileName, "HQExteriorID", Groups[i][HQExteriorID]);
        dini_FloatSet(FileName, "HQExteriorX", Groups[i][HQExteriorX]);
        dini_FloatSet(FileName, "HQExteriorY", Groups[i][HQExteriorY]);
        dini_FloatSet(FileName, "HQExteriorZ", Groups[i][HQExteriorZ]);
        dini_FloatSet(FileName, "SafeX", Groups[i][SafeX]);
        dini_FloatSet(FileName, "SafeY", Groups[i][SafeY]);
        dini_FloatSet(FileName, "SafeZ", Groups[i][SafeZ]);
        dini_IntSet(FileName, "SafeInteriorID", Groups[i][SafeInteriorID]);
        dini_IntSet(FileName, "SafeMoney", Groups[i][SafeMoney]);
		dini_IntSet(FileName, "SafeMaterials", Groups[i][SafeMaterials]);
        dini_IntSet(FileName, "HQLock", Groups[i][HQLock]);
        dini_IntSet(FileName, "Pot", Groups[i][SavedPot]);
        dini_IntSet(FileName, "Crack", Groups[i][SavedCrack]);
        dini_IntSet(FileName, "DisbandMinute", Groups[i][DisbandMinute]);
        dini_IntSet(FileName, "DisbandHour", Groups[i][DisbandHour]);
        dini_IntSet(FileName, "DisbandDay", Groups[i][DisbandDay]);
        dini_IntSet(FileName, "DisbandMonth", Groups[i][DisbandMonth]);
        dini_IntSet(FileName, "DisbandYear", Groups[i][DisbandYear]);
        dini_IntSet(FileName, "SafeWorld", Groups[i][SafeWorld]);
        dini_Set(FileName, "MOTD", Groups[i][MOTD]);

		printf("[system] Group %d saved.", i);
	}
	else
	{
	    printf("Could not execute SaveGroup(%d).", i);
	}
}

stock IsAnOwnedCar(linkid)
{
	new tmpcount;
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(Player[i][CarLinkID] == linkid) tmpcount++;
        if(Player[i][Car2LinkID] == linkid) tmpcount++;
        if(Player[i][Car3LinkID] == linkid) tmpcount++;
    }

    if(tmpcount >= 1)
	{
		return true;
	}
	else return false;
}

stock SaveGroups()
{
    for(new i = 0; i < MAX_GROUPS; i++)
    {
		SaveGroup(i);
    }
	return 1;
}

stock SaveJobs()
{
    new FileName[21];
    for(new i = 0; i < MAX_JOBS; i++)
    {
        format(FileName, sizeof(FileName), "Jobs/Job_%d.ini", i);
        if(fexist(FileName))
        {
            dini_Set(FileName, "JobName", Jobs[i][JobName]);
            dini_FloatSet(FileName, "JobJoinPosX", Jobs[i][JobJoinPosX]);
            dini_FloatSet(FileName, "JobJoinPosY", Jobs[i][JobJoinPosY]);
            dini_FloatSet(FileName, "JobJoinPosZ", Jobs[i][JobJoinPosZ]);
            dini_IntSet(FileName, "JobJoinPosWorld", Jobs[i][JobJoinPosWorld]);
            dini_IntSet(FileName, "JobJoinPosInterior", Jobs[i][JobJoinPosInterior]);

            dini_FloatSet(FileName, "JobMiscLocationOneX", Jobs[i][JobMiscLocationOneX]);
            dini_FloatSet(FileName, "JobMiscLocationOneY", Jobs[i][JobMiscLocationOneY]);
            dini_FloatSet(FileName, "JobMiscLocationOneZ", Jobs[i][JobMiscLocationOneZ]);
            dini_IntSet(FileName, "JobMiscLocationOneWorld", Jobs[i][JobMiscLocationOneWorld]);
            dini_IntSet(FileName, "JobMiscLocationOneInterior", Jobs[i][JobMiscLocationOneInterior]);
            dini_Set(FileName, "JobMiscLocationOneMessage", Jobs[i][JobMiscLocationOneMessage]);

            dini_FloatSet(FileName, "JobMiscLocationTwoX", Jobs[i][JobMiscLocationTwoX]);
            dini_FloatSet(FileName, "JobMiscLocationTwoY", Jobs[i][JobMiscLocationTwoY]);
            dini_FloatSet(FileName, "JobMiscLocationTwoZ", Jobs[i][JobMiscLocationTwoZ]);
            dini_IntSet(FileName, "JobMiscLocationTwoWorld", Jobs[i][JobMiscLocationTwoWorld]);
            dini_IntSet(FileName, "JobMiscLocationTwoInterior", Jobs[i][JobMiscLocationTwoInterior]);
            dini_Set(FileName, "JobMiscLocationTwoMessage", Jobs[i][JobMiscLocationTwoMessage]);

			dini_IntSet(FileName, "JobType", Jobs[i][JobType]);

			printf("[system] Job %d saved.", i);
       }
    }
	return 1;
}

stock SaveFurni()
{
 	for(new i = 1; i < MAX_FURNITURE; i++)
	{
	    SaveFurniture(i);
	}
	return 1;
}

stock SaveGarages()
{
	for(new i = 0; i < MAX_GARAGES; i++)
	{
	    SaveGarage(i);
	}
}

stock SaveFactions()
{
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
	    SaveFaction(i);
	}
	return 1;
}

stock SaveHouses()
{
    for(new i = 0; i < MAX_HOUSES; i++)
    {
		SaveHouse(i);
    }
	return 1;
}

stock SaveGarage(i)
{
    new qry[128], query[1024], rows, fields;
	format(qry, sizeof(qry), "SELECT * FROM garages WHERE gID = %d", i);
	mysql_query(mysql, qry);
	mysql_store_result();
	cache_get_data(rows, fields);
	if(rows)
	{
		mysql_format(mysql, query, sizeof(query), "UPDATE garages SET gLinkedHouse=%d, gExteriorX=%f, gExteriorY=%f, gExteriorZ=%f, gInteriorX=%f, gInteriorY=%f, gInteriorZ=%f, gInteriorID=%d, gLockedStatus=%d WHERE gID=%d", Garage[i][gLinkedHouse],
		Garage[i][gExteriorX], Garage[i][gExteriorY], Garage[i][gExteriorZ], Garage[i][gInteriorX], Garage[i][gInteriorY], Garage[i][gInteriorZ], Garage[i][gInteriorID], Garage[i][gLockedStatus], i);
		mysql_query(mysql, query);

		printf("[system] Garage %d saved.", i);
	}
	mysql_free_result();
}

stock SaveFurniture(i)
{
	new qry[128], query[1024], rows, fields;
	format(qry, sizeof(qry), "SELECT * FROM furniture WHERE ID = %d", i);
	mysql_query(mysql, qry);
	mysql_store_result();
	cache_get_data(rows, fields);
	if(rows)
	{
		Furniture[i][frExists] = 1;
	    mysql_format(mysql, query, sizeof(query), "UPDATE furniture SET VW=%d, ObjectID=%d, Active=%d, CocaineGrowth=%d, GrowingCocaineAmount=%d, frExists=%d WHERE ID = %d", Furniture[i][frVW], Furniture[i][frObjectID], Furniture[i][frActive],
		Furniture[i][CocaineGrowth], Furniture[i][GrowingCocaineAmount], Furniture[i][frExists], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE furniture SET X=%f, Y=%f, Z=%f, rX=%f, rY=%f, rZ=%f WHERE ID = %d", Furniture[i][frX], Furniture[i][frY], Furniture[i][frZ],
		Furniture[i][frrX], Furniture[i][frrY], Furniture[i][frrZ], i);
		mysql_query(mysql, query);

		printf("[system] Furniture %d saved.", i);
	}
	else if(!rows && Furniture[i][frObjectID] != 0)
	{
	    format(query, sizeof(query), "INSERT INTO furniture (ID) VALUES (%d)", i);
    	mysql_query(mysql, query);
    	SaveFurniture(i);
	}
	mysql_free_result();
	return 1;
}

stock SaveFaction(i)
{
	new qryp[128], query[1024], rows, fields;
	format(qryp, sizeof(qryp), "SELECT * FROM factions WHERE fID = %d", i);
	mysql_query(mysql, qryp);
	mysql_store_result();
	cache_get_data(rows, fields);
	GetVehiclePos(Faction[i][fLinkID1], Faction[i][fVehicle1X], Faction[i][fVehicle1Y], Faction[i][fVehicle1Z]);
	GetVehicleZAngle(Faction[i][fLinkID1], Faction[i][fVehicle1ZAngle]);
	Faction[i][fFuel1] = fuel[Faction[i][fLinkID1]];
	if(rows)
	{
	    mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fName='%s', fBank=%d, fRank1='%s', fRank2='%s', fRank3='%s', fRank4='%s', fRank5='%s' WHERE fID=%d",
		Faction[i][fName], Faction[i][fBank], Faction[i][fRank1], Faction[i][fRank2], Faction[i][fRank3], Faction[i][fRank4], Faction[i][fRank5], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fMemberLock=%d, fVehicleLock=%d, fMembers=%d WHERE fID=%d", Faction[i][fMemberLock], Faction[i][fVehicleLock], Faction[i][fMembers], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fVehicle1=%d, fLinkID1=%d, fVehicle1X=%f, fVehicle1Y=%f, fVehicle1Z=%f, fVehicle1ZAngle=%f WHERE fID=%d", Faction[i][fVehicle1],
		Faction[i][fLinkID1], Faction[i][fVehicle1X], Faction[i][fVehicle1Y], Faction[i][fVehicle1Z], Faction[i][fVehicle1ZAngle], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fCarCol1=%d, fCarCol2=%d, fFuel1=%d WHERE fID=%d", Faction[i][fCarCol1], Faction[i][fCarCol2], Faction[i][fFuel1], i);
		mysql_query(mysql, query);

		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fVehicle2=%d, fLinkID2=%d, fVehicle2X=%f, fVehicle2Y=%f, fVehicle2Z=%f, fVehicle2ZAngle=%f WHERE fID=%d", Faction[i][fVehicle2],
		Faction[i][fLinkID2], Faction[i][fVehicle2X], Faction[i][fVehicle2Y], Faction[i][fVehicle2Z], Faction[i][fVehicle2ZAngle], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fCar2Col1=%d, fCar2Col2=%d, fFuel2=%d WHERE fID=%d", Faction[i][fCar2Col1], Faction[i][fCar2Col2], Faction[i][fFuel2], i);
		mysql_query(mysql, query);

		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fVehicle3=%d, fLinkID3=%d, fVehicle3X=%f, fVehicle3Y=%f, fVehicle3Z=%f, fVehicle3ZAngle=%f WHERE fID=%d", Faction[i][fVehicle3],
		Faction[i][fLinkID3], Faction[i][fVehicle3X], Faction[i][fVehicle3Y], Faction[i][fVehicle3Z], Faction[i][fVehicle3ZAngle], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fCar3Col1=%d, fCar3Col2=%d, fFuel3=%d WHERE fID=%d", Faction[i][fCar3Col1], Faction[i][fCar3Col2], Faction[i][fFuel3], i);
		mysql_query(mysql, query);

		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fVehicle4=%d, fLinkID4=%d, fVehicle4X=%f, fVehicle4Y=%f, fVehicle4Z=%f, fVehicle4ZAngle=%f WHERE fID=%d", Faction[i][fVehicle4],
		Faction[i][fLinkID4], Faction[i][fVehicle4X], Faction[i][fVehicle4Y], Faction[i][fVehicle4Z], Faction[i][fVehicle4ZAngle], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fCar4Col1=%d, fCar4Col2=%d, fFuel4=%d WHERE fID=%d", Faction[i][fCar4Col1], Faction[i][fCar4Col2], Faction[i][fFuel4], i);
		mysql_query(mysql, query);

		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fVehicle5=%d, fLinkID5=%d, fVehicle5X=%f, fVehicle5Y=%f, fVehicle5Z=%f, fVehicle5ZAngle=%f WHERE fID=%d", Faction[i][fVehicle5],
		Faction[i][fLinkID5], Faction[i][fVehicle5X], Faction[i][fVehicle5Y], Faction[i][fVehicle5Z], Faction[i][fVehicle5ZAngle], i);
		mysql_query(mysql, query);
		mysql_format(mysql, query, sizeof(query), "UPDATE factions SET fCar5Col1=%d, fCar5Col2=%d, fFuel5=%d WHERE fID=%d", Faction[i][fCar5Col1], Faction[i][fCar5Col2], Faction[i][fFuel5], i);
		mysql_query(mysql, query);

		printf("[system] Faction %d saved.", i);
	}
	return 1;
}

stock SaveHouse(i)
{
    new FileName[128], query[512], rows, fields;
    format(FileName, sizeof(FileName), "SELECT * FROM houses WHERE hID = %d", i);
    mysql_query(mysql, FileName);
    mysql_store_result();
    cache_get_data(rows, fields);
    if(rows)
    {
        mysql_format(mysql, query, sizeof(query), "UPDATE houses SET hExteriorID=%d, hExteriorX=%f, hExteriorY=%f, hExteriorZ=%f WHERE hID=%d", Houses[i][hExteriorID], Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], i);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE houses SET hInteriorID=%d, hInteriorX=%f, hInteriorY=%f, hInteriorZ=%f, HousePrice=%d WHERE hID=%d", Houses[i][hInteriorID], Houses[i][hInteriorX],
		Houses[i][hInteriorY], Houses[i][hInteriorZ], Houses[i][HousePrice], i);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE houses SET VaultMoney=%d, HouseCocaine=%d, HousePot=%d, HouseMaterials=%d, hOwner='%s', KeyID=%d, LockStatus=%d WHERE hID=%d", Houses[i][VaultMoney], Houses[i][HouseCocaine],
		Houses[i][HousePot], Houses[i][HouseMaterials], Houses[i][hOwner], Houses[i][KeyID], Houses[i][LockStatus], i);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE houses SET WeaponSlot1=%d, WeaponSlot2=%d, WeaponSlot3=%d WHERE hID=%d", Houses[i][WeaponSlot1], Houses[i][WeaponSlot3], Houses[i][WeaponSlot3], Houses[i][FluorescentLights], i);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE houses SET CocaineTables=%d WHERE hID=%d", Houses[i][CocaineTables], i);
		mysql_tquery(mysql, query, "", "");
		printf("[system] House %d saved.", i);
    }
	return 1;
}

stock SaveWeedPlants()
{
	for(new i=0; i < MAX_WEEDPLANTS; i++)
	{
	    SaveWeedPlant(i);
	}
	return 1;
}

stock SaveWeedPlant(i)
{
	new string[128], query[512], rows, fields;
	format(string, sizeof(string), "SELECT * FROM weedplants WHERE ID = %d", i);
	mysql_query(mysql, string);
	mysql_store_result();
	cache_get_data(rows, fields);
	if(fexist(string))
	{
	    mysql_format(mysql, query, sizeof(query), "UPDATE weedplants SET weedX=%f, weedY=%f, weedZ=%f, weedVW=%d, GrowthState=%d, Active=%d WHERE ID = %d", WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ],
		WeedPlant[i][weedVW], WeedPlant[i][GrowthState], WeedPlant[i][Active], i);
		mysql_tquery(mysql, query, "", "");

		printf("Weedplant %d saved", i);
	}
}

stock SaveBusiness(i)
{
    new FileName[128], query[512], rows, fields;
    format(FileName, sizeof(FileName), "SELECT * FROM businesses WHERE bID = %d", i);
    mysql_query(mysql, FileName);
    mysql_store_result();
    cache_get_data(rows, fields);
    if(rows)
    {
		mysql_format(mysql, query, sizeof(query), "UPDATE businesses SET bExteriorX=%f, bExteriorY=%f, bExteriorZ=%f, bInteriorX=%f, bInteriorY=%f, bInteriorZ=%f, bInteriorID=%d WHERE bID = %d", Businesses[i][bExteriorX], Businesses[i][bExteriorY],
		Businesses[i][bExteriorZ], Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ], Businesses[i][bInteriorID], i);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE businesses SET bType=%d, bVault=%d, bPrice=%d, bOwner='%s', bLockStatus=%d, bName='%s', bSupplies=%d WHERE bID = %d", Businesses[i][bType], Businesses[i][bVault],
		Businesses[i][bPrice], Businesses[i][bOwner], Businesses[i][bLockStatus], Businesses[i][bName], Businesses[i][bSupplies], i);
		mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE businesses SET bProductPrice1=%d, bProductPrice2=%d, bProductPrice3=%d, bProductPrice4=%d, bProductPrice5=%d, bProductPrice6=%d, bProductPrice7=%d WHERE bID=%d", Businesses[i][bProductPrice1], Businesses[i][bProductPrice2],
		Businesses[i][bProductPrice3], Businesses[i][bProductPrice4], Businesses[i][bProductPrice5], Businesses[i][bProductPrice6], Businesses[i][bProductPrice7], i);
        mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE businesses SET bProductPrice8=%d, bProductPrice9=%d, bProductPrice10=%d, bProductPrice11=%d, bProductPrice12=%d, bProductPrice13=%d, bProductPrice14=%d, SupplyStatus=%d WHERE bID=%d", Businesses[i][bProductPrice8], Businesses[i][bProductPrice9],
		Businesses[i][bProductPrice10], Businesses[i][bProductPrice11], Businesses[i][bProductPrice12], Businesses[i][bProductPrice13], Businesses[i][bProductPrice14], Businesses[i][SupplyStatus], i);
        mysql_tquery(mysql, query, "", "");
		mysql_format(mysql, query, sizeof(query), "UPDATE businesses SET bExteriorID=%d WHERE bID=%d", Businesses[i][bInteriorID], Businesses[i][bExteriorID]);
		mysql_tquery(mysql, query, "", "");

		/*dini_FloatSet(FileName, "ExteriorX", Businesses[i][bExteriorX]);
        dini_FloatSet(FileName, "ExteriorY", Businesses[i][bExteriorY]);
        dini_FloatSet(FileName, "ExteriorZ", Businesses[i][bExteriorZ]);
        dini_IntSet(FileName, "ExteriorID", Businesses[i][bExteriorID]);

        dini_FloatSet(FileName, "InteriorX", Businesses[i][bInteriorX]);
        dini_FloatSet(FileName, "InteriorY", Businesses[i][bInteriorY]);
        dini_FloatSet(FileName, "InteriorZ", Businesses[i][bInteriorZ]);
        dini_IntSet(FileName, "InteriorID", Businesses[i][bInteriorID]);

        dini_IntSet(FileName, "Type", Businesses[i][bType]);
        dini_IntSet(FileName, "Vault", Businesses[i][bVault]);
        dini_IntSet(FileName, "Price", Businesses[i][bPrice]);
        dini_Set(FileName, "Owner", Businesses[i][bOwner]);

        dini_IntSet(FileName, "LockStatus", Businesses[i][bLockStatus]);
        dini_Set(FileName, "Name", Businesses[i][bName]);

        dini_IntSet(FileName, "Supplies", Businesses[i][bSupplies]);

		dini_IntSet(FileName, "ProductPrice1", Businesses[i][bProductPrice1]);
		dini_IntSet(FileName, "ProductPrice2", Businesses[i][bProductPrice2]);
		dini_IntSet(FileName, "ProductPrice3", Businesses[i][bProductPrice3]);
		dini_IntSet(FileName, "ProductPrice4", Businesses[i][bProductPrice4]);
		dini_IntSet(FileName, "ProductPrice5", Businesses[i][bProductPrice5]);
		dini_IntSet(FileName, "ProductPrice6", Businesses[i][bProductPrice6]);
		dini_IntSet(FileName, "ProductPrice7", Businesses[i][bProductPrice7]);
		dini_IntSet(FileName, "ProductPrice8", Businesses[i][bProductPrice8]);
		dini_IntSet(FileName, "ProductPrice9", Businesses[i][bProductPrice9]);
		dini_IntSet(FileName, "ProductPrice10", Businesses[i][bProductPrice10]);
		dini_IntSet(FileName, "ProductPrice11", Businesses[i][bProductPrice11]);
		dini_IntSet(FileName, "ProductPrice12", Businesses[i][bProductPrice12]);
		dini_IntSet(FileName, "ProductPrice13", Businesses[i][bProductPrice13]);
		dini_IntSet(FileName, "ProductPrice14", Businesses[i][bProductPrice14]);
		dini_IntSet(FileName, "SupplyStatus", Businesses[i][bSupplyStatus]);*/

		printf("[system] Business %d saved.", i);
    }
    else
	{
    }
    mysql_free_result();
	return 1;
}

stock SaveBusinesses()
{
    for(new i = 0; i < SpawnedBusinesses; i++)
    {
		SaveBusiness(i);
    }
	return 1;
}

public GivePlayerWeaponEx(playerid, weapon)
{
	switch(weapon)
	{
	    case 0, 1:
	    {
	        Player[playerid][WepSlot0] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9:
	    {
	        Player[playerid][WepSlot1] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 22, 23, 24:
	    {
	        Player[playerid][WepSlot2] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 25, 26, 27:
	    {
	        Player[playerid][WepSlot3] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 28, 29, 32:
	    {
	        Player[playerid][WepSlot4] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 30, 31:
	    {
	        Player[playerid][WepSlot5] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 33, 34:
	    {
	        Player[playerid][WepSlot6] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 35, 36, 37, 38:
	    {
	        Player[playerid][WepSlot7] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 16, 17, 18, 39:
	    {
	        Player[playerid][WepSlot8] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 41, 42, 43:
	    {
	        Player[playerid][WepSlot9] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 10, 11, 12, 13, 14, 15:
	    {
	        Player[playerid][WepSlot10] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 44, 45, 46:
	    {
	        Player[playerid][WepSlot11] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 40:
	    {
	        printf("[system] [error] GivePlayerWeaponEx() was unable to give weapon ID %d.", weapon);
	    }
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key))  return 1;
	return 0;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (PRESSED(KEY_SUBMISSION))
	{
		EngineUpgrade1[playerid] = SetTimerEx("EngineUpgrade2", 1000, true, "i", playerid);
	}

	else if (RELEASED(KEY_SUBMISSION))
	{
	    KillTimer(EngineUpgrade1[playerid]);
	}

	/*if (PRESSED(KEY_FIRE))
	{
		new playerState = GetPlayerState(playerid);
		new vID = GetPlayerVehicleID(playerid);
		if(vID == Player[playerid][CarLinkID])
		{
		if (playerState == PLAYER_STATE_DRIVER)
			{
	            if(Player[playerid][v1NOS] == 0)
			    {
					SendClientMessage(playerid, GREY, "You need to install some NOS bottles from the General Store before being able to use it.");
					RemoveVehicleComponent(vID, 1010);
				}

				if(Player[playerid][v1NOS] >= 1)
			    {
			        if(Player[playerid][v1NOSFUEL] > 0)
			        {
						new string[135];
						format(string, sizeof(string), "* %s presses a button on his dashboard, activating the vehicle's nitrous.", GetName(playerid));
						NearByMessage(playerid, RPCOLOUR, string);
						AddVehicleComponent(vID, 1010);
						NOSTIMER[playerid] = SetTimerEx("NOSTIMER2", 1000, true, "i", playerid);
			        }
			    }
			}
		}
		if(vID == Player[playerid][Car2LinkID])
		{
		if (playerState == PLAYER_STATE_DRIVER)
			{
	            if(Player[playerid][v2NOS] == 0)
			    {
					SendClientMessage(playerid, GREY, "You need to install some NOS bottles from the General Store before being able to use it.");
					RemoveVehicleComponent(vID, 1010);
				}

				if(Player[playerid][v2NOS] >= 1)
			    {
			        if(Player[playerid][v2NOSFUEL] > 0)
			        {
						new string[135];
						format(string, sizeof(string), "* %s presses a button on his dashboard, activating the vehicle's nitrous.", GetName(playerid));
						NearByMessage(playerid, RPCOLOUR, string);
						AddVehicleComponent(vID, 1010);
						NOSTIMER[playerid] = SetTimerEx("NOSTIMER2", 1000, true, "i", playerid);
			        }
			    }
			}
		}
		if(vID == Player[playerid][Car3LinkID])
		{
		if (playerState == PLAYER_STATE_DRIVER)
			{
	            if(Player[playerid][v3NOS] == 0)
			    {
					SendClientMessage(playerid, GREY, "You need to install some NOS bottles from the General Store before being able to use it.");
					RemoveVehicleComponent(vID, 1010);
				}

				if(Player[playerid][v3NOS] >= 1)
			    {
			        if(Player[playerid][v3NOSFUEL] > 0)
			        {
						new string[135];
						format(string, sizeof(string), "* %s presses a button on his dashboard, activating the vehicle's nitrous.", GetName(playerid));
						NearByMessage(playerid, RPCOLOUR, string);
						AddVehicleComponent(vID, 1010);
						NOSTIMER[playerid] = SetTimerEx("NOSTIMER2", 1000, true, "i", playerid);
			        }
			    }
			}
		}
	}
	else if (RELEASED(KEY_FIRE))
	{
        new vID = GetPlayerVehicleID(playerid);
		KillTimer(NOSTIMER[playerid]);
		Player[playerid][NosStreak] = 0;
	    RemoveVehicleComponent(vID, 1010);
	}*/

	/*if(IsKeyJustDown(KEY_NO, newkeys, oldkeys))
	{
	    for(new i = 0; i < MAX_PLAYERS; i ++)

		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
		    new string[128];
			format(string, sizeof(string),"[%s Accent] %s says: You have the right to remain slient.", Player[playerid][Accent], GetName(playerid));
			NearByMessage(playerid, WHITE, string);
            format(string, sizeof(string),"[%s Accent] %s says: Anything you do say can and will be used against you in a court of law.", Player[playerid][Accent], GetName(playerid));
			NearByMessage(playerid, WHITE, string);
            format(string, sizeof(string),"[%s Accent] %s says: You have the right to an attorney.", Player[playerid][Accent], GetName(playerid));
			NearByMessage(playerid, WHITE, string);
			format(string, sizeof(string),"[%s Accent] %s says: If you cannot afford an attorney, one will be appointed for you.", Player[playerid][Accent], GetName(playerid));
			NearByMessage(playerid, WHITE, string);
            format(string, sizeof(string),"[%s Accent] %s says: Do you understand these rights as I have read them to you?", Player[playerid][Accent], GetName(playerid));
			NearByMessage(playerid, WHITE, string);
		}
	}*/

	if ((IsKeyJustDown(KEY_ACTION, newkeys, oldkeys))&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
        {
            new Float:pX,Float:pY,Float:pZ;
            GetPlayerPos(playerid,pX,pY,pZ);
            new Float:vX,Float:vY,Float:vZ;
            new Found=0;
            new vid=0;
            while((vid<MAX_VEHICLES)&&(!Found))
            {
				vid++;
                GetVehiclePos(vid,vX,vY,vZ);
                if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
                {
                  Found=1;
                  if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                  {
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                  }
                  AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
                  SendClientMessage(playerid,0xFFFF00AA,"You're now towing a vehicle.");
                }
            }
            if(!Found)
            {
              SendClientMessage(playerid,0xFFFF00AA,"No vehicles in range.");
            }
        }
    }

	if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys) && GetPlayerWeapon(playerid) == 17 && ! IsPlayerInAnyVehicle(playerid))
	{
		InitTearGas(playerid);
	}

	if(IsKeyJustDown(KEY_YES, newkeys, oldkeys))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				new string[128];
				switch(Player[playerid][pTazer])
				{
						case 0:
						{
							Player[playerid][pTazer] = 1;
							SetPlayerAttachedObject(playerid, 0, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s withdraws their tazer.", GetRPName(playerid));
							NearByMessage(playerid, RPCOLOUR, string);

						}
						case 1:
						{
							Player[playerid][pTazer] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							format(string, sizeof(string), "* %s holsters their tazer.", GetRPName(playerid));
							NearByMessage(playerid, RPCOLOUR, string);
						}
				}
			}
		}
	}

	if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys) && Player[playerid][pTazer] == 1)
	{
		new string[128], NearestPlayer = GetClosestPlayer(playerid);

		if(Player[playerid][Group] != 1)
		{
			SendClientMessage(playerid, WHITE, "You're not a law enforcement officer!");
		}
		else if(Groups[Player[NearestPlayer][Group]][CommandTypes] == 1 || Groups[Player[NearestPlayer][Group]][CommandTypes] == 4)
		{
			SendClientMessage(playerid, WHITE, "Nearest player is a law enforcer!");
		}
		else
		{
			if(GetDistanceBetweenPlayers(NearestPlayer, playerid) < 6)
			{
				if(Player[NearestPlayer][Tazed] == 0)
				{
					if(!IsPlayerInAnyVehicle(NearestPlayer))
					{
						TogglePlayerControllable(NearestPlayer, false);
						Player[NearestPlayer][Tazed] = 1;
						format(string, sizeof(string), "* %s has stunned %s, with their taser.", GetRPName(playerid), GetRPName(NearestPlayer));
						NearByMessage(playerid, RPCOLOUR, string);
						SendClientMessage(NearestPlayer, WHITE, "You have been tased. The effect will last for 12 seconds.");
						SetTimerEx("UntazePlayer", 12000, false, "d", NearestPlayer);
						ApplyAnimationEx(NearestPlayer, "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "The suspect is in a vehicle, you can't tase whilst they're in a vehicle.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "That player is already stunned.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "No players in range!");
			}
		}
		return 1;
	}

	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		new string[128];

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1324.42322, 1923.14929, -41.96490))  //door 1
	{
		if(h124dooro == 0 && Player[playerid][House] == 124)
		{
			MoveObject(h124door, 1324.42322, 1923.14929, -41.96490, 2.5, 0.00000, 0.00000, 90.00000);
			format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
			NearByMessage(playerid, RPCOLOUR, string);
			h124dooro = 1;
		}
		else
		{
			if(Player[playerid][House] == 124)
			{
				MoveObject(h124door, 1324.42322, 1923.14929, -41.96490, 2.5, 0.00000, 0.00000, 0.00000);
				format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				h124dooro = 0;
			}
		}
	}

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 228.2813, 149.7523, 1002.0264))  //door 1
		{
			if(lvpddoor1o == 0 && Player[playerid][Group] == 1)
			{
				MoveObject(lvpddoor1, 228.2813, 149.0923, 1002.0264, 2.5, 0.00000, 0.00000, 90.00000);
				MoveObject(lvpddoor11, 228.2733, 153.3691, 1002.0264, 2.5, 0.00000, 0.00000, -90.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoor1o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1)
				{
					MoveObject(lvpddoor1, 228.2813, 149.7523, 1002.0264, 2.5, 0.00000, 0.00000, 90.00000);
					MoveObject(lvpddoor11, 228.2733, 152.7491, 1002.0264, 2.5, 0.00000, 0.00000, -90.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoor1o = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 228.2604, 159.7747, 1002.0264))  //door 2
		{
			if(lvpddoor2o == 0 && Player[playerid][Group] == 1)
			{
				MoveObject(lvpddoor2, 228.2604, 159.1147, 1002.0264, 2.5, 0.00000, 0.00000, 90.00000);
				MoveObject(lvpddoor21, 228.2478, 163.3396, 1002.0264, 2.5, 0.00000, 0.00000, -90.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoor2o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1)
				{
					MoveObject(lvpddoor2, 228.2604, 159.7747, 1002.0264, 2.5, 0.00000, 0.00000, 90.00000);
					MoveObject(lvpddoor21, 228.2478, 162.7796, 1002.026, 2.5, 0.00000, 0.00000, -90.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoor2o = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 229.9912, 169.8195, 1002.0264))  //door 3
		{
			if(lvpddoor3o == 0 && Player[playerid][Group] == 1)
			{
				MoveObject(lvpddoor3, 229.3712, 169.8195, 1002.0264, 2.5, 0.00000, 0.00000, 0.00000);
				MoveObject(lvpddoor31, 233.6084, 169.8214, 1002.0264, 2.5, 0.00000, 0.00000, 180.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoor3o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1)
				{
					MoveObject(lvpddoor3, 229.9912, 169.8195, 1002.0264, 2.5, 0.00000, 0.00000, 0.00000);
					MoveObject(lvpddoor31, 232.9484, 169.8214, 1002.0264, 2.5, 0.00000, 0.00000, 180.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoor3o = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 237.05162, 193.81091, 1007.16840))  //door 4
		{
			if(lvpddoor4o == 0 && Player[playerid][Group] == 1)
			{
				MoveObject(lvpddoor4, 235.9716, 193.8109, 1007.1684, 2.5, 0.00000, 0.00000, 0.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoor4o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1)
				{
					MoveObject(lvpddoor4, 237.05162, 193.81091, 1007.16840, 2.5, 0.00000, 0.00000, 0.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoor4o = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 274.11899, 189.36549, 1006.17859))  //door 5
		{
			if(lvpddoor5o == 0 && Player[playerid][Group] == 1)
			{
				MoveObject(lvpddoor5, 273.4990, 189.3655, 1006.1786, 2.5, 0.00000, 0.00000, 0.00000);
				MoveObject(lvpddoor51, 277.7044, 189.3761, 1006.1774, 2.5, 0.00000, 0.00000, 180.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoor5o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1)
				{
					MoveObject(lvpddoor5, 274.11899, 189.36549, 1006.17859, 2.5, 0.00000, 0.00000, 0.00000);
					MoveObject(lvpddoor51, 277.10440, 189.37610, 1006.17743, 2.5, 0.00000, 0.00000, 180.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoor5o = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 295.14911, 189.34958, 1006.17743))  //door 6
		{
			if(lvpddoor6o == 0 && Player[playerid][Group] == 1)
			{
				MoveObject(lvpddoor6, 294.5291, 189.3496, 1006.1774, 2.5, 0.00000, 0.00000, 0.00000);
				MoveObject(lvpddoor61, 298.7560, 189.3581, 1006.1774, 2.5, 0.00000, 0.00000, 180.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoor6o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1)
				{
					MoveObject(lvpddoor6, 295.14911, 189.34958, 1006.17743, 2.5, 0.00000, 0.00000, 0.00000);
					MoveObject(lvpddoor61, 298.13599, 189.35811, 1006.17743, 2.5, 0.00000, 0.00000, 180.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoor6o = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 3.0, 2275.5205, 2442.5291, -69.9322))  //dep chief
		{
			if(lvpddoordepo == 0 && Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 5)
			{
				MoveObject(lvpddoordep, 2275.62427, 2444.36963, -71.76060, 2.5, 0.00000, 0.00000, 270.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoordepo = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 5)
				{
					MoveObject(lvpddoordep, 2275.62427, 2443.20361, -71.76060, 2.5, 0.00000, 0.00000, 270.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoordepo = 0;
				}
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 3.0, 2275.3376, 2436.2964, -69.9922))  //chief
		{
			if(lvpddoorchiefo == 0 && Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 5)
			{
				MoveObject(lvpddoorchief, 2275.62427, 2434.11450, -71.76060, 2.5, 0.00000, 0.00000, 90.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				lvpddoorchiefo = 1;
			}
			else
			{
				if(Player[playerid][Group] == 1 && Player[playerid][GroupRank] >= 5)
				{
					MoveObject(lvpddoorchief, 2275.6242, 2435.29248, -71.76060, 2.5, 0.00000, 0.00000, 90.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					lvpddoorchiefo = 0;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 958.9101,2103.7651,1011.0234))  //agency 1
		{
			if(agencydoor1o == 0 && Player[playerid][Group] == 2 && Player[playerid][GroupRank] >= 4)
			{
				MoveObject(agencydoor1, 961.23523, 2103.24609, 1011.20142, 2.5, 0.00000, 0.00000, 90.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				agencydoor1o = 1;
			}
			else
			{
				if(Player[playerid][Group] == 2 && Player[playerid][GroupRank] >= 4)
				{
					MoveObject(agencydoor1, 959.68121, 2103.24609, 1011.20142, 2.5, 0.00000, 0.00000, 90.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					agencydoor1o = 0;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 372.76379, 166.48460, 1007.40021) && Player[playerid][Group] == 3)
		{
			if(govdoor1o == 0)
			{
				MoveObject(govdoor1, 374.4468, 166.48460, 1007.40021, 2.5, 0.00000, 0.00000, 180.00000);
				format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				govdoor1o = 1;
			}
			else
			{
				MoveObject(govdoor1, 372.76379, 166.48460, 1007.40021, 2.5, 0.00000, 0.00000, 180.00000);
				format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
				NearByMessage(playerid, RPCOLOUR, string);
				govdoor1o = 0;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 369.00201, 163.79880, 1024.78186) && Player[playerid][Group] == 3)
		{
			if(Player[playerid][GroupRank] >= 3)
			{
				if(govdoor2ro == 0 && govdoor2lo == 0)
				{
					MoveObject(govdoor2r, 369.00201, 165.02380, 1024.78186, 2.5, 0.00000, 0.00000, -90.00000);
					MoveObject(govdoor2l, 369.00201, 159.58389, 1024.78186, 2.5, 0.00000, 0.00000, 90.00000);
					format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					govdoor2ro = 1;
					govdoor2lo = 1;
				}
				else
				{
					MoveObject(govdoor2r, 369.00201, 163.79880, 1024.78186, 2.5, 0.00000, 0.00000, -90.00000);
					MoveObject(govdoor2l, 369.00201, 160.80890, 1024.78186, 2.5, 0.00000, 0.00000, 90.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					govdoor2ro = 0;
					govdoor2lo = 0;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 369.15799, 161.55960, 1013.17279) && Player[playerid][Group] == 3)
		{
			if(Player[playerid][GroupRank] == 6)
			{
				if(govdoor3o == 0)
				{
					MoveObject(govdoor3, 369.15799, 159.59959, 1013.17279, 2.5, 0.00000, 0.00000, 90.00000);
					format(string, sizeof(string), "%s unlocks the door before opening it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					govdoor3o = 1;
				}
				else
				{
					MoveObject(govdoor3, 369.15799, 161.55960, 1013.17279, 2.5, 0.00000, 0.00000, 90.00000);
					format(string, sizeof(string), "%s shuts the door before locking it.", GetRPName(playerid));
					NearByMessage(playerid, RPCOLOUR, string);
					govdoor3o = 0;
				}
			}
		}
	}
//	if(IsKeyJustDown(KEY_YES, newkeys, oldkeys))
//	{
//
//	new string[128];
//
//	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2334.4636, 2443.9075, 7.7008))
//	{
//		if(lvpdgate1o == 0 && Player[playerid][Group] == 1)
//		{
//			MoveObject(lvpdgate1, 2334.59619, 2443.27979, 12.18180, 5.0, 0.00000, 0.00000, 59.28000);
//			format(string, sizeof(string), "%s has used their remote to open the gate.", GetName(playerid));
//			SendClientMessage(playerid, PURPLE, string);
//			lvpdgate1o = 1;
//		}
//		else
//		{
//			if(Player[playerid][Group] == 1)
//			{
//				MoveObject(lvpdgate1, 2334.59619, 2443.27979, 7.04770, 5.0, 0.00000, 0.00000, 59.28000);
//				format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
//				SendClientMessage(playerid, PURPLE, string);
//				lvpdgate1o = 0;
//			}
//		}
//	}
//	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2294.1201, 2498.2771, 5.4411))
//	{
//		if(lvpdgate2o == 0 && Player[playerid][Group] == 1)
//		{
//			MoveObject(lvpdgate2, 2294.48535, 2498.61914, 9.48081, 5.0, 0.00000, 0.00000, -90.00000);
//			format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
//			SendClientMessage(playerid, PURPLE, string);
//			lvpdgate2o = 1;
//		}
//		else
//			if(Player[playerid][Group] == 1)
//			{
//				MoveObject(lvpdgate2, 2294.48535, 2498.61914, 4.49304, 5.0, 0.00000, 0.00000, -90.00000);
//				format(string, sizeof(string), "%s has used their remote to close the gate.", GetName(playerid));
//				SendClientMessage(playerid, PURPLE, string);
//				lvpdgate2o = 0;
//			}
//		}
//	}
//	}

	if(IsKeyJustDown(KEY_JUMP, newkeys, oldkeys) && Player[playerid][IsInAnimation] >= 1)
	{
	    if(Player[playerid][Cuffed] == 0)
	    {
			ClearAnimations(playerid);
			StopLoopingAnimation(playerid);
			Player[playerid][IsInAnimation] = 0;
			TextDrawHideForPlayer(playerid, AnimationTextDraw);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, AnimationTextDraw);
		}
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
	{
	    if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	    {
	        new Float: Health, HealthI;
	        GetPlayerHealth(playerid, Health);
	        HealthI = floatround(Health, floatround_ceil);

	        if(HealthI < 100)
	        {
	        	SetPlayerHealth(playerid, HealthI + 5);
	        }
		}
	}

	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && Player[playerid][HadSprunk] == 1)
	{
    	TextDrawHideForPlayer(playerid, SprunkTextDraw);
	}

	if(IsKeyJustDown(KEY_CROUCH, newkeys, oldkeys))
	{
	    if(Player[playerid][PrisonDuration] >= 1)
	    {
            if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor1X1, PrisonDoor1Y1, PrisonDoor1Z1))
			{
			    SetPlayerInterior(playerid, 0);
			    TextDrawHideForPlayer(playerid, ExitTextdraw);
			    SetPlayerPos(playerid, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor2X2, PrisonDoor2Y2, PrisonDoor2Z2))
			{
			    SetPlayerInterior(playerid, 0);
			    TextDrawHideForPlayer(playerid, ExitTextdraw);
			    SetPlayerPos(playerid, PrisonDoor2X, PrisonDoor2Y, PrisonDoor2Z);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z))
			{
			    SetPlayerInterior(playerid, PrisonDoor1Int);
			    SetPlayerPos(playerid, PrisonDoor1X1, PrisonDoor1Y1, PrisonDoor1Z1);
			    TextDrawShowForPlayer(playerid, ExitTextdraw);
			}

			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor2X, PrisonDoor2Y, PrisonDoor2Z))
			{
			    SetPlayerInterior(playerid, PrisonDoor2Int2);
			    SetPlayerPos(playerid, PrisonDoor2X2, PrisonDoor2Y2, PrisonDoor2Z2);
			    TextDrawShowForPlayer(playerid, ExitTextdraw);
			}
			else
			{
	        	SendClientMessage(playerid, WHITE, "This feature isn't available whilst you're prisoned / jailed.");
			}
	    }
	    else
	    {
			if(IsPlayerInRangeOfPoint(playerid, 3, BankIntX, BankIntY, BankIntZ))
			{
			    SetPlayerInterior(playerid, 0);
			    TextDrawHideForPlayer(playerid, ExitTextdraw);
			    SetPlayerPos(playerid, BankExtX, BankExtY, BankExtZ);
			}

			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor1X1, PrisonDoor1Y1, PrisonDoor1Z1))
			{
			    SetPlayerInterior(playerid, 0);
			    TextDrawHideForPlayer(playerid, ExitTextdraw);
			    SetPlayerPos(playerid, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor2X2, PrisonDoor2Y2, PrisonDoor2Z2))
			{
			    SetPlayerInterior(playerid, 0);
			    TextDrawHideForPlayer(playerid, ExitTextdraw);
			    SetPlayerPos(playerid, PrisonDoor2X, PrisonDoor2Y, PrisonDoor2Z);
			}

			for(new i = 0; i < sizeof(Houses); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) >= 55000 && GetPlayerVirtualWorld(playerid) < 65000 && IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]))
			    {
			        if(Player[playerid][InHouse] != 0)
			        {
						if(Houses[Player[playerid][InHouse]][LockStatus] == 0)
			            {
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, Houses[Player[playerid][InHouse]][hExteriorID]);
							SetPlayerPos(playerid, Houses[Player[playerid][InHouse]][hExteriorX], Houses[Player[playerid][InHouse]][hExteriorY], Houses[Player[playerid][InHouse]][hExteriorZ]);
							Player[playerid][InHouse] = 0;
							TextDrawHideForPlayer(playerid, ExitTextdraw);
							StopAudioStreamForPlayer(playerid);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "The door is locked so you can't exit!");
							break;
						}
		            }
		            else
		            {
						if(Houses[i][LockStatus] == 0)
			            {
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, Houses[i][hExteriorID]);
							SetPlayerPos(playerid, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]);
							StopAudioStreamForPlayer(playerid);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "The door is locked so you can't exit!");
							break;
						}
					}
			    }
			}

			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) >= 65000 && GetPlayerVirtualWorld(playerid) < 75000 && IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]))
			    {
			        if(Player[playerid][InBusiness] != 0)
			        {
				        SetPlayerVirtualWorld(playerid, 0);
				        TextDrawHideForPlayer(playerid, ExitTextdraw);
				        SetPlayerInterior(playerid, Businesses[Player[playerid][InBusiness]][bExteriorID]);
				        SetPlayerPos(playerid, Businesses[Player[playerid][InBusiness]][bExteriorX], Businesses[Player[playerid][InBusiness]][bExteriorY], Businesses[Player[playerid][InBusiness]][bExteriorZ]);
			 	        Player[playerid][InBusiness] = 0;
		 	        }
		 	        else
		 	        {
				        SetPlayerVirtualWorld(playerid, 0);
				        SetPlayerInterior(playerid, Businesses[i][bExteriorID]);
				        SetPlayerPos(playerid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]);
		 	        }
			    }
			}

			for(new i = 0; i < sizeof(Groups); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 && IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]))
			    {
			        if(GetPlayerInterior(playerid) == Groups[i][HQInteriorID])
			        {
			            if(Player[playerid][InGroupHQ] != 0)
			            {
			       			SetPlayerVirtualWorld(playerid, 0);
			       			TextDrawHideForPlayer(playerid, ExitTextdraw);
				        	SetPlayerInterior(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorID]);
				        	SetPlayerPos(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorX], Groups[Player[playerid][InGroupHQ]][HQExteriorY], Groups[Player[playerid][InGroupHQ]][HQExteriorZ]);
				        	Player[playerid][InGroupHQ] = 0;
			        	}
			        	else
			        	{
			       			SetPlayerVirtualWorld(playerid, 0);
				        	SetPlayerInterior(playerid, Groups[i][HQExteriorID]);
				        	SetPlayerPos(playerid, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]);
			        	}
			        }
			    }
			}

			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor1X, PrisonDoor1Y, PrisonDoor1Z))
			{
			    SetPlayerInterior(playerid, PrisonDoor1Int);
			    SetPlayerPos(playerid, PrisonDoor1X1, PrisonDoor1Y1, PrisonDoor1Z1);
			    TextDrawShowForPlayer(playerid, ExitTextdraw);
			}

			if(IsPlayerInRangeOfPoint(playerid, 3, PrisonDoor2X, PrisonDoor2Y, PrisonDoor2Z))
			{
			    SetPlayerInterior(playerid, PrisonDoor2Int2);
			    SetPlayerPos(playerid, PrisonDoor2X2, PrisonDoor2Y2, PrisonDoor2Z2);
			    TextDrawShowForPlayer(playerid, ExitTextdraw);
			}

			if(IsPlayerInRangeOfPoint(playerid, 3, BankExtX, BankExtY, BankExtZ))
			{
			    SetPlayerInterior(playerid, BankIntID);
			    SetPlayerPos(playerid, BankIntX, BankIntY, BankIntZ);
			    TextDrawShowForPlayer(playerid, ExitTextdraw);
			    SendClientMessage(playerid, WHITE, "You have entered The Bank!");
			    SendClientMessage(playerid, GREY, "Bank Commands: /bdeposit, /bwithdraw, /wiretransfer, /loans");
			}

			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(Businesses[i][bLockStatus] == 0)
			            {
			        		SetPlayerVirtualWorld(playerid, 65000+i);
			        		TextDrawShowForPlayer(playerid, ExitTextdraw);
			        		SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
			        		SetPlayerPos(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);
			        		SendClientMessage(playerid, WHITE, "You've entered a Business. Type /help to see the extra commands available in here!");
							SendClientMessage(playerid, GREY, "WARNING: Please avoid picking up interior weapons to avoid being potentially auto-banned.");
		                    Player[playerid][InBusiness] = i;
			        	}
			        	else
			        	{
			        	    SendClientMessage(playerid, WHITE, "This business is locked!");
			        	}
			        }
			    }
			}

			for(new i = 0; i < sizeof(Houses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(Houses[i][LockStatus] == 0)
			            {
                            if(strcmp(Houses[i][hOwner], "Nobody", true) == 0)
                            {
                                SendClientMessage(playerid, WHITE, "This property is for sale!");
                            }

			                Player[playerid][InHouse] = i;
			                TextDrawShowForPlayer(playerid, ExitTextdraw);
			        		SetPlayerVirtualWorld(playerid, 55000+i);
			        		SetPlayerInterior(playerid, Houses[i][hInteriorID]);
			        		SetPlayerPos(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);
			        		SendClientMessage(playerid, GREY, "WARNING: Please avoid picking up interior weapons to avoid being potentially auto-banned.");
			        		switch(hRadioStation[i])
						    {
						        case 1:
						        {
						        	PlayAudioStreamForPlayer(playerid, "http://housenationuk.com/listen.pls");
								}
								case 2:
								{
								    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-uktop40&file=181-uktop40.pls");
								}
								case 3:
								{
								    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-eagle&file=181-eagle.pls");
								}
								case 4:
								{
								    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-reggae&file=181-reggae.pls");
								}
								case 5:
								{
								    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls");
								}
								case 6:
								{
								    PlayAudioStreamForPlayer(playerid, "http://www.181.fm/winamp.pls?station=181-comedy&file=181-comedy.pls");
								}
							}
			        	}
			        	else
			        	{
			        	    SendClientMessage(playerid, WHITE, "This property is locked!");
			        	}
			        }
			    }
			}

			for(new i = 0; i < sizeof(Groups); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
			    {
			        if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(Groups[i][HQLock] == 0)
			            {
			                Player[playerid][InGroupHQ] = i;
			       			SetPlayerVirtualWorld(playerid, 45000+i);
			       			TextDrawShowForPlayer(playerid, ExitTextdraw);
				        	SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
				        	SetPlayerPos(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
				        	SendClientMessage(playerid, GREY, "WARNING: Please avoid picking up interior weapons to avoid being potentially auto-banned.");
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "This HQ is locked!");
				        }
			        }
			    }
			}
		}
	}

	if(Player[playerid][BeingCalled] != -1)
	{
	    if(IsKeyJustDown(KEY_CROUCH, newkeys, oldkeys) || IsKeyJustDown(KEY_ANALOG_RIGHT, newkeys, oldkeys))
		{
		    TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
		    TextDrawHideForPlayer(playerid, CellPhoneTextDrawInVehicle);
		    Player[playerid][CellphoneConsole] = Player[playerid][BeingCalled];
		    Player[Player[playerid][BeingCalled]][OnPhoneTime] = 1;
		    Player[Player[playerid][BeingCalled]][CellphoneConsole] = playerid;
		    SendClientMessage(playerid, WHITE, "You have picked up the phone.");
		    SendClientMessage(Player[playerid][BeingCalled], WHITE, "The other person has answered.");
		    Player[Player[playerid][BeingCalled]][CallConnectingTime] = -1;
		    Player[playerid][BeingCalled] = -1;
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		    Player[Player[playerid][BeingCalled]][Calling] = -1;
		}
	}
	return 1;
}

stock AntiCheatBan(playerid)
{
	new string[128], WeaponN[128];
	GetWeaponName(GetPlayerWeapon(playerid), WeaponN, sizeof(WeaponN));
	new IP[21];
	new hour, minute, second, day, year, month;
    gettime(hour, minute, second);
    getdate(year, month, day);
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | Weapon Hacking (%s).", day, month, year, hour, minute, IP, GetName(playerid), WeaponN);
	BanLog(string);
	format(string, sizeof(string), "Ban: %s has been auto-banned, defined reason: Weapon Hacking (%s).", GetName(playerid), WeaponN);
	SendClientMessageToAll(LIGHTRED, string);
	print(string);
	Player[playerid][Banned] = 4;
	Ban(playerid);
	return 1;
}

stock IsPlayerSpawned(playerid)
{
	new statex = GetPlayerState(playerid);

	if(Player[playerid][Hospitalized] != 1 && Player[playerid][Tutorial] != 1 && statex != PLAYER_STATE_NONE && statex != PLAYER_STATE_WASTED && statex != PLAYER_STATE_SPAWNED)
	{
		return true;
	}
	else
	{
		return false;
	}
}

stock ReturnWeapons(playerid, id)
{
	new string[128], WeaponName[128];
	if(Player[id][WepSlot0] > 0)
	{
	    GetWeaponName(Player[id][WepSlot0], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot1] > 0)
	{
	    GetWeaponName(Player[id][WepSlot1], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot2] > 0)
	{
	    GetWeaponName(Player[id][WepSlot2], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot3] > 0)
	{
	    GetWeaponName(Player[id][WepSlot3], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot4] > 0)
	{
	    GetWeaponName(Player[id][WepSlot4], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot5] > 0)
	{
	    GetWeaponName(Player[id][WepSlot5], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot6] > 0)
	{
	    GetWeaponName(Player[id][WepSlot6], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot7] > 0)
	{
	    GetWeaponName(Player[id][WepSlot7], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot8] > 0)
	{
	    GetWeaponName(Player[id][WepSlot8], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot9] > 0)
	{
	    GetWeaponName(Player[id][WepSlot9], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot10] > 0)
	{
	    GetWeaponName(Player[id][WepSlot10], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot11] > 0)
	{
	    GetWeaponName(Player[id][WepSlot11], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4) {

	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

}

public OnPlayerUpdate(playerid)
{
	SetProgressBarValue(Hunger[playerid], Player[playerid][PlayerHunger]);
    UpdateProgressBar(Hunger[playerid], playerid);

	if(IsPlayerConnectedEx(playerid))
	{
	 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
  		    for(new i=0;i<MAX_SPIKES;i++)
  		    {
		        if(VehicleToPoint(2.0, GetPlayerVehicleID(playerid), SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]))
				{
					if(SpikeStrips[i][sX] != 0 && SpikeStrips[i][sY] != 0 && SpikeStrips[i][sZ] != 0) // Invalid check.
					{
						new panels, doors, lights, tires;
	               		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
	               		tires = encode_tires(1, 1, 1, 1);
	               		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid),  panels, doors, lights, tires);
               		}
				}
			}
		}

		if(Player[playerid][BeingDraggedBy] != -1)
		{
		    if(IsPlayerConnectedEx(Player[playerid][BeingDraggedBy]))
		    {
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Player[playerid][BeingDraggedBy]));
			    SetPlayerInterior(playerid, GetPlayerInterior(Player[playerid][BeingDraggedBy]));
			    GetPlayerPos(Player[playerid][BeingDraggedBy], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
			    SetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
		    }
		    else
		    {
		        Player[playerid][BeingDraggedBy] = -1;
		        SendClientMessage(playerid, WHITE, "The person who was dragging you has disconnected.");
		    }
		}

	    if(GetPlayerMoney(playerid) != Player[playerid][Money])
	    {
	        ResetPlayerMoney(playerid);
	        GivePlayerMoney(playerid, Player[playerid][Money]);
	    }

	    if(Player[playerid][Hospitalized] >= 1 || GetPlayerState(playerid) == 2)
	    {
	        SetPlayerArmedWeapon(playerid, 0);
	    }
	}
	return 1;
}

public MinutesToSeconds(minutes)
{
	return minutes*60;
}

public SecondsToMinutes(seconds)
{
	return seconds/60;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
	    GetPlayerVelocity(playerid, x, y, z);

	return SpeedCheck(x, y, z, 100.0, get3d);
}

public OneMinute(playerid)
{

	return 1;
}

public OneMinutePublic(playerid)
{
    new string[255], Reports;
    FiveMinuteSave++;
    if(FiveMinuteSave == 30)
    {
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
		        SavePlayerData(i);
		    }
		}

        SaveHouses();
		SaveFactions();
		SaveBusinesses();
		FiveMinuteSave = 0;
	}

    if(WeedHour == 60)
    {
		new rand = random(9);
		if(rand < 3)
		{
		    rand = 5;
		    WeedPrice = rand;
		    WeedHour = 0;
		}
		else
		{
		    WeedPrice = rand;
			WeedHour = 0;
		}
    }
    else
    {
        WeedHour++;
    }

    for(new i=0; i < MAX_FURNITURE; i++)
    {
        if(Furniture[i][GrowingCocaineAmount] > 0)
		{
			if(Furniture[i][frObjectID] == 637)
			{
				if(Furniture[i][CocaineGrowth] < 30)
				{
					Furniture[i][CocaineGrowth] += 1;
					if(Furniture[i][CocaineGrowth] == 30)
					{
						format(string, sizeof(string), "Planter\nActive\nAmount: %d/10\nDone growing! Type /harvestpot", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
						Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
					}
					else
					{
						format(string, sizeof(string), "Planter\nActive\nAmount: %d/10\nState: %d/30", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
						Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
					}
				}
			}
			else
			{
				if(Furniture[i][CocaineGrowth] < 60)
				{
					Furniture[i][CocaineGrowth] += 1;
					if(Furniture[i][CocaineGrowth] == 60)
					{
						format(string, sizeof(string), "Drug Lab\nActive\nAmount: %d/50\nThe cocaine is ready! Type /collectcocaine", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
						Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
					}
					else
					{
						format(string, sizeof(string), "Drug Lab\nActive\nAmount: %d/50\nState: %d/60", Furniture[i][GrowingCocaineAmount], Furniture[i][CocaineGrowth]);
						Update3DTextLabelText(Furniture[i][CocaineText], WHITE, string);
					}
				}
			}
		}
    }

    for(new i=0; i < MAX_WEEDPLANTS; i++)
    {
        if(WeedPlant[i][Active] == 1)
        {
			if(WeedPlant[i][GrowthState] == 120)
			{
			    DestroyDynamicObject(WeedPlantObj[i]);
			    WeedPlantObj[i] = CreateDynamicObject(860, WeedPlant[i][weedX], WeedPlant[i][weedY], WeedPlant[i][weedZ],   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
			}
			else
			{
			    WeedPlant[i][GrowthState] += 1;
			}
        }
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		new hour, minute, seconds;
		gettime(hour, minute, seconds);
		SetPlayerTime(playerid, hour, minute);
		if(Player[i][PlayingHours] <= 2)
		{
			HintCounter[i]++;
			if(HintCounter[i] >= 10)
			{
				HintCounter[i] = 0;
				new rand = random(9);
				if(rand == 0)
				{
					SendClientMessage(i, YELLOW, "If you have any questions use /n and we will try our best to answer your question.");
				}
				if(rand == 1)
				{
					SendClientMessage(i, YELLOW, "Want to join the RCSD? Apply onto the forums www.evolvedgaming.org");
				}
				if(rand == 2)
				{
					SendClientMessage(i, YELLOW, "/map and /help are very handy for when you don't know how the server works.");
				}
				if(rand == 3)
				{
					SendClientMessage(i, YELLOW, "Your paycheck is calculated by how much you have in your bank plus a base of $1000");
				}
				if(rand == 4)
				{
					SendClientMessage(i, YELLOW, "Once you reach 10 hours you will receive another bonus of $10,000.");
				}
				if(rand == 5)
				{
					SendClientMessage(i, YELLOW, "Do you want to help out the server and become staff? Apply on the forums: www.evolvedgaming.org");
				}
				if(rand == 6)
				{
					SendClientMessage(i, YELLOW, "See someone hacking / breaking a rule? Use /report and be specific.");
				}
				if(rand == 7)
				{
					SendClientMessage(i, YELLOW, "You receive a paycheck every hour you play, use /time to check when you receive your next one.");
				}
				if(rand == 8)
				{
					SendClientMessage(i, YELLOW, "Your paycheck increases depending on your job and money you have in the bank.");
				}
			}
		}
        if(Player[i][ActiveReport] >= 1 && IsPlayerConnectedEx(i))
	    {
			Reports++;
		}
	}

	if(Reports >= 1)
	{
		format(string, sizeof(string), "There are %d active reports - /reports!", Reports);
		SendToAdmins(RED, string, 1);
	}
	return 1;
}

public OneSecondPublic()
{
    if(AdCanBePlaced < 50)
    {
        AdCanBePlaced++;
    }

    new hour, minute, second;
    gettime(hour, minute, second);

	if(minute >= 59 && second == 59)
	{
	    new string[26];
	    SetWorldTime(hour+1);
	    format(string, sizeof(string), "The time is now %d:00.", hour+1);
	    SendClientMessageToAll(GREY, string);
	}

	#pragma unused hour
	#pragma unused minute
	#pragma unused second

    for(new i = 0; i<MAX_PLAYERS; i++)
    {
        if(IsPlayerConnectedEx(i))
        {
    	    Player[i][SpamCount] = 0;

            if(Player[i][PINUnauthedTime] >= 1)
            {
                Player[i][PINUnauthedTime]++;
                if(Player[i][PINUnauthedTime] >= 10)
                {
                    if(Player[i][PINAuth] >= 1)
                    {
                        Player[i][PINUnauthedTime] = 0;
                    }
                    else
                    {
	                    new string[128];
	                    format(string, sizeof(string), "WARNING: %s has been auto-kicked, defined reason: Admin PIN Timeout (10 seconds).", GetName(i));
	                    SendToAdmins(ADMINORANGE, string, 0);
	                    SendClientMessage(i, WHITE, "You didn't login within 10 seconds.");
	                    Player[i][PINUnauthedTime] = 0;
	                    Kick(i);
                    }
                }
            }
            
            if(Player[i][FishCoolDown] > 0)
            {
				Player[i][FishCoolDown]--;
            }

            if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && Player[i][HasJetpack] == 0 && Player[i][AdminLevel] < 1)
            {
                new string[128];
                format(string, sizeof(string), "Ban: %s has been banned, defined reason: Hacking (Jetpack)", GetName(i));
                SendClientMessageToAll(LIGHTRED, string);
                Player[i][Banned] = 4;
                Ban(i);
            }

            if(Player[i][TearGasEffect] >= 1)
            {
                Player[i][TearGasEffect]++;
                if(Player[i][TearGasEffect] >= 5)
                {
                    Player[i][TearGasEffect] = 0;
                    ClearAnimations(i);
                    TogglePlayerControllable(i, true);
                }
            }

            /*if(Player[i][Cuffed] >= 1)
            {
            	Player[i][Cuffed]++;
				if(Player[i][Cuffed] >= 720)
				{
				    Player[i][Cuffed] = 0;
				    TogglePlayerControllable(i, true);
				    SendClientMessage(i, WHITE, "Your cuffs have now broken... RUN?!");
				}
            }*/

            if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerSpeed(i, 0) >= 220 && Player[i][AdminLevel] < 1)
            {
                if(! IsAHelicopter(GetPlayerVehicleID(i)))
                {
                    if(Player[i][SpeedHackWarnTime] == 0)
                    {
                        if(GetVehicleModel(GetPlayerVehicleID(i)) != 522 && GetVehicleModel(GetPlayerVehicleID(i)) != 521)
                        {
                            if(GetPlayerPing(i) < 500)
                            {
			                    new string[128];
			                    format(string, sizeof(string), "WARNING: %s may possibly be speed-hacking: they have a %d ping and are driving at %d KM/H.", GetName(i), GetPlayerPing(i), GetPlayerSpeed(i, 0));
			                    SendToAdmins(ADMINORANGE, string, 1);

								Player[i][SpeedHackWarnTime]++;
			                    Player[i][SpeedHacksWarn]++;

								if(Player[i][SpeedHacksWarn] >= MAX_SPEED_HACK_WARNINGS)
								{
								    format(string, sizeof(string), "Ban: %s has been auto-banned, reason: Speed Hacking.", GetName(i));
								    SendClientMessageToAll(LIGHTRED, string);
									Player[i][Banned] = 3;
									Ban(i);
								    Player[i][SpeedHackWarnTime] = 0;
								    Player[i][SpeedHacksWarn] = 0;
								}
							}
	                    }
                    }
                }
            }

            if(Player[i][ACWarnTime] >= 1)
            {
                Player[i][ACWarnTime]++;
                if(Player[i][ACWarnTime] >= 10)
                {
                    Player[i][ACWarnTime] = 0;
                    Player[i][AnticheatWarns] = 0;
                }
            }

            if(Player[i][SpeedHackWarnTime] >= 1)
            {
                Player[i][SpeedHackWarnTime]++;
                if(Player[i][SpeedHackWarnTime] >= 3)
                {
                    Player[i][SpeedHackWarnTime] = 0;
                    Player[i][SpeedHacksWarn] = 0;
                }
            }

            if(Player[i][SniperRecoilEffect] >= 1)
            {
                Player[i][SniperRecoilEffect]++;
                if(Player[i][SniperRecoilEffect] >= 3)
                {
                    Player[i][SniperRecoilEffect] = 0;
                    SetPlayerDrunkLevel(i, 0);
                }
            }

            if(IsPlayerInAnyVehicle(i) && Player[i][Speedo] == 1)
	    	{
	    	    new string[60];
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~R~%d KM/H", GetPlayerSpeed(i, 0));
	   			GameTextForPlayer(i, string, 1000, 3);
			}

            if(Player[i][AttendingBackupCall] != -1)
            {
                if(IsPlayerConnectedEx(Player[i][AttendingBackupCall]))
                {
                    GetPlayerPos(Player[i][AttendingBackupCall], Player[Player[i][AttendingBackupCall]][LastX], Player[Player[i][AttendingBackupCall]][LastY], Player[Player[i][AttendingBackupCall]][LastZ]);
                    SetPlayerCheckpoint(i, Player[Player[i][AttendingBackupCall]][LastX], Player[Player[i][AttendingBackupCall]][LastY], Player[Player[i][AttendingBackupCall]][LastZ], 20.0);
                }
                else
                {
                    Player[i][AttendingBackupCall] = -1;
                    SendClientMessage(i, WHITE, "Checkpoint Destroyed - The backup call you were attending unexpectedly disconnected.");
                    Player[i][Checkpoint] = 0;
                    DisablePlayerCheckpoint(i);
                }
            }

            if(Player[i][LawyerReloadTime] >= 1)
            {
                Player[i][LawyerReloadTime]++;
                if(Player[i][LawyerReloadTime] >= LAWYER_RELOAD_TIME)
                {
                    Player[i][LawyerReloadTime] = 0;
                    SendClientMessage(i, WHITE, "You may now defend somebody again.");
                }
            }

            if(Player[i][ResetTimer] >= 1)
            {
                Player[i][ResetTimer]++;

                if(Player[i][ResetTimer] == 2)
                {
                    if(Player[i][AdminDuty] >= 1)
                    {
                    	SetPlayerSkin(i, Player[i][AdminSkin]);
                    }
                    else
                    {
                        SetPlayerSkin(i, Player[i][LastSkin]);
                    }

                    TogglePlayerControllable(i, true);
                }
            }

            if(Player[i][Cuffed] >= 1)
            {
                TogglePlayerControllable(i, false);
            }

            if(Player[i][StonedEffect] >= 1)
            {
                Player[i][StonedEffect]++;

                if(Player[i][StonedEffect] >= STONED_TIME)
                {
					SetPlayerDrunkLevel(i, 0);
					SetPlayerWeather(i, GlobalWeather);

					Player[i][PotEffect] = 0;
					Player[i][StonedEffect] = 0;
					Player[i][CrackEffect] = 0;

					SendClientMessage(i, WHITE, "You are no longer stoned.");
				}
            }

            if(Player[i][OnPhoneTime] >= 1)
            {
                Player[i][OnPhoneTime]++;
                if(Player[i][OnPhoneTime] >= 61)
                {
                    Player[i][OnPhoneTime] = 1;
				}
            }

            if(Spotlight != -1)
            {
                if(Player[i][Checkpoint] == 0 || Player[i][SpotlightEffect] == 1)
                {
                    if(IsPlayerConnectedEx(Spotlight))
                    {
                        new Float: StarX, Float: StarY, Float: StarZ;
                        GetPlayerPos(Spotlight, StarX, StarY, StarZ);

	                    SetPlayerCheckpoint(i, StarX, StarY, StarZ, 10.0);

	                    if(Player[i][SpotlightEffect] == 0)
	                    {
	                        Player[i][Checkpoint] = 1;
	                        Player[i][SpotlightEffect] = 1;
	                    }
                    }
                    else
                    {
                        Spotlight = -1;
	                    Player[i][Checkpoint] = 0;
	                    Player[i][SpotlightEffect] = 0;
	                    DisablePlayerCheckpoint(i);
                    }
                }
            }

	        Player[i][SecondsLoggedIn]++;

	        if(Player[i][CarModDelay] >= 1)
	        {
	   	    	Player[i][CarModDelay]++;

				if(Player[i][CarModDelay] == CAR_MOD_DELAY_TIME)
				{
				    Player[i][CarModDelay] = 0;
				    SendClientMessage(i, WHITE, "You may now fix or NOS your vehicle again.");
				}
	        }

	        if(Player[i][DetectiveCooldown] >= 1)
	        {
	            Player[i][DetectiveCooldown]++;
	            if(Player[i][DetectiveCooldown] == DETECTIVE_COOLDOWN_TIME)
	            {
	                Player[i][DetectiveCooldown] = 0;
	            }
	        }

	        if(Player[i][Tied] >= 1)
	        {
	            Player[i][TiedTime]++;
	            if(Player[i][TiedTime] >= 660)
	            {
	                TogglePlayerControllable(i, true);
	                Player[i][Tied] = 0;
	                Player[i][TiedTime] = 0;
	                SendClientMessage(i, GREY, "The rope has now broken.");

	                if(Player[i][Blindfolded] >= 1)
	                {
						Player[i][Blindfolded] = 0;
						SetPlayerDrunkLevel(i, 0);
						SetCameraBehindPlayer(i);
	                }
	            }
	        }

	        if(Player[i][SecondsLoggedIn] >= 3600)
	        {
	        	new string[128], PayCheque;

	            Player[i][SecondsLoggedIn] = 0;
				if(Player[i][Job] == 0)
				{
					SendClientMessage(i, WHITE, "You haven't received a paycheck because you don't have a job!");
				}
				else
				{
					// PayCheque = (Player[i][BankMoney] / 100)+1000;
					if(Player[i][Group] == 1)
					{
						PayCheque = (Player[i][BankMoney] / 100)+1100;
					}
					else
					{
						if(Jobs[Player[i][Job]][JobType] == 2)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1400;
						}
						if(Jobs[Player[i][Job]][JobType] == 1)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1150;
						}
						if(Jobs[Player[i][Job]][JobType] == 10)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1375;
						}
						if(Jobs[Player[i][Job]][JobType] == 3)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1250;
						}
						if(Jobs[Player[i][Job]][JobType] == 5)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1300;
						}
						if(Jobs[Player[i][Job]][JobType] == 6)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1450;
						}
						if(Jobs[Player[i][Job]][JobType] == 9)
						{
							PayCheque = (Player[i][BankMoney] / 100)+1350;
						}
					}
					if(PayCheque >= 1)
					{
						SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
						SendClientMessage(i, WHITE, "Your paycheck has arrived!");
						
						Player[i][BankMoney] += PayCheque;
						new Taxable = (PayCheque / 100) * Tax;

						if(Taxable > 1 && Taxable < 100000)
						{
							Player[i][BankMoney] -= Taxable;
							format(string, sizeof(string), "You have been charged $%s tax (%d PERCENT).", IntToFormattedStr(Taxable), Tax);
							SendClientMessage(i, GREY, string);
							Groups[3][SafeMoney] += Taxable;
							SaveGroup(3);
						}

						Player[i][PlayingHours]++;

						format(string, sizeof(string), "You have earned $%s.", IntToFormattedStr(PayCheque));
						SendClientMessage(i, GREY, string);
						if(Player[i][PlayingHours] == 10)
						{
							SendClientMessage(i, WHITE, "Since you've played for 10 hours, you also received a bonus of $10,000");
							Player[i][BankMoney] += 10000;
						}
						if(Player[i][Group] == 1)
						{
							if(Player[i][GroupRank] == 1)
							{
								Player[i][BankMoney] += 100;
								Groups[1][SafeMoney] -= 100;
								SendClientMessage(i, WHITE, "You have earned $100 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 2)
							{
								Player[i][BankMoney] += 200;
								Groups[1][SafeMoney] -= 200;
								SendClientMessage(i, WHITE, "You have earned $200 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 3)
							{
								Player[i][BankMoney] += 300;
								Groups[1][SafeMoney] -= 300;
								SendClientMessage(i, WHITE, "You have earned $300 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 4)
							{
								Player[i][BankMoney] += 400;
								Groups[1][SafeMoney] -= 400;
								SendClientMessage(i, WHITE, "You have earned $400 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 5)
							{
								Player[i][BankMoney] += 500;
								Groups[1][SafeMoney] -= 500;
								SendClientMessage(i, WHITE, "You have earned $500 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 6)
							{
								Player[i][BankMoney] += 600;
								Groups[1][SafeMoney] -= 600;
								SendClientMessage(i, WHITE, "You have earned $600 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 7)
							{
								Player[i][BankMoney] += 700;
								Groups[1][SafeMoney] -= 700;
								SendClientMessage(i, WHITE, "You have earned $700 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 8)
							{
								Player[i][BankMoney] += 800;
								Groups[1][SafeMoney] -= 800;
								SendClientMessage(i, WHITE, "You have earned $800 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 9)
							{
								Player[i][BankMoney] += 900;
								Groups[1][SafeMoney] -= 900;
								SendClientMessage(i, WHITE, "You have earned $900 from being in the RCSD!");
							}
							if(Player[i][GroupRank] == 10)
							{
								Player[i][BankMoney] += 1000;
								Groups[1][SafeMoney] -= 1000;
								SendClientMessage(i, WHITE, "You have earned $1000 from being in the RCSD!");
							}
						}
						if(Player[i][Group] == 3)
						{
							if(Player[i][GroupRank] == 1)
							{
								Player[i][BankMoney] += 100;
								Groups[3][SafeMoney] -= 100;
								SendClientMessage(i, WHITE, "You have earned $100 from being in the Government!");
							}
							if(Player[i][GroupRank] == 2)
							{
								Player[i][BankMoney] += 300;
								Groups[3][SafeMoney] -= 300;
								SendClientMessage(i, WHITE, "You have earned $300 from being in the Government!");
							}
							if(Player[i][GroupRank] == 3)
							{
								Player[i][BankMoney] += 500;
								Groups[3][SafeMoney] -= 500;
								SendClientMessage(i, WHITE, "You have earned $500 from being in the Government!");
							}
							if(Player[i][GroupRank] == 4)
							{
								Player[i][BankMoney] += 750;
								Groups[3][SafeMoney] -= 750;
								SendClientMessage(i, WHITE, "You have earned $750 from being in the Government!");
							}
							if(Player[i][GroupRank] == 5)
							{
								Player[i][BankMoney] += 900;
								Groups[3][SafeMoney] -= 900;
								SendClientMessage(i, WHITE, "You have earned $900 from being in the Government!");
							}
							if(Player[i][GroupRank] == 6)
							{
								Player[i][BankMoney] += 1200;
								Groups[3][SafeMoney] -= 1200;
								SendClientMessage(i, WHITE, "You have earned $1200 from being in the Government!");
							}
						}
						if(Player[i][Group] == 7)
						{
							if(Player[i][GroupRank] == 1)
							{
								Player[i][BankMoney] += 100;
								Groups[7][SafeMoney] -= 100;
							}
							if(Player[i][GroupRank] == 2)
							{
								Player[i][BankMoney] += 250;
								Groups[7][SafeMoney] -= 250;
							}
							if(Player[i][GroupRank] == 3)
							{
								Player[i][BankMoney] += 375;
								Groups[7][SafeMoney] -= 375;
							}
							if(Player[i][GroupRank] == 4)
							{
								Player[i][BankMoney] += 500;
								Groups[7][SafeMoney] -= 500;
							}
							if(Player[i][GroupRank] == 5)
							{
								Player[i][BankMoney] += 900;
								Groups[7][SafeMoney] -= 900;
							}
							if(Player[i][GroupRank] == 6)
							{
								Player[i][BankMoney] += 1000;
								Groups[7][SafeMoney] -= 1000;
							}
							SendClientMessage(i, WHITE, "You have earned some money from being in SAM!");
						}

						if(Player[i][VipRank] == 1)
						{
							Player[i][VIPTokens] += 2;
							Player[i][BankMoney] += (PayCheque / 100) * 10;
							SendClientMessage(i, YELLOW, "You earned 2 VIP tokens for having a bronze membership!");
							SendClientMessage(i, YELLOW, "You've earned a 10 percent interest for having a bronze membership!");
						}
						if(Player[i][VipRank] == 2)
						{
							Player[i][VIPTokens] += 4;
							Player[i][BankMoney] += (PayCheque / 100) * 15;
							SendClientMessage(i, YELLOW, "You earned 4 VIP tokens for having a silver membership!");
							SendClientMessage(i, YELLOW, "You've earned a 15 percent interest for having a silver membership!");
						}
						if(Player[i][VipRank] == 3)
						{
							Player[i][VIPTokens] += 5;
							Player[i][BankMoney] += (PayCheque / 100) * 25;
							SendClientMessage(i, YELLOW, "You earned 5 VIP tokens for having a gold membership!");
							SendClientMessage(i, YELLOW, "You've earned a 25 percent interest for having a gold membership!");
						}
						if(Player[i][VipRank] == 4)
						{
							Player[i][VIPTokens] += 5;
							Player[i][BankMoney] += (PayCheque / 100) * 25;
							SendClientMessage(i, YELLOW, "You earned 5 VIP tokens for being on the admin team!");
							SendClientMessage(i, YELLOW, "You've earned a 25 percent interest for being on the admin team!");
						}
						if(Player[i][House] >= 1)
						{
							if(Player[i][HouseReg] == 0)
							{
								SendClientMessage(i, WHITE, "You have paid $150 towards bills for your home.");
								Player[i][BankMoney] -= 150;
							}
							else
							{
								SendClientMessage(i, WHITE, "You have paid $200 towards bills and taxes for your home.");
								Player[i][BankMoney] -= 200;
								Groups[3][SafeMoney] += 200;
							}
						}
						if(Player[i][LoanedAmount] != 0)
						{
							if(Player[i][LoanedAmount] >= 350)
							{
								Player[i][LoanedAmount] -= 500;
								Player[i][BankMoney] -= 500;
								new LoanString[255];
								format(LoanString, sizeof(LoanString), "You have paid $500 towards your loan, and have $%d remaining to pay back.", Player[i][LoanedAmount]);
								SendClientMessage(i, WHITE, LoanString);
							}
							else
							{
								new paid;
								paid = Player[i][BankMoney] -= Player[i][LoanedAmount];
								Player[i][BankMoney] -= Player[i][LoanedAmount];
								Player[i][LoanedAmount] = 0;
								new LoanString[255];
								format(LoanString, sizeof(LoanString), "You have paid $%d towards your loan, and have succesfully paid back everything", paid);
								SendClientMessage(i, WHITE, LoanString);
							}
						}

						SendClientMessage(i, WHITE, "Please visit the bank to withdraw your money.");
						SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
					}
					else
					{
						SendClientMessage(i, WHITE, "You're too poor to obtain a paycheck.");
					}
				}
			}

		    if(Player[i][CantFish] >= 1)
		    {
		        Player[i][CantFish]++;
		        if(Player[i][CantFish] >= FISH_INABILITY_TIME)
		        {
		            Player[i][FishAttempts] = 0;
		            Player[i][CantFish] = 0;
		            SendClientMessage(i, WHITE, "You can now fish again.");
		        }
		    }

		    if(Player[i][CompleteRun] >= 1)
		    {
		        Player[i][CompleteRun]++;
		        if(Player[i][CompleteRun] >= 55)
		        {
		            Player[i][CompleteRun] = 0;
		        }
		    }

			if(Spectator[i][SpecSpectatingPlayer] > -1)
			{
				SpectatorRefresh(i, Spectator[i][SpecSpectatingPlayer]);
			}

			if(Player[i][BeingCalled] != -1)
			{
			    new string[128];
				if(Player[Player[i][BeingCalled]][CallConnectingTime] != -1)
				{
				    Player[Player[i][BeingCalled]][CallConnectingTime] = 1;
				}
				else
				{
				    switch(Player[Player[i][BeingCalled]][CallConnectingTime])
				    {
				        case 3, 6, 9:
				        {
				            format(string, sizeof(string), "* %s's phone proceeds to ring...");
				            NearByMessage(i, PURPLE, string);
				            TextDrawShowForPlayer(i, CellPhoneTextDraw);
				        }
				        case 10:
				        {
				            Player[Player[i][BeingCalled]][CallConnectingTime] = -1;
				            Player[Player[i][BeingCalled]][Calling] = -1;
				            Player[i][BeingCalled] = -1;
                			TextDrawHideForPlayer(i, CellPhoneTextDraw);
				        }
				    }
				}
			}

			if(Player[i][InabilityToDropCar] >= 1)
			{
			    Player[i][InabilityToDropCar]++;
			    if(Player[i][InabilityToDropCar] >= 1800)
			    {
			        Player[i][InabilityToDropCar] = 0;
			        SendClientMessage(i, WHITE, "You can now scrap cars again.");
			    }
			}

			if(Player[i][InabilityTrash] >= 1)
			{
			    Player[i][InabilityTrash]++;
			    if(Player[i][InabilityTrash] >= 1800)
			    {
			        Player[i][InabilityTrash] = 0;
			        SendClientMessage(i, WHITE, "You can now scrap cars again.");
			    }
			}

			if(Player[i][InabilityToMatrun] >= 1)
			{
			    Player[i][MatrunInabilityDuration]++;
			    if(Player[i][MatrunInabilityDuration] >= MATRUN_INABILITY_TIME)
			    {
			        Player[i][InabilityToMatrun] = 0;
			        Player[i][MatrunInabilityDuration] = 0;
			        SendClientMessage(i, WHITE, "You can now matrun again.");
			    }
			}

	        if(Player[i][Hospitalized] >= 1 && Player[i][PrisonDuration] < 1 && Player[i][AdminDuty] == 0)
	        {
				Player[i][HospitalTime]++;

				if(Player[i][HospitalTime] >= 11)
				{
				    new randtmp = RandomEx(1, 11);
				    if(randtmp >= 6)
				    {
					    Player[i][Hospitalized] = 0;
					    Player[i][HospitalTime] = 0;
					    SetPlayerPos(i, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
					    SetCameraBehindPlayer(i);
					    Player[i][Money] -= 200;
						if(Player[i][AdminDuty] == 0)
						{
							SetPlayerColor(i, WHITE);
						}
					    SetPlayerHealth(i, 100);
					    SetPlayerDrunkLevel(i, 0);
					    Player[i][Muted] = 0;
					    TogglePlayerControllable(i, true);
					    SendClientMessage(i, ANNOUNCEMENT, "You have been released from Hospital.");
					    SendClientMessage(i, WHITE, "You have been charged $200 as your medical bill. Be more careful in the future!");
					    SendClientMessage(i, WHITE, "((You have lost 30 minutes memory due to your death, to prevent RKing.)) ");
	                    Player[i][ResetTimer] = 1;
	                    SetPlayerVirtualWorld(i, 0);
	                    SetPlayerInterior(i, 0);
				    }
				    else
				    {
					    Player[i][Hospitalized] = 0;
					    Player[i][HospitalTime] = 0;
					    SetPlayerPos(i, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
					    SetCameraBehindPlayer(i);
					    Player[i][Money] -= 200;
					    if(Player[i][AdminDuty] == 0)
						{
							SetPlayerColor(i, WHITE);
						}
					    SetPlayerHealth(i, 100);
					    SetPlayerDrunkLevel(i, 0);
					    Player[i][Muted] = 0;
					    TogglePlayerControllable(i, true);
					    SendClientMessage(i, ANNOUNCEMENT, "You have been released from Hospital.");
					    SendClientMessage(i, WHITE, "You have been charged $200 as your medical bill. Be more careful in the future!");
					    SendClientMessage(i, WHITE, "((You have lost 30 minutes memory due to your death, to prevent RKing.)) ");
	                    Player[i][ResetTimer] = 1;
	                    SetPlayerVirtualWorld(i, 0);
	                    SetPlayerInterior(i, 0);
                    }
				}
	        }

			if(Player[i][PrisonID] >= 1)
			{
		    	if(Player[i][PrisonDuration] >= 1)
		    	{
		    	    new string[128];
		        	Player[i][PrisonDuration]--;
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~R~%d seconds (%d minutes)", Player[i][PrisonDuration], SecondsToMinutes(Player[i][PrisonDuration]));
	   				GameTextForPlayer(i, string, 1000, 3);
		    	}
		    	else
		    	{
		    	    if(Player[i][PrisonID] == 1)
		    	    {
			        	Player[i][PrisonDuration] = 0;
			        	Player[i][PrisonID] = 0;
			        	SetPlayerPos(i, Groups[1][HQExteriorX], Groups[1][HQExteriorY], Groups[1][HQExteriorZ]);
			        	SetPlayerVirtualWorld(i, SpawnWorld);
			        	SetPlayerInterior(i, Groups[1][HQExteriorID]);
			        	SendClientMessage(i, WHITE, "You have been released from jail.");
			        	TogglePlayerControllable(i, true);
		    	    }
		    	    else
		    	    {
			        	Player[i][PrisonDuration] = 0;
			        	Player[i][PrisonID] = 0;
			        	SetPlayerPos(i, SpawnX, SpawnY, SpawnZ);
			        	SetPlayerVirtualWorld(i, SpawnWorld);
			        	SetPlayerInterior(i, SpawnInt);
			        	SendClientMessage(i, WHITE, "You have been released from prison.");
			        	TogglePlayerControllable(i, true);
		        	}
		    	}
			}
	    }
	}
	return 1;
}

stock IsPlayerConnectedEx(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(Player[playerid][Authenticated] == 1)
	    {
	        return 1;
	    }
	    else
	    {
	        return 0;
	    }
	}
	else
	{
		return 0;
	}
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    new vehid;
    vehid = GetPlayerVehicleID(playerid);
    SetPlayerVirtualWorld(playerid, random(555)+random(999));
    SetVehicleVirtualWorld(vehid, GetPlayerVirtualWorld(playerid));
    PutPlayerInVehicle(playerid, vehid, 0);

    if(enterexit == 0)
    {
        SetVehicleVirtualWorld(vehid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        PutPlayerInVehicle(playerid, vehid, 0);
    }
    return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public MinutesToHours(minutes)
{
	return minutes / 60;
}

public IdleKick()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);

			if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
			{
			    if(Player[i][Authenticated] == 1)
			    {
			        if(Player[i][AdminDuty] >= 1)
			        {
			            new string[128];
			            Player[i][AFKStat] = 1;
			            SendClientMessage(i, WHITE, "Your status has been changed to AFK.");
			            format(string, sizeof(string), "%s has been set to 'AFK' (system deemed inactivity).", GetName(i));
			            SendToAdmins(ADMINORANGE, string, 0);
			        }
			        else
			        {
			            if(Player[i][PlayerCarModel] >= 1)
			            {
			                DestroyVehicle(Player[i][CarLinkID]);
			                Player[i][CarLinkID] = 0;
			                OwnedCarCount--;
			                CarCount--;
			            }

			            if(Player[i][PlayerCarModel2] >= 1)
			            {
			                DestroyVehicle(Player[i][Car2LinkID]);
			                Player[i][Car2LinkID] = 0;
			                OwnedCarCount--;
			                CarCount--;
			            }

			            if(Player[i][PlayerCarModel3] >= 1)
			            {
			                DestroyVehicle(Player[i][Car3LinkID]);
			                Player[i][Car3LinkID] = 0;
			                OwnedCarCount--;
			                CarCount--;
			            }

						SavePlayerData(i);
						Player[i][Authenticated] = 0;
						Reset(i);
						TogglePlayerControllable(i, false);
						SetPlayerColor(i, GREY);
						SendClientMessage(i, LIGHTRED, "You have been kicked for idling for more than 10 minutes.");
						Kick(i);
					}
				}
			}

			PlayerPos[i][3] = PlayerPos[i][0];
			PlayerPos[i][4] = PlayerPos[i][1];
			PlayerPos[i][5] = PlayerPos[i][2];
		}
	}
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(Player[i][CarLinkID] == vehicleid)
	    {
	        if(Player[i][LockedCar] == 1)
	        {
	            for(new u = 0; u < MAX_PLAYERS; u++)
	            {
		            SetVehicleParamsForPlayer(vehicleid, u, 0, Player[i][LockedCar]);
				}
			}
	    }

	    if(Player[i][Car2LinkID] == vehicleid)
	    {
	        if(Player[i][LockedCar2] == 1)
	        {
	            for(new u = 0; u < MAX_PLAYERS; u++)
	            {
		            SetVehicleParamsForPlayer(vehicleid, u, 0, Player[i][LockedCar2]);
				}
			}
	    }

	    if(Player[i][Car3LinkID] == vehicleid)
	    {
	        if(Player[i][LockedCar3] == 1)
	        {
	            for(new u = 0; u < MAX_PLAYERS; u++)
	            {
		            SetVehicleParamsForPlayer(vehicleid, u, 0, Player[i][LockedCar3]);
				}
			}
	    }
	}
	return 1;
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fS, opt1, opt2, opt3, opt4, opt5)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, WHITE, "You can't use animations whilst in a vehicle.");
	}
	else
	{
	    if(opt1 == 1)
	    {
		    TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    Player[playerid][IsInAnimation] = 1;
		    ApplyAnimation(playerid, animlib, animname, fS, opt1, opt2, opt3, opt4, opt5);
	    }
	    else
	    {
	        ApplyAnimation(playerid, animlib, animname, fS, opt1, opt2, opt3, opt4, opt5);
	    }
    }
    return 1;
}

stock UpdateAnalysis()
{
	if(fexist("VisitorAnalysis.ini"))
	{
	    dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", MaxVisitors);
	    dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", MaxRegistered);
	    dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", MaxLoggedIn);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", TotalConnections);
	}
	else
	{
	    dini_Create("VisitorAnalysis.ini");
	    dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", 0);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", 0);
	}
	return 1;
}

stock StripNewLine(string[])
{
	new len = strlen(string);
	if (string[0]==0) return ;
	if ((string[len - 1] == '\n') || (string[len - 1] == '\r'))  {
		string[len - 1] = 0;
		if (string[0]==0) return ;
		if ((string[len - 2] == '\n') || (string[len - 2] == '\r'))  string[len - 2] = 0;
	}
}

public QuizText(string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(Player[i][ToggedQUIZ] == 0)
        {
            SendClientMessage(i, LIGHTRED, string);
		}
    }
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

stock IntToFormattedStr(integer)
{
	new value[20], string[20];

	valstr(value, integer);

	new charcount;

	for(new i = strlen(value); i >= 0; i --)
	{
		format(string, sizeof(string), "%c%s", value[i], string);
		if(charcount == 3)
		{
			if(i != 0)
				format(string, sizeof(string), ",%s", string);
			charcount = 0;
		}
		charcount ++;
	}

	return string;
}

/*stock file_actually_exists(filename[])
{
	new tmpstr[255];
	tmpstr = "test";

	if(! file_read(filename, tmpstr))
	{
	    #pragma unused tmpstr
	    return false;
	}
	else
	{
	    #pragma unused tmpstr
	    return true;
	}
}*/

stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return true;
}

stock InitTearGas(playerid)
{
	new Float: TmpFloatX, Float: TmpFloatY, Float: TmpFloatZ;

	GetPlayerPos(playerid, TmpFloatX, TmpFloatY, TmpFloatZ);

    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(GetPlayerSkin(i) != 285)
        {
	        if(IsPlayerInRangeOfPoint(i, 10.0, TmpFloatX, TmpFloatY, TmpFloatZ))
	        {
	            if(Player[i][TearGasEffect] < 1)
	            {
	                if(! IsPlayerInAnyVehicle(i))
	                {
	                    ApplyAnimation(i, "FAT", "IDLE_TIRED", 4.1, 1, 1, 1, 1, 0);
		                TogglePlayerControllable(i, false);
			            Player[i][TearGasEffect] = 1;
		            }
	            }
	        }
        }
    }
    return 1;
}



StopLoopingAnimation(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
